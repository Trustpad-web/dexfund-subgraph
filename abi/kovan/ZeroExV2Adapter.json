{
  "address": "0xCcdbB68F05665d69d0C7950746bBeBbDc1480A2f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_integrationManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_exchange",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_fundDeployer",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_allowedMakers",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AllowedMakerAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AllowedMakerRemoved",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADD_TRACKED_ASSETS_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "APPROVE_ASSETS_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CLAIM_REWARDS_AND_REINVEST_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CLAIM_REWARDS_AND_SWAP_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CLAIM_REWARDS_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LEND_AND_STAKE_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LEND_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REDEEM_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REMOVE_TRACKED_ASSETS_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STAKE_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TAKE_ORDER_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UNSTAKE_AND_REDEEM_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UNSTAKE_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_accountsToAdd",
          "type": "address[]"
        }
      ],
      "name": "addAllowedMakers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getExchange",
      "outputs": [
        {
          "internalType": "address",
          "name": "exchange_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFundDeployer",
      "outputs": [
        {
          "internalType": "address",
          "name": "fundDeployer_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getIntegrationManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "integrationManager_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "identifier",
      "outputs": [
        {
          "internalType": "string",
          "name": "identifier_",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_who",
          "type": "address"
        }
      ],
      "name": "isAllowedMaker",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isAllowedMaker_",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_selector",
          "type": "bytes4"
        },
        {
          "internalType": "bytes",
          "name": "_encodedCallArgs",
          "type": "bytes"
        }
      ],
      "name": "parseAssetsForMethod",
      "outputs": [
        {
          "internalType": "enum IIntegrationManager.SpendAssetsHandleType",
          "name": "spendAssetsHandleType_",
          "type": "uint8"
        },
        {
          "internalType": "address[]",
          "name": "spendAssets_",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "spendAssetAmounts_",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "incomingAssets_",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "minIncomingAssetAmounts_",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_accountsToRemove",
          "type": "address[]"
        }
      ],
      "name": "removeAllowedMakers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultProxy",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_encodedCallArgs",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_encodedAssetTransferArgs",
          "type": "bytes"
        }
      ],
      "name": "takeOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xfd15cc82c22cf96a1ed5d3863b1993ccbce338036ecdd02f4694554e7207e816",
  "receipt": {
    "to": null,
    "from": "0xf83F4c3A25b8FEE1722d76e5F72AaFcA00845011",
    "contractAddress": "0xCcdbB68F05665d69d0C7950746bBeBbDc1480A2f",
    "transactionIndex": 1,
    "gasUsed": "2502050",
    "logsBloom": "0x
    "blockHash": "0x571cf2db53b6116b10a6e677700a574eeb7a68faf0e84edc6bc8ca70c7790529",
    "transactionHash": "0xfd15cc82c22cf96a1ed5d3863b1993ccbce338036ecdd02f4694554e7207e816",
    "logs": [],
    "blockNumber": 27797733,
    "cumulativeGasUsed": "2537420",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x35a9ed450d4b5a12e24Ff81df198C7e412Aa2745",
    "0x6Ffa4088e56986E25e65d73657C23D3A869EE570",
    "0x148a6FFbD7CCF8Ef7DB4dFD3103C4f197f3d46B2",
    []
  ],
  "linkedData": {
    "type": "ADAPTER"
  },
  "solcInputHash": "a255b7352a771229d5d6ada28c33f53e",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_integrationManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_exchange\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fundDeployer\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_allowedMakers\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AllowedMakerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AllowedMakerRemoved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADD_TRACKED_ASSETS_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"APPROVE_ASSETS_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CLAIM_REWARDS_AND_REINVEST_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CLAIM_REWARDS_AND_SWAP_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CLAIM_REWARDS_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LEND_AND_STAKE_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LEND_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REDEEM_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REMOVE_TRACKED_ASSETS_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKE_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TAKE_ORDER_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNSTAKE_AND_REDEEM_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNSTAKE_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_accountsToAdd\",\"type\":\"address[]\"}],\"name\":\"addAllowedMakers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExchange\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"exchange_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFundDeployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"fundDeployer_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIntegrationManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"integrationManager_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"identifier\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"identifier_\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"isAllowedMaker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isAllowedMaker_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_selector\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"_encodedCallArgs\",\"type\":\"bytes\"}],\"name\":\"parseAssetsForMethod\",\"outputs\":[{\"internalType\":\"enum IIntegrationManager.SpendAssetsHandleType\",\"name\":\"spendAssetsHandleType_\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"spendAssets_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"spendAssetAmounts_\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"incomingAssets_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minIncomingAssetAmounts_\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_accountsToRemove\",\"type\":\"address[]\"}],\"name\":\"removeAllowedMakers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_encodedCallArgs\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_encodedAssetTransferArgs\",\"type\":\"bytes\"}],\"name\":\"takeOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Enzyme Council <security@enzyme.finance>\",\"kind\":\"dev\",\"methods\":{\"addAllowedMakers(address[])\":{\"params\":{\"_accountsToAdd\":\"Accounts to add\"}},\"getExchange()\":{\"returns\":{\"exchange_\":\"The `EXCHANGE` variable value\"}},\"getFundDeployer()\":{\"returns\":{\"fundDeployer_\":\"The `FUND_DEPLOYER` variable value\"}},\"getIntegrationManager()\":{\"returns\":{\"integrationManager_\":\"The `INTEGRATION_MANAGER` variable value\"}},\"getOwner()\":{\"details\":\"Ownership is deferred to the owner of the FundDeployer contract\",\"returns\":{\"owner_\":\"The owner\"}},\"identifier()\":{\"returns\":{\"identifier_\":\"The identifer string\"}},\"isAllowedMaker(address)\":{\"params\":{\"_who\":\"The account to check\"},\"returns\":{\"isAllowedMaker_\":\"True if _who is an allowed maker\"}},\"parseAssetsForMethod(bytes4,bytes)\":{\"params\":{\"_encodedCallArgs\":\"The encoded parameters for the callOnIntegration\",\"_selector\":\"The function selector for the callOnIntegration\"},\"returns\":{\"incomingAssets_\":\"The assets to receive in the call\",\"minIncomingAssetAmounts_\":\"The min asset amounts to receive in the call\",\"spendAssetAmounts_\":\"The max asset amounts to spend in the call\",\"spendAssetsHandleType_\":\"A type that dictates how to handle granting the adapter access to spend assets (`None` by default)\",\"spendAssets_\":\"The assets to spend in the call\"}},\"removeAllowedMakers(address[])\":{\"params\":{\"_accountsToRemove\":\"Accounts to remove\"}},\"takeOrder(address,bytes,bytes)\":{\"params\":{\"_encodedAssetTransferArgs\":\"Encoded args for expected assets to spend and receive\",\"_encodedCallArgs\":\"Encoded order parameters\",\"_vaultProxy\":\"The VaultProxy of the calling fund\"}}},\"title\":\"ZeroExV2Adapter Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addAllowedMakers(address[])\":{\"notice\":\"Adds accounts to the list of allowed 0x order makers\"},\"getExchange()\":{\"notice\":\"Gets the `EXCHANGE` variable value\"},\"getFundDeployer()\":{\"notice\":\"Gets the `FUND_DEPLOYER` variable\"},\"getIntegrationManager()\":{\"notice\":\"Gets the `INTEGRATION_MANAGER` variable\"},\"getOwner()\":{\"notice\":\"Gets the owner of this contract\"},\"identifier()\":{\"notice\":\"Provides a constant string identifier for an adapter\"},\"isAllowedMaker(address)\":{\"notice\":\"Checks whether an account is an allowed maker of 0x orders\"},\"parseAssetsForMethod(bytes4,bytes)\":{\"notice\":\"Parses the expected assets to receive from a call on integration\"},\"removeAllowedMakers(address[])\":{\"notice\":\"Removes accounts from the list of allowed 0x order makers\"},\"takeOrder(address,bytes,bytes)\":{\"notice\":\"Take an order on 0x\"}},\"notice\":\"Adapter to 0xV2 Exchange Contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/release/extensions/integration-manager/integrations/adapters/ZeroExV2Adapter.sol\":\"ZeroExV2Adapter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/release/core/fund-deployer/IFundDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IFundDeployer Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IFundDeployer {\\n    enum ReleaseStatus {PreLaunch, Live, Paused}\\n\\n    function getOwner() external view returns (address);\\n\\n    function getReleaseStatus() external view returns (ReleaseStatus);\\n\\n    function isRegisteredVaultCall(address, bytes4) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4147fc50c342dad395c366634a6bfa76020a76d7710698e2e79ab26ed8f5d31b\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/integration-manager/IIntegrationManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IIntegrationManager interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Interface for the IntegrationManager\\ninterface IIntegrationManager {\\n    enum SpendAssetsHandleType {None, Approve, Transfer, Remove}\\n}\\n\",\"keccak256\":\"0x775b57aa3f44b527874e5fd848084ad6d9188d71882be033a49107e8d9a133e8\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/integration-manager/integrations/IIntegrationAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../IIntegrationManager.sol\\\";\\n\\n/// @title Integration Adapter interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Interface for all integration adapters\\ninterface IIntegrationAdapter {\\n    function identifier() external pure returns (string memory identifier_);\\n\\n    function parseAssetsForMethod(bytes4 _selector, bytes calldata _encodedCallArgs)\\n        external\\n        view\\n        returns (\\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType_,\\n            address[] memory spendAssets_,\\n            uint256[] memory spendAssetAmounts_,\\n            address[] memory incomingAssets_,\\n            uint256[] memory minIncomingAssetAmounts_\\n        );\\n}\\n\",\"keccak256\":\"0x7831b14ba1bb8abb1171986606cdd81e097566322178b83c68781d5fee0469f1\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/integration-manager/integrations/adapters/ZeroExV2Adapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"../../../../interfaces/IZeroExV2.sol\\\";\\nimport \\\"../../../../utils/MathHelpers.sol\\\";\\nimport \\\"../../../../utils/AddressArrayLib.sol\\\";\\nimport \\\"../../../utils/FundDeployerOwnerMixin.sol\\\";\\nimport \\\"../utils/AdapterBase.sol\\\";\\n\\n/// @title ZeroExV2Adapter Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Adapter to 0xV2 Exchange Contract\\ncontract ZeroExV2Adapter is AdapterBase, FundDeployerOwnerMixin, MathHelpers {\\n    using AddressArrayLib for address[];\\n    using SafeMath for uint256;\\n\\n    event AllowedMakerAdded(address indexed account);\\n\\n    event AllowedMakerRemoved(address indexed account);\\n\\n    address private immutable EXCHANGE;\\n    mapping(address => bool) private makerToIsAllowed;\\n\\n    // Gas could be optimized for the end-user by also storing an immutable ZRX_ASSET_DATA,\\n    // for example, but in the narrow OTC use-case of this adapter, taker fees are unlikely.\\n    constructor(\\n        address _integrationManager,\\n        address _exchange,\\n        address _fundDeployer,\\n        address[] memory _allowedMakers\\n    ) public AdapterBase(_integrationManager) FundDeployerOwnerMixin(_fundDeployer) {\\n        EXCHANGE = _exchange;\\n        if (_allowedMakers.length > 0) {\\n            __addAllowedMakers(_allowedMakers);\\n        }\\n    }\\n\\n    // EXTERNAL FUNCTIONS\\n\\n    /// @notice Provides a constant string identifier for an adapter\\n    /// @return identifier_ The identifer string\\n    function identifier() external pure override returns (string memory identifier_) {\\n        return \\\"ZERO_EX_V2\\\";\\n    }\\n\\n    /// @notice Parses the expected assets to receive from a call on integration\\n    /// @param _selector The function selector for the callOnIntegration\\n    /// @param _encodedCallArgs The encoded parameters for the callOnIntegration\\n    /// @return spendAssetsHandleType_ A type that dictates how to handle granting\\n    /// the adapter access to spend assets (`None` by default)\\n    /// @return spendAssets_ The assets to spend in the call\\n    /// @return spendAssetAmounts_ The max asset amounts to spend in the call\\n    /// @return incomingAssets_ The assets to receive in the call\\n    /// @return minIncomingAssetAmounts_ The min asset amounts to receive in the call\\n    function parseAssetsForMethod(bytes4 _selector, bytes calldata _encodedCallArgs)\\n        external\\n        view\\n        override\\n        returns (\\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType_,\\n            address[] memory spendAssets_,\\n            uint256[] memory spendAssetAmounts_,\\n            address[] memory incomingAssets_,\\n            uint256[] memory minIncomingAssetAmounts_\\n        )\\n    {\\n        require(_selector == TAKE_ORDER_SELECTOR, \\\"parseAssetsForMethod: _selector invalid\\\");\\n\\n        (\\n            bytes memory encodedZeroExOrderArgs,\\n            uint256 takerAssetFillAmount\\n        ) = __decodeTakeOrderCallArgs(_encodedCallArgs);\\n        IZeroExV2.Order memory order = __constructOrderStruct(encodedZeroExOrderArgs);\\n\\n        require(\\n            isAllowedMaker(order.makerAddress),\\n            \\\"parseAssetsForMethod: Order maker is not allowed\\\"\\n        );\\n        require(\\n            takerAssetFillAmount <= order.takerAssetAmount,\\n            \\\"parseAssetsForMethod: Taker asset fill amount greater than available\\\"\\n        );\\n\\n        address makerAsset = __getAssetAddress(order.makerAssetData);\\n        address takerAsset = __getAssetAddress(order.takerAssetData);\\n\\n        // Format incoming assets\\n        incomingAssets_ = new address[](1);\\n        incomingAssets_[0] = makerAsset;\\n        minIncomingAssetAmounts_ = new uint256[](1);\\n        minIncomingAssetAmounts_[0] = __calcRelativeQuantity(\\n            order.takerAssetAmount,\\n            order.makerAssetAmount,\\n            takerAssetFillAmount\\n        );\\n\\n        if (order.takerFee > 0) {\\n            address takerFeeAsset = __getAssetAddress(IZeroExV2(EXCHANGE).ZRX_ASSET_DATA());\\n            uint256 takerFeeFillAmount = __calcRelativeQuantity(\\n                order.takerAssetAmount,\\n                order.takerFee,\\n                takerAssetFillAmount\\n            ); // fee calculated relative to taker fill amount\\n\\n            if (takerFeeAsset == makerAsset) {\\n                require(\\n                    order.takerFee < order.makerAssetAmount,\\n                    \\\"parseAssetsForMethod: Fee greater than makerAssetAmount\\\"\\n                );\\n\\n                spendAssets_ = new address[](1);\\n                spendAssets_[0] = takerAsset;\\n\\n                spendAssetAmounts_ = new uint256[](1);\\n                spendAssetAmounts_[0] = takerAssetFillAmount;\\n\\n                minIncomingAssetAmounts_[0] = minIncomingAssetAmounts_[0].sub(takerFeeFillAmount);\\n            } else if (takerFeeAsset == takerAsset) {\\n                spendAssets_ = new address[](1);\\n                spendAssets_[0] = takerAsset;\\n\\n                spendAssetAmounts_ = new uint256[](1);\\n                spendAssetAmounts_[0] = takerAssetFillAmount.add(takerFeeFillAmount);\\n            } else {\\n                spendAssets_ = new address[](2);\\n                spendAssets_[0] = takerAsset;\\n                spendAssets_[1] = takerFeeAsset;\\n\\n                spendAssetAmounts_ = new uint256[](2);\\n                spendAssetAmounts_[0] = takerAssetFillAmount;\\n                spendAssetAmounts_[1] = takerFeeFillAmount;\\n            }\\n        } else {\\n            spendAssets_ = new address[](1);\\n            spendAssets_[0] = takerAsset;\\n\\n            spendAssetAmounts_ = new uint256[](1);\\n            spendAssetAmounts_[0] = takerAssetFillAmount;\\n        }\\n\\n        return (\\n            IIntegrationManager.SpendAssetsHandleType.Transfer,\\n            spendAssets_,\\n            spendAssetAmounts_,\\n            incomingAssets_,\\n            minIncomingAssetAmounts_\\n        );\\n    }\\n\\n    /// @notice Take an order on 0x\\n    /// @param _vaultProxy The VaultProxy of the calling fund\\n    /// @param _encodedCallArgs Encoded order parameters\\n    /// @param _encodedAssetTransferArgs Encoded args for expected assets to spend and receive\\n    function takeOrder(\\n        address _vaultProxy,\\n        bytes calldata _encodedCallArgs,\\n        bytes calldata _encodedAssetTransferArgs\\n    )\\n        external\\n        onlyIntegrationManager\\n        fundAssetsTransferHandler(_vaultProxy, _encodedAssetTransferArgs)\\n    {\\n        (\\n            bytes memory encodedZeroExOrderArgs,\\n            uint256 takerAssetFillAmount\\n        ) = __decodeTakeOrderCallArgs(_encodedCallArgs);\\n        IZeroExV2.Order memory order = __constructOrderStruct(encodedZeroExOrderArgs);\\n\\n        // Approve spend assets as needed\\n        __approveMaxAsNeeded(\\n            __getAssetAddress(order.takerAssetData),\\n            __getAssetProxy(order.takerAssetData),\\n            takerAssetFillAmount\\n        );\\n        // Ignores whether makerAsset or takerAsset overlap with the takerFee asset for simplicity\\n        if (order.takerFee > 0) {\\n            bytes memory zrxData = IZeroExV2(EXCHANGE).ZRX_ASSET_DATA();\\n            __approveMaxAsNeeded(\\n                __getAssetAddress(zrxData),\\n                __getAssetProxy(zrxData),\\n                __calcRelativeQuantity(\\n                    order.takerAssetAmount,\\n                    order.takerFee,\\n                    takerAssetFillAmount\\n                ) // fee calculated relative to taker fill amount\\n            );\\n        }\\n\\n        // Execute order\\n        (, , , bytes memory signature) = __decodeZeroExOrderArgs(encodedZeroExOrderArgs);\\n        IZeroExV2(EXCHANGE).fillOrder(order, takerAssetFillAmount, signature);\\n    }\\n\\n    // PRIVATE FUNCTIONS\\n\\n    /// @dev Parses user inputs into a ZeroExV2.Order format\\n    function __constructOrderStruct(bytes memory _encodedOrderArgs)\\n        private\\n        pure\\n        returns (IZeroExV2.Order memory order_)\\n    {\\n        (\\n            address[4] memory orderAddresses,\\n            uint256[6] memory orderValues,\\n            bytes[2] memory orderData,\\n\\n        ) = __decodeZeroExOrderArgs(_encodedOrderArgs);\\n\\n        return\\n            IZeroExV2.Order({\\n                makerAddress: orderAddresses[0],\\n                takerAddress: orderAddresses[1],\\n                feeRecipientAddress: orderAddresses[2],\\n                senderAddress: orderAddresses[3],\\n                makerAssetAmount: orderValues[0],\\n                takerAssetAmount: orderValues[1],\\n                makerFee: orderValues[2],\\n                takerFee: orderValues[3],\\n                expirationTimeSeconds: orderValues[4],\\n                salt: orderValues[5],\\n                makerAssetData: orderData[0],\\n                takerAssetData: orderData[1]\\n            });\\n    }\\n\\n    /// @dev Decode the parameters of a takeOrder call\\n    /// @param _encodedCallArgs Encoded parameters passed from client side\\n    /// @return encodedZeroExOrderArgs_ Encoded args of the 0x order\\n    /// @return takerAssetFillAmount_ Amount of taker asset to fill\\n    function __decodeTakeOrderCallArgs(bytes memory _encodedCallArgs)\\n        private\\n        pure\\n        returns (bytes memory encodedZeroExOrderArgs_, uint256 takerAssetFillAmount_)\\n    {\\n        return abi.decode(_encodedCallArgs, (bytes, uint256));\\n    }\\n\\n    /// @dev Decode the parameters of a 0x order\\n    /// @param _encodedZeroExOrderArgs Encoded parameters of the 0x order\\n    /// @return orderAddresses_ Addresses used in the order\\n    /// - [0] 0x Order param: makerAddress\\n    /// - [1] 0x Order param: takerAddress\\n    /// - [2] 0x Order param: feeRecipientAddress\\n    /// - [3] 0x Order param: senderAddress\\n    /// @return orderValues_ Values used in the order\\n    /// - [0] 0x Order param: makerAssetAmount\\n    /// - [1] 0x Order param: takerAssetAmount\\n    /// - [2] 0x Order param: makerFee\\n    /// - [3] 0x Order param: takerFee\\n    /// - [4] 0x Order param: expirationTimeSeconds\\n    /// - [5] 0x Order param: salt\\n    /// @return orderData_ Bytes data used in the order\\n    /// - [0] 0x Order param: makerAssetData\\n    /// - [1] 0x Order param: takerAssetData\\n    /// @return signature_ Signature of the order\\n    function __decodeZeroExOrderArgs(bytes memory _encodedZeroExOrderArgs)\\n        private\\n        pure\\n        returns (\\n            address[4] memory orderAddresses_,\\n            uint256[6] memory orderValues_,\\n            bytes[2] memory orderData_,\\n            bytes memory signature_\\n        )\\n    {\\n        return abi.decode(_encodedZeroExOrderArgs, (address[4], uint256[6], bytes[2], bytes));\\n    }\\n\\n    /// @dev Parses the asset address from 0x assetData\\n    function __getAssetAddress(bytes memory _assetData)\\n        private\\n        pure\\n        returns (address assetAddress_)\\n    {\\n        assembly {\\n            assetAddress_ := mload(add(_assetData, 36))\\n        }\\n    }\\n\\n    /// @dev Gets the 0x assetProxy address for an ERC20 token\\n    function __getAssetProxy(bytes memory _assetData) private view returns (address assetProxy_) {\\n        bytes4 assetProxyId;\\n\\n        assembly {\\n            assetProxyId := and(\\n                mload(add(_assetData, 32)),\\n                0xFFFFFFFF00000000000000000000000000000000000000000000000000000000\\n            )\\n        }\\n        assetProxy_ = IZeroExV2(EXCHANGE).getAssetProxy(assetProxyId);\\n    }\\n\\n    /////////////////////////////\\n    // ALLOWED MAKERS REGISTRY //\\n    /////////////////////////////\\n\\n    /// @notice Adds accounts to the list of allowed 0x order makers\\n    /// @param _accountsToAdd Accounts to add\\n    function addAllowedMakers(address[] calldata _accountsToAdd) external onlyFundDeployerOwner {\\n        __addAllowedMakers(_accountsToAdd);\\n    }\\n\\n    /// @notice Removes accounts from the list of allowed 0x order makers\\n    /// @param _accountsToRemove Accounts to remove\\n    function removeAllowedMakers(address[] calldata _accountsToRemove)\\n        external\\n        onlyFundDeployerOwner\\n    {\\n        require(_accountsToRemove.length > 0, \\\"removeAllowedMakers: Empty _accountsToRemove\\\");\\n\\n        for (uint256 i; i < _accountsToRemove.length; i++) {\\n            require(\\n                isAllowedMaker(_accountsToRemove[i]),\\n                \\\"removeAllowedMakers: Account is not an allowed maker\\\"\\n            );\\n\\n            makerToIsAllowed[_accountsToRemove[i]] = false;\\n\\n            emit AllowedMakerRemoved(_accountsToRemove[i]);\\n        }\\n    }\\n\\n    /// @dev Helper to add accounts to the list of allowed makers\\n    function __addAllowedMakers(address[] memory _accountsToAdd) private {\\n        require(_accountsToAdd.length > 0, \\\"__addAllowedMakers: Empty _accountsToAdd\\\");\\n\\n        for (uint256 i; i < _accountsToAdd.length; i++) {\\n            require(!isAllowedMaker(_accountsToAdd[i]), \\\"__addAllowedMakers: Value already set\\\");\\n\\n            makerToIsAllowed[_accountsToAdd[i]] = true;\\n\\n            emit AllowedMakerAdded(_accountsToAdd[i]);\\n        }\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the `EXCHANGE` variable value\\n    /// @return exchange_ The `EXCHANGE` variable value\\n    function getExchange() external view returns (address exchange_) {\\n        return EXCHANGE;\\n    }\\n\\n    /// @notice Checks whether an account is an allowed maker of 0x orders\\n    /// @param _who The account to check\\n    /// @return isAllowedMaker_ True if _who is an allowed maker\\n    function isAllowedMaker(address _who) public view returns (bool isAllowedMaker_) {\\n        return makerToIsAllowed[_who];\\n    }\\n}\\n\",\"keccak256\":\"0x151f686712854cd89c3dc6f6f34bb4464e049bc89f9217c8403631317062feb2\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/integration-manager/integrations/utils/AdapterBase.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"../IIntegrationAdapter.sol\\\";\\nimport \\\"./IntegrationSelectors.sol\\\";\\n\\n/// @title AdapterBase Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A base contract for integration adapters\\nabstract contract AdapterBase is IIntegrationAdapter, IntegrationSelectors {\\n    using SafeERC20 for ERC20;\\n\\n    address internal immutable INTEGRATION_MANAGER;\\n\\n    /// @dev Provides a standard implementation for transferring assets between\\n    /// the fund's VaultProxy and the adapter, by wrapping the adapter action.\\n    /// This modifier should be implemented in almost all adapter actions, unless they\\n    /// do not move assets or can spend and receive assets directly with the VaultProxy\\n    modifier fundAssetsTransferHandler(\\n        address _vaultProxy,\\n        bytes memory _encodedAssetTransferArgs\\n    ) {\\n        (\\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType,\\n            address[] memory spendAssets,\\n            uint256[] memory spendAssetAmounts,\\n            address[] memory incomingAssets\\n        ) = __decodeEncodedAssetTransferArgs(_encodedAssetTransferArgs);\\n\\n        // Take custody of spend assets (if necessary)\\n        if (spendAssetsHandleType == IIntegrationManager.SpendAssetsHandleType.Approve) {\\n            for (uint256 i = 0; i < spendAssets.length; i++) {\\n                ERC20(spendAssets[i]).safeTransferFrom(\\n                    _vaultProxy,\\n                    address(this),\\n                    spendAssetAmounts[i]\\n                );\\n            }\\n        }\\n\\n        // Execute call\\n        _;\\n\\n        // Transfer remaining assets back to the fund's VaultProxy\\n        __transferContractAssetBalancesToFund(_vaultProxy, incomingAssets);\\n        __transferContractAssetBalancesToFund(_vaultProxy, spendAssets);\\n    }\\n\\n    modifier onlyIntegrationManager() {\\n        require(\\n            msg.sender == INTEGRATION_MANAGER,\\n            \\\"Only the IntegrationManager can call this function\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(address _integrationManager) public {\\n        INTEGRATION_MANAGER = _integrationManager;\\n    }\\n\\n    // INTERNAL FUNCTIONS\\n\\n    /// @dev Helper for adapters to approve their integratees with the max amount of an asset.\\n    /// Since everything is done atomically, and only the balances to-be-used are sent to adapters,\\n    /// there is no need to approve exact amounts on every call.\\n    function __approveMaxAsNeeded(\\n        address _asset,\\n        address _target,\\n        uint256 _neededAmount\\n    ) internal {\\n        if (ERC20(_asset).allowance(address(this), _target) < _neededAmount) {\\n            ERC20(_asset).safeApprove(_target, type(uint256).max);\\n        }\\n    }\\n\\n    /// @dev Helper to decode the _encodedAssetTransferArgs param passed to adapter call\\n    function __decodeEncodedAssetTransferArgs(bytes memory _encodedAssetTransferArgs)\\n        internal\\n        pure\\n        returns (\\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType_,\\n            address[] memory spendAssets_,\\n            uint256[] memory spendAssetAmounts_,\\n            address[] memory incomingAssets_\\n        )\\n    {\\n        return\\n            abi.decode(\\n                _encodedAssetTransferArgs,\\n                (IIntegrationManager.SpendAssetsHandleType, address[], uint256[], address[])\\n            );\\n    }\\n\\n    /// @dev Helper to transfer full contract balances of assets to the specified VaultProxy\\n    function __transferContractAssetBalancesToFund(address _vaultProxy, address[] memory _assets)\\n        private\\n    {\\n        for (uint256 i = 0; i < _assets.length; i++) {\\n            uint256 postCallAmount = ERC20(_assets[i]).balanceOf(address(this));\\n            if (postCallAmount > 0) {\\n                ERC20(_assets[i]).safeTransfer(_vaultProxy, postCallAmount);\\n            }\\n        }\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the `INTEGRATION_MANAGER` variable\\n    /// @return integrationManager_ The `INTEGRATION_MANAGER` variable value\\n    function getIntegrationManager() external view returns (address integrationManager_) {\\n        return INTEGRATION_MANAGER;\\n    }\\n}\\n\",\"keccak256\":\"0x5e015f0edff7be2e1b73a3718e66faf1925fedbee5214e8b352ade80b376e49b\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/integration-manager/integrations/utils/IntegrationSelectors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IntegrationSelectors Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Selectors for integration actions\\n/// @dev Selectors are created from their signatures rather than hardcoded for easy verification\\nabstract contract IntegrationSelectors {\\n    // Tracked assets\\n    bytes4 public constant ADD_TRACKED_ASSETS_SELECTOR = bytes4(\\n        keccak256(\\\"addTrackedAssets(address,bytes,bytes)\\\")\\n    );\\n    bytes4 public constant REMOVE_TRACKED_ASSETS_SELECTOR = bytes4(\\n        keccak256(\\\"removeTrackedAssets(address,bytes,bytes)\\\")\\n    );\\n\\n    // Asset approval\\n    bytes4 public constant APPROVE_ASSETS_SELECTOR = bytes4(\\n        keccak256(\\\"approveAssets(address,bytes,bytes)\\\")\\n    );\\n\\n    // Trading\\n    bytes4 public constant TAKE_ORDER_SELECTOR = bytes4(\\n        keccak256(\\\"takeOrder(address,bytes,bytes)\\\")\\n    );\\n\\n    // Lending\\n    bytes4 public constant LEND_SELECTOR = bytes4(keccak256(\\\"lend(address,bytes,bytes)\\\"));\\n    bytes4 public constant REDEEM_SELECTOR = bytes4(keccak256(\\\"redeem(address,bytes,bytes)\\\"));\\n\\n    // Staking\\n    bytes4 public constant STAKE_SELECTOR = bytes4(keccak256(\\\"stake(address,bytes,bytes)\\\"));\\n    bytes4 public constant UNSTAKE_SELECTOR = bytes4(keccak256(\\\"unstake(address,bytes,bytes)\\\"));\\n\\n    // Rewards\\n    bytes4 public constant CLAIM_REWARDS_SELECTOR = bytes4(\\n        keccak256(\\\"claimRewards(address,bytes,bytes)\\\")\\n    );\\n\\n    // Combined\\n    bytes4 public constant CLAIM_REWARDS_AND_REINVEST_SELECTOR = bytes4(\\n        keccak256(\\\"claimRewardsAndReinvest(address,bytes,bytes)\\\")\\n    );\\n    bytes4 public constant CLAIM_REWARDS_AND_SWAP_SELECTOR = bytes4(\\n        keccak256(\\\"claimRewardsAndSwap(address,bytes,bytes)\\\")\\n    );\\n    bytes4 public constant LEND_AND_STAKE_SELECTOR = bytes4(\\n        keccak256(\\\"lendAndStake(address,bytes,bytes)\\\")\\n    );\\n    bytes4 public constant UNSTAKE_AND_REDEEM_SELECTOR = bytes4(\\n        keccak256(\\\"unstakeAndRedeem(address,bytes,bytes)\\\")\\n    );\\n}\\n\",\"keccak256\":\"0xc4642035f4c87808494beb8e852bae33fc950b17a7b44dadfadc033d87ed27fb\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/utils/FundDeployerOwnerMixin.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../../core/fund-deployer/IFundDeployer.sol\\\";\\n\\n/// @title FundDeployerOwnerMixin Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A mixin contract that defers ownership to the owner of FundDeployer\\nabstract contract FundDeployerOwnerMixin {\\n    address internal immutable FUND_DEPLOYER;\\n\\n    modifier onlyFundDeployerOwner() {\\n        require(\\n            msg.sender == getOwner(),\\n            \\\"onlyFundDeployerOwner: Only the FundDeployer owner can call this function\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(address _fundDeployer) public {\\n        FUND_DEPLOYER = _fundDeployer;\\n    }\\n\\n    /// @notice Gets the owner of this contract\\n    /// @return owner_ The owner\\n    /// @dev Ownership is deferred to the owner of the FundDeployer contract\\n    function getOwner() public view returns (address owner_) {\\n        return IFundDeployer(FUND_DEPLOYER).getOwner();\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the `FUND_DEPLOYER` variable\\n    /// @return fundDeployer_ The `FUND_DEPLOYER` variable value\\n    function getFundDeployer() external view returns (address fundDeployer_) {\\n        return FUND_DEPLOYER;\\n    }\\n}\\n\",\"keccak256\":\"0xae16a22807bc31d46654889122b8db7ee55b731efc8d6feb4c978d13fee3336d\",\"license\":\"GPL-3.0\"},\"contracts/release/interfaces/IZeroExV2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n/// @dev Minimal interface for our interactions with the ZeroEx Exchange contract\\ninterface IZeroExV2 {\\n    struct Order {\\n        address makerAddress;\\n        address takerAddress;\\n        address feeRecipientAddress;\\n        address senderAddress;\\n        uint256 makerAssetAmount;\\n        uint256 takerAssetAmount;\\n        uint256 makerFee;\\n        uint256 takerFee;\\n        uint256 expirationTimeSeconds;\\n        uint256 salt;\\n        bytes makerAssetData;\\n        bytes takerAssetData;\\n    }\\n\\n    struct OrderInfo {\\n        uint8 orderStatus;\\n        bytes32 orderHash;\\n        uint256 orderTakerAssetFilledAmount;\\n    }\\n\\n    struct FillResults {\\n        uint256 makerAssetFilledAmount;\\n        uint256 takerAssetFilledAmount;\\n        uint256 makerFeePaid;\\n        uint256 takerFeePaid;\\n    }\\n\\n    function ZRX_ASSET_DATA() external view returns (bytes memory);\\n\\n    function filled(bytes32) external view returns (uint256);\\n\\n    function cancelled(bytes32) external view returns (bool);\\n\\n    function getOrderInfo(Order calldata) external view returns (OrderInfo memory);\\n\\n    function getAssetProxy(bytes4) external view returns (address);\\n\\n    function isValidSignature(\\n        bytes32,\\n        address,\\n        bytes calldata\\n    ) external view returns (bool);\\n\\n    function preSign(\\n        bytes32,\\n        address,\\n        bytes calldata\\n    ) external;\\n\\n    function cancelOrder(Order calldata) external;\\n\\n    function fillOrder(\\n        Order calldata,\\n        uint256,\\n        bytes calldata\\n    ) external returns (FillResults memory);\\n}\\n\",\"keccak256\":\"0x0c07eab651b8ce3000ddcfd1cad14f16b76a8d032a3bdbf25e17dad8b26fa125\",\"license\":\"GPL-3.0\"},\"contracts/release/utils/AddressArrayLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title AddressArray Library\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A library to extend the address array data type\\nlibrary AddressArrayLib {\\n    /// @dev Helper to add an item to an array. Does not assert uniqueness of the new item.\\n    function addItem(address[] memory _self, address _itemToAdd)\\n        internal\\n        pure\\n        returns (address[] memory nextArray_)\\n    {\\n        nextArray_ = new address[](_self.length + 1);\\n        for (uint256 i; i < _self.length; i++) {\\n            nextArray_[i] = _self[i];\\n        }\\n        nextArray_[_self.length] = _itemToAdd;\\n\\n        return nextArray_;\\n    }\\n\\n    /// @dev Helper to add an item to an array, only if it is not already in the array.\\n    function addUniqueItem(address[] memory _self, address _itemToAdd)\\n        internal\\n        pure\\n        returns (address[] memory nextArray_)\\n    {\\n        if (contains(_self, _itemToAdd)) {\\n            return _self;\\n        }\\n\\n        return addItem(_self, _itemToAdd);\\n    }\\n\\n    /// @dev Helper to verify if an array contains a particular value\\n    function contains(address[] memory _self, address _target)\\n        internal\\n        pure\\n        returns (bool doesContain_)\\n    {\\n        for (uint256 i; i < _self.length; i++) {\\n            if (_target == _self[i]) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /// @dev Helper to reassign all items in an array with a specified value\\n    function fill(address[] memory _self, address _value)\\n        internal\\n        pure\\n        returns (address[] memory nextArray_)\\n    {\\n        nextArray_ = new address[](_self.length);\\n        for (uint256 i; i < nextArray_.length; i++) {\\n            nextArray_[i] = _value;\\n        }\\n\\n        return nextArray_;\\n    }\\n\\n    /// @dev Helper to verify if array is a set of unique values.\\n    /// Does not assert length > 0.\\n    function isUniqueSet(address[] memory _self) internal pure returns (bool isUnique_) {\\n        if (_self.length <= 1) {\\n            return true;\\n        }\\n\\n        uint256 arrayLength = _self.length;\\n        for (uint256 i; i < arrayLength; i++) {\\n            for (uint256 j = i + 1; j < arrayLength; j++) {\\n                if (_self[i] == _self[j]) {\\n                    return false;\\n                }\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /// @dev Helper to remove items from an array. Removes all matching occurrences of each item.\\n    /// Does not assert uniqueness of either array.\\n    function removeItems(address[] memory _self, address[] memory _itemsToRemove)\\n        internal\\n        pure\\n        returns (address[] memory nextArray_)\\n    {\\n        if (_itemsToRemove.length == 0) {\\n            return _self;\\n        }\\n\\n        bool[] memory indexesToRemove = new bool[](_self.length);\\n        uint256 remainingItemsCount = _self.length;\\n        for (uint256 i; i < _self.length; i++) {\\n            if (contains(_itemsToRemove, _self[i])) {\\n                indexesToRemove[i] = true;\\n                remainingItemsCount--;\\n            }\\n        }\\n\\n        if (remainingItemsCount == _self.length) {\\n            nextArray_ = _self;\\n        } else if (remainingItemsCount > 0) {\\n            nextArray_ = new address[](remainingItemsCount);\\n            uint256 nextArrayIndex;\\n            for (uint256 i; i < _self.length; i++) {\\n                if (!indexesToRemove[i]) {\\n                    nextArray_[nextArrayIndex] = _self[i];\\n                    nextArrayIndex++;\\n                }\\n            }\\n        }\\n\\n        return nextArray_;\\n    }\\n}\\n\",\"keccak256\":\"0x702bded074c5190e27ebe39ee77166593cc1296d4cb275c1a96914620ee55c83\",\"license\":\"GPL-3.0\"},\"contracts/release/utils/MathHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n/// @title MathHelpers Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Helper functions for common math operations\\nabstract contract MathHelpers {\\n    using SafeMath for uint256;\\n\\n    /// @dev Calculates a proportional value relative to a known ratio\\n    function __calcRelativeQuantity(\\n        uint256 _quantity1,\\n        uint256 _quantity2,\\n        uint256 _relativeQuantity1\\n    ) internal pure returns (uint256 relativeQuantity2_) {\\n        return _relativeQuantity1.mul(_quantity2).div(_quantity1);\\n    }\\n\\n    /// @dev Calculates a rate normalized to 10^18 precision,\\n    /// for given base and quote asset decimals and amounts\\n    function __calcNormalizedRate(\\n        uint256 _baseAssetDecimals,\\n        uint256 _baseAssetAmount,\\n        uint256 _quoteAssetDecimals,\\n        uint256 _quoteAssetAmount\\n    ) internal pure returns (uint256 normalizedRate_) {\\n        return\\n            _quoteAssetAmount.mul(10**_baseAssetDecimals.add(18)).div(\\n                _baseAssetAmount.mul(10**_quoteAssetDecimals)\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xbd048b7fa2d2f2f716812b722ee3b60e759a623f8564ddae15274b4db8d9c0e7\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b506040516200306338038062003063833981016040819052620000349162000254565b6001600160601b0319606085811b821660805283811b821660a05284901b1660c0528051156200006957620000698162000073565b505050506200040c565b6000815111620000a05760405162461bcd60e51b815260040162000097906200036b565b60405180910390fd5b60005b81518110156200019657620000d2828281518110620000be57fe5b60200260200101516200019a60201b60201c565b15620000f25760405162461bcd60e51b815260040162000097906200037d565b60016000808484815181106200010457fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055508181815181106200015057fe5b60200260200101516001600160a01b03167f2e1c3b07a83c6d2606a67771e6dd5c25722baac28ecf38e8056fb820d88536a860405160405180910390a2600101620000a3565b5050565b6001600160a01b031660009081526020819052604090205460ff1690565b8051620001c581620003f2565b92915050565b600082601f830112620001dd57600080fd5b8151620001f4620001ee82620003b6565b6200038f565b915081818352602084019350602081019050838560208402820111156200021a57600080fd5b60005b838110156200024a5781620002338882620001b8565b84525060209283019291909101906001016200021d565b5050505092915050565b600080600080608085870312156200026b57600080fd5b6000620002798787620001b8565b94505060206200028c87828801620001b8565b93505060406200029f87828801620001b8565b92505060608501516001600160401b03811115620002bc57600080fd5b620002ca87828801620001cb565b91505092959194509250565b6000620002e5602883620003d7565b7f5f5f616464416c6c6f7765644d616b6572733a20456d707479205f6163636f758152671b9d1cd51bd0591960c21b602082015260400192915050565b600062000331602583620003d7565b7f5f5f616464416c6c6f7765644d616b6572733a2056616c756520616c726561648152641e481cd95d60da1b602082015260400192915050565b60208082528101620001c581620002d6565b60208082528101620001c58162000322565b6040518181016001600160401b0381118282101715620003ae57600080fd5b604052919050565b60006001600160401b03821115620003cd57600080fd5b5060209081020190565b90815260200190565b60006001600160a01b038216620001c5565b620003fd81620003e0565b81146200040957600080fd5b50565b60805160601c60a05160601c60c05160601c612c03620004606000398061042f528061051852806108e25280610fbf5280611257525080610cdc5280610d7252508061029c5280610f535250612c036000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c8063863e5ad0116100c3578063e4d904781161007c578063e4d9047814610249578063e7c4569014610251578063f075399414610259578063f7d882b514610261578063f807cd2214610269578063ff7ede37146102715761014d565b8063863e5ad014610201578063893d20e81461020957806397c0ac871461021e578063b23228cf14610226578063c960260d1461022e578063e27a06b5146102415761014d565b806340da225d1161011557806340da225d1461019d57806340f8cfcf146101a55780634ce13fb0146101ad5780635ca62b3c146101c057806376cc7ac6146101c85780637998a1c4146101ec5761014d565b806303e38a2b14610152578063080456c114610167578063131461c014610185578063257cb1a31461018d5780633ffc159114610195575b600080fd5b610165610160366004611d79565b610291565b005b61016f6105cc565b60405161017c91906128b3565b60405180910390f35b61016f6105f0565b61016f610614565b61016f610638565b61016f61065c565b61016f610680565b6101656101bb366004611e90565b6106a4565b61016f61071c565b6101db6101d6366004611eef565b610740565b60405161017c9594939291906128c1565b6101f4610c90565b60405161017c919061291d565b61016f610cb4565b610211610cd8565b60405161017c9190612839565b610211610d70565b61016f610d94565b61016561023c366004611e90565b610db8565b61016f610f09565b61016f610f2d565b610211610f51565b61016f610f75565b61016f610f99565b610211610fbd565b61028461027f366004611d3d565b610fe1565b60405161017c91906128a5565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146102e25760405162461bcd60e51b81526004016102d9906129be565b60405180910390fd5b8482828080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509250606091508190508061032885611003565b92965090945092509050600184600381111561034057fe5b14156103a25760005b83518110156103a057610398873085848151811061036357fe5b602002602001015187858151811061037757fe5b60200260200101516001600160a01b031661102d909392919063ffffffff16565b600101610349565b505b606060006103e58c8c8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061108b92505050565b915091506103f16118c9565b6103fa836110ac565b905061042161040d826101600151611226565b61041b83610160015161122d565b846112e3565b60e0810151156104f35760607f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663db123b1a6040518163ffffffff1660e01b815260040160006040518083038186803b15801561048657600080fd5b505afa15801561049a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104c29190810190611f44565b90506104f16104d082611226565b6104d98361122d565b6104ec8560a001518660e001518861137f565b6112e3565b505b60606104fe8461139d565b60405163b4be83d560e01b81529094506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016935063b4be83d592506105549150859087908690600401612a3e565b608060405180830381600087803b15801561056e57600080fd5b505af1158015610582573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a69190612062565b50505050506105b586826113cb565b6105bf86846113cb565b5050505050505050505050565b7f8334eb99be0145865eba9889fca2ee920288090caefff4cc776038e20ad9259a81565b7f29fa046e79524c3c5ac4c01df692c35e217802b2b13b21121b76cf0ef02b138c81565b7f099f75155f0e997bf83a7993a71d5e7e7540bd386fe1e84643a09ce6b412521981565b7ffa7dd04da627f433da73c4355ead9c75682a67a8fc84d3f6170ef0922f402d2481565b7fb9dfbaccbe5cd2a84fdcf1d15f23ef25d23086f5afbaa99516065ed4a5bbc7a381565b7ff658eb804cc1da8af5599b584aaf3d55407a3c721c42641a6a5270e963d782c381565b6106ac610cd8565b6001600160a01b0316336001600160a01b0316146106dc5760405162461bcd60e51b81526004016102d99061293e565b6107188282808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506114aa92505050565b5050565b7fdfd5ee0f6067928bf85a7c4430811282840bc99332dda3dab462c02bf95b67cc81565b600060608080806001600160e01b031988166303e38a2b60e01b146107775760405162461bcd60e51b81526004016102d99061296e565b606060006107ba89898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061108b92505050565b915091506107c66118c9565b6107cf836110ac565b90506107de8160000151610fe1565b6107fa5760405162461bcd60e51b81526004016102d990612a2e565b8060a0015182111561081e5760405162461bcd60e51b81526004016102d99061298e565b600061082e826101400151611226565b90506000610840836101600151611226565b60408051600180825281830190925291925060208083019080368337019050509650818760008151811061087057fe5b6001600160a01b03929092166020928302919091018201526040805160018082528183019092529182810190803683370190505095506108b98360a0015184608001518661137f565b866000815181106108c657fe5b602090810291909101015260e083015115610bfd57600061097a7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663db123b1a6040518163ffffffff1660e01b815260040160006040518083038186803b15801561093957600080fd5b505afa15801561094d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109759190810190611f44565b611226565b905060006109918560a001518660e001518861137f565b9050836001600160a01b0316826001600160a01b03161415610a975784608001518560e00151106109d45760405162461bcd60e51b81526004016102d9906129ae565b6040805160018082528183019092529060208083019080368337019050509a50828b600081518110610a0257fe5b6001600160a01b0392909216602092830291909101820152604080516001808252818301909252918281019080368337019050509950858a600081518110610a4657fe5b602002602001018181525050610a798189600081518110610a6357fe5b60200260200101516115b190919063ffffffff16565b88600081518110610a8657fe5b602002602001018181525050610bf6565b826001600160a01b0316826001600160a01b03161415610b2c576040805160018082528183019092529060208083019080368337019050509a50828b600081518110610adf57fe5b6001600160a01b0392909216602092830291909101820152604080516001808252818301909252918281019080368337019050509950610b1f86826115de565b8a600081518110610a8657fe5b6040805160028082526060820183529091602083019080368337019050509a50828b600081518110610b5a57fe5b60200260200101906001600160a01b031690816001600160a01b031681525050818b600181518110610b8857fe5b6001600160a01b0392909216602092830291909101820152604080516002808252606082018352909290919083019080368337019050509950858a600081518110610bcf57fe5b602002602001018181525050808a600181518110610be957fe5b6020026020010181815250505b5050610c7c565b60408051600180825281830190925290602080830190803683370190505098508089600081518110610c2b57fe5b6001600160a01b03929092166020928302919091018201526040805160018082528183019092529182810190803683370190505097508388600081518110610c6f57fe5b6020026020010181815250505b600299505050505050939792965093509350565b60408051808201909152600a8152692d22a927afa2ac2fab1960b11b602082015290565b7f03e38a2bd7063d45c897edeafc330e71657502dd86434d3c37a489caf116af6981565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663893d20e86040518163ffffffff1660e01b815260040160206040518083038186803b158015610d3357600080fd5b505afa158015610d47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6b9190611d5b565b905090565b7f000000000000000000000000000000000000000000000000000000000000000090565b7f68e30677f607df46e87da13e15b637784cfa62374b653f35ab43d10361a2f83081565b610dc0610cd8565b6001600160a01b0316336001600160a01b031614610df05760405162461bcd60e51b81526004016102d99061293e565b80610e0d5760405162461bcd60e51b81526004016102d99061292e565b60005b81811015610f0457610e3c838383818110610e2757fe5b905060200201602081019061027f9190611d3d565b610e585760405162461bcd60e51b81526004016102d990612a1e565b6000806000858585818110610e6957fe5b9050602002016020810190610e7e9190611d3d565b6001600160a01b031681526020810191909152604001600020805460ff1916911515919091179055828282818110610eb257fe5b9050602002016020810190610ec79190611d3d565b6001600160a01b03167f20bc817441764d1758bec8956a90bf0ba498c8c4098524577f7c068d3c9f8c3660405160405180910390a2600101610e10565b505050565b7f848f3a590fb2f9795d1a275009c54c26c53833277c96b90e0ddd01753a1d590681565b7f3377e18acf9e83665eacd6af109261424fca32a298e2fc2e6095ba563fb8390e81565b7f000000000000000000000000000000000000000000000000000000000000000090565b7f1d51f49b5273d9ddbb643dc349fab8d36dbb470209c2ea71033bea49dd311c2781565b7fc29fa9dde84204c2908778afd0613d802d31cf046179b88f6d2b4a4e507ea2d581565b7f000000000000000000000000000000000000000000000000000000000000000090565b6001600160a01b03811660009081526020819052604090205460ff165b919050565b600060608060608480602001905181019061101e9190611fc8565b93509350935093509193509193565b611085846323b872dd60e01b85858560405160240161104e93929190612862565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611603565b50505050565b60606000828060200190518101906110a39190611f78565b91509150915091565b6110b46118c9565b6110bc61194e565b6110c461196c565b6110cc61198a565b6110d58561139d565b50925092509250604051806101800160405280846000600481106110f557fe5b60200201516001600160a01b031681526020018460016004811061111557fe5b60200201516001600160a01b031681526020018460026004811061113557fe5b60200201516001600160a01b031681526020018460036004811061115557fe5b60200201516001600160a01b031681526020018360006006811061117557fe5b602002015181526020018360016006811061118c57fe5b60200201518152602001836002600681106111a357fe5b60200201518152602001836003600681106111ba57fe5b60200201518152602001836004600681106111d157fe5b60200201518152602001836005600681106111e857fe5b60200201518152602001826000600281106111ff57fe5b602002015181526020018260016002811061121657fe5b6020020151905295945050505050565b6024015190565b6020810151604051630c0e082160e31b81526000916001600160e01b031916906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063607041089061128c9084906004016128b3565b60206040518083038186803b1580156112a457600080fd5b505afa1580156112b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112dc9190611d5b565b9392505050565b604051636eb1769f60e11b815281906001600160a01b0385169063dd62ed3e906113139030908790600401612847565b60206040518083038186803b15801561132b57600080fd5b505afa15801561133f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113639190612080565b1015610f0457610f046001600160a01b03841683600019611692565b60006113958461138f8486611755565b9061178f565b949350505050565b6113a561194e565b6113ad61196c565b6113b561198a565b60608480602001905181019061101e9190611dfe565b60005b8151811015610f045760008282815181106113e557fe5b60200260200101516001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016114189190612839565b60206040518083038186803b15801561143057600080fd5b505afa158015611444573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114689190612080565b905080156114a1576114a1848285858151811061148157fe5b60200260200101516001600160a01b03166117c19092919063ffffffff16565b506001016113ce565b60008151116114cb5760405162461bcd60e51b81526004016102d99061295e565b60005b8151811015610718576114f38282815181106114e657fe5b6020026020010151610fe1565b156115105760405162461bcd60e51b81526004016102d9906129ee565b600160008084848151811061152157fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555081818151811061156c57fe5b60200260200101516001600160a01b03167f2e1c3b07a83c6d2606a67771e6dd5c25722baac28ecf38e8056fb820d88536a860405160405180910390a26001016114ce565b6000828211156115d35760405162461bcd60e51b81526004016102d99061297e565b508082035b92915050565b6000828201838110156112dc5760405162461bcd60e51b81526004016102d99061294e565b6060611658826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166117e09092919063ffffffff16565b805190915015610f0457808060200190518101906116769190611ed1565b610f045760405162461bcd60e51b81526004016102d9906129fe565b80158061171a5750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e906116c89030908690600401612847565b60206040518083038186803b1580156116e057600080fd5b505afa1580156116f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117189190612080565b155b6117365760405162461bcd60e51b81526004016102d990612a0e565b610f048363095ea7b360e01b848460405160240161104e92919061288a565b600082611764575060006115d8565b8282028284828161177157fe5b04146112dc5760405162461bcd60e51b81526004016102d9906129ce565b60008082116117b05760405162461bcd60e51b81526004016102d99061299e565b8183816117b957fe5b049392505050565b610f048363a9059cbb60e01b848460405160240161104e92919061288a565b60606113958484600085856117f48561188a565b6118105760405162461bcd60e51b81526004016102d9906129de565b60006060866001600160a01b0316858760405161182d919061282d565b60006040518083038185875af1925050503d806000811461186a576040519150601f19603f3d011682016040523d82523d6000602084013e61186f565b606091505b509150915061187f828286611890565b979650505050505050565b3b151590565b6060831561189f5750816112dc565b8251156118af5782518084602001fd5b8160405162461bcd60e51b81526004016102d9919061291d565b60405180610180016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160608152602001606081525090565b60405180608001604052806004906020820280368337509192915050565b6040518060c001604052806006906020820280368337509192915050565b60405180604001604052806002905b60608152602001906001900390816119995790505090565b80356115d881612b91565b80516115d881612b91565b600082601f8301126119d857600080fd5b60046119eb6119e682612a96565b612a70565b91508183856020840282011115611a0157600080fd5b60005b83811015611a2d5781611a1788826119bc565b8452506020928301929190910190600101611a04565b5050505092915050565b60008083601f840112611a4957600080fd5b5081356001600160401b03811115611a6057600080fd5b602083019150836020820283011115611a7857600080fd5b9250929050565b600082601f830112611a9057600080fd5b8151611a9e6119e682612ab3565b91508181835260208401935060208101905083856020840282011115611ac357600080fd5b60005b83811015611a2d5781611ad988826119bc565b8452506020928301929190910190600101611ac6565b600082601f830112611b0057600080fd5b6002611b0e6119e682612a96565b9150818360005b83811015611a2d5781518601611b2b8882611c69565b8452506020928301929190910190600101611b15565b600082601f830112611b5257600080fd5b6006611b606119e682612a96565b91508183856020840282011115611b7657600080fd5b60005b83811015611a2d5781611b8c8882611d32565b8452506020928301929190910190600101611b79565b600082601f830112611bb357600080fd5b8151611bc16119e682612ab3565b91508181835260208401935060208101905083856020840282011115611be657600080fd5b60005b83811015611a2d5781611bfc8882611d32565b8452506020928301929190910190600101611be9565b80516115d881612ba5565b80356115d881612bae565b60008083601f840112611c3a57600080fd5b5081356001600160401b03811115611c5157600080fd5b602083019150836001820283011115611a7857600080fd5b600082601f830112611c7a57600080fd5b8151611c886119e682612ad3565b91508082526020830160208301858383011115611ca457600080fd5b611caf838284612b4e565b50505092915050565b80516115d881612bb7565b600060808284031215611cd557600080fd5b611cdf6080612a70565b90506000611ced8484611d32565b8252506020611cfe84848301611d32565b6020830152506040611d1284828501611d32565b6040830152506060611d2684828501611d32565b60608301525092915050565b80516115d881612bc4565b600060208284031215611d4f57600080fd5b600061139584846119b1565b600060208284031215611d6d57600080fd5b600061139584846119bc565b600080600080600060608688031215611d9157600080fd5b6000611d9d88886119b1565b95505060208601356001600160401b03811115611db957600080fd5b611dc588828901611c28565b945094505060408601356001600160401b03811115611de357600080fd5b611def88828901611c28565b92509250509295509295909350565b6000806000806101808587031215611e1557600080fd5b6000611e2187876119c7565b9450506080611e3287828801611b41565b9350506101408501516001600160401b03811115611e4f57600080fd5b611e5b87828801611aef565b9250506101608501516001600160401b03811115611e7857600080fd5b611e8487828801611c69565b91505092959194509250565b60008060208385031215611ea357600080fd5b82356001600160401b03811115611eb957600080fd5b611ec585828601611a37565b92509250509250929050565b600060208284031215611ee357600080fd5b60006113958484611c12565b600080600060408486031215611f0457600080fd5b6000611f108686611c1d565b93505060208401356001600160401b03811115611f2c57600080fd5b611f3886828701611c28565b92509250509250925092565b600060208284031215611f5657600080fd5b81516001600160401b03811115611f6c57600080fd5b61139584828501611c69565b60008060408385031215611f8b57600080fd5b82516001600160401b03811115611fa157600080fd5b611fad85828601611c69565b9250506020611fbe85828601611d32565b9150509250929050565b60008060008060808587031215611fde57600080fd5b6000611fea8787611cb8565b94505060208501516001600160401b0381111561200657600080fd5b61201287828801611a7f565b93505060408501516001600160401b0381111561202e57600080fd5b61203a87828801611ba2565b92505060608501516001600160401b0381111561205657600080fd5b611e8487828801611a7f565b60006080828403121561207457600080fd5b60006113958484611cc3565b60006020828403121561209257600080fd5b60006113958484611d32565b60006120aa83836120be565b505060200190565b60006120aa8383612824565b6120c781612b0d565b82525050565b60006120d882612b00565b6120e28185612b04565b93506120ed83612afa565b8060005b8381101561211b578151612105888261209e565b975061211083612afa565b9250506001016120f1565b509495945050505050565b600061213182612b00565b61213b8185612b04565b935061214683612afa565b8060005b8381101561211b57815161215e88826120b2565b975061216983612afa565b92505060010161214a565b6120c781612b18565b6120c781612b1d565b600061219182612b00565b61219b8185612b04565b93506121ab818560208601612b4e565b6121b481612b7a565b9093019392505050565b60006121c982612b00565b6121d38185610ffe565b93506121e3818560208601612b4e565b9290920192915050565b6120c781612b43565b6000612203602c83612b04565b7f72656d6f7665416c6c6f7765644d616b6572733a20456d707479205f6163636f81526b756e7473546f52656d6f766560a01b602082015260400192915050565b6000612251604983612b04565b7f6f6e6c7946756e644465706c6f7965724f776e65723a204f6e6c79207468652081527f46756e644465706c6f796572206f776e65722063616e2063616c6c207468697360208201526810333ab731ba34b7b760b91b604082015260600192915050565b60006122c2601b83612b04565b7f536166654d6174683a206164646974696f6e206f766572666c6f770000000000815260200192915050565b60006122fb602883612b04565b7f5f5f616464416c6c6f7765644d616b6572733a20456d707479205f6163636f758152671b9d1cd51bd0591960c21b602082015260400192915050565b6000612345602783612b04565b7f7061727365417373657473466f724d6574686f643a205f73656c6563746f72208152661a5b9d985b1a5960ca1b602082015260400192915050565b600061238e601e83612b04565b7f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815260200192915050565b60006123c7604483612b04565b7f7061727365417373657473466f724d6574686f643a2054616b6572206173736581527f742066696c6c20616d6f756e742067726561746572207468616e20617661696c60208201526361626c6560e01b604082015260600192915050565b6000612433601a83612b04565b7f536166654d6174683a206469766973696f6e206279207a65726f000000000000815260200192915050565b600061246c603783612b04565b7f7061727365417373657473466f724d6574686f643a204665652067726561746581527f72207468616e206d616b65724173736574416d6f756e74000000000000000000602082015260400192915050565b60006124cb603283612b04565b7f4f6e6c792074686520496e746567726174696f6e4d616e616765722063616e2081527131b0b636103a3434b990333ab731ba34b7b760711b602082015260400192915050565b600061251f602183612b04565b7f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f8152607760f81b602082015260400192915050565b6000612562601d83612b04565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000815260200192915050565b600061259b602583612b04565b7f5f5f616464416c6c6f7765644d616b6572733a2056616c756520616c726561648152641e481cd95d60da1b602082015260400192915050565b60006125e2602a83612b04565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e8152691bdd081cdd58d8d9595960b21b602082015260400192915050565b600061262e603683612b04565b7f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f81527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b602082015260400192915050565b6000612686603483612b04565b7f72656d6f7665416c6c6f7765644d616b6572733a204163636f756e74206973208152733737ba1030b71030b63637bbb2b21036b0b5b2b960611b602082015260400192915050565b60006126dc603083612b04565b7f7061727365417373657473466f724d6574686f643a204f72646572206d616b6581526f1c881a5cc81b9bdd08185b1b1bddd95960821b602082015260400192915050565b805160009061018084019061273685826120be565b50602083015161274960208601826120be565b50604083015161275c60408601826120be565b50606083015161276f60608601826120be565b5060808301516127826080860182612824565b5060a083015161279560a0860182612824565b5060c08301516127a860c0860182612824565b5060e08301516127bb60e0860182612824565b506101008301516127d0610100860182612824565b506101208301516127e5610120860182612824565b506101408301518482036101408601526127ff8282612186565b91505061016083015184820361016086015261281b8282612186565b95945050505050565b6120c781612b40565b60006112dc82846121be565b602081016115d882846120be565b6040810161285582856120be565b6112dc60208301846120be565b6060810161287082866120be565b61287d60208301856120be565b6113956040830184612824565b6040810161289882856120be565b6112dc6020830184612824565b602081016115d88284612174565b602081016115d8828461217d565b60a081016128cf82886121ed565b81810360208301526128e181876120cd565b905081810360408301526128f58186612126565b9050818103606083015261290981856120cd565b9050818103608083015261187f8184612126565b602080825281016112dc8184612186565b602080825281016115d8816121f6565b602080825281016115d881612244565b602080825281016115d8816122b5565b602080825281016115d8816122ee565b602080825281016115d881612338565b602080825281016115d881612381565b602080825281016115d8816123ba565b602080825281016115d881612426565b602080825281016115d88161245f565b602080825281016115d8816124be565b602080825281016115d881612512565b602080825281016115d881612555565b602080825281016115d88161258e565b602080825281016115d8816125d5565b602080825281016115d881612621565b602080825281016115d881612679565b602080825281016115d8816126cf565b60608082528101612a4f8186612721565b9050612a5e6020830185612824565b818103604083015261281b8184612186565b6040518181016001600160401b0381118282101715612a8e57600080fd5b604052919050565b60006001600160401b03821115612aac57600080fd5b5060200290565b60006001600160401b03821115612ac957600080fd5b5060209081020190565b60006001600160401b03821115612ae957600080fd5b506020601f91909101601f19160190565b60200190565b5190565b90815260200190565b60006115d882612b34565b151590565b6001600160e01b03191690565b80610ffe81612b84565b6001600160a01b031690565b90565b60006115d882612b2a565b60005b83811015612b69578181015183820152602001612b51565b838111156110855750506000910152565b601f01601f191690565b60048110612b8e57fe5b50565b612b9a81612b0d565b8114612b8e57600080fd5b612b9a81612b18565b612b9a81612b1d565b60048110612b8e57600080fd5b612b9a81612b4056fea2646970667358221220e2cc3d7a6160fd4fef2cc45ac0fe1217ca0737b8b9c307f80421326bdcd5a8cc64736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061014d5760003560e01c8063863e5ad0116100c3578063e4d904781161007c578063e4d9047814610249578063e7c4569014610251578063f075399414610259578063f7d882b514610261578063f807cd2214610269578063ff7ede37146102715761014d565b8063863e5ad014610201578063893d20e81461020957806397c0ac871461021e578063b23228cf14610226578063c960260d1461022e578063e27a06b5146102415761014d565b806340da225d1161011557806340da225d1461019d57806340f8cfcf146101a55780634ce13fb0146101ad5780635ca62b3c146101c057806376cc7ac6146101c85780637998a1c4146101ec5761014d565b806303e38a2b14610152578063080456c114610167578063131461c014610185578063257cb1a31461018d5780633ffc159114610195575b600080fd5b610165610160366004611d79565b610291565b005b61016f6105cc565b60405161017c91906128b3565b60405180910390f35b61016f6105f0565b61016f610614565b61016f610638565b61016f61065c565b61016f610680565b6101656101bb366004611e90565b6106a4565b61016f61071c565b6101db6101d6366004611eef565b610740565b60405161017c9594939291906128c1565b6101f4610c90565b60405161017c919061291d565b61016f610cb4565b610211610cd8565b60405161017c9190612839565b610211610d70565b61016f610d94565b61016561023c366004611e90565b610db8565b61016f610f09565b61016f610f2d565b610211610f51565b61016f610f75565b61016f610f99565b610211610fbd565b61028461027f366004611d3d565b610fe1565b60405161017c91906128a5565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146102e25760405162461bcd60e51b81526004016102d9906129be565b60405180910390fd5b8482828080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509250606091508190508061032885611003565b92965090945092509050600184600381111561034057fe5b14156103a25760005b83518110156103a057610398873085848151811061036357fe5b602002602001015187858151811061037757fe5b60200260200101516001600160a01b031661102d909392919063ffffffff16565b600101610349565b505b606060006103e58c8c8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061108b92505050565b915091506103f16118c9565b6103fa836110ac565b905061042161040d826101600151611226565b61041b83610160015161122d565b846112e3565b60e0810151156104f35760607f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663db123b1a6040518163ffffffff1660e01b815260040160006040518083038186803b15801561048657600080fd5b505afa15801561049a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104c29190810190611f44565b90506104f16104d082611226565b6104d98361122d565b6104ec8560a001518660e001518861137f565b6112e3565b505b60606104fe8461139d565b60405163b4be83d560e01b81529094506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016935063b4be83d592506105549150859087908690600401612a3e565b608060405180830381600087803b15801561056e57600080fd5b505af1158015610582573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a69190612062565b50505050506105b586826113cb565b6105bf86846113cb565b5050505050505050505050565b7f8334eb99be0145865eba9889fca2ee920288090caefff4cc776038e20ad9259a81565b7f29fa046e79524c3c5ac4c01df692c35e217802b2b13b21121b76cf0ef02b138c81565b7f099f75155f0e997bf83a7993a71d5e7e7540bd386fe1e84643a09ce6b412521981565b7ffa7dd04da627f433da73c4355ead9c75682a67a8fc84d3f6170ef0922f402d2481565b7fb9dfbaccbe5cd2a84fdcf1d15f23ef25d23086f5afbaa99516065ed4a5bbc7a381565b7ff658eb804cc1da8af5599b584aaf3d55407a3c721c42641a6a5270e963d782c381565b6106ac610cd8565b6001600160a01b0316336001600160a01b0316146106dc5760405162461bcd60e51b81526004016102d99061293e565b6107188282808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506114aa92505050565b5050565b7fdfd5ee0f6067928bf85a7c4430811282840bc99332dda3dab462c02bf95b67cc81565b600060608080806001600160e01b031988166303e38a2b60e01b146107775760405162461bcd60e51b81526004016102d99061296e565b606060006107ba89898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061108b92505050565b915091506107c66118c9565b6107cf836110ac565b90506107de8160000151610fe1565b6107fa5760405162461bcd60e51b81526004016102d990612a2e565b8060a0015182111561081e5760405162461bcd60e51b81526004016102d99061298e565b600061082e826101400151611226565b90506000610840836101600151611226565b60408051600180825281830190925291925060208083019080368337019050509650818760008151811061087057fe5b6001600160a01b03929092166020928302919091018201526040805160018082528183019092529182810190803683370190505095506108b98360a0015184608001518661137f565b866000815181106108c657fe5b602090810291909101015260e083015115610bfd57600061097a7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663db123b1a6040518163ffffffff1660e01b815260040160006040518083038186803b15801561093957600080fd5b505afa15801561094d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109759190810190611f44565b611226565b905060006109918560a001518660e001518861137f565b9050836001600160a01b0316826001600160a01b03161415610a975784608001518560e00151106109d45760405162461bcd60e51b81526004016102d9906129ae565b6040805160018082528183019092529060208083019080368337019050509a50828b600081518110610a0257fe5b6001600160a01b0392909216602092830291909101820152604080516001808252818301909252918281019080368337019050509950858a600081518110610a4657fe5b602002602001018181525050610a798189600081518110610a6357fe5b60200260200101516115b190919063ffffffff16565b88600081518110610a8657fe5b602002602001018181525050610bf6565b826001600160a01b0316826001600160a01b03161415610b2c576040805160018082528183019092529060208083019080368337019050509a50828b600081518110610adf57fe5b6001600160a01b0392909216602092830291909101820152604080516001808252818301909252918281019080368337019050509950610b1f86826115de565b8a600081518110610a8657fe5b6040805160028082526060820183529091602083019080368337019050509a50828b600081518110610b5a57fe5b60200260200101906001600160a01b031690816001600160a01b031681525050818b600181518110610b8857fe5b6001600160a01b0392909216602092830291909101820152604080516002808252606082018352909290919083019080368337019050509950858a600081518110610bcf57fe5b602002602001018181525050808a600181518110610be957fe5b6020026020010181815250505b5050610c7c565b60408051600180825281830190925290602080830190803683370190505098508089600081518110610c2b57fe5b6001600160a01b03929092166020928302919091018201526040805160018082528183019092529182810190803683370190505097508388600081518110610c6f57fe5b6020026020010181815250505b600299505050505050939792965093509350565b60408051808201909152600a8152692d22a927afa2ac2fab1960b11b602082015290565b7f03e38a2bd7063d45c897edeafc330e71657502dd86434d3c37a489caf116af6981565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663893d20e86040518163ffffffff1660e01b815260040160206040518083038186803b158015610d3357600080fd5b505afa158015610d47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6b9190611d5b565b905090565b7f000000000000000000000000000000000000000000000000000000000000000090565b7f68e30677f607df46e87da13e15b637784cfa62374b653f35ab43d10361a2f83081565b610dc0610cd8565b6001600160a01b0316336001600160a01b031614610df05760405162461bcd60e51b81526004016102d99061293e565b80610e0d5760405162461bcd60e51b81526004016102d99061292e565b60005b81811015610f0457610e3c838383818110610e2757fe5b905060200201602081019061027f9190611d3d565b610e585760405162461bcd60e51b81526004016102d990612a1e565b6000806000858585818110610e6957fe5b9050602002016020810190610e7e9190611d3d565b6001600160a01b031681526020810191909152604001600020805460ff1916911515919091179055828282818110610eb257fe5b9050602002016020810190610ec79190611d3d565b6001600160a01b03167f20bc817441764d1758bec8956a90bf0ba498c8c4098524577f7c068d3c9f8c3660405160405180910390a2600101610e10565b505050565b7f848f3a590fb2f9795d1a275009c54c26c53833277c96b90e0ddd01753a1d590681565b7f3377e18acf9e83665eacd6af109261424fca32a298e2fc2e6095ba563fb8390e81565b7f000000000000000000000000000000000000000000000000000000000000000090565b7f1d51f49b5273d9ddbb643dc349fab8d36dbb470209c2ea71033bea49dd311c2781565b7fc29fa9dde84204c2908778afd0613d802d31cf046179b88f6d2b4a4e507ea2d581565b7f000000000000000000000000000000000000000000000000000000000000000090565b6001600160a01b03811660009081526020819052604090205460ff165b919050565b600060608060608480602001905181019061101e9190611fc8565b93509350935093509193509193565b611085846323b872dd60e01b85858560405160240161104e93929190612862565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611603565b50505050565b60606000828060200190518101906110a39190611f78565b91509150915091565b6110b46118c9565b6110bc61194e565b6110c461196c565b6110cc61198a565b6110d58561139d565b50925092509250604051806101800160405280846000600481106110f557fe5b60200201516001600160a01b031681526020018460016004811061111557fe5b60200201516001600160a01b031681526020018460026004811061113557fe5b60200201516001600160a01b031681526020018460036004811061115557fe5b60200201516001600160a01b031681526020018360006006811061117557fe5b602002015181526020018360016006811061118c57fe5b60200201518152602001836002600681106111a357fe5b60200201518152602001836003600681106111ba57fe5b60200201518152602001836004600681106111d157fe5b60200201518152602001836005600681106111e857fe5b60200201518152602001826000600281106111ff57fe5b602002015181526020018260016002811061121657fe5b6020020151905295945050505050565b6024015190565b6020810151604051630c0e082160e31b81526000916001600160e01b031916906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063607041089061128c9084906004016128b3565b60206040518083038186803b1580156112a457600080fd5b505afa1580156112b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112dc9190611d5b565b9392505050565b604051636eb1769f60e11b815281906001600160a01b0385169063dd62ed3e906113139030908790600401612847565b60206040518083038186803b15801561132b57600080fd5b505afa15801561133f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113639190612080565b1015610f0457610f046001600160a01b03841683600019611692565b60006113958461138f8486611755565b9061178f565b949350505050565b6113a561194e565b6113ad61196c565b6113b561198a565b60608480602001905181019061101e9190611dfe565b60005b8151811015610f045760008282815181106113e557fe5b60200260200101516001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016114189190612839565b60206040518083038186803b15801561143057600080fd5b505afa158015611444573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114689190612080565b905080156114a1576114a1848285858151811061148157fe5b60200260200101516001600160a01b03166117c19092919063ffffffff16565b506001016113ce565b60008151116114cb5760405162461bcd60e51b81526004016102d99061295e565b60005b8151811015610718576114f38282815181106114e657fe5b6020026020010151610fe1565b156115105760405162461bcd60e51b81526004016102d9906129ee565b600160008084848151811061152157fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555081818151811061156c57fe5b60200260200101516001600160a01b03167f2e1c3b07a83c6d2606a67771e6dd5c25722baac28ecf38e8056fb820d88536a860405160405180910390a26001016114ce565b6000828211156115d35760405162461bcd60e51b81526004016102d99061297e565b508082035b92915050565b6000828201838110156112dc5760405162461bcd60e51b81526004016102d99061294e565b6060611658826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166117e09092919063ffffffff16565b805190915015610f0457808060200190518101906116769190611ed1565b610f045760405162461bcd60e51b81526004016102d9906129fe565b80158061171a5750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e906116c89030908690600401612847565b60206040518083038186803b1580156116e057600080fd5b505afa1580156116f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117189190612080565b155b6117365760405162461bcd60e51b81526004016102d990612a0e565b610f048363095ea7b360e01b848460405160240161104e92919061288a565b600082611764575060006115d8565b8282028284828161177157fe5b04146112dc5760405162461bcd60e51b81526004016102d9906129ce565b60008082116117b05760405162461bcd60e51b81526004016102d99061299e565b8183816117b957fe5b049392505050565b610f048363a9059cbb60e01b848460405160240161104e92919061288a565b60606113958484600085856117f48561188a565b6118105760405162461bcd60e51b81526004016102d9906129de565b60006060866001600160a01b0316858760405161182d919061282d565b60006040518083038185875af1925050503d806000811461186a576040519150601f19603f3d011682016040523d82523d6000602084013e61186f565b606091505b509150915061187f828286611890565b979650505050505050565b3b151590565b6060831561189f5750816112dc565b8251156118af5782518084602001fd5b8160405162461bcd60e51b81526004016102d9919061291d565b60405180610180016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160608152602001606081525090565b60405180608001604052806004906020820280368337509192915050565b6040518060c001604052806006906020820280368337509192915050565b60405180604001604052806002905b60608152602001906001900390816119995790505090565b80356115d881612b91565b80516115d881612b91565b600082601f8301126119d857600080fd5b60046119eb6119e682612a96565b612a70565b91508183856020840282011115611a0157600080fd5b60005b83811015611a2d5781611a1788826119bc565b8452506020928301929190910190600101611a04565b5050505092915050565b60008083601f840112611a4957600080fd5b5081356001600160401b03811115611a6057600080fd5b602083019150836020820283011115611a7857600080fd5b9250929050565b600082601f830112611a9057600080fd5b8151611a9e6119e682612ab3565b91508181835260208401935060208101905083856020840282011115611ac357600080fd5b60005b83811015611a2d5781611ad988826119bc565b8452506020928301929190910190600101611ac6565b600082601f830112611b0057600080fd5b6002611b0e6119e682612a96565b9150818360005b83811015611a2d5781518601611b2b8882611c69565b8452506020928301929190910190600101611b15565b600082601f830112611b5257600080fd5b6006611b606119e682612a96565b91508183856020840282011115611b7657600080fd5b60005b83811015611a2d5781611b8c8882611d32565b8452506020928301929190910190600101611b79565b600082601f830112611bb357600080fd5b8151611bc16119e682612ab3565b91508181835260208401935060208101905083856020840282011115611be657600080fd5b60005b83811015611a2d5781611bfc8882611d32565b8452506020928301929190910190600101611be9565b80516115d881612ba5565b80356115d881612bae565b60008083601f840112611c3a57600080fd5b5081356001600160401b03811115611c5157600080fd5b602083019150836001820283011115611a7857600080fd5b600082601f830112611c7a57600080fd5b8151611c886119e682612ad3565b91508082526020830160208301858383011115611ca457600080fd5b611caf838284612b4e565b50505092915050565b80516115d881612bb7565b600060808284031215611cd557600080fd5b611cdf6080612a70565b90506000611ced8484611d32565b8252506020611cfe84848301611d32565b6020830152506040611d1284828501611d32565b6040830152506060611d2684828501611d32565b60608301525092915050565b80516115d881612bc4565b600060208284031215611d4f57600080fd5b600061139584846119b1565b600060208284031215611d6d57600080fd5b600061139584846119bc565b600080600080600060608688031215611d9157600080fd5b6000611d9d88886119b1565b95505060208601356001600160401b03811115611db957600080fd5b611dc588828901611c28565b945094505060408601356001600160401b03811115611de357600080fd5b611def88828901611c28565b92509250509295509295909350565b6000806000806101808587031215611e1557600080fd5b6000611e2187876119c7565b9450506080611e3287828801611b41565b9350506101408501516001600160401b03811115611e4f57600080fd5b611e5b87828801611aef565b9250506101608501516001600160401b03811115611e7857600080fd5b611e8487828801611c69565b91505092959194509250565b60008060208385031215611ea357600080fd5b82356001600160401b03811115611eb957600080fd5b611ec585828601611a37565b92509250509250929050565b600060208284031215611ee357600080fd5b60006113958484611c12565b600080600060408486031215611f0457600080fd5b6000611f108686611c1d565b93505060208401356001600160401b03811115611f2c57600080fd5b611f3886828701611c28565b92509250509250925092565b600060208284031215611f5657600080fd5b81516001600160401b03811115611f6c57600080fd5b61139584828501611c69565b60008060408385031215611f8b57600080fd5b82516001600160401b03811115611fa157600080fd5b611fad85828601611c69565b9250506020611fbe85828601611d32565b9150509250929050565b60008060008060808587031215611fde57600080fd5b6000611fea8787611cb8565b94505060208501516001600160401b0381111561200657600080fd5b61201287828801611a7f565b93505060408501516001600160401b0381111561202e57600080fd5b61203a87828801611ba2565b92505060608501516001600160401b0381111561205657600080fd5b611e8487828801611a7f565b60006080828403121561207457600080fd5b60006113958484611cc3565b60006020828403121561209257600080fd5b60006113958484611d32565b60006120aa83836120be565b505060200190565b60006120aa8383612824565b6120c781612b0d565b82525050565b60006120d882612b00565b6120e28185612b04565b93506120ed83612afa565b8060005b8381101561211b578151612105888261209e565b975061211083612afa565b9250506001016120f1565b509495945050505050565b600061213182612b00565b61213b8185612b04565b935061214683612afa565b8060005b8381101561211b57815161215e88826120b2565b975061216983612afa565b92505060010161214a565b6120c781612b18565b6120c781612b1d565b600061219182612b00565b61219b8185612b04565b93506121ab818560208601612b4e565b6121b481612b7a565b9093019392505050565b60006121c982612b00565b6121d38185610ffe565b93506121e3818560208601612b4e565b9290920192915050565b6120c781612b43565b6000612203602c83612b04565b7f72656d6f7665416c6c6f7765644d616b6572733a20456d707479205f6163636f81526b756e7473546f52656d6f766560a01b602082015260400192915050565b6000612251604983612b04565b7f6f6e6c7946756e644465706c6f7965724f776e65723a204f6e6c79207468652081527f46756e644465706c6f796572206f776e65722063616e2063616c6c207468697360208201526810333ab731ba34b7b760b91b604082015260600192915050565b60006122c2601b83612b04565b7f536166654d6174683a206164646974696f6e206f766572666c6f770000000000815260200192915050565b60006122fb602883612b04565b7f5f5f616464416c6c6f7765644d616b6572733a20456d707479205f6163636f758152671b9d1cd51bd0591960c21b602082015260400192915050565b6000612345602783612b04565b7f7061727365417373657473466f724d6574686f643a205f73656c6563746f72208152661a5b9d985b1a5960ca1b602082015260400192915050565b600061238e601e83612b04565b7f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815260200192915050565b60006123c7604483612b04565b7f7061727365417373657473466f724d6574686f643a2054616b6572206173736581527f742066696c6c20616d6f756e742067726561746572207468616e20617661696c60208201526361626c6560e01b604082015260600192915050565b6000612433601a83612b04565b7f536166654d6174683a206469766973696f6e206279207a65726f000000000000815260200192915050565b600061246c603783612b04565b7f7061727365417373657473466f724d6574686f643a204665652067726561746581527f72207468616e206d616b65724173736574416d6f756e74000000000000000000602082015260400192915050565b60006124cb603283612b04565b7f4f6e6c792074686520496e746567726174696f6e4d616e616765722063616e2081527131b0b636103a3434b990333ab731ba34b7b760711b602082015260400192915050565b600061251f602183612b04565b7f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f8152607760f81b602082015260400192915050565b6000612562601d83612b04565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000815260200192915050565b600061259b602583612b04565b7f5f5f616464416c6c6f7765644d616b6572733a2056616c756520616c726561648152641e481cd95d60da1b602082015260400192915050565b60006125e2602a83612b04565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e8152691bdd081cdd58d8d9595960b21b602082015260400192915050565b600061262e603683612b04565b7f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f81527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b602082015260400192915050565b6000612686603483612b04565b7f72656d6f7665416c6c6f7765644d616b6572733a204163636f756e74206973208152733737ba1030b71030b63637bbb2b21036b0b5b2b960611b602082015260400192915050565b60006126dc603083612b04565b7f7061727365417373657473466f724d6574686f643a204f72646572206d616b6581526f1c881a5cc81b9bdd08185b1b1bddd95960821b602082015260400192915050565b805160009061018084019061273685826120be565b50602083015161274960208601826120be565b50604083015161275c60408601826120be565b50606083015161276f60608601826120be565b5060808301516127826080860182612824565b5060a083015161279560a0860182612824565b5060c08301516127a860c0860182612824565b5060e08301516127bb60e0860182612824565b506101008301516127d0610100860182612824565b506101208301516127e5610120860182612824565b506101408301518482036101408601526127ff8282612186565b91505061016083015184820361016086015261281b8282612186565b95945050505050565b6120c781612b40565b60006112dc82846121be565b602081016115d882846120be565b6040810161285582856120be565b6112dc60208301846120be565b6060810161287082866120be565b61287d60208301856120be565b6113956040830184612824565b6040810161289882856120be565b6112dc6020830184612824565b602081016115d88284612174565b602081016115d8828461217d565b60a081016128cf82886121ed565b81810360208301526128e181876120cd565b905081810360408301526128f58186612126565b9050818103606083015261290981856120cd565b9050818103608083015261187f8184612126565b602080825281016112dc8184612186565b602080825281016115d8816121f6565b602080825281016115d881612244565b602080825281016115d8816122b5565b602080825281016115d8816122ee565b602080825281016115d881612338565b602080825281016115d881612381565b602080825281016115d8816123ba565b602080825281016115d881612426565b602080825281016115d88161245f565b602080825281016115d8816124be565b602080825281016115d881612512565b602080825281016115d881612555565b602080825281016115d88161258e565b602080825281016115d8816125d5565b602080825281016115d881612621565b602080825281016115d881612679565b602080825281016115d8816126cf565b60608082528101612a4f8186612721565b9050612a5e6020830185612824565b818103604083015261281b8184612186565b6040518181016001600160401b0381118282101715612a8e57600080fd5b604052919050565b60006001600160401b03821115612aac57600080fd5b5060200290565b60006001600160401b03821115612ac957600080fd5b5060209081020190565b60006001600160401b03821115612ae957600080fd5b506020601f91909101601f19160190565b60200190565b5190565b90815260200190565b60006115d882612b34565b151590565b6001600160e01b03191690565b80610ffe81612b84565b6001600160a01b031690565b90565b60006115d882612b2a565b60005b83811015612b69578181015183820152602001612b51565b838111156110855750506000910152565b601f01601f191690565b60048110612b8e57fe5b50565b612b9a81612b0d565b8114612b8e57600080fd5b612b9a81612b18565b612b9a81612b1d565b60048110612b8e57600080fd5b612b9a81612b4056fea2646970667358221220e2cc3d7a6160fd4fef2cc45ac0fe1217ca0737b8b9c307f80421326bdcd5a8cc64736f6c634300060c0033",
  "devdoc": {
    "author": "Enzyme Council <security@enzyme.finance>",
    "kind": "dev",
    "methods": {
      "addAllowedMakers(address[])": {
        "params": {
          "_accountsToAdd": "Accounts to add"
        }
      },
      "getExchange()": {
        "returns": {
          "exchange_": "The `EXCHANGE` variable value"
        }
      },
      "getFundDeployer()": {
        "returns": {
          "fundDeployer_": "The `FUND_DEPLOYER` variable value"
        }
      },
      "getIntegrationManager()": {
        "returns": {
          "integrationManager_": "The `INTEGRATION_MANAGER` variable value"
        }
      },
      "getOwner()": {
        "details": "Ownership is deferred to the owner of the FundDeployer contract",
        "returns": {
          "owner_": "The owner"
        }
      },
      "identifier()": {
        "returns": {
          "identifier_": "The identifer string"
        }
      },
      "isAllowedMaker(address)": {
        "params": {
          "_who": "The account to check"
        },
        "returns": {
          "isAllowedMaker_": "True if _who is an allowed maker"
        }
      },
      "parseAssetsForMethod(bytes4,bytes)": {
        "params": {
          "_encodedCallArgs": "The encoded parameters for the callOnIntegration",
          "_selector": "The function selector for the callOnIntegration"
        },
        "returns": {
          "incomingAssets_": "The assets to receive in the call",
          "minIncomingAssetAmounts_": "The min asset amounts to receive in the call",
          "spendAssetAmounts_": "The max asset amounts to spend in the call",
          "spendAssetsHandleType_": "A type that dictates how to handle granting the adapter access to spend assets (`None` by default)",
          "spendAssets_": "The assets to spend in the call"
        }
      },
      "removeAllowedMakers(address[])": {
        "params": {
          "_accountsToRemove": "Accounts to remove"
        }
      },
      "takeOrder(address,bytes,bytes)": {
        "params": {
          "_encodedAssetTransferArgs": "Encoded args for expected assets to spend and receive",
          "_encodedCallArgs": "Encoded order parameters",
          "_vaultProxy": "The VaultProxy of the calling fund"
        }
      }
    },
    "title": "ZeroExV2Adapter Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addAllowedMakers(address[])": {
        "notice": "Adds accounts to the list of allowed 0x order makers"
      },
      "getExchange()": {
        "notice": "Gets the `EXCHANGE` variable value"
      },
      "getFundDeployer()": {
        "notice": "Gets the `FUND_DEPLOYER` variable"
      },
      "getIntegrationManager()": {
        "notice": "Gets the `INTEGRATION_MANAGER` variable"
      },
      "getOwner()": {
        "notice": "Gets the owner of this contract"
      },
      "identifier()": {
        "notice": "Provides a constant string identifier for an adapter"
      },
      "isAllowedMaker(address)": {
        "notice": "Checks whether an account is an allowed maker of 0x orders"
      },
      "parseAssetsForMethod(bytes4,bytes)": {
        "notice": "Parses the expected assets to receive from a call on integration"
      },
      "removeAllowedMakers(address[])": {
        "notice": "Removes accounts from the list of allowed 0x order makers"
      },
      "takeOrder(address,bytes,bytes)": {
        "notice": "Take an order on 0x"
      }
    },
    "notice": "Adapter to 0xV2 Exchange Contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 31233,
        "contract": "contracts/release/extensions/integration-manager/integrations/adapters/ZeroExV2Adapter.sol:ZeroExV2Adapter",
        "label": "makerToIsAllowed",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}