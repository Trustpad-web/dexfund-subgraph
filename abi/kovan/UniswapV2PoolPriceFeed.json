{
  "address": "0x7226F0Fbc141943f5c6E196CD6148BCCEa1E0f8e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fundDeployer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_derivativePriceFeed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_primitivePriceFeed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_valueInterpreter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_poolTokens",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "poolToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        }
      ],
      "name": "PoolTokenAdded",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_poolTokens",
          "type": "address[]"
        }
      ],
      "name": "addPoolTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_derivative",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_derivativeAmount",
          "type": "uint256"
        }
      ],
      "name": "calcUnderlyingValues",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "underlyings_",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "underlyingAmounts_",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDerivativePriceFeed",
      "outputs": [
        {
          "internalType": "address",
          "name": "derivativePriceFeed_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "factory_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFundDeployer",
      "outputs": [
        {
          "internalType": "address",
          "name": "fundDeployer_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_poolToken",
          "type": "address"
        }
      ],
      "name": "getPoolTokenInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token0",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token1",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "token0Decimals",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "token1Decimals",
              "type": "uint8"
            }
          ],
          "internalType": "struct UniswapV2PoolPriceFeed.PoolTokenInfo",
          "name": "poolTokenInfo_",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_poolToken",
          "type": "address"
        }
      ],
      "name": "getPoolTokenUnderlyings",
      "outputs": [
        {
          "internalType": "address",
          "name": "token0_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token1_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPrimitivePriceFeed",
      "outputs": [
        {
          "internalType": "address",
          "name": "primitivePriceFeed_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getValueInterpreter",
      "outputs": [
        {
          "internalType": "address",
          "name": "valueInterpreter_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "isSupportedAsset",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isSupported_",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4db704fa81f0e382cd0f0f13a1bb740808aab057c6675be1057ca1f16ff0ce01",
  "receipt": {
    "to": null,
    "from": "0xf83F4c3A25b8FEE1722d76e5F72AaFcA00845011",
    "contractAddress": "0x7226F0Fbc141943f5c6E196CD6148BCCEa1E0f8e",
    "transactionIndex": 0,
    "gasUsed": "1689481",
    "logsBloom": "0x
    "blockHash": "0x4d72694289bb7363e52268551c94e939fbf840d50576d7c639788d0c6b0c3a14",
    "transactionHash": "0x4db704fa81f0e382cd0f0f13a1bb740808aab057c6675be1057ca1f16ff0ce01",
    "logs": [],
    "blockNumber": 27798147,
    "cumulativeGasUsed": "1689481",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x148a6FFbD7CCF8Ef7DB4dFD3103C4f197f3d46B2",
    "0x109e67c9E3C76Af5985769BcbC1EBAD7c4703553",
    "0x2cC6D6915A9E9f340435b7AD8C2e916706b8FD59",
    "0x1f956E9D93ACa08907323Bf0878A1a87F96a8C65",
    "0x0022B151B637722757852Ef64c57c982277203fF",
    []
  ],
  "solcInputHash": "a255b7352a771229d5d6ada28c33f53e",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fundDeployer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_derivativePriceFeed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_primitivePriceFeed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_valueInterpreter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_poolTokens\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"}],\"name\":\"PoolTokenAdded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_poolTokens\",\"type\":\"address[]\"}],\"name\":\"addPoolTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_derivative\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_derivativeAmount\",\"type\":\"uint256\"}],\"name\":\"calcUnderlyingValues\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"underlyings_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"underlyingAmounts_\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDerivativePriceFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"derivativePriceFeed_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"factory_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFundDeployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"fundDeployer_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolToken\",\"type\":\"address\"}],\"name\":\"getPoolTokenInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"token0Decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"token1Decimals\",\"type\":\"uint8\"}],\"internalType\":\"struct UniswapV2PoolPriceFeed.PoolTokenInfo\",\"name\":\"poolTokenInfo_\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolToken\",\"type\":\"address\"}],\"name\":\"getPoolTokenUnderlyings\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token0_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrimitivePriceFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"primitivePriceFeed_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValueInterpreter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"valueInterpreter_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"isSupportedAsset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isSupported_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Enzyme Council <security@enzyme.finance>\",\"kind\":\"dev\",\"methods\":{\"addPoolTokens(address[])\":{\"params\":{\"_poolTokens\":\"Uniswap pool tokens to add\"}},\"calcUnderlyingValues(address,uint256)\":{\"params\":{\"_derivative\":\"The derivative to convert\",\"_derivativeAmount\":\"The amount of the derivative to convert\"},\"returns\":{\"underlyingAmounts_\":\"The amount of each underlying asset for the equivalent derivative amount\",\"underlyings_\":\"The underlying assets for the _derivative\"}},\"getDerivativePriceFeed()\":{\"returns\":{\"derivativePriceFeed_\":\"The `DERIVATIVE_PRICE_FEED` variable value\"}},\"getFactory()\":{\"returns\":{\"factory_\":\"The `FACTORY` variable value\"}},\"getFundDeployer()\":{\"returns\":{\"fundDeployer_\":\"The `FUND_DEPLOYER` variable value\"}},\"getOwner()\":{\"details\":\"Ownership is deferred to the owner of the FundDeployer contract\",\"returns\":{\"owner_\":\"The owner\"}},\"getPoolTokenInfo(address)\":{\"params\":{\"_poolToken\":\"The pool token for which to get the `PoolTokenInfo`\"},\"returns\":{\"poolTokenInfo_\":\"The `PoolTokenInfo` value\"}},\"getPoolTokenUnderlyings(address)\":{\"params\":{\"_poolToken\":\"The pool token for which to get its underlyings\"},\"returns\":{\"token0_\":\"The UniswapV2Pair.token0 value\",\"token1_\":\"The UniswapV2Pair.token1 value\"}},\"getPrimitivePriceFeed()\":{\"returns\":{\"primitivePriceFeed_\":\"The `PRIMITIVE_PRICE_FEED` variable value\"}},\"getValueInterpreter()\":{\"returns\":{\"valueInterpreter_\":\"The `VALUE_INTERPRETER` variable value\"}},\"isSupportedAsset(address)\":{\"params\":{\"_asset\":\"The asset to check\"},\"returns\":{\"isSupported_\":\"True if the asset is supported\"}}},\"title\":\"UniswapV2PoolPriceFeed Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addPoolTokens(address[])\":{\"notice\":\"Adds Uniswap pool tokens to the price feed\"},\"calcUnderlyingValues(address,uint256)\":{\"notice\":\"Converts a given amount of a derivative to its underlying asset values\"},\"getDerivativePriceFeed()\":{\"notice\":\"Gets the `DERIVATIVE_PRICE_FEED` variable value\"},\"getFactory()\":{\"notice\":\"Gets the `FACTORY` variable value\"},\"getFundDeployer()\":{\"notice\":\"Gets the `FUND_DEPLOYER` variable\"},\"getOwner()\":{\"notice\":\"Gets the owner of this contract\"},\"getPoolTokenInfo(address)\":{\"notice\":\"Gets the `PoolTokenInfo` for a given pool token\"},\"getPoolTokenUnderlyings(address)\":{\"notice\":\"Gets the underlyings for a given pool token\"},\"getPrimitivePriceFeed()\":{\"notice\":\"Gets the `PRIMITIVE_PRICE_FEED` variable value\"},\"getValueInterpreter()\":{\"notice\":\"Gets the `VALUE_INTERPRETER` variable value\"},\"isSupportedAsset(address)\":{\"notice\":\"Checks if an asset is supported by the price feed\"}},\"notice\":\"Price feed for Uniswap lending pool tokens\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/release/infrastructure/price-feeds/derivatives/feeds/UniswapV2PoolPriceFeed.sol\":\"UniswapV2PoolPriceFeed\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/release/core/fund-deployer/IFundDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IFundDeployer Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IFundDeployer {\\n    enum ReleaseStatus {PreLaunch, Live, Paused}\\n\\n    function getOwner() external view returns (address);\\n\\n    function getReleaseStatus() external view returns (ReleaseStatus);\\n\\n    function isRegisteredVaultCall(address, bytes4) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4147fc50c342dad395c366634a6bfa76020a76d7710698e2e79ab26ed8f5d31b\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/utils/FundDeployerOwnerMixin.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../../core/fund-deployer/IFundDeployer.sol\\\";\\n\\n/// @title FundDeployerOwnerMixin Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A mixin contract that defers ownership to the owner of FundDeployer\\nabstract contract FundDeployerOwnerMixin {\\n    address internal immutable FUND_DEPLOYER;\\n\\n    modifier onlyFundDeployerOwner() {\\n        require(\\n            msg.sender == getOwner(),\\n            \\\"onlyFundDeployerOwner: Only the FundDeployer owner can call this function\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(address _fundDeployer) public {\\n        FUND_DEPLOYER = _fundDeployer;\\n    }\\n\\n    /// @notice Gets the owner of this contract\\n    /// @return owner_ The owner\\n    /// @dev Ownership is deferred to the owner of the FundDeployer contract\\n    function getOwner() public view returns (address owner_) {\\n        return IFundDeployer(FUND_DEPLOYER).getOwner();\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the `FUND_DEPLOYER` variable\\n    /// @return fundDeployer_ The `FUND_DEPLOYER` variable value\\n    function getFundDeployer() external view returns (address fundDeployer_) {\\n        return FUND_DEPLOYER;\\n    }\\n}\\n\",\"keccak256\":\"0xae16a22807bc31d46654889122b8db7ee55b731efc8d6feb4c978d13fee3336d\",\"license\":\"GPL-3.0\"},\"contracts/release/infrastructure/price-feeds/derivatives/IAggregatedDerivativePriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IDerivativePriceFeed.sol\\\";\\n\\n/// @title IDerivativePriceFeed Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IAggregatedDerivativePriceFeed is IDerivativePriceFeed {\\n    function getPriceFeedForDerivative(address) external view returns (address);\\n}\\n\",\"keccak256\":\"0xc093c607b46a435aaf152e0d220a4728a9169267c3278287f1513e54a7247c54\",\"license\":\"GPL-3.0\"},\"contracts/release/infrastructure/price-feeds/derivatives/IDerivativePriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IDerivativePriceFeed Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Simple interface for derivative price source oracle implementations\\ninterface IDerivativePriceFeed {\\n    function calcUnderlyingValues(address, uint256)\\n        external\\n        returns (address[] memory, uint256[] memory);\\n\\n    function isSupportedAsset(address) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5abbc57ccbf28b2c27a0ee496f0a949a0039912975e8f9a65312d884edd05332\",\"license\":\"GPL-3.0\"},\"contracts/release/infrastructure/price-feeds/derivatives/feeds/UniswapV2PoolPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"../../../../extensions/utils/FundDeployerOwnerMixin.sol\\\";\\nimport \\\"../../../../interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"../../../../utils/MathHelpers.sol\\\";\\nimport \\\"../../../value-interpreter/ValueInterpreter.sol\\\";\\nimport \\\"../../primitives/IPrimitivePriceFeed.sol\\\";\\nimport \\\"../../utils/UniswapV2PoolTokenValueCalculator.sol\\\";\\nimport \\\"../IDerivativePriceFeed.sol\\\";\\n\\n/// @title UniswapV2PoolPriceFeed Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Price feed for Uniswap lending pool tokens\\ncontract UniswapV2PoolPriceFeed is\\n    IDerivativePriceFeed,\\n    FundDeployerOwnerMixin,\\n    MathHelpers,\\n    UniswapV2PoolTokenValueCalculator\\n{\\n    event PoolTokenAdded(address indexed poolToken, address token0, address token1);\\n\\n    struct PoolTokenInfo {\\n        address token0;\\n        address token1;\\n        uint8 token0Decimals;\\n        uint8 token1Decimals;\\n    }\\n\\n    uint256 private constant POOL_TOKEN_UNIT = 10**18;\\n    address private immutable DERIVATIVE_PRICE_FEED;\\n    address private immutable FACTORY;\\n    address private immutable PRIMITIVE_PRICE_FEED;\\n    address private immutable VALUE_INTERPRETER;\\n\\n    mapping(address => PoolTokenInfo) private poolTokenToInfo;\\n\\n    constructor(\\n        address _fundDeployer,\\n        address _derivativePriceFeed,\\n        address _primitivePriceFeed,\\n        address _valueInterpreter,\\n        address _factory,\\n        address[] memory _poolTokens\\n    ) public FundDeployerOwnerMixin(_fundDeployer) {\\n        DERIVATIVE_PRICE_FEED = _derivativePriceFeed;\\n        FACTORY = _factory;\\n        PRIMITIVE_PRICE_FEED = _primitivePriceFeed;\\n        VALUE_INTERPRETER = _valueInterpreter;\\n\\n        __addPoolTokens(_poolTokens, _derivativePriceFeed, _primitivePriceFeed);\\n    }\\n\\n    /// @notice Converts a given amount of a derivative to its underlying asset values\\n    /// @param _derivative The derivative to convert\\n    /// @param _derivativeAmount The amount of the derivative to convert\\n    /// @return underlyings_ The underlying assets for the _derivative\\n    /// @return underlyingAmounts_ The amount of each underlying asset for the equivalent derivative amount\\n    function calcUnderlyingValues(address _derivative, uint256 _derivativeAmount)\\n        external\\n        override\\n        returns (address[] memory underlyings_, uint256[] memory underlyingAmounts_)\\n    {\\n        PoolTokenInfo memory poolTokenInfo = poolTokenToInfo[_derivative];\\n\\n        underlyings_ = new address[](2);\\n        underlyings_[0] = poolTokenInfo.token0;\\n        underlyings_[1] = poolTokenInfo.token1;\\n\\n        // Calculate the amounts underlying one unit of a pool token,\\n        // taking into account the known, trusted rate between the two underlyings\\n        (uint256 token0TrustedRateAmount, uint256 token1TrustedRateAmount) = __calcTrustedRate(\\n            poolTokenInfo.token0,\\n            poolTokenInfo.token1,\\n            poolTokenInfo.token0Decimals,\\n            poolTokenInfo.token1Decimals\\n        );\\n\\n        (\\n            uint256 token0DenormalizedRate,\\n            uint256 token1DenormalizedRate\\n        ) = __calcTrustedPoolTokenValue(\\n            FACTORY,\\n            _derivative,\\n            token0TrustedRateAmount,\\n            token1TrustedRateAmount\\n        );\\n\\n        // Define normalized rates for each underlying\\n        underlyingAmounts_ = new uint256[](2);\\n        underlyingAmounts_[0] = _derivativeAmount.mul(token0DenormalizedRate).div(POOL_TOKEN_UNIT);\\n        underlyingAmounts_[1] = _derivativeAmount.mul(token1DenormalizedRate).div(POOL_TOKEN_UNIT);\\n\\n        return (underlyings_, underlyingAmounts_);\\n    }\\n\\n    /// @notice Checks if an asset is supported by the price feed\\n    /// @param _asset The asset to check\\n    /// @return isSupported_ True if the asset is supported\\n    function isSupportedAsset(address _asset) public view override returns (bool isSupported_) {\\n        return poolTokenToInfo[_asset].token0 != address(0);\\n    }\\n\\n    // PRIVATE FUNCTIONS\\n\\n    /// @dev Calculates the trusted rate of two assets based on our price feeds.\\n    /// Uses the decimals-derived unit for whichever asset is used as the quote asset.\\n    function __calcTrustedRate(\\n        address _token0,\\n        address _token1,\\n        uint256 _token0Decimals,\\n        uint256 _token1Decimals\\n    ) private returns (uint256 token0RateAmount_, uint256 token1RateAmount_) {\\n        bool rateIsValid;\\n        // The quote asset of the value lookup must be a supported primitive asset,\\n        // so we cycle through the tokens until reaching a primitive.\\n        // If neither is a primitive, will revert at the ValueInterpreter\\n        if (IPrimitivePriceFeed(PRIMITIVE_PRICE_FEED).isSupportedAsset(_token0)) {\\n            token1RateAmount_ = 10**_token1Decimals;\\n            (token0RateAmount_, rateIsValid) = ValueInterpreter(VALUE_INTERPRETER)\\n                .calcCanonicalAssetValue(_token1, token1RateAmount_, _token0);\\n        } else {\\n            token0RateAmount_ = 10**_token0Decimals;\\n            (token1RateAmount_, rateIsValid) = ValueInterpreter(VALUE_INTERPRETER)\\n                .calcCanonicalAssetValue(_token0, token0RateAmount_, _token1);\\n        }\\n\\n        require(rateIsValid, \\\"__calcTrustedRate: Invalid rate\\\");\\n\\n        return (token0RateAmount_, token1RateAmount_);\\n    }\\n\\n    //////////////////////////\\n    // POOL TOKENS REGISTRY //\\n    //////////////////////////\\n\\n    /// @notice Adds Uniswap pool tokens to the price feed\\n    /// @param _poolTokens Uniswap pool tokens to add\\n    function addPoolTokens(address[] calldata _poolTokens) external onlyFundDeployerOwner {\\n        require(_poolTokens.length > 0, \\\"addPoolTokens: Empty _poolTokens\\\");\\n\\n        __addPoolTokens(_poolTokens, DERIVATIVE_PRICE_FEED, PRIMITIVE_PRICE_FEED);\\n    }\\n\\n    /// @dev Helper to add Uniswap pool tokens\\n    function __addPoolTokens(\\n        address[] memory _poolTokens,\\n        address _derivativePriceFeed,\\n        address _primitivePriceFeed\\n    ) private {\\n        for (uint256 i; i < _poolTokens.length; i++) {\\n            require(_poolTokens[i] != address(0), \\\"__addPoolTokens: Empty poolToken\\\");\\n            require(\\n                poolTokenToInfo[_poolTokens[i]].token0 == address(0),\\n                \\\"__addPoolTokens: Value already set\\\"\\n            );\\n\\n            IUniswapV2Pair uniswapV2Pair = IUniswapV2Pair(_poolTokens[i]);\\n            address token0 = uniswapV2Pair.token0();\\n            address token1 = uniswapV2Pair.token1();\\n\\n            require(\\n                __poolTokenIsSupportable(\\n                    _derivativePriceFeed,\\n                    _primitivePriceFeed,\\n                    token0,\\n                    token1\\n                ),\\n                \\\"__addPoolTokens: Unsupported pool token\\\"\\n            );\\n\\n            poolTokenToInfo[_poolTokens[i]] = PoolTokenInfo({\\n                token0: token0,\\n                token1: token1,\\n                token0Decimals: ERC20(token0).decimals(),\\n                token1Decimals: ERC20(token1).decimals()\\n            });\\n\\n            emit PoolTokenAdded(_poolTokens[i], token0, token1);\\n        }\\n    }\\n\\n    /// @dev Helper to determine if a pool token is supportable, based on whether price feeds are\\n    /// available for its underlying feeds. At least one of the underlying tokens must be\\n    /// a supported primitive asset, and the other must be a primitive or derivative.\\n    function __poolTokenIsSupportable(\\n        address _derivativePriceFeed,\\n        address _primitivePriceFeed,\\n        address _token0,\\n        address _token1\\n    ) private view returns (bool isSupportable_) {\\n        IDerivativePriceFeed derivativePriceFeedContract = IDerivativePriceFeed(\\n            _derivativePriceFeed\\n        );\\n        IPrimitivePriceFeed primitivePriceFeedContract = IPrimitivePriceFeed(_primitivePriceFeed);\\n\\n        if (primitivePriceFeedContract.isSupportedAsset(_token0)) {\\n            if (\\n                primitivePriceFeedContract.isSupportedAsset(_token1) ||\\n                derivativePriceFeedContract.isSupportedAsset(_token1)\\n            ) {\\n                return true;\\n            }\\n        } else if (\\n            derivativePriceFeedContract.isSupportedAsset(_token0) &&\\n            primitivePriceFeedContract.isSupportedAsset(_token1)\\n        ) {\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the `DERIVATIVE_PRICE_FEED` variable value\\n    /// @return derivativePriceFeed_ The `DERIVATIVE_PRICE_FEED` variable value\\n    function getDerivativePriceFeed() external view returns (address derivativePriceFeed_) {\\n        return DERIVATIVE_PRICE_FEED;\\n    }\\n\\n    /// @notice Gets the `FACTORY` variable value\\n    /// @return factory_ The `FACTORY` variable value\\n    function getFactory() external view returns (address factory_) {\\n        return FACTORY;\\n    }\\n\\n    /// @notice Gets the `PoolTokenInfo` for a given pool token\\n    /// @param _poolToken The pool token for which to get the `PoolTokenInfo`\\n    /// @return poolTokenInfo_ The `PoolTokenInfo` value\\n    function getPoolTokenInfo(address _poolToken)\\n        external\\n        view\\n        returns (PoolTokenInfo memory poolTokenInfo_)\\n    {\\n        return poolTokenToInfo[_poolToken];\\n    }\\n\\n    /// @notice Gets the underlyings for a given pool token\\n    /// @param _poolToken The pool token for which to get its underlyings\\n    /// @return token0_ The UniswapV2Pair.token0 value\\n    /// @return token1_ The UniswapV2Pair.token1 value\\n    function getPoolTokenUnderlyings(address _poolToken)\\n        external\\n        view\\n        returns (address token0_, address token1_)\\n    {\\n        return (poolTokenToInfo[_poolToken].token0, poolTokenToInfo[_poolToken].token1);\\n    }\\n\\n    /// @notice Gets the `PRIMITIVE_PRICE_FEED` variable value\\n    /// @return primitivePriceFeed_ The `PRIMITIVE_PRICE_FEED` variable value\\n    function getPrimitivePriceFeed() external view returns (address primitivePriceFeed_) {\\n        return PRIMITIVE_PRICE_FEED;\\n    }\\n\\n    /// @notice Gets the `VALUE_INTERPRETER` variable value\\n    /// @return valueInterpreter_ The `VALUE_INTERPRETER` variable value\\n    function getValueInterpreter() external view returns (address valueInterpreter_) {\\n        return VALUE_INTERPRETER;\\n    }\\n}\\n\",\"keccak256\":\"0xf4faeb1b5026fcfa50305735a52454702de8839bdf49fd9086add35c036858dc\",\"license\":\"GPL-3.0\"},\"contracts/release/infrastructure/price-feeds/primitives/IPrimitivePriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IPrimitivePriceFeed Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Interface for primitive price feeds\\ninterface IPrimitivePriceFeed {\\n    function calcCanonicalValue(\\n        address,\\n        uint256,\\n        address\\n    ) external view returns (uint256, bool);\\n\\n    function calcLiveValue(\\n        address,\\n        uint256,\\n        address\\n    ) external view returns (uint256, bool);\\n\\n    function isSupportedAsset(address) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xd7bd5b75d56c4856f0dacee41240e7efaea3e25beca2c8010f085c7d35c4702e\",\"license\":\"GPL-3.0\"},\"contracts/release/infrastructure/price-feeds/utils/UniswapV2PoolTokenValueCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"../../../interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"../../../interfaces/IUniswapV2Pair.sol\\\";\\n\\n/// @title UniswapV2PoolTokenValueCalculator Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Abstract contract for computing the value of Uniswap liquidity pool tokens\\n/// @dev Unless otherwise noted, these functions are adapted to our needs and style guide from\\n/// an un-merged Uniswap branch:\\n/// https://github.com/Uniswap/uniswap-v2-periphery/blob/267ba44471f3357071a2fe2573fe4da42d5ad969/contracts/libraries/UniswapV2LiquidityMathLibrary.sol\\nabstract contract UniswapV2PoolTokenValueCalculator {\\n    using SafeMath for uint256;\\n\\n    uint256 private constant POOL_TOKEN_UNIT = 10**18;\\n\\n    // INTERNAL FUNCTIONS\\n\\n    /// @dev Given a Uniswap pool with token0 and token1 and their trusted rate,\\n    /// returns the value of one pool token unit in terms of token0 and token1.\\n    /// This is the only function used outside of this contract.\\n    function __calcTrustedPoolTokenValue(\\n        address _factory,\\n        address _pair,\\n        uint256 _token0TrustedRateAmount,\\n        uint256 _token1TrustedRateAmount\\n    ) internal view returns (uint256 token0Amount_, uint256 token1Amount_) {\\n        (uint256 reserve0, uint256 reserve1) = __calcReservesAfterArbitrage(\\n            _pair,\\n            _token0TrustedRateAmount,\\n            _token1TrustedRateAmount\\n        );\\n\\n        return __calcPoolTokenValue(_factory, _pair, reserve0, reserve1);\\n    }\\n\\n    // PRIVATE FUNCTIONS\\n\\n    /// @dev Computes liquidity value given all the parameters of the pair\\n    function __calcPoolTokenValue(\\n        address _factory,\\n        address _pair,\\n        uint256 _reserve0,\\n        uint256 _reserve1\\n    ) private view returns (uint256 token0Amount_, uint256 token1Amount_) {\\n        IUniswapV2Pair pairContract = IUniswapV2Pair(_pair);\\n        uint256 totalSupply = pairContract.totalSupply();\\n\\n        if (IUniswapV2Factory(_factory).feeTo() != address(0)) {\\n            uint256 kLast = pairContract.kLast();\\n            if (kLast > 0) {\\n                uint256 rootK = __uniswapSqrt(_reserve0.mul(_reserve1));\\n                uint256 rootKLast = __uniswapSqrt(kLast);\\n                if (rootK > rootKLast) {\\n                    uint256 numerator = totalSupply.mul(rootK.sub(rootKLast));\\n                    uint256 denominator = rootK.mul(5).add(rootKLast);\\n                    uint256 feeLiquidity = numerator.div(denominator);\\n                    totalSupply = totalSupply.add(feeLiquidity);\\n                }\\n            }\\n        }\\n        return (\\n            _reserve0.mul(POOL_TOKEN_UNIT).div(totalSupply),\\n            _reserve1.mul(POOL_TOKEN_UNIT).div(totalSupply)\\n        );\\n    }\\n\\n    /// @dev Calculates the direction and magnitude of the profit-maximizing trade\\n    function __calcProfitMaximizingTrade(\\n        uint256 _token0TrustedRateAmount,\\n        uint256 _token1TrustedRateAmount,\\n        uint256 _reserve0,\\n        uint256 _reserve1\\n    ) private pure returns (bool token0ToToken1_, uint256 amountIn_) {\\n        token0ToToken1_ =\\n            _reserve0.mul(_token1TrustedRateAmount).div(_reserve1) < _token0TrustedRateAmount;\\n\\n        uint256 leftSide;\\n        uint256 rightSide;\\n        if (token0ToToken1_) {\\n            leftSide = __uniswapSqrt(\\n                _reserve0.mul(_reserve1).mul(_token0TrustedRateAmount).mul(1000).div(\\n                    _token1TrustedRateAmount.mul(997)\\n                )\\n            );\\n            rightSide = _reserve0.mul(1000).div(997);\\n        } else {\\n            leftSide = __uniswapSqrt(\\n                _reserve0.mul(_reserve1).mul(_token1TrustedRateAmount).mul(1000).div(\\n                    _token0TrustedRateAmount.mul(997)\\n                )\\n            );\\n            rightSide = _reserve1.mul(1000).div(997);\\n        }\\n\\n        if (leftSide < rightSide) {\\n            return (false, 0);\\n        }\\n\\n        // Calculate the amount that must be sent to move the price to the profit-maximizing price\\n        amountIn_ = leftSide.sub(rightSide);\\n\\n        return (token0ToToken1_, amountIn_);\\n    }\\n\\n    /// @dev Calculates the pool reserves after an arbitrage moves the price to\\n    /// the profit-maximizing rate, given an externally-observed trusted rate\\n    /// between the two pooled assets\\n    function __calcReservesAfterArbitrage(\\n        address _pair,\\n        uint256 _token0TrustedRateAmount,\\n        uint256 _token1TrustedRateAmount\\n    ) private view returns (uint256 reserve0_, uint256 reserve1_) {\\n        (reserve0_, reserve1_, ) = IUniswapV2Pair(_pair).getReserves();\\n\\n        // Skip checking whether the reserve is 0, as this is extremely unlikely given how\\n        // initial pool liquidity is locked, and since we maintain a list of registered pool tokens\\n\\n        // Calculate how much to swap to arb to the trusted price\\n        (bool token0ToToken1, uint256 amountIn) = __calcProfitMaximizingTrade(\\n            _token0TrustedRateAmount,\\n            _token1TrustedRateAmount,\\n            reserve0_,\\n            reserve1_\\n        );\\n        if (amountIn == 0) {\\n            return (reserve0_, reserve1_);\\n        }\\n\\n        // Adjust the reserves to account for the arb trade to the trusted price\\n        if (token0ToToken1) {\\n            uint256 amountOut = __uniswapV2GetAmountOut(amountIn, reserve0_, reserve1_);\\n            reserve0_ = reserve0_.add(amountIn);\\n            reserve1_ = reserve1_.sub(amountOut);\\n        } else {\\n            uint256 amountOut = __uniswapV2GetAmountOut(amountIn, reserve1_, reserve0_);\\n            reserve1_ = reserve1_.add(amountIn);\\n            reserve0_ = reserve0_.sub(amountOut);\\n        }\\n\\n        return (reserve0_, reserve1_);\\n    }\\n\\n    /// @dev Uniswap square root function. See:\\n    /// https://github.com/Uniswap/uniswap-lib/blob/6ddfedd5716ba85b905bf34d7f1f3c659101a1bc/contracts/libraries/Babylonian.sol\\n    function __uniswapSqrt(uint256 _y) private pure returns (uint256 z_) {\\n        if (_y > 3) {\\n            z_ = _y;\\n            uint256 x = _y / 2 + 1;\\n            while (x < z_) {\\n                z_ = x;\\n                x = (_y / x + x) / 2;\\n            }\\n        } else if (_y != 0) {\\n            z_ = 1;\\n        }\\n        // else z_ = 0\\n\\n        return z_;\\n    }\\n\\n    /// @dev Simplified version of UniswapV2Library's getAmountOut() function. See:\\n    /// https://github.com/Uniswap/uniswap-v2-periphery/blob/87edfdcaf49ccc52591502993db4c8c08ea9eec0/contracts/libraries/UniswapV2Library.sol#L42-L50\\n    function __uniswapV2GetAmountOut(\\n        uint256 _amountIn,\\n        uint256 _reserveIn,\\n        uint256 _reserveOut\\n    ) private pure returns (uint256 amountOut_) {\\n        uint256 amountInWithFee = _amountIn.mul(997);\\n        uint256 numerator = amountInWithFee.mul(_reserveOut);\\n        uint256 denominator = _reserveIn.mul(1000).add(amountInWithFee);\\n\\n        return numerator.div(denominator);\\n    }\\n}\\n\",\"keccak256\":\"0x078a209ee2d4b856a2538f8f0a70fdc1a6cbecc14a0b0cb072e95776b82e254f\",\"license\":\"GPL-3.0\"},\"contracts/release/infrastructure/value-interpreter/IValueInterpreter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IValueInterpreter interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Interface for ValueInterpreter\\ninterface IValueInterpreter {\\n    function calcCanonicalAssetValue(\\n        address,\\n        uint256,\\n        address\\n    ) external returns (uint256, bool);\\n\\n    function calcCanonicalAssetsTotalValue(\\n        address[] calldata,\\n        uint256[] calldata,\\n        address\\n    ) external returns (uint256, bool);\\n\\n    function calcLiveAssetValue(\\n        address,\\n        uint256,\\n        address\\n    ) external returns (uint256, bool);\\n\\n    function calcLiveAssetsTotalValue(\\n        address[] calldata,\\n        uint256[] calldata,\\n        address\\n    ) external returns (uint256, bool);\\n}\\n\",\"keccak256\":\"0xcc0c5e93cfbcb2ac7094538eaeed1e3a1d8256fbf160ce0d9171346eb4be128e\",\"license\":\"GPL-3.0\"},\"contracts/release/infrastructure/value-interpreter/ValueInterpreter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"../price-feeds/derivatives/IAggregatedDerivativePriceFeed.sol\\\";\\nimport \\\"../price-feeds/derivatives/IDerivativePriceFeed.sol\\\";\\nimport \\\"../price-feeds/primitives/IPrimitivePriceFeed.sol\\\";\\nimport \\\"./IValueInterpreter.sol\\\";\\n\\n/// @title ValueInterpreter Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Interprets price feeds to provide covert value between asset pairs\\n/// @dev This contract contains several \\\"live\\\" value calculations, which for this release are simply\\n/// aliases to their \\\"canonical\\\" value counterparts since the only primitive price feed (Chainlink)\\n/// is immutable in this contract and only has one type of value. Including the \\\"live\\\" versions of\\n/// functions only serves as a placeholder for infrastructural components and plugins (e.g., policies)\\n/// to explicitly define the types of values that they should (and will) be using in a future release.\\ncontract ValueInterpreter is IValueInterpreter {\\n    using SafeMath for uint256;\\n\\n    address private immutable AGGREGATED_DERIVATIVE_PRICE_FEED;\\n    address private immutable PRIMITIVE_PRICE_FEED;\\n\\n    constructor(address _primitivePriceFeed, address _aggregatedDerivativePriceFeed) public {\\n        AGGREGATED_DERIVATIVE_PRICE_FEED = _aggregatedDerivativePriceFeed;\\n        PRIMITIVE_PRICE_FEED = _primitivePriceFeed;\\n    }\\n\\n    // EXTERNAL FUNCTIONS\\n\\n    /// @notice An alias of calcCanonicalAssetsTotalValue\\n    function calcLiveAssetsTotalValue(\\n        address[] calldata _baseAssets,\\n        uint256[] calldata _amounts,\\n        address _quoteAsset\\n    ) external override returns (uint256 value_, bool isValid_) {\\n        return calcCanonicalAssetsTotalValue(_baseAssets, _amounts, _quoteAsset);\\n    }\\n\\n    /// @notice An alias of calcCanonicalAssetValue\\n    function calcLiveAssetValue(\\n        address _baseAsset,\\n        uint256 _amount,\\n        address _quoteAsset\\n    ) external override returns (uint256 value_, bool isValid_) {\\n        return calcCanonicalAssetValue(_baseAsset, _amount, _quoteAsset);\\n    }\\n\\n    // PUBLIC FUNCTIONS\\n\\n    /// @notice Calculates the total value of given amounts of assets in a single quote asset\\n    /// @param _baseAssets The assets to convert\\n    /// @param _amounts The amounts of the _baseAssets to convert\\n    /// @param _quoteAsset The asset to which to convert\\n    /// @return value_ The sum value of _baseAssets, denominated in the _quoteAsset\\n    /// @return isValid_ True if the price feed rates used to derive value are all valid\\n    /// @dev Does not alter protocol state,\\n    /// but not a view because calls to price feeds can potentially update third party state\\n    function calcCanonicalAssetsTotalValue(\\n        address[] memory _baseAssets,\\n        uint256[] memory _amounts,\\n        address _quoteAsset\\n    ) public override returns (uint256 value_, bool isValid_) {\\n        require(\\n            _baseAssets.length == _amounts.length,\\n            \\\"calcCanonicalAssetsTotalValue: Arrays unequal lengths\\\"\\n        );\\n        require(\\n            IPrimitivePriceFeed(PRIMITIVE_PRICE_FEED).isSupportedAsset(_quoteAsset),\\n            \\\"calcCanonicalAssetsTotalValue: Unsupported _quoteAsset\\\"\\n        );\\n\\n        isValid_ = true;\\n        for (uint256 i; i < _baseAssets.length; i++) {\\n            (uint256 assetValue, bool assetValueIsValid) = __calcAssetValue(\\n                _baseAssets[i],\\n                _amounts[i],\\n                _quoteAsset\\n            );\\n            value_ = value_.add(assetValue);\\n            if (!assetValueIsValid) {\\n                isValid_ = false;\\n            }\\n        }\\n\\n        return (value_, isValid_);\\n    }\\n\\n    /// @notice Calculates the value of a given amount of one asset in terms of another asset\\n    /// @param _baseAsset The asset from which to convert\\n    /// @param _amount The amount of the _baseAsset to convert\\n    /// @param _quoteAsset The asset to which to convert\\n    /// @return value_ The equivalent quantity in the _quoteAsset\\n    /// @return isValid_ True if the price feed rates used to derive value are all valid\\n    /// @dev Does not alter protocol state,\\n    /// but not a view because calls to price feeds can potentially update third party state\\n    function calcCanonicalAssetValue(\\n        address _baseAsset,\\n        uint256 _amount,\\n        address _quoteAsset\\n    ) public override returns (uint256 value_, bool isValid_) {\\n        if (_baseAsset == _quoteAsset || _amount == 0) {\\n            return (_amount, true);\\n        }\\n\\n        require(\\n            IPrimitivePriceFeed(PRIMITIVE_PRICE_FEED).isSupportedAsset(_quoteAsset),\\n            \\\"calcCanonicalAssetValue: Unsupported _quoteAsset\\\"\\n        );\\n\\n        return __calcAssetValue(_baseAsset, _amount, _quoteAsset);\\n    }\\n\\n    // PRIVATE FUNCTIONS\\n\\n    /// @dev Helper to differentially calculate an asset value\\n    /// based on if it is a primitive or derivative asset.\\n    function __calcAssetValue(\\n        address _baseAsset,\\n        uint256 _amount,\\n        address _quoteAsset\\n    ) private returns (uint256 value_, bool isValid_) {\\n        if (_baseAsset == _quoteAsset || _amount == 0) {\\n            return (_amount, true);\\n        }\\n\\n        // Handle case that asset is a primitive\\n        if (IPrimitivePriceFeed(PRIMITIVE_PRICE_FEED).isSupportedAsset(_baseAsset)) {\\n            return\\n                IPrimitivePriceFeed(PRIMITIVE_PRICE_FEED).calcCanonicalValue(\\n                    _baseAsset,\\n                    _amount,\\n                    _quoteAsset\\n                );\\n        }\\n\\n        // Handle case that asset is a derivative\\n        address derivativePriceFeed = IAggregatedDerivativePriceFeed(\\n            AGGREGATED_DERIVATIVE_PRICE_FEED\\n        )\\n            .getPriceFeedForDerivative(_baseAsset);\\n        if (derivativePriceFeed != address(0)) {\\n            return __calcDerivativeValue(derivativePriceFeed, _baseAsset, _amount, _quoteAsset);\\n        }\\n\\n        revert(\\\"__calcAssetValue: Unsupported _baseAsset\\\");\\n    }\\n\\n    /// @dev Helper to calculate the value of a derivative in an arbitrary asset.\\n    /// Handles multiple underlying assets (e.g., Uniswap and Balancer pool tokens).\\n    /// Handles underlying assets that are also derivatives (e.g., a cDAI-ETH LP)\\n    function __calcDerivativeValue(\\n        address _derivativePriceFeed,\\n        address _derivative,\\n        uint256 _amount,\\n        address _quoteAsset\\n    ) private returns (uint256 value_, bool isValid_) {\\n        (address[] memory underlyings, uint256[] memory underlyingAmounts) = IDerivativePriceFeed(\\n            _derivativePriceFeed\\n        )\\n            .calcUnderlyingValues(_derivative, _amount);\\n\\n        require(underlyings.length > 0, \\\"__calcDerivativeValue: No underlyings\\\");\\n        require(\\n            underlyings.length == underlyingAmounts.length,\\n            \\\"__calcDerivativeValue: Arrays unequal lengths\\\"\\n        );\\n\\n        // Let validity be negated if any of the underlying value calculations are invalid\\n        isValid_ = true;\\n        for (uint256 i = 0; i < underlyings.length; i++) {\\n            (uint256 underlyingValue, bool underlyingValueIsValid) = __calcAssetValue(\\n                underlyings[i],\\n                underlyingAmounts[i],\\n                _quoteAsset\\n            );\\n\\n            if (!underlyingValueIsValid) {\\n                isValid_ = false;\\n            }\\n            value_ = value_.add(underlyingValue);\\n        }\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the `AGGREGATED_DERIVATIVE_PRICE_FEED` variable\\n    /// @return aggregatedDerivativePriceFeed_ The `AGGREGATED_DERIVATIVE_PRICE_FEED` variable value\\n    function getAggregatedDerivativePriceFeed()\\n        external\\n        view\\n        returns (address aggregatedDerivativePriceFeed_)\\n    {\\n        return AGGREGATED_DERIVATIVE_PRICE_FEED;\\n    }\\n\\n    /// @notice Gets the `PRIMITIVE_PRICE_FEED` variable\\n    /// @return primitivePriceFeed_ The `PRIMITIVE_PRICE_FEED` variable value\\n    function getPrimitivePriceFeed() external view returns (address primitivePriceFeed_) {\\n        return PRIMITIVE_PRICE_FEED;\\n    }\\n}\\n\",\"keccak256\":\"0x6c33705c2d4caa62fb8d273482f9d0130ab5864161709a08b8eb7b97dfc3a16b\",\"license\":\"GPL-3.0\"},\"contracts/release/interfaces/IUniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IUniswapV2Factory Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Minimal interface for our interactions with the Uniswap V2's Factory contract\\ninterface IUniswapV2Factory {\\n    function feeTo() external view returns (address);\\n\\n    function getPair(address, address) external view returns (address);\\n}\\n\",\"keccak256\":\"0x644fd15db1e38d724d81d3af48f5141698947fcfc36623f1270fe4d817c4dbef\",\"license\":\"GPL-3.0\"},\"contracts/release/interfaces/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IUniswapV2Pair Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Minimal interface for our interactions with the Uniswap V2's Pair contract\\ninterface IUniswapV2Pair {\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112,\\n            uint112,\\n            uint32\\n        );\\n\\n    function kLast() external view returns (uint256);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function totalSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb9c7a1802e5c9e522c7dee20b0511bb55ccc600aef480083f4a6980c9d02c06c\",\"license\":\"GPL-3.0\"},\"contracts/release/utils/MathHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n/// @title MathHelpers Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Helper functions for common math operations\\nabstract contract MathHelpers {\\n    using SafeMath for uint256;\\n\\n    /// @dev Calculates a proportional value relative to a known ratio\\n    function __calcRelativeQuantity(\\n        uint256 _quantity1,\\n        uint256 _quantity2,\\n        uint256 _relativeQuantity1\\n    ) internal pure returns (uint256 relativeQuantity2_) {\\n        return _relativeQuantity1.mul(_quantity2).div(_quantity1);\\n    }\\n\\n    /// @dev Calculates a rate normalized to 10^18 precision,\\n    /// for given base and quote asset decimals and amounts\\n    function __calcNormalizedRate(\\n        uint256 _baseAssetDecimals,\\n        uint256 _baseAssetAmount,\\n        uint256 _quoteAssetDecimals,\\n        uint256 _quoteAssetAmount\\n    ) internal pure returns (uint256 normalizedRate_) {\\n        return\\n            _quoteAssetAmount.mul(10**_baseAssetDecimals.add(18)).div(\\n                _baseAssetAmount.mul(10**_quoteAssetDecimals)\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xbd048b7fa2d2f2f716812b722ee3b60e759a623f8564ddae15274b4db8d9c0e7\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x6101206040523480156200001257600080fd5b506040516200287a3803806200287a83398101604081905262000035916200085d565b6001600160601b0319606087811b821660805286811b821660a05283811b821660c05285811b821660e05284901b16610100526200007581868662000081565b50505050505062000b39565b60005b8351811015620004a15760006001600160a01b0316848281518110620000a657fe5b60200260200101516001600160a01b03161415620000e15760405162461bcd60e51b8152600401620000d89062000a70565b60405180910390fd5b60006001600160a01b0316600080868481518110620000fc57fe5b6020908102919091018101516001600160a01b03908116835290820192909252604001600020541614620001445760405162461bcd60e51b8152600401620000d89062000a5e565b60008482815181106200015357fe5b602002602001015190506000816001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156200019957600080fd5b505afa158015620001ae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001d491906200083c565b90506000826001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b1580156200021257600080fd5b505afa15801562000227573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200024d91906200083c565b90506200025d86868484620004a7565b6200027c5760405162461bcd60e51b8152600401620000d89062000a82565b6040518060800160405280836001600160a01b03168152602001826001600160a01b03168152602001836001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015620002df57600080fd5b505afa158015620002f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200031a91906200092a565b60ff168152602001826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156200035c57600080fd5b505afa15801562000371573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200039791906200092a565b60ff16815250600080898781518110620003ad57fe5b6020908102919091018101516001600160a01b039081168352828201939093526040918201600020845181546001600160a01b03199081169186169190911782559185015160019091018054938601516060909601519390921693169290921760ff60a01b1916600160a01b60ff948516021760ff60a81b1916600160a81b939091169290920291909117905586518790859081106200044957fe5b60200260200101516001600160a01b03167f2d64d749034284f79591001c60e51eeab7a396decc5296df21e417306e9d92bf83836040516200048d92919062000a38565b60405180910390a250505060010162000084565b50505050565b604051634df48c7360e11b8152600090859085906001600160a01b03821690639be918e690620004dc90889060040162000a28565b60206040518083038186803b158015620004f557600080fd5b505afa1580156200050a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000530919062000909565b156200065957604051634df48c7360e11b81526001600160a01b03821690639be918e6906200056490879060040162000a28565b60206040518083038186803b1580156200057d57600080fd5b505afa15801562000592573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620005b8919062000909565b80620006415750604051634df48c7360e11b81526001600160a01b03831690639be918e690620005ed90879060040162000a28565b60206040518083038186803b1580156200060657600080fd5b505afa1580156200061b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000641919062000909565b1562000653576001925050506200077e565b62000777565b604051634df48c7360e11b81526001600160a01b03831690639be918e6906200068790889060040162000a28565b60206040518083038186803b158015620006a057600080fd5b505afa158015620006b5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006db919062000909565b8015620007655750604051634df48c7360e11b81526001600160a01b03821690639be918e6906200071190879060040162000a28565b60206040518083038186803b1580156200072a57600080fd5b505afa1580156200073f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000765919062000909565b1562000777576001925050506200077e565b6000925050505b949350505050565b8051620007938162000b09565b92915050565b600082601f830112620007ab57600080fd5b8151620007c2620007bc8262000abb565b62000a94565b91508181835260208401935060208101905083856020840282011115620007e857600080fd5b60005b8381101562000818578162000801888262000786565b8452506020928301929190910190600101620007eb565b5050505092915050565b8051620007938162000b23565b8051620007938162000b2e565b6000602082840312156200084f57600080fd5b60006200077e848462000786565b60008060008060008060c087890312156200087757600080fd5b600062000885898962000786565b96505060206200089889828a0162000786565b9550506040620008ab89828a0162000786565b9450506060620008be89828a0162000786565b9350506080620008d189828a0162000786565b92505060a08701516001600160401b03811115620008ee57600080fd5b620008fc89828a0162000799565b9150509295509295509295565b6000602082840312156200091c57600080fd5b60006200077e848462000822565b6000602082840312156200093d57600080fd5b60006200077e84846200082f565b620009568162000ae5565b82525050565b60006200096b60228362000adc565b7f5f5f616464506f6f6c546f6b656e733a2056616c756520616c72656164792073815261195d60f21b602082015260400192915050565b6000620009b160208362000adc565b7f5f5f616464506f6f6c546f6b656e733a20456d70747920706f6f6c546f6b656e815260200192915050565b6000620009ec60278362000adc565b7f5f5f616464506f6f6c546f6b656e733a20556e737570706f7274656420706f6f81526636103a37b5b2b760c91b602082015260400192915050565b602081016200079382846200094b565b6040810162000a4882856200094b565b62000a5760208301846200094b565b9392505050565b6020808252810162000793816200095c565b602080825281016200079381620009a2565b602080825281016200079381620009dd565b6040518181016001600160401b038111828210171562000ab357600080fd5b604052919050565b60006001600160401b0382111562000ad257600080fd5b5060209081020190565b90815260200190565b6000620007938262000af7565b151590565b6001600160a01b031690565b60ff1690565b62000b148162000ae5565b811462000b2057600080fd5b50565b62000b148162000af2565b62000b148162000b03565b60805160601c60a05160601c60c05160601c60e05160601c6101005160601c611ccf62000bab6000398061051e5280610afd5280610baf52508061028f52806102bd5280610a4052508061045d52806105425250806101b7528061026c52508061056852806105fe5250611ccf6000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063727212f611610071578063727212f61461012a578063875fb4b31461014b57806388cc58e414610153578063893d20e81461015b57806397c0ac87146101635780639be918e61461016b576100a9565b806301b453e5146100ae5780632d98a99b146100d857806332db4ed5146100ed57806349be72f31461010257806367e0e0761461010a575b600080fd5b6100c16100bc366004611575565b61018b565b6040516100cf929190611ae4565b60405180910390f35b6100e06101b5565b6040516100cf9190611ad6565b6101006100fb3660046115eb565b6101d9565b005b6100e06102bb565b61011d610118366004611575565b6102df565b6040516100cf9190611bfa565b61013d6101383660046115b1565b610347565b6040516100cf929190611b27565b6100e061051c565b6100e0610540565b6100e0610564565b6100e06105fc565b61017e610179366004611575565b610620565b6040516100cf9190611b4c565b6001600160a01b039081166000908152602081905260409020805460019091015490821692911690565b7f000000000000000000000000000000000000000000000000000000000000000090565b6101e1610564565b6001600160a01b0316336001600160a01b03161461021a5760405162461bcd60e51b815260040161021190611b6a565b60405180910390fd5b806102375760405162461bcd60e51b815260040161021190611bca565b6102b78282808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152507f000000000000000000000000000000000000000000000000000000000000000092507f000000000000000000000000000000000000000000000000000000000000000091506106409050565b5050565b7f000000000000000000000000000000000000000000000000000000000000000090565b6102e76114b4565b506001600160a01b038082166000908152602081815260409182902082516080810184528154851681526001909101549384169181019190915260ff600160a01b8404811692820192909252600160a81b9092041660608201525b919050565b6060806103526114b4565b506001600160a01b038481166000908152602081815260409182902082516080810184528154851681526001909101549384168183015260ff600160a01b8504811682850152600160a81b909404909316606080850191909152825160028082529181018452929091830190803683370190505092508060000151836000815181106103da57fe5b60200260200101906001600160a01b031690816001600160a01b03168152505080602001518360018151811061040c57fe5b60200260200101906001600160a01b031690816001600160a01b03168152505060008061045183600001518460200151856040015160ff16866060015160ff16610a39565b915091506000806104847f00000000000000000000000000000000000000000000000000000000000000008a8686610c67565b604080516002808252606082019092529294509092508160200160208202803683370190505095506104c8670de0b6b3a76400006104c28a85610c97565b90610cda565b866000815181106104d557fe5b60209081029190910101526104f6670de0b6b3a76400006104c28a84610c97565b8660018151811061050357fe5b60200260200101818152505050505050505b9250929050565b7f000000000000000000000000000000000000000000000000000000000000000090565b7f000000000000000000000000000000000000000000000000000000000000000090565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663893d20e86040518163ffffffff1660e01b815260040160206040518083038186803b1580156105bf57600080fd5b505afa1580156105d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f79190611593565b905090565b7f000000000000000000000000000000000000000000000000000000000000000090565b6001600160a01b0390811660009081526020819052604090205416151590565b60005b8351811015610a335760006001600160a01b031684828151811061066357fe5b60200260200101516001600160a01b031614156106925760405162461bcd60e51b815260040161021190611bda565b60006001600160a01b03166000808684815181106106ac57fe5b6020908102919091018101516001600160a01b039081168352908201929092526040016000205416146106f15760405162461bcd60e51b815260040161021190611b5a565b60008482815181106106ff57fe5b602002602001015190506000816001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561074457600080fd5b505afa158015610758573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077c9190611593565b90506000826001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b1580156107b957600080fd5b505afa1580156107cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f19190611593565b90506107ff86868484610d0c565b61081b5760405162461bcd60e51b815260040161021190611bea565b6040518060800160405280836001600160a01b03168152602001826001600160a01b03168152602001836001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561087d57600080fd5b505afa158015610891573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b591906116e6565b60ff168152602001826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156108f657600080fd5b505afa15801561090a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092e91906116e6565b60ff1681525060008089878151811061094357fe5b6020908102919091018101516001600160a01b039081168352828201939093526040918201600020845181546001600160a01b03199081169186169190911782559185015160019091018054938601516060909601519390921693169290921760ff60a01b1916600160a01b60ff948516021760ff60a81b1916600160a81b939091169290920291909117905586518790859081106109de57fe5b60200260200101516001600160a01b03167f2d64d749034284f79591001c60e51eeab7a396decc5296df21e417306e9d92bf8383604051610a20929190611ae4565b60405180910390a2505050600101610643565b50505050565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639be918e6886040518263ffffffff1660e01b8152600401610a8a9190611ad6565b60206040518083038186803b158015610aa257600080fd5b505afa158015610ab6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ada919061162d565b15610b9157604051632633f08360e11b8152600a85900a92506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690634c67e10690610b3690899086908c90600401611aff565b6040805180830381600087803b158015610b4f57600080fd5b505af1158015610b63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8791906116b6565b9093509050610c3f565b604051632633f08360e11b8152600a86900a93506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690634c67e10690610be8908a9087908b90600401611aff565b6040805180830381600087803b158015610c0157600080fd5b505af1158015610c15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3991906116b6565b90925090505b80610c5c5760405162461bcd60e51b815260040161021190611bba565b505b94509492505050565b600080600080610c78878787610fc5565b91509150610c88888884846110d4565b93509350505094509492505050565b600082610ca657506000610cd4565b82820282848281610cb357fe5b0414610cd15760405162461bcd60e51b815260040161021190611baa565b90505b92915050565b6000808211610cfb5760405162461bcd60e51b815260040161021190611b9a565b818381610d0457fe5b049392505050565b604051634df48c7360e11b8152600090859085906001600160a01b03821690639be918e690610d3f908890600401611ad6565b60206040518083038186803b158015610d5757600080fd5b505afa158015610d6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8f919061162d565b15610ea757604051634df48c7360e11b81526001600160a01b03821690639be918e690610dc0908790600401611ad6565b60206040518083038186803b158015610dd857600080fd5b505afa158015610dec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e10919061162d565b80610e925750604051634df48c7360e11b81526001600160a01b03831690639be918e690610e42908790600401611ad6565b60206040518083038186803b158015610e5a57600080fd5b505afa158015610e6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e92919061162d565b15610ea257600192505050610fbd565b610fb6565b604051634df48c7360e11b81526001600160a01b03831690639be918e690610ed3908890600401611ad6565b60206040518083038186803b158015610eeb57600080fd5b505afa158015610eff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f23919061162d565b8015610fa65750604051634df48c7360e11b81526001600160a01b03821690639be918e690610f56908790600401611ad6565b60206040518083038186803b158015610f6e57600080fd5b505afa158015610f82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa6919061162d565b15610fb657600192505050610fbd565b6000925050505b949350505050565b600080846001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561100157600080fd5b505afa158015611015573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611039919061164b565b506001600160701b03918216935016905060008061105986868686611301565b91509150806000141561106d5750506110cc565b81156110a05760006110808286866113cc565b905061108c8583611416565b9450611098848261143b565b9350506110c9565b60006110ad8285876113cc565b90506110b98483611416565b93506110c5858261143b565b9450505b50505b935093915050565b60008060008590506000816001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561111757600080fd5b505afa15801561112b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114f9190611698565b905060006001600160a01b0316886001600160a01b031663017e7e586040518163ffffffff1660e01b815260040160206040518083038186803b15801561119557600080fd5b505afa1580156111a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111cd9190611593565b6001600160a01b0316146112d5576000826001600160a01b0316637464fc3d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561121657600080fd5b505afa15801561122a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124e9190611698565b905080156112d357600061126a6112658989610c97565b611463565b9050600061127783611463565b9050808211156112d0576000611297611290848461143b565b8690610c97565b905060006112b0836112aa866005610c97565b90611416565b905060006112be8383610cda565b90506112ca8782611416565b96505050505b50505b505b6112eb816104c288670de0b6b3a7640000610c97565b610c88826104c288670de0b6b3a7640000610c97565b60008085611313846104c28789610c97565b109150600080831561136457611349611265611331896103e5610c97565b6104c26103e86113438d818d8d610c97565b90610c97565b915061135d6103e56104c2886103e8610c97565b905061139f565b6113886112656113768a6103e5610c97565b6104c26103e86113438c818d8d610c97565b915061139c6103e56104c2876103e8610c97565b90505b808210156113b557600080935093505050610c5e565b6113bf828261143b565b9250505094509492505050565b6000806113db856103e5610c97565b905060006113e98285610c97565b905060006113fd836112aa886103e8610c97565b90506114098282610cda565b93505050505b9392505050565b600082820183811015610cd15760405162461bcd60e51b815260040161021190611b7a565b60008282111561145d5760405162461bcd60e51b815260040161021190611b8a565b50900390565b600060038211156114a6575080600160028204015b818110156114a05780915060028182858161148f57fe5b04018161149857fe5b049050611478565b50610342565b811561034257506001919050565b60408051608081018252600080825260208201819052918101829052606081019190915290565b8035610cd481611c55565b8051610cd481611c55565b60008083601f84011261150357600080fd5b50813567ffffffffffffffff81111561151b57600080fd5b60208301915083602082028301111561051557600080fd5b8051610cd481611c6c565b8051610cd481611c75565b8035610cd481611c7e565b8051610cd481611c7e565b8051610cd481611c87565b8051610cd481611c90565b60006020828403121561158757600080fd5b6000610fbd84846114db565b6000602082840312156115a557600080fd5b6000610fbd84846114e6565b600080604083850312156115c457600080fd5b60006115d085856114db565b92505060206115e185828601611549565b9150509250929050565b600080602083850312156115fe57600080fd5b823567ffffffffffffffff81111561161557600080fd5b611621858286016114f1565b92509250509250929050565b60006020828403121561163f57600080fd5b6000610fbd8484611533565b60008060006060848603121561166057600080fd5b600061166c868661153e565b935050602061167d8682870161153e565b925050604061168e8682870161155f565b9150509250925092565b6000602082840312156116aa57600080fd5b6000610fbd8484611554565b600080604083850312156116c957600080fd5b60006116d58585611554565b92505060206115e185828601611533565b6000602082840312156116f857600080fd5b6000610fbd848461156a565b60006117108383611724565b505060200190565b60006117108383611ac4565b61172d81611c1b565b82525050565b600061173e82611c0e565b6117488185611c12565b935061175383611c08565b8060005b8381101561178157815161176b8882611704565b975061177683611c08565b925050600101611757565b509495945050505050565b600061179782611c0e565b6117a18185611c12565b93506117ac83611c08565b8060005b838110156117815781516117c48882611718565b97506117cf83611c08565b9250506001016117b0565b61172d81611c26565b60006117f0602283611c12565b7f5f5f616464506f6f6c546f6b656e733a2056616c756520616c72656164792073815261195d60f21b602082015260400192915050565b6000611834604983611c12565b7f6f6e6c7946756e644465706c6f7965724f776e65723a204f6e6c79207468652081527f46756e644465706c6f796572206f776e65722063616e2063616c6c207468697360208201526810333ab731ba34b7b760b91b604082015260600192915050565b60006118a5601b83611c12565b7f536166654d6174683a206164646974696f6e206f766572666c6f770000000000815260200192915050565b60006118de601e83611c12565b7f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815260200192915050565b6000611917601a83611c12565b7f536166654d6174683a206469766973696f6e206279207a65726f000000000000815260200192915050565b6000611950602183611c12565b7f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f8152607760f81b602082015260400192915050565b6000611993601f83611c12565b7f5f5f63616c6354727573746564526174653a20496e76616c6964207261746500815260200192915050565b60006119cc602083611c12565b7f616464506f6f6c546f6b656e733a20456d707479205f706f6f6c546f6b656e73815260200192915050565b6000611a05602083611c12565b7f5f5f616464506f6f6c546f6b656e733a20456d70747920706f6f6c546f6b656e815260200192915050565b6000611a3e602783611c12565b7f5f5f616464506f6f6c546f6b656e733a20556e737570706f7274656420706f6f81526636103a37b5b2b760c91b602082015260400192915050565b80516080830190611a8b8482611724565b506020820151611a9e6020850182611724565b506040820151611ab16040850182611acd565b506060820151610a336060850182611acd565b61172d81611c43565b61172d81611c4f565b60208101610cd48284611724565b60408101611af28285611724565b61140f6020830184611724565b60608101611b0d8286611724565b611b1a6020830185611ac4565b610fbd6040830184611724565b60408082528101611b388185611733565b90508181036020830152610fbd818461178c565b60208101610cd482846117da565b60208082528101610cd4816117e3565b60208082528101610cd481611827565b60208082528101610cd481611898565b60208082528101610cd4816118d1565b60208082528101610cd48161190a565b60208082528101610cd481611943565b60208082528101610cd481611986565b60208082528101610cd4816119bf565b60208082528101610cd4816119f8565b60208082528101610cd481611a31565b60808101610cd48284611a7a565b60200190565b5190565b90815260200190565b6000610cd482611c37565b151590565b6001600160701b031690565b6001600160a01b031690565b90565b63ffffffff1690565b60ff1690565b611c5e81611c1b565b8114611c6957600080fd5b50565b611c5e81611c26565b611c5e81611c2b565b611c5e81611c43565b611c5e81611c46565b611c5e81611c4f56fea26469706673582212205d482d202649efb2fd6ab60b9e867e87bbe180e227e5e84ff073ed572ca808e164736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c8063727212f611610071578063727212f61461012a578063875fb4b31461014b57806388cc58e414610153578063893d20e81461015b57806397c0ac87146101635780639be918e61461016b576100a9565b806301b453e5146100ae5780632d98a99b146100d857806332db4ed5146100ed57806349be72f31461010257806367e0e0761461010a575b600080fd5b6100c16100bc366004611575565b61018b565b6040516100cf929190611ae4565b60405180910390f35b6100e06101b5565b6040516100cf9190611ad6565b6101006100fb3660046115eb565b6101d9565b005b6100e06102bb565b61011d610118366004611575565b6102df565b6040516100cf9190611bfa565b61013d6101383660046115b1565b610347565b6040516100cf929190611b27565b6100e061051c565b6100e0610540565b6100e0610564565b6100e06105fc565b61017e610179366004611575565b610620565b6040516100cf9190611b4c565b6001600160a01b039081166000908152602081905260409020805460019091015490821692911690565b7f000000000000000000000000000000000000000000000000000000000000000090565b6101e1610564565b6001600160a01b0316336001600160a01b03161461021a5760405162461bcd60e51b815260040161021190611b6a565b60405180910390fd5b806102375760405162461bcd60e51b815260040161021190611bca565b6102b78282808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152507f000000000000000000000000000000000000000000000000000000000000000092507f000000000000000000000000000000000000000000000000000000000000000091506106409050565b5050565b7f000000000000000000000000000000000000000000000000000000000000000090565b6102e76114b4565b506001600160a01b038082166000908152602081815260409182902082516080810184528154851681526001909101549384169181019190915260ff600160a01b8404811692820192909252600160a81b9092041660608201525b919050565b6060806103526114b4565b506001600160a01b038481166000908152602081815260409182902082516080810184528154851681526001909101549384168183015260ff600160a01b8504811682850152600160a81b909404909316606080850191909152825160028082529181018452929091830190803683370190505092508060000151836000815181106103da57fe5b60200260200101906001600160a01b031690816001600160a01b03168152505080602001518360018151811061040c57fe5b60200260200101906001600160a01b031690816001600160a01b03168152505060008061045183600001518460200151856040015160ff16866060015160ff16610a39565b915091506000806104847f00000000000000000000000000000000000000000000000000000000000000008a8686610c67565b604080516002808252606082019092529294509092508160200160208202803683370190505095506104c8670de0b6b3a76400006104c28a85610c97565b90610cda565b866000815181106104d557fe5b60209081029190910101526104f6670de0b6b3a76400006104c28a84610c97565b8660018151811061050357fe5b60200260200101818152505050505050505b9250929050565b7f000000000000000000000000000000000000000000000000000000000000000090565b7f000000000000000000000000000000000000000000000000000000000000000090565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663893d20e86040518163ffffffff1660e01b815260040160206040518083038186803b1580156105bf57600080fd5b505afa1580156105d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f79190611593565b905090565b7f000000000000000000000000000000000000000000000000000000000000000090565b6001600160a01b0390811660009081526020819052604090205416151590565b60005b8351811015610a335760006001600160a01b031684828151811061066357fe5b60200260200101516001600160a01b031614156106925760405162461bcd60e51b815260040161021190611bda565b60006001600160a01b03166000808684815181106106ac57fe5b6020908102919091018101516001600160a01b039081168352908201929092526040016000205416146106f15760405162461bcd60e51b815260040161021190611b5a565b60008482815181106106ff57fe5b602002602001015190506000816001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561074457600080fd5b505afa158015610758573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077c9190611593565b90506000826001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b1580156107b957600080fd5b505afa1580156107cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f19190611593565b90506107ff86868484610d0c565b61081b5760405162461bcd60e51b815260040161021190611bea565b6040518060800160405280836001600160a01b03168152602001826001600160a01b03168152602001836001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561087d57600080fd5b505afa158015610891573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b591906116e6565b60ff168152602001826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156108f657600080fd5b505afa15801561090a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092e91906116e6565b60ff1681525060008089878151811061094357fe5b6020908102919091018101516001600160a01b039081168352828201939093526040918201600020845181546001600160a01b03199081169186169190911782559185015160019091018054938601516060909601519390921693169290921760ff60a01b1916600160a01b60ff948516021760ff60a81b1916600160a81b939091169290920291909117905586518790859081106109de57fe5b60200260200101516001600160a01b03167f2d64d749034284f79591001c60e51eeab7a396decc5296df21e417306e9d92bf8383604051610a20929190611ae4565b60405180910390a2505050600101610643565b50505050565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639be918e6886040518263ffffffff1660e01b8152600401610a8a9190611ad6565b60206040518083038186803b158015610aa257600080fd5b505afa158015610ab6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ada919061162d565b15610b9157604051632633f08360e11b8152600a85900a92506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690634c67e10690610b3690899086908c90600401611aff565b6040805180830381600087803b158015610b4f57600080fd5b505af1158015610b63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8791906116b6565b9093509050610c3f565b604051632633f08360e11b8152600a86900a93506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690634c67e10690610be8908a9087908b90600401611aff565b6040805180830381600087803b158015610c0157600080fd5b505af1158015610c15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3991906116b6565b90925090505b80610c5c5760405162461bcd60e51b815260040161021190611bba565b505b94509492505050565b600080600080610c78878787610fc5565b91509150610c88888884846110d4565b93509350505094509492505050565b600082610ca657506000610cd4565b82820282848281610cb357fe5b0414610cd15760405162461bcd60e51b815260040161021190611baa565b90505b92915050565b6000808211610cfb5760405162461bcd60e51b815260040161021190611b9a565b818381610d0457fe5b049392505050565b604051634df48c7360e11b8152600090859085906001600160a01b03821690639be918e690610d3f908890600401611ad6565b60206040518083038186803b158015610d5757600080fd5b505afa158015610d6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8f919061162d565b15610ea757604051634df48c7360e11b81526001600160a01b03821690639be918e690610dc0908790600401611ad6565b60206040518083038186803b158015610dd857600080fd5b505afa158015610dec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e10919061162d565b80610e925750604051634df48c7360e11b81526001600160a01b03831690639be918e690610e42908790600401611ad6565b60206040518083038186803b158015610e5a57600080fd5b505afa158015610e6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e92919061162d565b15610ea257600192505050610fbd565b610fb6565b604051634df48c7360e11b81526001600160a01b03831690639be918e690610ed3908890600401611ad6565b60206040518083038186803b158015610eeb57600080fd5b505afa158015610eff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f23919061162d565b8015610fa65750604051634df48c7360e11b81526001600160a01b03821690639be918e690610f56908790600401611ad6565b60206040518083038186803b158015610f6e57600080fd5b505afa158015610f82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa6919061162d565b15610fb657600192505050610fbd565b6000925050505b949350505050565b600080846001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561100157600080fd5b505afa158015611015573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611039919061164b565b506001600160701b03918216935016905060008061105986868686611301565b91509150806000141561106d5750506110cc565b81156110a05760006110808286866113cc565b905061108c8583611416565b9450611098848261143b565b9350506110c9565b60006110ad8285876113cc565b90506110b98483611416565b93506110c5858261143b565b9450505b50505b935093915050565b60008060008590506000816001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561111757600080fd5b505afa15801561112b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114f9190611698565b905060006001600160a01b0316886001600160a01b031663017e7e586040518163ffffffff1660e01b815260040160206040518083038186803b15801561119557600080fd5b505afa1580156111a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111cd9190611593565b6001600160a01b0316146112d5576000826001600160a01b0316637464fc3d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561121657600080fd5b505afa15801561122a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124e9190611698565b905080156112d357600061126a6112658989610c97565b611463565b9050600061127783611463565b9050808211156112d0576000611297611290848461143b565b8690610c97565b905060006112b0836112aa866005610c97565b90611416565b905060006112be8383610cda565b90506112ca8782611416565b96505050505b50505b505b6112eb816104c288670de0b6b3a7640000610c97565b610c88826104c288670de0b6b3a7640000610c97565b60008085611313846104c28789610c97565b109150600080831561136457611349611265611331896103e5610c97565b6104c26103e86113438d818d8d610c97565b90610c97565b915061135d6103e56104c2886103e8610c97565b905061139f565b6113886112656113768a6103e5610c97565b6104c26103e86113438c818d8d610c97565b915061139c6103e56104c2876103e8610c97565b90505b808210156113b557600080935093505050610c5e565b6113bf828261143b565b9250505094509492505050565b6000806113db856103e5610c97565b905060006113e98285610c97565b905060006113fd836112aa886103e8610c97565b90506114098282610cda565b93505050505b9392505050565b600082820183811015610cd15760405162461bcd60e51b815260040161021190611b7a565b60008282111561145d5760405162461bcd60e51b815260040161021190611b8a565b50900390565b600060038211156114a6575080600160028204015b818110156114a05780915060028182858161148f57fe5b04018161149857fe5b049050611478565b50610342565b811561034257506001919050565b60408051608081018252600080825260208201819052918101829052606081019190915290565b8035610cd481611c55565b8051610cd481611c55565b60008083601f84011261150357600080fd5b50813567ffffffffffffffff81111561151b57600080fd5b60208301915083602082028301111561051557600080fd5b8051610cd481611c6c565b8051610cd481611c75565b8035610cd481611c7e565b8051610cd481611c7e565b8051610cd481611c87565b8051610cd481611c90565b60006020828403121561158757600080fd5b6000610fbd84846114db565b6000602082840312156115a557600080fd5b6000610fbd84846114e6565b600080604083850312156115c457600080fd5b60006115d085856114db565b92505060206115e185828601611549565b9150509250929050565b600080602083850312156115fe57600080fd5b823567ffffffffffffffff81111561161557600080fd5b611621858286016114f1565b92509250509250929050565b60006020828403121561163f57600080fd5b6000610fbd8484611533565b60008060006060848603121561166057600080fd5b600061166c868661153e565b935050602061167d8682870161153e565b925050604061168e8682870161155f565b9150509250925092565b6000602082840312156116aa57600080fd5b6000610fbd8484611554565b600080604083850312156116c957600080fd5b60006116d58585611554565b92505060206115e185828601611533565b6000602082840312156116f857600080fd5b6000610fbd848461156a565b60006117108383611724565b505060200190565b60006117108383611ac4565b61172d81611c1b565b82525050565b600061173e82611c0e565b6117488185611c12565b935061175383611c08565b8060005b8381101561178157815161176b8882611704565b975061177683611c08565b925050600101611757565b509495945050505050565b600061179782611c0e565b6117a18185611c12565b93506117ac83611c08565b8060005b838110156117815781516117c48882611718565b97506117cf83611c08565b9250506001016117b0565b61172d81611c26565b60006117f0602283611c12565b7f5f5f616464506f6f6c546f6b656e733a2056616c756520616c72656164792073815261195d60f21b602082015260400192915050565b6000611834604983611c12565b7f6f6e6c7946756e644465706c6f7965724f776e65723a204f6e6c79207468652081527f46756e644465706c6f796572206f776e65722063616e2063616c6c207468697360208201526810333ab731ba34b7b760b91b604082015260600192915050565b60006118a5601b83611c12565b7f536166654d6174683a206164646974696f6e206f766572666c6f770000000000815260200192915050565b60006118de601e83611c12565b7f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815260200192915050565b6000611917601a83611c12565b7f536166654d6174683a206469766973696f6e206279207a65726f000000000000815260200192915050565b6000611950602183611c12565b7f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f8152607760f81b602082015260400192915050565b6000611993601f83611c12565b7f5f5f63616c6354727573746564526174653a20496e76616c6964207261746500815260200192915050565b60006119cc602083611c12565b7f616464506f6f6c546f6b656e733a20456d707479205f706f6f6c546f6b656e73815260200192915050565b6000611a05602083611c12565b7f5f5f616464506f6f6c546f6b656e733a20456d70747920706f6f6c546f6b656e815260200192915050565b6000611a3e602783611c12565b7f5f5f616464506f6f6c546f6b656e733a20556e737570706f7274656420706f6f81526636103a37b5b2b760c91b602082015260400192915050565b80516080830190611a8b8482611724565b506020820151611a9e6020850182611724565b506040820151611ab16040850182611acd565b506060820151610a336060850182611acd565b61172d81611c43565b61172d81611c4f565b60208101610cd48284611724565b60408101611af28285611724565b61140f6020830184611724565b60608101611b0d8286611724565b611b1a6020830185611ac4565b610fbd6040830184611724565b60408082528101611b388185611733565b90508181036020830152610fbd818461178c565b60208101610cd482846117da565b60208082528101610cd4816117e3565b60208082528101610cd481611827565b60208082528101610cd481611898565b60208082528101610cd4816118d1565b60208082528101610cd48161190a565b60208082528101610cd481611943565b60208082528101610cd481611986565b60208082528101610cd4816119bf565b60208082528101610cd4816119f8565b60208082528101610cd481611a31565b60808101610cd48284611a7a565b60200190565b5190565b90815260200190565b6000610cd482611c37565b151590565b6001600160701b031690565b6001600160a01b031690565b90565b63ffffffff1690565b60ff1690565b611c5e81611c1b565b8114611c6957600080fd5b50565b611c5e81611c26565b611c5e81611c2b565b611c5e81611c43565b611c5e81611c46565b611c5e81611c4f56fea26469706673582212205d482d202649efb2fd6ab60b9e867e87bbe180e227e5e84ff073ed572ca808e164736f6c634300060c0033",
  "devdoc": {
    "author": "Enzyme Council <security@enzyme.finance>",
    "kind": "dev",
    "methods": {
      "addPoolTokens(address[])": {
        "params": {
          "_poolTokens": "Uniswap pool tokens to add"
        }
      },
      "calcUnderlyingValues(address,uint256)": {
        "params": {
          "_derivative": "The derivative to convert",
          "_derivativeAmount": "The amount of the derivative to convert"
        },
        "returns": {
          "underlyingAmounts_": "The amount of each underlying asset for the equivalent derivative amount",
          "underlyings_": "The underlying assets for the _derivative"
        }
      },
      "getDerivativePriceFeed()": {
        "returns": {
          "derivativePriceFeed_": "The `DERIVATIVE_PRICE_FEED` variable value"
        }
      },
      "getFactory()": {
        "returns": {
          "factory_": "The `FACTORY` variable value"
        }
      },
      "getFundDeployer()": {
        "returns": {
          "fundDeployer_": "The `FUND_DEPLOYER` variable value"
        }
      },
      "getOwner()": {
        "details": "Ownership is deferred to the owner of the FundDeployer contract",
        "returns": {
          "owner_": "The owner"
        }
      },
      "getPoolTokenInfo(address)": {
        "params": {
          "_poolToken": "The pool token for which to get the `PoolTokenInfo`"
        },
        "returns": {
          "poolTokenInfo_": "The `PoolTokenInfo` value"
        }
      },
      "getPoolTokenUnderlyings(address)": {
        "params": {
          "_poolToken": "The pool token for which to get its underlyings"
        },
        "returns": {
          "token0_": "The UniswapV2Pair.token0 value",
          "token1_": "The UniswapV2Pair.token1 value"
        }
      },
      "getPrimitivePriceFeed()": {
        "returns": {
          "primitivePriceFeed_": "The `PRIMITIVE_PRICE_FEED` variable value"
        }
      },
      "getValueInterpreter()": {
        "returns": {
          "valueInterpreter_": "The `VALUE_INTERPRETER` variable value"
        }
      },
      "isSupportedAsset(address)": {
        "params": {
          "_asset": "The asset to check"
        },
        "returns": {
          "isSupported_": "True if the asset is supported"
        }
      }
    },
    "title": "UniswapV2PoolPriceFeed Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addPoolTokens(address[])": {
        "notice": "Adds Uniswap pool tokens to the price feed"
      },
      "calcUnderlyingValues(address,uint256)": {
        "notice": "Converts a given amount of a derivative to its underlying asset values"
      },
      "getDerivativePriceFeed()": {
        "notice": "Gets the `DERIVATIVE_PRICE_FEED` variable value"
      },
      "getFactory()": {
        "notice": "Gets the `FACTORY` variable value"
      },
      "getFundDeployer()": {
        "notice": "Gets the `FUND_DEPLOYER` variable"
      },
      "getOwner()": {
        "notice": "Gets the owner of this contract"
      },
      "getPoolTokenInfo(address)": {
        "notice": "Gets the `PoolTokenInfo` for a given pool token"
      },
      "getPoolTokenUnderlyings(address)": {
        "notice": "Gets the underlyings for a given pool token"
      },
      "getPrimitivePriceFeed()": {
        "notice": "Gets the `PRIMITIVE_PRICE_FEED` variable value"
      },
      "getValueInterpreter()": {
        "notice": "Gets the `VALUE_INTERPRETER` variable value"
      },
      "isSupportedAsset(address)": {
        "notice": "Checks if an asset is supported by the price feed"
      }
    },
    "notice": "Price feed for Uniswap lending pool tokens",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 40066,
        "contract": "contracts/release/infrastructure/price-feeds/derivatives/feeds/UniswapV2PoolPriceFeed.sol:UniswapV2PoolPriceFeed",
        "label": "poolTokenToInfo",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_struct(PoolTokenInfo)40049_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(PoolTokenInfo)40049_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct UniswapV2PoolPriceFeed.PoolTokenInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(PoolTokenInfo)40049_storage"
      },
      "t_struct(PoolTokenInfo)40049_storage": {
        "encoding": "inplace",
        "label": "struct UniswapV2PoolPriceFeed.PoolTokenInfo",
        "members": [
          {
            "astId": 40042,
            "contract": "contracts/release/infrastructure/price-feeds/derivatives/feeds/UniswapV2PoolPriceFeed.sol:UniswapV2PoolPriceFeed",
            "label": "token0",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 40044,
            "contract": "contracts/release/infrastructure/price-feeds/derivatives/feeds/UniswapV2PoolPriceFeed.sol:UniswapV2PoolPriceFeed",
            "label": "token1",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 40046,
            "contract": "contracts/release/infrastructure/price-feeds/derivatives/feeds/UniswapV2PoolPriceFeed.sol:UniswapV2PoolPriceFeed",
            "label": "token0Decimals",
            "offset": 20,
            "slot": "1",
            "type": "t_uint8"
          },
          {
            "astId": 40048,
            "contract": "contracts/release/infrastructure/price-feeds/derivatives/feeds/UniswapV2PoolPriceFeed.sol:UniswapV2PoolPriceFeed",
            "label": "token1Decimals",
            "offset": 21,
            "slot": "1",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}