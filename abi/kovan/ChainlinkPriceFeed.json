{
  "address": "0x24fDD4a3287EF99F67D28533C98901A8c683Bace",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fundDeployer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wethToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ethUsdAggregator",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_primitives",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_aggregators",
          "type": "address[]"
        },
        {
          "internalType": "enum ChainlinkPriceFeed.RateAsset[]",
          "name": "_rateAssets",
          "type": "uint8[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "prevEthUsdAggregator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "nextEthUsdAggregator",
          "type": "address"
        }
      ],
      "name": "EthUsdAggregatorSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "primitive",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "aggregator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum ChainlinkPriceFeed.RateAsset",
          "name": "rateAsset",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unit",
          "type": "uint256"
        }
      ],
      "name": "PrimitiveAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "primitive",
          "type": "address"
        }
      ],
      "name": "PrimitiveRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "primitive",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "prevAggregator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "nextAggregator",
          "type": "address"
        }
      ],
      "name": "PrimitiveUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "primitive",
          "type": "address"
        }
      ],
      "name": "StalePrimitiveRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prevStaleRateThreshold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nextStaleRateThreshold",
          "type": "uint256"
        }
      ],
      "name": "StaleRateThresholdSet",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_primitives",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_aggregators",
          "type": "address[]"
        },
        {
          "internalType": "enum ChainlinkPriceFeed.RateAsset[]",
          "name": "_rateAssets",
          "type": "uint8[]"
        }
      ],
      "name": "addPrimitives",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_baseAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_baseAssetAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_quoteAsset",
          "type": "address"
        }
      ],
      "name": "calcCanonicalValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "quoteAssetAmount_",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isValid_",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_baseAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_baseAssetAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_quoteAsset",
          "type": "address"
        }
      ],
      "name": "calcLiveValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "quoteAssetAmount_",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isValid_",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_primitive",
          "type": "address"
        }
      ],
      "name": "getAggregatorInfoForPrimitive",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "aggregator",
              "type": "address"
            },
            {
              "internalType": "enum ChainlinkPriceFeed.RateAsset",
              "name": "rateAsset",
              "type": "uint8"
            }
          ],
          "internalType": "struct ChainlinkPriceFeed.AggregatorInfo",
          "name": "aggregatorInfo_",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEthUsdAggregator",
      "outputs": [
        {
          "internalType": "address",
          "name": "ethUsdAggregator_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFundDeployer",
      "outputs": [
        {
          "internalType": "address",
          "name": "fundDeployer_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_primitive",
          "type": "address"
        }
      ],
      "name": "getRateAssetForPrimitive",
      "outputs": [
        {
          "internalType": "enum ChainlinkPriceFeed.RateAsset",
          "name": "rateAsset_",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStaleRateThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "staleRateThreshold_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_primitive",
          "type": "address"
        }
      ],
      "name": "getUnitForPrimitive",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "unit_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWethToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "wethToken_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "isSupportedAsset",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isSupported_",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_aggregator",
          "type": "address"
        }
      ],
      "name": "rateIsStale",
      "outputs": [
        {
          "internalType": "bool",
          "name": "rateIsStale_",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_primitives",
          "type": "address[]"
        }
      ],
      "name": "removePrimitives",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_primitives",
          "type": "address[]"
        }
      ],
      "name": "removeStalePrimitives",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nextEthUsdAggregator",
          "type": "address"
        }
      ],
      "name": "setEthUsdAggregator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_nextStaleRateThreshold",
          "type": "uint256"
        }
      ],
      "name": "setStaleRateThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_primitives",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_aggregators",
          "type": "address[]"
        }
      ],
      "name": "updatePrimitives",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7957ef4d828617682771a983f50737ee5c517b3e7444abb5160fc90beff586b1",
  "receipt": {
    "to": null,
    "from": "0xc09eAC15f9Ba6462e8E4612af7C431E1cfe08b87",
    "contractAddress": "0x24fDD4a3287EF99F67D28533C98901A8c683Bace",
    "transactionIndex": 3,
    "gasUsed": "3287448",
    "logsBloom": "0x00000000000000000810008000100040000000100000000000100000000000000000000000000020008010000000800000000200000000000000000800000000000000000000000000000a2001000000000000000000000000400004000000082000000000000000800400000000000001800000008000000800000000000000020000000c000000000010000000000400010804000000040001000000080000000000400800000000044000000000000000040000000200000008000000000008002800000500000010000000400400001000000000000008000000400002010000001000000000001000020000100000200080000000000001000000000000",
    "blockHash": "0x7c41c83687c966f316fd341cbdb2343733e540abe4fd4e0823113921b10f29fd",
    "transactionHash": "0x7957ef4d828617682771a983f50737ee5c517b3e7444abb5160fc90beff586b1",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 28602146,
        "transactionHash": "0x7957ef4d828617682771a983f50737ee5c517b3e7444abb5160fc90beff586b1",
        "address": "0x24fDD4a3287EF99F67D28533C98901A8c683Bace",
        "topics": [
          "0x98b60a60ba6130248e985ae4140dc3109d9c2980c7e435fed385e2756bc94461"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000009326bfa02add2366b30bacb125260af641031331",
        "logIndex": 8,
        "blockHash": "0x7c41c83687c966f316fd341cbdb2343733e540abe4fd4e0823113921b10f29fd"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 28602146,
        "transactionHash": "0x7957ef4d828617682771a983f50737ee5c517b3e7444abb5160fc90beff586b1",
        "address": "0x24fDD4a3287EF99F67D28533C98901A8c683Bace",
        "topics": [
          "0x742bdf00da3d8f16c0fab93ce38eb6a536a019c9e283888dd44c3a08c0148c02",
          "0x0000000000000000000000002e62eaaf0f490219be8ed376326e0516228bae89"
        ],
        "data": "0x0000000000000000000000000e4fcec26c9f85c3d714370c98f43c4e02fc35ae00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a7640000",
        "logIndex": 9,
        "blockHash": "0x7c41c83687c966f316fd341cbdb2343733e540abe4fd4e0823113921b10f29fd"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 28602146,
        "transactionHash": "0x7957ef4d828617682771a983f50737ee5c517b3e7444abb5160fc90beff586b1",
        "address": "0x24fDD4a3287EF99F67D28533C98901A8c683Bace",
        "topics": [
          "0x742bdf00da3d8f16c0fab93ce38eb6a536a019c9e283888dd44c3a08c0148c02",
          "0x0000000000000000000000004674e9587925f9fb4d3a4cc5591029596280e00c"
        ],
        "data": "0x0000000000000000000000008993ed705cdf5e84d0a3b754b5ee0e1783fcdf1600000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000de0b6b3a7640000",
        "logIndex": 10,
        "blockHash": "0x7c41c83687c966f316fd341cbdb2343733e540abe4fd4e0823113921b10f29fd"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 28602146,
        "transactionHash": "0x7957ef4d828617682771a983f50737ee5c517b3e7444abb5160fc90beff586b1",
        "address": "0x24fDD4a3287EF99F67D28533C98901A8c683Bace",
        "topics": [
          "0x742bdf00da3d8f16c0fab93ce38eb6a536a019c9e283888dd44c3a08c0148c02",
          "0x00000000000000000000000088dd7a403a3d48625c9cb511ff47d1d6c25eb121"
        ],
        "data": "0x000000000000000000000000bf7a18ea5de0501f7559144e702b29c55b055ccb00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a7640000",
        "logIndex": 11,
        "blockHash": "0x7c41c83687c966f316fd341cbdb2343733e540abe4fd4e0823113921b10f29fd"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 28602146,
        "transactionHash": "0x7957ef4d828617682771a983f50737ee5c517b3e7444abb5160fc90beff586b1",
        "address": "0x24fDD4a3287EF99F67D28533C98901A8c683Bace",
        "topics": [
          "0x742bdf00da3d8f16c0fab93ce38eb6a536a019c9e283888dd44c3a08c0148c02",
          "0x00000000000000000000000023cb26e7bc6868452097e351e42d2a39c861b6bb"
        ],
        "data": "0x0000000000000000000000009aa9da35dc44f93d90436bfe256f465f720c3ae500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a7640000",
        "logIndex": 12,
        "blockHash": "0x7c41c83687c966f316fd341cbdb2343733e540abe4fd4e0823113921b10f29fd"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 28602146,
        "transactionHash": "0x7957ef4d828617682771a983f50737ee5c517b3e7444abb5160fc90beff586b1",
        "address": "0x24fDD4a3287EF99F67D28533C98901A8c683Bace",
        "topics": [
          "0x742bdf00da3d8f16c0fab93ce38eb6a536a019c9e283888dd44c3a08c0148c02",
          "0x0000000000000000000000000707de6ea02d4558fea1e0a96cad9003f8c1d384"
        ],
        "data": "0x000000000000000000000000777a68032a88e5a84678a77af2cd65a7b3c0775a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a7640000",
        "logIndex": 13,
        "blockHash": "0x7c41c83687c966f316fd341cbdb2343733e540abe4fd4e0823113921b10f29fd"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 28602146,
        "transactionHash": "0x7957ef4d828617682771a983f50737ee5c517b3e7444abb5160fc90beff586b1",
        "address": "0x24fDD4a3287EF99F67D28533C98901A8c683Bace",
        "topics": [
          "0x742bdf00da3d8f16c0fab93ce38eb6a536a019c9e283888dd44c3a08c0148c02",
          "0x0000000000000000000000001dc1216b3d1803a0b5f7664b7756377f477614ab"
        ],
        "data": "0x000000000000000000000000fadbe2ee798889f02d1d39edad98eff4c7fe95d400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a7640000",
        "logIndex": 14,
        "blockHash": "0x7c41c83687c966f316fd341cbdb2343733e540abe4fd4e0823113921b10f29fd"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 28602146,
        "transactionHash": "0x7957ef4d828617682771a983f50737ee5c517b3e7444abb5160fc90beff586b1",
        "address": "0x24fDD4a3287EF99F67D28533C98901A8c683Bace",
        "topics": [
          "0x742bdf00da3d8f16c0fab93ce38eb6a536a019c9e283888dd44c3a08c0148c02",
          "0x000000000000000000000000902aaefd695f2af5ccfa6a027051261976131d69"
        ],
        "data": "0x000000000000000000000000b8e8130d244cfd13a75d6b9aee029b1c33c808a700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a7640000",
        "logIndex": 15,
        "blockHash": "0x7c41c83687c966f316fd341cbdb2343733e540abe4fd4e0823113921b10f29fd"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 28602146,
        "transactionHash": "0x7957ef4d828617682771a983f50737ee5c517b3e7444abb5160fc90beff586b1",
        "address": "0x24fDD4a3287EF99F67D28533C98901A8c683Bace",
        "topics": [
          "0x742bdf00da3d8f16c0fab93ce38eb6a536a019c9e283888dd44c3a08c0148c02",
          "0x000000000000000000000000d7f19f0d395e8c7d5368d74a81b774e2b822df25"
        ],
        "data": "0x0000000000000000000000003af8c569ab77af5230596acf0e8c2f9351d24c3800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a7640000",
        "logIndex": 16,
        "blockHash": "0x7c41c83687c966f316fd341cbdb2343733e540abe4fd4e0823113921b10f29fd"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 28602146,
        "transactionHash": "0x7957ef4d828617682771a983f50737ee5c517b3e7444abb5160fc90beff586b1",
        "address": "0x24fDD4a3287EF99F67D28533C98901A8c683Bace",
        "topics": [
          "0x742bdf00da3d8f16c0fab93ce38eb6a536a019c9e283888dd44c3a08c0148c02",
          "0x0000000000000000000000007c52405ada0bfbca32a81703862a03757fb702f7"
        ],
        "data": "0x0000000000000000000000001b93d8e109cfedcbb3cc74ed761de286d577151100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a7640000",
        "logIndex": 17,
        "blockHash": "0x7c41c83687c966f316fd341cbdb2343733e540abe4fd4e0823113921b10f29fd"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 28602146,
        "transactionHash": "0x7957ef4d828617682771a983f50737ee5c517b3e7444abb5160fc90beff586b1",
        "address": "0x24fDD4a3287EF99F67D28533C98901A8c683Bace",
        "topics": [
          "0x742bdf00da3d8f16c0fab93ce38eb6a536a019c9e283888dd44c3a08c0148c02",
          "0x000000000000000000000000de016fea21895e5aca1112b95504f303500002b5"
        ],
        "data": "0x0000000000000000000000000b156192e04bad92b6c1c13cf8739d14d78d570100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a7640000",
        "logIndex": 18,
        "blockHash": "0x7c41c83687c966f316fd341cbdb2343733e540abe4fd4e0823113921b10f29fd"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 28602146,
        "transactionHash": "0x7957ef4d828617682771a983f50737ee5c517b3e7444abb5160fc90beff586b1",
        "address": "0x24fDD4a3287EF99F67D28533C98901A8c683Bace",
        "topics": [
          "0x742bdf00da3d8f16c0fab93ce38eb6a536a019c9e283888dd44c3a08c0148c02",
          "0x000000000000000000000000d9436124f61685e63cd87370d1a9b32e79b75601"
        ],
        "data": "0x000000000000000000000000f1939bece7708382b5fb5e559f630cb8b39a10ee00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a7640000",
        "logIndex": 19,
        "blockHash": "0x7c41c83687c966f316fd341cbdb2343733e540abe4fd4e0823113921b10f29fd"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 28602146,
        "transactionHash": "0x7957ef4d828617682771a983f50737ee5c517b3e7444abb5160fc90beff586b1",
        "address": "0x24fDD4a3287EF99F67D28533C98901A8c683Bace",
        "topics": [
          "0x742bdf00da3d8f16c0fab93ce38eb6a536a019c9e283888dd44c3a08c0148c02",
          "0x00000000000000000000000056a7c6766b5e7a9e6bc704f7becc001f2755a713"
        ],
        "data": "0x0000000000000000000000003a7e6117f2979eff81855de32819fbba48a63e9e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a7640000",
        "logIndex": 20,
        "blockHash": "0x7c41c83687c966f316fd341cbdb2343733e540abe4fd4e0823113921b10f29fd"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 28602146,
        "transactionHash": "0x7957ef4d828617682771a983f50737ee5c517b3e7444abb5160fc90beff586b1",
        "address": "0x24fDD4a3287EF99F67D28533C98901A8c683Bace",
        "topics": [
          "0x742bdf00da3d8f16c0fab93ce38eb6a536a019c9e283888dd44c3a08c0148c02",
          "0x0000000000000000000000004c22d46c07ab880f94e8213e0256727af471a9f4"
        ],
        "data": "0x000000000000000000000000f9a76ae7a1075fe7d646b06ff05bd48b9fa5582e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a7640000",
        "logIndex": 21,
        "blockHash": "0x7c41c83687c966f316fd341cbdb2343733e540abe4fd4e0823113921b10f29fd"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 28602146,
        "transactionHash": "0x7957ef4d828617682771a983f50737ee5c517b3e7444abb5160fc90beff586b1",
        "address": "0x24fDD4a3287EF99F67D28533C98901A8c683Bace",
        "topics": [
          "0x742bdf00da3d8f16c0fab93ce38eb6a536a019c9e283888dd44c3a08c0148c02",
          "0x000000000000000000000000190cece40aef39a2a15d8858cafa691f01a909c5"
        ],
        "data": "0x000000000000000000000000b343e7a1af578fa35632435243d814e7497622f700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a7640000",
        "logIndex": 22,
        "blockHash": "0x7c41c83687c966f316fd341cbdb2343733e540abe4fd4e0823113921b10f29fd"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 28602146,
        "transactionHash": "0x7957ef4d828617682771a983f50737ee5c517b3e7444abb5160fc90beff586b1",
        "address": "0x24fDD4a3287EF99F67D28533C98901A8c683Bace",
        "topics": [
          "0x742bdf00da3d8f16c0fab93ce38eb6a536a019c9e283888dd44c3a08c0148c02",
          "0x00000000000000000000000086684577af5598b229a27c5774b658d303e2e044"
        ],
        "data": "0x00000000000000000000000017756515f112429471f86f98d5052acb6c47f6ee00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a7640000",
        "logIndex": 23,
        "blockHash": "0x7c41c83687c966f316fd341cbdb2343733e540abe4fd4e0823113921b10f29fd"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 28602146,
        "transactionHash": "0x7957ef4d828617682771a983f50737ee5c517b3e7444abb5160fc90beff586b1",
        "address": "0x24fDD4a3287EF99F67D28533C98901A8c683Bace",
        "topics": [
          "0x742bdf00da3d8f16c0fab93ce38eb6a536a019c9e283888dd44c3a08c0148c02",
          "0x000000000000000000000000fac5cbefa43a877c675e8007a685e0d72ee1f109"
        ],
        "data": "0x00000000000000000000000064eac61a2dfda2c3fa04eed49aa33d021aec8838000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f4240",
        "logIndex": 24,
        "blockHash": "0x7c41c83687c966f316fd341cbdb2343733e540abe4fd4e0823113921b10f29fd"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 28602146,
        "transactionHash": "0x7957ef4d828617682771a983f50737ee5c517b3e7444abb5160fc90beff586b1",
        "address": "0x24fDD4a3287EF99F67D28533C98901A8c683Bace",
        "topics": [
          "0x742bdf00da3d8f16c0fab93ce38eb6a536a019c9e283888dd44c3a08c0148c02",
          "0x00000000000000000000000050e7615a526f715556c478749303c75571f1e6b5"
        ],
        "data": "0x0000000000000000000000000bf499444525a23e7bb61997539725ca2e928138000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f4240",
        "logIndex": 25,
        "blockHash": "0x7c41c83687c966f316fd341cbdb2343733e540abe4fd4e0823113921b10f29fd"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 28602146,
        "transactionHash": "0x7957ef4d828617682771a983f50737ee5c517b3e7444abb5160fc90beff586b1",
        "address": "0x24fDD4a3287EF99F67D28533C98901A8c683Bace",
        "topics": [
          "0x742bdf00da3d8f16c0fab93ce38eb6a536a019c9e283888dd44c3a08c0148c02",
          "0x00000000000000000000000008adedfb5f473a7dffd05da2c0f33651553668a9"
        ],
        "data": "0x000000000000000000000000f7904a295a029a3abdffb6f12755974a958c7c2500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005f5e100",
        "logIndex": 26,
        "blockHash": "0x7c41c83687c966f316fd341cbdb2343733e540abe4fd4e0823113921b10f29fd"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 28602146,
        "transactionHash": "0x7957ef4d828617682771a983f50737ee5c517b3e7444abb5160fc90beff586b1",
        "address": "0x24fDD4a3287EF99F67D28533C98901A8c683Bace",
        "topics": [
          "0x742bdf00da3d8f16c0fab93ce38eb6a536a019c9e283888dd44c3a08c0148c02",
          "0x0000000000000000000000003a854556f28f77dcc803538032ca64fdf42a0783"
        ],
        "data": "0x000000000000000000000000c5d1b1deb2992738c0273408ac43e1e906086b6c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a7640000",
        "logIndex": 27,
        "blockHash": "0x7c41c83687c966f316fd341cbdb2343733e540abe4fd4e0823113921b10f29fd"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 28602146,
        "transactionHash": "0x7957ef4d828617682771a983f50737ee5c517b3e7444abb5160fc90beff586b1",
        "address": "0x24fDD4a3287EF99F67D28533C98901A8c683Bace",
        "topics": [
          "0x742bdf00da3d8f16c0fab93ce38eb6a536a019c9e283888dd44c3a08c0148c02",
          "0x0000000000000000000000008955cd6b7826a86e820f0774278d89b76db25c46"
        ],
        "data": "0x000000000000000000000000bc3f28ccc21e9b5856e81e6372aff57307e2e88300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a7640000",
        "logIndex": 28,
        "blockHash": "0x7c41c83687c966f316fd341cbdb2343733e540abe4fd4e0823113921b10f29fd"
      }
    ],
    "blockNumber": 28602146,
    "cumulativeGasUsed": "3633949",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4B68177FaCb5e04a1a82Fbd37a4F967a2F154DD5",
    "0xd0a1e359811322d97991e03f863a0c30c2cf029c",
    "0x9326bfa02add2366b30bacb125260af641031331",
    [
      "0x2e62eaaf0f490219be8ed376326e0516228bae89",
      "0x4674e9587925f9fb4d3a4cc5591029596280e00c",
      "0x88dd7a403a3d48625c9cb511ff47d1d6c25eb121",
      "0x23cb26e7bc6868452097e351e42d2a39c861b6bb",
      "0x0707de6ea02d4558fea1e0a96cad9003f8c1d384",
      "0x1dc1216b3d1803a0b5f7664b7756377f477614ab",
      "0x902aaefd695f2af5ccfa6a027051261976131d69",
      "0xd7f19f0d395e8c7d5368d74a81b774e2b822df25",
      "0x7c52405ada0bfbca32a81703862a03757fb702f7",
      "0xde016fea21895e5aca1112b95504f303500002b5",
      "0xd9436124f61685e63cd87370d1a9b32e79b75601",
      "0x56a7c6766b5e7a9e6bc704f7becc001f2755a713",
      "0x4c22d46c07ab880f94e8213e0256727af471a9f4",
      "0x190cece40aef39a2a15d8858cafa691f01a909c5",
      "0x86684577af5598b229a27c5774b658d303e2e044",
      "0xfac5cbefa43a877c675e8007a685e0d72ee1f109",
      "0x50e7615a526f715556c478749303c75571f1e6b5",
      "0x08adedfb5f473a7dffd05da2c0f33651553668a9",
      "0x3a854556f28f77dcc803538032ca64fdf42a0783",
      "0x8955cd6b7826a86e820f0774278d89b76db25c46"
    ],
    [
      "0x0e4fcec26c9f85c3d714370c98f43c4e02fc35ae",
      "0x8993ed705cdf5e84d0a3b754b5ee0e1783fcdf16",
      "0xbf7a18ea5de0501f7559144e702b29c55b055ccb",
      "0x9aa9da35dc44f93d90436bfe256f465f720c3ae5",
      "0x777a68032a88e5a84678a77af2cd65a7b3c0775a",
      "0xfadbe2ee798889f02d1d39edad98eff4c7fe95d4",
      "0xb8e8130d244cfd13a75d6b9aee029b1c33c808a7",
      "0x3af8c569ab77af5230596acf0e8c2f9351d24c38",
      "0x1b93d8e109cfedcbb3cc74ed761de286d5771511",
      "0x0b156192e04bad92b6c1c13cf8739d14d78d5701",
      "0xf1939bece7708382b5fb5e559f630cb8b39a10ee",
      "0x3a7e6117f2979eff81855de32819fbba48a63e9e",
      "0xf9a76ae7a1075fe7d646b06ff05bd48b9fa5582e",
      "0xb343e7a1af578fa35632435243d814e7497622f7",
      "0x17756515f112429471f86f98d5052acb6c47f6ee",
      "0x64eac61a2dfda2c3fa04eed49aa33d021aec8838",
      "0x0bf499444525a23e7bb61997539725ca2e928138",
      "0xf7904a295a029a3abdffb6f12755974a958c7c25",
      "0xc5d1b1deb2992738c0273408ac43e1e906086b6c",
      "0xbc3f28ccc21e9b5856e81e6372aff57307e2e883"
    ],
    [
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ]
  ],
  "solcInputHash": "26687ac4dc1c3fba34b01344c51c7207",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fundDeployer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wethToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ethUsdAggregator\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_primitives\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_aggregators\",\"type\":\"address[]\"},{\"internalType\":\"enum ChainlinkPriceFeed.RateAsset[]\",\"name\":\"_rateAssets\",\"type\":\"uint8[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prevEthUsdAggregator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nextEthUsdAggregator\",\"type\":\"address\"}],\"name\":\"EthUsdAggregatorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"primitive\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"aggregator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum ChainlinkPriceFeed.RateAsset\",\"name\":\"rateAsset\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unit\",\"type\":\"uint256\"}],\"name\":\"PrimitiveAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"primitive\",\"type\":\"address\"}],\"name\":\"PrimitiveRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"primitive\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prevAggregator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nextAggregator\",\"type\":\"address\"}],\"name\":\"PrimitiveUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"primitive\",\"type\":\"address\"}],\"name\":\"StalePrimitiveRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevStaleRateThreshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextStaleRateThreshold\",\"type\":\"uint256\"}],\"name\":\"StaleRateThresholdSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_primitives\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_aggregators\",\"type\":\"address[]\"},{\"internalType\":\"enum ChainlinkPriceFeed.RateAsset[]\",\"name\":\"_rateAssets\",\"type\":\"uint8[]\"}],\"name\":\"addPrimitives\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_baseAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_baseAssetAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_quoteAsset\",\"type\":\"address\"}],\"name\":\"calcCanonicalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"quoteAssetAmount_\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isValid_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_baseAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_baseAssetAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_quoteAsset\",\"type\":\"address\"}],\"name\":\"calcLiveValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"quoteAssetAmount_\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isValid_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_primitive\",\"type\":\"address\"}],\"name\":\"getAggregatorInfoForPrimitive\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"aggregator\",\"type\":\"address\"},{\"internalType\":\"enum ChainlinkPriceFeed.RateAsset\",\"name\":\"rateAsset\",\"type\":\"uint8\"}],\"internalType\":\"struct ChainlinkPriceFeed.AggregatorInfo\",\"name\":\"aggregatorInfo_\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEthUsdAggregator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"ethUsdAggregator_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFundDeployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"fundDeployer_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_primitive\",\"type\":\"address\"}],\"name\":\"getRateAssetForPrimitive\",\"outputs\":[{\"internalType\":\"enum ChainlinkPriceFeed.RateAsset\",\"name\":\"rateAsset_\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStaleRateThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"staleRateThreshold_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_primitive\",\"type\":\"address\"}],\"name\":\"getUnitForPrimitive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unit_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWethToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"wethToken_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"isSupportedAsset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isSupported_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aggregator\",\"type\":\"address\"}],\"name\":\"rateIsStale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"rateIsStale_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_primitives\",\"type\":\"address[]\"}],\"name\":\"removePrimitives\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_primitives\",\"type\":\"address[]\"}],\"name\":\"removeStalePrimitives\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nextEthUsdAggregator\",\"type\":\"address\"}],\"name\":\"setEthUsdAggregator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nextStaleRateThreshold\",\"type\":\"uint256\"}],\"name\":\"setStaleRateThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_primitives\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_aggregators\",\"type\":\"address[]\"}],\"name\":\"updatePrimitives\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Enzyme Council <security@enzyme.finance>\",\"kind\":\"dev\",\"methods\":{\"addPrimitives(address[],address[],uint8[])\":{\"params\":{\"_aggregators\":\"The ordered aggregators corresponding to the list of _primitives\",\"_primitives\":\"The primitives to add\",\"_rateAssets\":\"The ordered rate assets corresponding to the list of _primitives\"}},\"calcCanonicalValue(address,uint256,address)\":{\"params\":{\"_baseAsset\":\"The base asset\",\"_baseAssetAmount\":\"The base asset amount to convert\",\"_quoteAsset\":\"The quote asset\"},\"returns\":{\"isValid_\":\"True if the rates used in calculations are deemed valid\",\"quoteAssetAmount_\":\"The equivalent quote asset amount\"}},\"calcLiveValue(address,uint256,address)\":{\"details\":\"Live and canonical values are the same for Chainlink\",\"params\":{\"_baseAsset\":\"The base asset\",\"_baseAssetAmount\":\"The base asset amount to convert\",\"_quoteAsset\":\"The quote asset\"},\"returns\":{\"isValid_\":\"True if the rates used in calculations are deemed valid\",\"quoteAssetAmount_\":\"The equivalent quote asset amount\"}},\"getAggregatorInfoForPrimitive(address)\":{\"params\":{\"_primitive\":\"The primitive asset for which to get the aggregatorInfo value\"},\"returns\":{\"aggregatorInfo_\":\"The aggregatorInfo value\"}},\"getEthUsdAggregator()\":{\"returns\":{\"ethUsdAggregator_\":\"The `ethUsdAggregator` variable value\"}},\"getFundDeployer()\":{\"returns\":{\"fundDeployer_\":\"The `FUND_DEPLOYER` variable value\"}},\"getOwner()\":{\"details\":\"Ownership is deferred to the owner of the FundDeployer contract\",\"returns\":{\"owner_\":\"The owner\"}},\"getRateAssetForPrimitive(address)\":{\"details\":\"This isn't strictly necessary as WETH_TOKEN will be undefined and thus the RateAsset will be the 0-position of the enum (i.e. ETH), but it makes the behavior more explicit\",\"returns\":{\"rateAsset_\":\"The rateAsset variable value\"}},\"getStaleRateThreshold()\":{\"returns\":{\"staleRateThreshold_\":\"The `staleRateThreshold` variable value\"}},\"getUnitForPrimitive(address)\":{\"returns\":{\"unit_\":\"The unit variable value\"}},\"getWethToken()\":{\"returns\":{\"wethToken_\":\"The `WETH_TOKEN` variable value\"}},\"isSupportedAsset(address)\":{\"params\":{\"_asset\":\"The asset to check\"},\"returns\":{\"isSupported_\":\"True if the asset is a supported primitive\"}},\"rateIsStale(address)\":{\"params\":{\"_aggregator\":\"The Chainlink aggregator of which to check staleness\"},\"returns\":{\"rateIsStale_\":\"True if the rate is considered stale\"}},\"removePrimitives(address[])\":{\"params\":{\"_primitives\":\"The primitives to remove\"}},\"removeStalePrimitives(address[])\":{\"details\":\"Callable by anybody\",\"params\":{\"_primitives\":\"The stale primitives to remove\"}},\"setEthUsdAggregator(address)\":{\"params\":{\"_nextEthUsdAggregator\":\"The `ehUsdAggregator` value to set\"}},\"setStaleRateThreshold(uint256)\":{\"params\":{\"_nextStaleRateThreshold\":\"The next `staleRateThreshold` value\"}},\"updatePrimitives(address[],address[])\":{\"params\":{\"_aggregators\":\"The ordered aggregators corresponding to the list of _primitives\",\"_primitives\":\"The primitives to update\"}}},\"title\":\"ChainlinkPriceFeed Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addPrimitives(address[],address[],uint8[])\":{\"notice\":\"Adds a list of primitives with the given aggregator and rateAsset values\"},\"calcCanonicalValue(address,uint256,address)\":{\"notice\":\"Calculates the value of a base asset in terms of a quote asset (using a canonical rate)\"},\"calcLiveValue(address,uint256,address)\":{\"notice\":\"Calculates the value of a base asset in terms of a quote asset (using a live rate)\"},\"getAggregatorInfoForPrimitive(address)\":{\"notice\":\"Gets the aggregatorInfo variable value for a primitive\"},\"getEthUsdAggregator()\":{\"notice\":\"Gets the `ethUsdAggregator` variable value\"},\"getFundDeployer()\":{\"notice\":\"Gets the `FUND_DEPLOYER` variable\"},\"getOwner()\":{\"notice\":\"Gets the owner of this contract\"},\"getRateAssetForPrimitive(address)\":{\"notice\":\"Gets the rateAsset variable value for a primitive\"},\"getStaleRateThreshold()\":{\"notice\":\"Gets the `staleRateThreshold` variable value\"},\"getUnitForPrimitive(address)\":{\"notice\":\"Gets the unit variable value for a primitive\"},\"getWethToken()\":{\"notice\":\"Gets the `WETH_TOKEN` variable value\"},\"isSupportedAsset(address)\":{\"notice\":\"Checks whether an asset is a supported primitive of the price feed\"},\"rateIsStale(address)\":{\"notice\":\"Checks whether the current rate is considered stale for the specified aggregator\"},\"removePrimitives(address[])\":{\"notice\":\"Removes a list of primitives from the feed\"},\"removeStalePrimitives(address[])\":{\"notice\":\"Removes stale primitives from the feed\"},\"setEthUsdAggregator(address)\":{\"notice\":\"Sets the `ehUsdAggregator` variable value\"},\"setStaleRateThreshold(uint256)\":{\"notice\":\"Sets the `staleRateThreshold` variable\"},\"updatePrimitives(address[],address[])\":{\"notice\":\"Updates the aggregators for given primitives\"}},\"notice\":\"A price feed that uses Chainlink oracles as price sources\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/release/infrastructure/price-feeds/primitives/ChainlinkPriceFeed.sol\":\"ChainlinkPriceFeed\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/release/core/fund-deployer/IFundDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title IFundDeployer Interface\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\ninterface IFundDeployer {\\r\\n    enum ReleaseStatus {PreLaunch, Live, Paused}\\r\\n\\r\\n    function getOwner() external view returns (address);\\r\\n\\r\\n    function getReleaseStatus() external view returns (ReleaseStatus);\\r\\n\\r\\n    function isRegisteredVaultCall(address, bytes4) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x3c8c95a5d0e03da6a5f0278e5fbe40bf4f2d274afc2d52815fefaba847931bf9\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/utils/FundDeployerOwnerMixin.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"../../core/fund-deployer/IFundDeployer.sol\\\";\\r\\n\\r\\n/// @title FundDeployerOwnerMixin Contract\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\n/// @notice A mixin contract that defers ownership to the owner of FundDeployer\\r\\nabstract contract FundDeployerOwnerMixin {\\r\\n    address internal immutable FUND_DEPLOYER;\\r\\n\\r\\n    modifier onlyFundDeployerOwner() {\\r\\n        require(\\r\\n            msg.sender == getOwner(),\\r\\n            \\\"onlyFundDeployerOwner: Only the FundDeployer owner can call this function\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(address _fundDeployer) public {\\r\\n        FUND_DEPLOYER = _fundDeployer;\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the owner of this contract\\r\\n    /// @return owner_ The owner\\r\\n    /// @dev Ownership is deferred to the owner of the FundDeployer contract\\r\\n    function getOwner() public view returns (address owner_) {\\r\\n        return IFundDeployer(FUND_DEPLOYER).getOwner();\\r\\n    }\\r\\n\\r\\n    ///////////////////\\r\\n    // STATE GETTERS //\\r\\n    ///////////////////\\r\\n\\r\\n    /// @notice Gets the `FUND_DEPLOYER` variable\\r\\n    /// @return fundDeployer_ The `FUND_DEPLOYER` variable value\\r\\n    function getFundDeployer() external view returns (address fundDeployer_) {\\r\\n        return FUND_DEPLOYER;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf6af8390b7e3ac7579250ce5aebe0faafeeb58e60ead667e002b9286dfd160e5\",\"license\":\"GPL-3.0\"},\"contracts/release/infrastructure/price-feeds/primitives/ChainlinkPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"../../../extensions/utils/FundDeployerOwnerMixin.sol\\\";\\r\\nimport \\\"../../../interfaces/IChainlinkAggregator.sol\\\";\\r\\nimport \\\"./IPrimitivePriceFeed.sol\\\";\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\n\\r\\n/// @title ChainlinkPriceFeed Contract\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\n/// @notice A price feed that uses Chainlink oracles as price sources\\r\\ncontract ChainlinkPriceFeed is IPrimitivePriceFeed, FundDeployerOwnerMixin {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    event EthUsdAggregatorSet(address prevEthUsdAggregator, address nextEthUsdAggregator);\\r\\n\\r\\n    event PrimitiveAdded(\\r\\n        address indexed primitive,\\r\\n        address aggregator,\\r\\n        RateAsset rateAsset,\\r\\n        uint256 unit\\r\\n    );\\r\\n\\r\\n    event PrimitiveRemoved(address indexed primitive);\\r\\n\\r\\n    event PrimitiveUpdated(\\r\\n        address indexed primitive,\\r\\n        address prevAggregator,\\r\\n        address nextAggregator\\r\\n    );\\r\\n\\r\\n    event StalePrimitiveRemoved(address indexed primitive);\\r\\n\\r\\n    event StaleRateThresholdSet(uint256 prevStaleRateThreshold, uint256 nextStaleRateThreshold);\\r\\n\\r\\n    enum RateAsset {\\r\\n        ETH,\\r\\n        USD\\r\\n    }\\r\\n\\r\\n    struct AggregatorInfo {\\r\\n        address aggregator;\\r\\n        RateAsset rateAsset;\\r\\n    }\\r\\n\\r\\n    uint256 private constant ETH_UNIT = 10**18;\\r\\n    address private immutable WETH_TOKEN;\\r\\n\\r\\n    address private ethUsdAggregator;\\r\\n    uint256 private staleRateThreshold;\\r\\n    mapping(address => AggregatorInfo) private primitiveToAggregatorInfo;\\r\\n    mapping(address => uint256) private primitiveToUnit;\\r\\n\\r\\n    constructor(\\r\\n        address _fundDeployer,\\r\\n        address _wethToken,\\r\\n        address _ethUsdAggregator,\\r\\n        address[] memory _primitives,\\r\\n        address[] memory _aggregators,\\r\\n        RateAsset[] memory _rateAssets\\r\\n    ) public FundDeployerOwnerMixin(_fundDeployer) {\\r\\n        WETH_TOKEN = _wethToken;\\r\\n        staleRateThreshold = 25 hours; // 24 hour heartbeat + 1hr buffer\\r\\n        __setEthUsdAggregator(_ethUsdAggregator);\\r\\n        if (_primitives.length > 0) {\\r\\n            __addPrimitives(_primitives, _aggregators, _rateAssets);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // EXTERNAL FUNCTIONS\\r\\n\\r\\n    /// @notice Calculates the value of a base asset in terms of a quote asset (using a canonical rate)\\r\\n    /// @param _baseAsset The base asset\\r\\n    /// @param _baseAssetAmount The base asset amount to convert\\r\\n    /// @param _quoteAsset The quote asset\\r\\n    /// @return quoteAssetAmount_ The equivalent quote asset amount\\r\\n    /// @return isValid_ True if the rates used in calculations are deemed valid\\r\\n    function calcCanonicalValue(\\r\\n        address _baseAsset,\\r\\n        uint256 _baseAssetAmount,\\r\\n        address _quoteAsset\\r\\n    ) public view override returns (uint256 quoteAssetAmount_, bool isValid_) {\\r\\n        // Case where _baseAsset == _quoteAsset is handled by ValueInterpreter\\r\\n\\r\\n        int256 baseAssetRate = __getLatestRateData(_baseAsset);\\r\\n        if (baseAssetRate <= 0) {\\r\\n            return (0, false);\\r\\n        }\\r\\n\\r\\n        int256 quoteAssetRate = __getLatestRateData(_quoteAsset);\\r\\n        if (quoteAssetRate <= 0) {\\r\\n            return (0, false);\\r\\n        }\\r\\n\\r\\n        (quoteAssetAmount_, isValid_) = __calcConversionAmount(\\r\\n            _baseAsset,\\r\\n            _baseAssetAmount,\\r\\n            uint256(baseAssetRate),\\r\\n            _quoteAsset,\\r\\n            uint256(quoteAssetRate)\\r\\n        );\\r\\n\\r\\n        return (quoteAssetAmount_, isValid_);\\r\\n    }\\r\\n\\r\\n    /// @notice Calculates the value of a base asset in terms of a quote asset (using a live rate)\\r\\n    /// @param _baseAsset The base asset\\r\\n    /// @param _baseAssetAmount The base asset amount to convert\\r\\n    /// @param _quoteAsset The quote asset\\r\\n    /// @return quoteAssetAmount_ The equivalent quote asset amount\\r\\n    /// @return isValid_ True if the rates used in calculations are deemed valid\\r\\n    /// @dev Live and canonical values are the same for Chainlink\\r\\n    function calcLiveValue(\\r\\n        address _baseAsset,\\r\\n        uint256 _baseAssetAmount,\\r\\n        address _quoteAsset\\r\\n    ) external view override returns (uint256 quoteAssetAmount_, bool isValid_) {\\r\\n        return calcCanonicalValue(_baseAsset, _baseAssetAmount, _quoteAsset);\\r\\n    }\\r\\n\\r\\n    /// @notice Checks whether an asset is a supported primitive of the price feed\\r\\n    /// @param _asset The asset to check\\r\\n    /// @return isSupported_ True if the asset is a supported primitive\\r\\n    function isSupportedAsset(address _asset) external view override returns (bool isSupported_) {\\r\\n        return _asset == WETH_TOKEN || primitiveToAggregatorInfo[_asset].aggregator != address(0);\\r\\n    }\\r\\n\\r\\n    /// @notice Sets the `ehUsdAggregator` variable value\\r\\n    /// @param _nextEthUsdAggregator The `ehUsdAggregator` value to set\\r\\n    function setEthUsdAggregator(address _nextEthUsdAggregator) external onlyFundDeployerOwner {\\r\\n        __setEthUsdAggregator(_nextEthUsdAggregator);\\r\\n    }\\r\\n\\r\\n    // PRIVATE FUNCTIONS\\r\\n\\r\\n    /// @dev Helper to convert an amount from a _baseAsset to a _quoteAsset\\r\\n    function __calcConversionAmount(\\r\\n        address _baseAsset,\\r\\n        uint256 _baseAssetAmount,\\r\\n        uint256 _baseAssetRate,\\r\\n        address _quoteAsset,\\r\\n        uint256 _quoteAssetRate\\r\\n    ) private view returns (uint256 quoteAssetAmount_, bool isValid_) {\\r\\n        RateAsset baseAssetRateAsset = getRateAssetForPrimitive(_baseAsset);\\r\\n        RateAsset quoteAssetRateAsset = getRateAssetForPrimitive(_quoteAsset);\\r\\n        uint256 baseAssetUnit = getUnitForPrimitive(_baseAsset);\\r\\n        uint256 quoteAssetUnit = getUnitForPrimitive(_quoteAsset);\\r\\n\\r\\n        // If rates are both in ETH or both in USD\\r\\n        if (baseAssetRateAsset == quoteAssetRateAsset) {\\r\\n            return (\\r\\n                __calcConversionAmountSameRateAsset(\\r\\n                    _baseAssetAmount,\\r\\n                    baseAssetUnit,\\r\\n                    _baseAssetRate,\\r\\n                    quoteAssetUnit,\\r\\n                    _quoteAssetRate\\r\\n                ),\\r\\n                true\\r\\n            );\\r\\n        }\\r\\n\\r\\n        int256 ethPerUsdRate = IChainlinkAggregator(ethUsdAggregator).latestAnswer();\\r\\n        if (ethPerUsdRate <= 0) {\\r\\n            return (0, false);\\r\\n        }\\r\\n\\r\\n        // If _baseAsset's rate is in ETH and _quoteAsset's rate is in USD\\r\\n        if (baseAssetRateAsset == RateAsset.ETH) {\\r\\n            return (\\r\\n                __calcConversionAmountEthRateAssetToUsdRateAsset(\\r\\n                    _baseAssetAmount,\\r\\n                    baseAssetUnit,\\r\\n                    _baseAssetRate,\\r\\n                    quoteAssetUnit,\\r\\n                    _quoteAssetRate,\\r\\n                    uint256(ethPerUsdRate)\\r\\n                ),\\r\\n                true\\r\\n            );\\r\\n        }\\r\\n\\r\\n        // If _baseAsset's rate is in USD and _quoteAsset's rate is in ETH\\r\\n        return (\\r\\n            __calcConversionAmountUsdRateAssetToEthRateAsset(\\r\\n                _baseAssetAmount,\\r\\n                baseAssetUnit,\\r\\n                _baseAssetRate,\\r\\n                quoteAssetUnit,\\r\\n                _quoteAssetRate,\\r\\n                uint256(ethPerUsdRate)\\r\\n            ),\\r\\n            true\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to convert amounts where the base asset has an ETH rate and the quote asset has a USD rate\\r\\n    function __calcConversionAmountEthRateAssetToUsdRateAsset(\\r\\n        uint256 _baseAssetAmount,\\r\\n        uint256 _baseAssetUnit,\\r\\n        uint256 _baseAssetRate,\\r\\n        uint256 _quoteAssetUnit,\\r\\n        uint256 _quoteAssetRate,\\r\\n        uint256 _ethPerUsdRate\\r\\n    ) private pure returns (uint256 quoteAssetAmount_) {\\r\\n        // Only allows two consecutive multiplication operations to avoid potential overflow.\\r\\n        // Intermediate step needed to resolve stack-too-deep error.\\r\\n        uint256 intermediateStep = _baseAssetAmount.mul(_baseAssetRate).mul(_ethPerUsdRate).div(\\r\\n            ETH_UNIT\\r\\n        );\\r\\n\\r\\n        return intermediateStep.mul(_quoteAssetUnit).div(_baseAssetUnit).div(_quoteAssetRate);\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to convert amounts where base and quote assets both have ETH rates or both have USD rates\\r\\n    function __calcConversionAmountSameRateAsset(\\r\\n        uint256 _baseAssetAmount,\\r\\n        uint256 _baseAssetUnit,\\r\\n        uint256 _baseAssetRate,\\r\\n        uint256 _quoteAssetUnit,\\r\\n        uint256 _quoteAssetRate\\r\\n    ) private pure returns (uint256 quoteAssetAmount_) {\\r\\n        // Only allows two consecutive multiplication operations to avoid potential overflow\\r\\n        return\\r\\n            _baseAssetAmount.mul(_baseAssetRate).mul(_quoteAssetUnit).div(\\r\\n                _baseAssetUnit.mul(_quoteAssetRate)\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to convert amounts where the base asset has a USD rate and the quote asset has an ETH rate\\r\\n    function __calcConversionAmountUsdRateAssetToEthRateAsset(\\r\\n        uint256 _baseAssetAmount,\\r\\n        uint256 _baseAssetUnit,\\r\\n        uint256 _baseAssetRate,\\r\\n        uint256 _quoteAssetUnit,\\r\\n        uint256 _quoteAssetRate,\\r\\n        uint256 _ethPerUsdRate\\r\\n    ) private pure returns (uint256 quoteAssetAmount_) {\\r\\n        // Only allows two consecutive multiplication operations to avoid potential overflow\\r\\n        // Intermediate step needed to resolve stack-too-deep error.\\r\\n        uint256 intermediateStep = _baseAssetAmount.mul(_baseAssetRate).mul(_quoteAssetUnit).div(\\r\\n            _ethPerUsdRate\\r\\n        );\\r\\n\\r\\n        return intermediateStep.mul(ETH_UNIT).div(_baseAssetUnit).div(_quoteAssetRate);\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to get the latest rate for a given primitive\\r\\n    function __getLatestRateData(address _primitive) private view returns (int256 rate_) {\\r\\n        if (_primitive == WETH_TOKEN) {\\r\\n            return int256(ETH_UNIT);\\r\\n        }\\r\\n\\r\\n        address aggregator = primitiveToAggregatorInfo[_primitive].aggregator;\\r\\n        require(aggregator != address(0), \\\"__getLatestRateData: Primitive does not exist\\\");\\r\\n\\r\\n        return IChainlinkAggregator(aggregator).latestAnswer();\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to set the `ethUsdAggregator` value\\r\\n    function __setEthUsdAggregator(address _nextEthUsdAggregator) private {\\r\\n        address prevEthUsdAggregator = ethUsdAggregator;\\r\\n        require(\\r\\n            _nextEthUsdAggregator != prevEthUsdAggregator,\\r\\n            \\\"__setEthUsdAggregator: Value already set\\\"\\r\\n        );\\r\\n\\r\\n        __validateAggregator(_nextEthUsdAggregator);\\r\\n\\r\\n        ethUsdAggregator = _nextEthUsdAggregator;\\r\\n\\r\\n        emit EthUsdAggregatorSet(prevEthUsdAggregator, _nextEthUsdAggregator);\\r\\n    }\\r\\n\\r\\n    /////////////////////////\\r\\n    // PRIMITIVES REGISTRY //\\r\\n    /////////////////////////\\r\\n\\r\\n    /// @notice Adds a list of primitives with the given aggregator and rateAsset values\\r\\n    /// @param _primitives The primitives to add\\r\\n    /// @param _aggregators The ordered aggregators corresponding to the list of _primitives\\r\\n    /// @param _rateAssets The ordered rate assets corresponding to the list of _primitives\\r\\n    function addPrimitives(\\r\\n        address[] calldata _primitives,\\r\\n        address[] calldata _aggregators,\\r\\n        RateAsset[] calldata _rateAssets\\r\\n    ) external onlyFundDeployerOwner {\\r\\n        require(_primitives.length > 0, \\\"addPrimitives: _primitives cannot be empty\\\");\\r\\n\\r\\n        __addPrimitives(_primitives, _aggregators, _rateAssets);\\r\\n    }\\r\\n\\r\\n    /// @notice Removes a list of primitives from the feed\\r\\n    /// @param _primitives The primitives to remove\\r\\n    function removePrimitives(address[] calldata _primitives) external onlyFundDeployerOwner {\\r\\n        require(_primitives.length > 0, \\\"removePrimitives: _primitives cannot be empty\\\");\\r\\n\\r\\n        for (uint256 i; i < _primitives.length; i++) {\\r\\n            require(\\r\\n                primitiveToAggregatorInfo[_primitives[i]].aggregator != address(0),\\r\\n                \\\"removePrimitives: Primitive not yet added\\\"\\r\\n            );\\r\\n\\r\\n            delete primitiveToAggregatorInfo[_primitives[i]];\\r\\n            delete primitiveToUnit[_primitives[i]];\\r\\n\\r\\n            emit PrimitiveRemoved(_primitives[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Removes stale primitives from the feed\\r\\n    /// @param _primitives The stale primitives to remove\\r\\n    /// @dev Callable by anybody\\r\\n    function removeStalePrimitives(address[] calldata _primitives) external {\\r\\n        require(_primitives.length > 0, \\\"removeStalePrimitives: _primitives cannot be empty\\\");\\r\\n\\r\\n        for (uint256 i; i < _primitives.length; i++) {\\r\\n            address aggregatorAddress = primitiveToAggregatorInfo[_primitives[i]].aggregator;\\r\\n            require(aggregatorAddress != address(0), \\\"removeStalePrimitives: Invalid primitive\\\");\\r\\n            require(rateIsStale(aggregatorAddress), \\\"removeStalePrimitives: Rate is not stale\\\");\\r\\n\\r\\n            delete primitiveToAggregatorInfo[_primitives[i]];\\r\\n            delete primitiveToUnit[_primitives[i]];\\r\\n\\r\\n            emit StalePrimitiveRemoved(_primitives[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Sets the `staleRateThreshold` variable\\r\\n    /// @param _nextStaleRateThreshold The next `staleRateThreshold` value\\r\\n    function setStaleRateThreshold(uint256 _nextStaleRateThreshold)\\r\\n        external\\r\\n        onlyFundDeployerOwner\\r\\n    {\\r\\n        uint256 prevStaleRateThreshold = staleRateThreshold;\\r\\n        require(\\r\\n            _nextStaleRateThreshold != prevStaleRateThreshold,\\r\\n            \\\"__setStaleRateThreshold: Value already set\\\"\\r\\n        );\\r\\n\\r\\n        staleRateThreshold = _nextStaleRateThreshold;\\r\\n\\r\\n        emit StaleRateThresholdSet(prevStaleRateThreshold, _nextStaleRateThreshold);\\r\\n    }\\r\\n\\r\\n    /// @notice Updates the aggregators for given primitives\\r\\n    /// @param _primitives The primitives to update\\r\\n    /// @param _aggregators The ordered aggregators corresponding to the list of _primitives\\r\\n    function updatePrimitives(address[] calldata _primitives, address[] calldata _aggregators)\\r\\n        external\\r\\n        onlyFundDeployerOwner\\r\\n    {\\r\\n        require(_primitives.length > 0, \\\"updatePrimitives: _primitives cannot be empty\\\");\\r\\n        require(\\r\\n            _primitives.length == _aggregators.length,\\r\\n            \\\"updatePrimitives: Unequal _primitives and _aggregators array lengths\\\"\\r\\n        );\\r\\n\\r\\n        for (uint256 i; i < _primitives.length; i++) {\\r\\n            address prevAggregator = primitiveToAggregatorInfo[_primitives[i]].aggregator;\\r\\n            require(prevAggregator != address(0), \\\"updatePrimitives: Primitive not yet added\\\");\\r\\n            require(_aggregators[i] != prevAggregator, \\\"updatePrimitives: Value already set\\\");\\r\\n\\r\\n            __validateAggregator(_aggregators[i]);\\r\\n\\r\\n            primitiveToAggregatorInfo[_primitives[i]].aggregator = _aggregators[i];\\r\\n\\r\\n            emit PrimitiveUpdated(_primitives[i], prevAggregator, _aggregators[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Checks whether the current rate is considered stale for the specified aggregator\\r\\n    /// @param _aggregator The Chainlink aggregator of which to check staleness\\r\\n    /// @return rateIsStale_ True if the rate is considered stale\\r\\n    function rateIsStale(address _aggregator) public view returns (bool rateIsStale_) {\\r\\n        return\\r\\n            IChainlinkAggregator(_aggregator).latestTimestamp() <\\r\\n            block.timestamp.sub(staleRateThreshold);\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to add primitives to the feed\\r\\n    function __addPrimitives(\\r\\n        address[] memory _primitives,\\r\\n        address[] memory _aggregators,\\r\\n        RateAsset[] memory _rateAssets\\r\\n    ) private {\\r\\n        require(\\r\\n            _primitives.length == _aggregators.length,\\r\\n            \\\"__addPrimitives: Unequal _primitives and _aggregators array lengths\\\"\\r\\n        );\\r\\n        require(\\r\\n            _primitives.length == _rateAssets.length,\\r\\n            \\\"__addPrimitives: Unequal _primitives and _rateAssets array lengths\\\"\\r\\n        );\\r\\n\\r\\n        for (uint256 i = 0; i < _primitives.length; i++) {\\r\\n            require(\\r\\n                primitiveToAggregatorInfo[_primitives[i]].aggregator == address(0),\\r\\n                \\\"__addPrimitives: Value already set\\\"\\r\\n            );\\r\\n\\r\\n            // __validateAggregator(_aggregators[i]);\\r\\n\\r\\n            primitiveToAggregatorInfo[_primitives[i]] = AggregatorInfo({\\r\\n                aggregator: _aggregators[i],\\r\\n                rateAsset: _rateAssets[i]\\r\\n            });\\r\\n\\r\\n            console.log(\\\"primitives: \\\", _primitives[i]);\\r\\n            // Store the amount that makes up 1 unit given the asset's decimals\\r\\n            uint256 unit = 10**uint256(ERC20(_primitives[i]).decimals());\\r\\n            primitiveToUnit[_primitives[i]] = unit;\\r\\n\\r\\n            emit PrimitiveAdded(_primitives[i], _aggregators[i], _rateAssets[i], unit);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to validate an aggregator by checking its return values for the expected interface\\r\\n    function __validateAggregator(address _aggregator) private view {\\r\\n        require(_aggregator != address(0), \\\"__validateAggregator: Empty _aggregator\\\");\\r\\n\\r\\n        require(\\r\\n            IChainlinkAggregator(_aggregator).latestAnswer() > 0,\\r\\n            \\\"__validateAggregator: No rate detected\\\"\\r\\n        );\\r\\n        require(!rateIsStale(_aggregator), \\\"__validateAggregator: Stale rate detected\\\");\\r\\n    }\\r\\n\\r\\n    ///////////////////\\r\\n    // STATE GETTERS //\\r\\n    ///////////////////\\r\\n\\r\\n    /// @notice Gets the aggregatorInfo variable value for a primitive\\r\\n    /// @param _primitive The primitive asset for which to get the aggregatorInfo value\\r\\n    /// @return aggregatorInfo_ The aggregatorInfo value\\r\\n    function getAggregatorInfoForPrimitive(address _primitive)\\r\\n        external\\r\\n        view\\r\\n        returns (AggregatorInfo memory aggregatorInfo_)\\r\\n    {\\r\\n        return primitiveToAggregatorInfo[_primitive];\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the `ethUsdAggregator` variable value\\r\\n    /// @return ethUsdAggregator_ The `ethUsdAggregator` variable value\\r\\n    function getEthUsdAggregator() external view returns (address ethUsdAggregator_) {\\r\\n        return ethUsdAggregator;\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the `staleRateThreshold` variable value\\r\\n    /// @return staleRateThreshold_ The `staleRateThreshold` variable value\\r\\n    function getStaleRateThreshold() external view returns (uint256 staleRateThreshold_) {\\r\\n        return staleRateThreshold;\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the `WETH_TOKEN` variable value\\r\\n    /// @return wethToken_ The `WETH_TOKEN` variable value\\r\\n    function getWethToken() external view returns (address wethToken_) {\\r\\n        return WETH_TOKEN;\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the rateAsset variable value for a primitive\\r\\n    /// @return rateAsset_ The rateAsset variable value\\r\\n    /// @dev This isn't strictly necessary as WETH_TOKEN will be undefined and thus\\r\\n    /// the RateAsset will be the 0-position of the enum (i.e. ETH), but it makes the\\r\\n    /// behavior more explicit\\r\\n    function getRateAssetForPrimitive(address _primitive)\\r\\n        public\\r\\n        view\\r\\n        returns (RateAsset rateAsset_)\\r\\n    {\\r\\n        if (_primitive == WETH_TOKEN) {\\r\\n            return RateAsset.ETH;\\r\\n        }\\r\\n\\r\\n        return primitiveToAggregatorInfo[_primitive].rateAsset;\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the unit variable value for a primitive\\r\\n    /// @return unit_ The unit variable value\\r\\n    function getUnitForPrimitive(address _primitive) public view returns (uint256 unit_) {\\r\\n        if (_primitive == WETH_TOKEN) {\\r\\n            return ETH_UNIT;\\r\\n        }\\r\\n\\r\\n        return primitiveToUnit[_primitive];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xae7f96a938fb35fef6f6942756d3dd8523e49be8718fa99c766df68f38f68bf4\",\"license\":\"GPL-3.0\"},\"contracts/release/infrastructure/price-feeds/primitives/IPrimitivePriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title IPrimitivePriceFeed Interface\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\n/// @notice Interface for primitive price feeds\\r\\ninterface IPrimitivePriceFeed {\\r\\n    function calcCanonicalValue(\\r\\n        address,\\r\\n        uint256,\\r\\n        address\\r\\n    ) external view returns (uint256, bool);\\r\\n\\r\\n    function calcLiveValue(\\r\\n        address,\\r\\n        uint256,\\r\\n        address\\r\\n    ) external view returns (uint256, bool);\\r\\n\\r\\n    function isSupportedAsset(address) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x4ec94b8620d068e9e520d87e7e0eda9828ab465de5b5aefe3880dc619782e02a\",\"license\":\"GPL-3.0\"},\"contracts/release/interfaces/IChainlinkAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title IChainlinkAggregator Interface\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\ninterface IChainlinkAggregator {\\r\\n    function latestAnswer() external view returns (int256);\\r\\n\\r\\n    function latestTimestamp() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x71d73e379795cfa2c6f733a69f6a13dfc5e859af4809a4a3a34bf220d580bac1\",\"license\":\"GPL-3.0\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162003211380380620032118339810160408190526200003491620007bb565b6001600160601b0319606087811b821660805286901b1660a05262015f90600155620000608462000081565b82511562000075576200007583838362000123565b50505050505062000dc5565b6000546001600160a01b03908116908216811415620000bd5760405162461bcd60e51b8152600401620000b49062000c26565b60405180910390fd5b620000c88262000459565b600080546001600160a01b0319166001600160a01b0384161790556040517f98b60a60ba6130248e985ae4140dc3109d9c2980c7e435fed385e2756bc944619062000117908390859062000bae565b60405180910390a15050565b8151835114620001475760405162461bcd60e51b8152600401620000b49062000c92565b80518351146200016b5760405162461bcd60e51b8152600401620000b49062000c5c565b60005b8351811015620004535760006001600160a01b0316600260008684815181106200019457fe5b6020908102919091018101516001600160a01b03908116835290820192909252604001600020541614620001dc5760405162461bcd60e51b8152600401620000b49062000ca4565b6040518060400160405280848381518110620001f457fe5b60200260200101516001600160a01b031681526020018383815181106200021757fe5b602002602001015160018111156200022b57fe5b815250600260008684815181106200023f57fe5b6020908102919091018101516001600160a01b039081168352828201939093526040909101600020835181546001600160a01b0319169316929092178083559083015190829060ff60a01b1916600160a01b8360018111156200029e57fe5b0217905550905050620002f56040518060400160405280600c81526020016b0383934b6b4ba34bb32b99d160a51b815250858381518110620002dc57fe5b60200260200101516200054760201b62000dda1760201c565b60008482815181106200030457fe5b60200260200101516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156200034557600080fd5b505afa1580156200035a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003809190620008c0565b60ff16600a0a905080600360008785815181106200039a57fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002081905550848281518110620003d357fe5b60200260200101516001600160a01b03167f742bdf00da3d8f16c0fab93ce38eb6a536a019c9e283888dd44c3a08c0148c028584815181106200041257fe5b60200260200101518585815181106200042757fe5b602002602001015184604051620004419392919062000bd4565b60405180910390a2506001016200016e565b50505050565b6001600160a01b038116620004825760405162461bcd60e51b8152600401620000b49062000c38565b6000816001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b158015620004be57600080fd5b505afa158015620004d3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004f9919062000897565b13620005195760405162461bcd60e51b8152600401620000b49062000c80565b620005248162000598565b15620005445760405162461bcd60e51b8152600401620000b49062000c6e565b50565b6200059482826040516024016200056092919062000c02565b60408051601f198184030181529190526020810180516001600160e01b0390811663319af33360e01b179091526200063416565b5050565b6000620005b6600154426200065560201b62000e231790919060201c565b826001600160a01b0316638205bf6a6040518163ffffffff1660e01b815260040160206040518083038186803b158015620005f057600080fd5b505afa15801562000605573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200062b919062000897565b1090505b919050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b6000828211156200067a5760405162461bcd60e51b8152600401620000b49062000c4a565b508082035b92915050565b80516200067f8162000d8a565b600082601f830112620006a457600080fd5b8151620006bb620006b58262000cdd565b62000cb6565b91508181835260208401935060208101905083856020840282011115620006e157600080fd5b60005b83811015620007115781620006fa888262000685565b8452506020928301929190910190600101620006e4565b5050505092915050565b600082601f8301126200072d57600080fd5b81516200073e620006b58262000cdd565b915081818352602084019350602081019050838560208402820111156200076457600080fd5b60005b838110156200071157816200077d888262000794565b845250602092830192919091019060010162000767565b80516200067f8162000da1565b80516200067f8162000daf565b80516200067f8162000dba565b60008060008060008060c08789031215620007d557600080fd5b6000620007e3898962000685565b9650506020620007f689828a0162000685565b95505060406200080989828a0162000685565b94505060608701516001600160401b038111156200082657600080fd5b6200083489828a0162000692565b93505060808701516001600160401b038111156200085157600080fd5b6200085f89828a0162000692565b92505060a08701516001600160401b038111156200087c57600080fd5b6200088a89828a016200071b565b9150509295509295509295565b600060208284031215620008aa57600080fd5b6000620008b88484620007a1565b949350505050565b600060208284031215620008d357600080fd5b6000620008b88484620007ae565b620008ec8162000d0b565b82525050565b620008ec8162000d39565b60006200090a8262000cfe565b62000916818562000d02565b93506200092881856020860162000d46565b620009338162000d75565b9093019392505050565b60006200094c60288362000d02565b7f5f5f73657445746855736441676772656761746f723a2056616c756520616c728152671958591e481cd95d60c21b602082015260400192915050565b60006200099860278362000d02565b7f5f5f76616c696461746541676772656761746f723a20456d707479205f6167678152663932b3b0ba37b960c91b602082015260400192915050565b6000620009e3601e8362000d02565b7f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815260200192915050565b600062000a1e60428362000d02565b600080516020620031f183398151915281527f6976657320616e64205f72617465417373657473206172726179206c656e6774602082015261687360f01b604082015260600192915050565b600062000a7960298362000d02565b7f5f5f76616c696461746541676772656761746f723a205374616c6520726174658152680819195d1958dd195960ba1b602082015260400192915050565b600062000ac660268362000d02565b7f5f5f76616c696461746541676772656761746f723a204e6f20726174652064658152651d1958dd195960d21b602082015260400192915050565b600062000b1060438362000d02565b600080516020620031f183398151915281527f6976657320616e64205f61676772656761746f7273206172726179206c656e6760208201526274687360e81b604082015260600192915050565b600062000b6c60228362000d02565b7f5f5f6164645072696d6974697665733a2056616c756520616c72656164792073815261195d60f21b602082015260400192915050565b620008ec8162000d24565b6040810162000bbe8285620008e1565b62000bcd6020830184620008e1565b9392505050565b6060810162000be48286620008e1565b62000bf36020830185620008f2565b620008b8604083018462000ba3565b6040808252810162000c158185620008fd565b905062000bcd6020830184620008e1565b602080825281016200067f816200093d565b602080825281016200067f8162000989565b602080825281016200067f81620009d4565b602080825281016200067f8162000a0f565b602080825281016200067f8162000a6a565b602080825281016200067f8162000ab7565b602080825281016200067f8162000b01565b602080825281016200067f8162000b5d565b6040518181016001600160401b038111828210171562000cd557600080fd5b604052919050565b60006001600160401b0382111562000cf457600080fd5b5060209081020190565b5190565b90815260200190565b60006200067f8262000d27565b806200062f8162000d7f565b90565b6001600160a01b031690565b60ff1690565b60006200067f8262000d18565b60005b8381101562000d6357818101518382015260200162000d49565b83811115620004535750506000910152565b601f01601f191690565b600281106200054457fe5b62000d958162000d0b565b81146200054457600080fd5b600281106200054457600080fd5b62000d958162000d24565b62000d958162000d33565b60805160601c60a05160601c6123e962000e08600039806105b1528061067552806107b25280610d745280610e4f5250806106dc528061078c52506123e96000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c80638a275539116100a2578063a98acadc11610071578063a98acadc14610233578063b54fbdaa14610246578063cf0399c81461024e578063e106264f14610261578063e35e318e1461027457610116565b80638a275539146101f257806397c0ac87146102055780639be918e61461020d578063a8527ea81461022057610116565b80634c252f91116100e95780634c252f911461018d578063587fe0b2146101a257806374626f87146101c2578063787f2568146101ca578063893d20e8146101ea57610116565b806309157f951461011b578063149b83e6146101305780631b9548f81461014357806332d95e6c1461016d575b600080fd5b61012e6101293660046118dc565b610294565b005b61012e61013e36600461176b565b61033b565b61015661015136600461171e565b6104e5565b6040516101649291906122d0565b60405180910390f35b61018061017b3660046116da565b61054a565b60405161016491906122b4565b6101956105af565b60405161016491906120b7565b6101b56101b03660046116da565b6105d3565b6040516101649190612108565b610195610662565b6101dd6101d83660046116da565b610671565b60405161016491906122c2565b6101956106d8565b61015661020036600461171e565b610770565b61019561078a565b6101b561021b3660046116da565b6107ae565b61012e61022e3660046117ad565b61080f565b61012e6102413660046116da565b610a76565b6101dd610aba565b61012e61025c36600461181d565b610ac0565b61012e61026f36600461176b565b610bbb565b6102876102823660046116da565b610d70565b6040516101649190612116565b61029c6106d8565b6001600160a01b0316336001600160a01b0316146102d55760405162461bcd60e51b81526004016102cc90612174565b60405180910390fd5b600154818114156102f85760405162461bcd60e51b81526004016102cc90612244565b60018290556040517f97f8e271e60eea593a857fceac8dc84e2ebf697b2771f3ca4dabf8255ee55fde9061032f90839085906122eb565b60405180910390a15050565b806103585760405162461bcd60e51b81526004016102cc906121a4565b60005b818110156104e05760006002600085858581811061037557fe5b905060200201602081019061038a91906116da565b6001600160a01b039081168252602082019290925260400160002054169050806103c65760405162461bcd60e51b81526004016102cc90612184565b6103cf816105d3565b6103eb5760405162461bcd60e51b81526004016102cc90612214565b600260008585858181106103fb57fe5b905060200201602081019061041091906116da565b6001600160a01b031681526020810191909152604001600090812080546001600160a81b031916905560039085858581811061044857fe5b905060200201602081019061045d91906116da565b6001600160a01b03166001600160a01b031681526020019081526020016000206000905583838381811061048d57fe5b90506020020160208101906104a291906116da565b6001600160a01b03167ff4a60a74fb565dfd083c5755117b74c21251de3a0e0ed2c0e4f23461a413309060405160405180910390a25060010161035b565b505050565b60008060006104f386610e4b565b90506000811361050a576000809250925050610542565b600061051585610e4b565b90506000811361052d57600080935093505050610542565b61053a8787848885610f46565b909450925050505b935093915050565b610552611643565b6001600160a01b03828116600090815260026020908152604091829020825180840190935280549384168352919290830190600160a01b900460ff16600181111561059957fe5b60018111156105a457fe5b90525090505b919050565b7f000000000000000000000000000000000000000000000000000000000000000090565b60006105ea60015442610e2390919063ffffffff16565b826001600160a01b0316638205bf6a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561062357600080fd5b505afa158015610637573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065b91906118be565b1092915050565b6000546001600160a01b031690565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614156106bc5750670de0b6b3a76400006105aa565b506001600160a01b031660009081526003602052604090205490565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663893d20e86040518163ffffffff1660e01b815260040160206040518083038186803b15801561073357600080fd5b505afa158015610747573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076b9190611700565b905090565b60008061077e8585856104e5565b91509150935093915050565b7f000000000000000000000000000000000000000000000000000000000000000090565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316148061080957506001600160a01b038281166000908152600260205260409020541615155b92915050565b6108176106d8565b6001600160a01b0316336001600160a01b0316146108475760405162461bcd60e51b81526004016102cc90612174565b826108645760405162461bcd60e51b81526004016102cc90612284565b8281146108835760405162461bcd60e51b81526004016102cc90612154565b60005b83811015610a6f576000600260008787858181106108a057fe5b90506020020160208101906108b591906116da565b6001600160a01b039081168252602082019290925260400160002054169050806108f15760405162461bcd60e51b81526004016102cc90612264565b806001600160a01b031684848481811061090757fe5b905060200201602081019061091c91906116da565b6001600160a01b031614156109435760405162461bcd60e51b81526004016102cc906121e4565b61096c84848481811061095257fe5b905060200201602081019061096791906116da565b6110af565b83838381811061097857fe5b905060200201602081019061098d91906116da565b6002600088888681811061099d57fe5b90506020020160208101906109b291906116da565b6001600160a01b039081168252602082019290925260400160002080546001600160a01b031916929091169190911790558585838181106109ef57fe5b9050602002016020810190610a0491906116da565b6001600160a01b03167fea132160c6ec74553a52c5ce52a096299236ff4da86ca7d4ef18da8b70b4559382868686818110610a3b57fe5b9050602002016020810190610a5091906116da565b604051610a5e9291906120c5565b60405180910390a250600101610886565b5050505050565b610a7e6106d8565b6001600160a01b0316336001600160a01b031614610aae5760405162461bcd60e51b81526004016102cc90612174565b610ab78161118b565b50565b60015490565b610ac86106d8565b6001600160a01b0316336001600160a01b031614610af85760405162461bcd60e51b81526004016102cc90612174565b84610b155760405162461bcd60e51b81526004016102cc906121b4565b610bb386868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808a028281018201909352898252909350899250889182918501908490808284376000920191909152505060408051602080890282810182019093528882529093508892508791829185019084908082843760009201919091525061121192505050565b505050505050565b610bc36106d8565b6001600160a01b0316336001600160a01b031614610bf35760405162461bcd60e51b81526004016102cc90612174565b80610c105760405162461bcd60e51b81526004016102cc906121f4565b60005b818110156104e0576000600281858585818110610c2c57fe5b9050602002016020810190610c4191906116da565b6001600160a01b039081168252602082019290925260400160002054161415610c7c5760405162461bcd60e51b81526004016102cc90612294565b60026000848484818110610c8c57fe5b9050602002016020810190610ca191906116da565b6001600160a01b031681526020810191909152604001600090812080546001600160a81b0319169055600390848484818110610cd957fe5b9050602002016020810190610cee91906116da565b6001600160a01b03166001600160a01b0316815260200190815260200160002060009055828282818110610d1e57fe5b9050602002016020810190610d3391906116da565b6001600160a01b03167fb100e8178a081ba9130260173ee2ebe0db3a6c3b6751a7801111ab3017df0e9760405160405180910390a2600101610c13565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03161415610db4575060006105aa565b506001600160a01b0316600090815260026020526040902054600160a01b900460ff1690565b610e1f8282604051602401610df0929190612124565b60408051601f198184030181529190526020810180516001600160e01b031663319af33360e01b17905261151d565b5050565b600082821115610e455760405162461bcd60e51b81526004016102cc906121c4565b50900390565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03161415610e965750670de0b6b3a76400006105aa565b6001600160a01b038083166000908152600260205260409020541680610ece5760405162461bcd60e51b81526004016102cc90612164565b806001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f0757600080fd5b505afa158015610f1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3f91906118be565b9392505050565b6000806000610f5488610d70565b90506000610f6186610d70565b90506000610f6e8a610671565b90506000610f7b88610671565b9050826001811115610f8957fe5b846001811115610f9557fe5b1415610fb757610fa88a838b848b61153e565b600195509550505050506110a5565b60008060009054906101000a90046001600160a01b03166001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561100657600080fd5b505afa15801561101a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103e91906118be565b905060008113611059576000809650965050505050506110a5565b600085600181111561106757fe5b141561108b5761107b8b848c858c86611571565b60019650965050505050506110a5565b6110998b848c858c866115ac565b60019650965050505050505b9550959350505050565b6001600160a01b0381166110d55760405162461bcd60e51b81526004016102cc90612194565b6000816001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561111057600080fd5b505afa158015611124573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114891906118be565b136111655760405162461bcd60e51b81526004016102cc90612254565b61116e816105d3565b15610ab75760405162461bcd60e51b81526004016102cc90612234565b6000546001600160a01b039081169082168114156111bb5760405162461bcd60e51b81526004016102cc90612144565b6111c4826110af565b600080546001600160a01b0319166001600160a01b0384161790556040517f98b60a60ba6130248e985ae4140dc3109d9c2980c7e435fed385e2756bc944619061032f90839085906120c5565b81518351146112325760405162461bcd60e51b81526004016102cc90612274565b80518351146112535760405162461bcd60e51b81526004016102cc90612204565b60005b83518110156115175760006001600160a01b03166002600086848151811061127a57fe5b6020908102919091018101516001600160a01b039081168352908201929092526040016000205416146112bf5760405162461bcd60e51b81526004016102cc906122a4565b60405180604001604052808483815181106112d657fe5b60200260200101516001600160a01b031681526020018383815181106112f857fe5b6020026020010151600181111561130b57fe5b8152506002600086848151811061131e57fe5b6020908102919091018101516001600160a01b039081168352828201939093526040909101600020835181546001600160a01b0319169316929092178083559083015190829060ff60a01b1916600160a01b83600181111561137c57fe5b02179055509050506113c56040518060400160405280600c81526020016b0383934b6b4ba34bb32b99d160a51b8152508583815181106113b857fe5b6020026020010151610dda565b60008482815181106113d357fe5b60200260200101516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561141357600080fd5b505afa158015611427573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061144b91906118fa565b60ff16600a0a9050806003600087858151811061146457fe5b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000208190555084828151811061149c57fe5b60200260200101516001600160a01b03167f742bdf00da3d8f16c0fab93ce38eb6a536a019c9e283888dd44c3a08c0148c028584815181106114da57fe5b60200260200101518585815181106114ee57fe5b602002602001015184604051611506939291906120e0565b60405180910390a250600101611256565b50505050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b600061156761154d86846115d7565b6115618561155b8a896115d7565b906115d7565b90611611565b9695505050505050565b60008061158e670de0b6b3a76400006115618561155b8c8b6115d7565b90506115a0846115618981858a6115d7565b98975050505050505050565b6000806115c1836115618761155b8c8b6115d7565b90506115a084611561898185670de0b6b3a76400005b6000826115e657506000610809565b828202828482816115f357fe5b0414610f3f5760405162461bcd60e51b81526004016102cc90612224565b60008082116116325760405162461bcd60e51b81526004016102cc906121d4565b81838161163b57fe5b049392505050565b604080518082019091526000808252602082015290565b80356108098161238d565b80516108098161238d565b60008083601f84011261168257600080fd5b50813567ffffffffffffffff81111561169a57600080fd5b6020830191508360208202830111156116b257600080fd5b9250929050565b8051610809816123a1565b8035610809816123a1565b8051610809816123aa565b6000602082840312156116ec57600080fd5b60006116f8848461165a565b949350505050565b60006020828403121561171257600080fd5b60006116f88484611665565b60008060006060848603121561173357600080fd5b600061173f868661165a565b9350506020611750868287016116c4565b92505060406117618682870161165a565b9150509250925092565b6000806020838503121561177e57600080fd5b823567ffffffffffffffff81111561179557600080fd5b6117a185828601611670565b92509250509250929050565b600080600080604085870312156117c357600080fd5b843567ffffffffffffffff8111156117da57600080fd5b6117e687828801611670565b9450945050602085013567ffffffffffffffff81111561180557600080fd5b61181187828801611670565b95989497509550505050565b6000806000806000806060878903121561183657600080fd5b863567ffffffffffffffff81111561184d57600080fd5b61185989828a01611670565b9650965050602087013567ffffffffffffffff81111561187857600080fd5b61188489828a01611670565b9450945050604087013567ffffffffffffffff8111156118a357600080fd5b6118af89828a01611670565b92509250509295509295509295565b6000602082840312156118d057600080fd5b60006116f884846116b9565b6000602082840312156118ee57600080fd5b60006116f884846116c4565b60006020828403121561190c57600080fd5b60006116f884846116cf565b61192181612313565b82525050565b6119218161231e565b61192181612342565b600061194482612306565b61194e818561230a565b935061195e81856020860161234d565b61196781612379565b9093019392505050565b600061197e60288361230a565b7f5f5f73657445746855736441676772656761746f723a2056616c756520616c728152671958591e481cd95d60c21b602082015260400192915050565b60006119c860448361230a565b7f7570646174655072696d6974697665733a20556e657175616c205f7072696d6981527f746976657320616e64205f61676772656761746f7273206172726179206c656e6020820152636774687360e01b604082015260600192915050565b6000611a34602d8361230a565b7f5f5f6765744c617465737452617465446174613a205072696d6974697665206481526c1bd95cc81b9bdd08195e1a5cdd609a1b602082015260400192915050565b6000611a8360498361230a565b7f6f6e6c7946756e644465706c6f7965724f776e65723a204f6e6c79207468652081527f46756e644465706c6f796572206f776e65722063616e2063616c6c207468697360208201526810333ab731ba34b7b760b91b604082015260600192915050565b6000611af460288361230a565b7f72656d6f76655374616c655072696d6974697665733a20496e76616c6964207081526772696d697469766560c01b602082015260400192915050565b6000611b3e60278361230a565b7f5f5f76616c696461746541676772656761746f723a20456d707479205f6167678152663932b3b0ba37b960c91b602082015260400192915050565b6000611b8760328361230a565b7f72656d6f76655374616c655072696d6974697665733a205f7072696d6974697681527165732063616e6e6f7420626520656d70747960701b602082015260400192915050565b6000611bdb602a8361230a565b7f6164645072696d6974697665733a205f7072696d6974697665732063616e6e6f8152697420626520656d70747960b01b602082015260400192915050565b6000611c27601e8361230a565b7f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815260200192915050565b6000611c60601a8361230a565b7f536166654d6174683a206469766973696f6e206279207a65726f000000000000815260200192915050565b6000611c9960238361230a565b7f7570646174655072696d6974697665733a2056616c756520616c7265616479208152621cd95d60ea1b602082015260400192915050565b6000611cde602d8361230a565b7f72656d6f76655072696d6974697665733a205f7072696d69746976657320636181526c6e6e6f7420626520656d70747960981b602082015260400192915050565b6000611d2d60428361230a565b7f5f5f6164645072696d6974697665733a20556e657175616c205f7072696d697481527f6976657320616e64205f72617465417373657473206172726179206c656e6774602082015261687360f01b604082015260600192915050565b6000611d9760288361230a565b7f72656d6f76655374616c655072696d6974697665733a2052617465206973206e8152676f74207374616c6560c01b602082015260400192915050565b6000611de160218361230a565b7f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f8152607760f81b602082015260400192915050565b6000611e2460298361230a565b7f5f5f76616c696461746541676772656761746f723a205374616c6520726174658152680819195d1958dd195960ba1b602082015260400192915050565b6000611e6f602a8361230a565b7f5f5f7365745374616c65526174655468726573686f6c643a2056616c756520618152691b1c9958591e481cd95d60b21b602082015260400192915050565b6000611ebb60268361230a565b7f5f5f76616c696461746541676772656761746f723a204e6f20726174652064658152651d1958dd195960d21b602082015260400192915050565b6000611f0360298361230a565b7f7570646174655072696d6974697665733a205072696d6974697665206e6f74208152681e595d08185919195960ba1b602082015260400192915050565b6000611f4e60438361230a565b7f5f5f6164645072696d6974697665733a20556e657175616c205f7072696d697481527f6976657320616e64205f61676772656761746f7273206172726179206c656e6760208201526274687360e81b604082015260600192915050565b6000611fb9602d8361230a565b7f7570646174655072696d6974697665733a205f7072696d69746976657320636181526c6e6e6f7420626520656d70747960981b602082015260400192915050565b600061200860298361230a565b7f72656d6f76655072696d6974697665733a205072696d6974697665206e6f74208152681e595d08185919195960ba1b602082015260400192915050565b600061205360228361230a565b7f5f5f6164645072696d6974697665733a2056616c756520616c72656164792073815261195d60f21b602082015260400192915050565b8051604083019061209b8482611918565b5060208201516115176020850182611930565b6119218161232d565b602081016108098284611918565b604081016120d38285611918565b610f3f6020830184611918565b606081016120ee8286611918565b6120fb6020830185611930565b6116f860408301846120ae565b602081016108098284611927565b602081016108098284611930565b604080825281016121358185611939565b9050610f3f6020830184611918565b6020808252810161080981611971565b60208082528101610809816119bb565b6020808252810161080981611a27565b6020808252810161080981611a76565b6020808252810161080981611ae7565b6020808252810161080981611b31565b6020808252810161080981611b7a565b6020808252810161080981611bce565b6020808252810161080981611c1a565b6020808252810161080981611c53565b6020808252810161080981611c8c565b6020808252810161080981611cd1565b6020808252810161080981611d20565b6020808252810161080981611d8a565b6020808252810161080981611dd4565b6020808252810161080981611e17565b6020808252810161080981611e62565b6020808252810161080981611eae565b6020808252810161080981611ef6565b6020808252810161080981611f41565b6020808252810161080981611fac565b6020808252810161080981611ffb565b6020808252810161080981612046565b60408101610809828461208a565b6020810161080982846120ae565b604081016122de82856120ae565b610f3f6020830184611927565b604081016122f982856120ae565b610f3f60208301846120ae565b5190565b90815260200190565b600061080982612330565b151590565b806105aa81612383565b90565b6001600160a01b031690565b60ff1690565b600061080982612323565b60005b83811015612368578181015183820152602001612350565b838111156115175750506000910152565b601f01601f191690565b60028110610ab757fe5b61239681612313565b8114610ab757600080fd5b6123968161232d565b6123968161233c56fea2646970667358221220e37bce0bb88fbcb2a30595584ee2e3ffe0c76e1a4c5d7bfe63e2c03637bfec9d64736f6c634300060c00335f5f6164645072696d6974697665733a20556e657175616c205f7072696d6974",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101165760003560e01c80638a275539116100a2578063a98acadc11610071578063a98acadc14610233578063b54fbdaa14610246578063cf0399c81461024e578063e106264f14610261578063e35e318e1461027457610116565b80638a275539146101f257806397c0ac87146102055780639be918e61461020d578063a8527ea81461022057610116565b80634c252f91116100e95780634c252f911461018d578063587fe0b2146101a257806374626f87146101c2578063787f2568146101ca578063893d20e8146101ea57610116565b806309157f951461011b578063149b83e6146101305780631b9548f81461014357806332d95e6c1461016d575b600080fd5b61012e6101293660046118dc565b610294565b005b61012e61013e36600461176b565b61033b565b61015661015136600461171e565b6104e5565b6040516101649291906122d0565b60405180910390f35b61018061017b3660046116da565b61054a565b60405161016491906122b4565b6101956105af565b60405161016491906120b7565b6101b56101b03660046116da565b6105d3565b6040516101649190612108565b610195610662565b6101dd6101d83660046116da565b610671565b60405161016491906122c2565b6101956106d8565b61015661020036600461171e565b610770565b61019561078a565b6101b561021b3660046116da565b6107ae565b61012e61022e3660046117ad565b61080f565b61012e6102413660046116da565b610a76565b6101dd610aba565b61012e61025c36600461181d565b610ac0565b61012e61026f36600461176b565b610bbb565b6102876102823660046116da565b610d70565b6040516101649190612116565b61029c6106d8565b6001600160a01b0316336001600160a01b0316146102d55760405162461bcd60e51b81526004016102cc90612174565b60405180910390fd5b600154818114156102f85760405162461bcd60e51b81526004016102cc90612244565b60018290556040517f97f8e271e60eea593a857fceac8dc84e2ebf697b2771f3ca4dabf8255ee55fde9061032f90839085906122eb565b60405180910390a15050565b806103585760405162461bcd60e51b81526004016102cc906121a4565b60005b818110156104e05760006002600085858581811061037557fe5b905060200201602081019061038a91906116da565b6001600160a01b039081168252602082019290925260400160002054169050806103c65760405162461bcd60e51b81526004016102cc90612184565b6103cf816105d3565b6103eb5760405162461bcd60e51b81526004016102cc90612214565b600260008585858181106103fb57fe5b905060200201602081019061041091906116da565b6001600160a01b031681526020810191909152604001600090812080546001600160a81b031916905560039085858581811061044857fe5b905060200201602081019061045d91906116da565b6001600160a01b03166001600160a01b031681526020019081526020016000206000905583838381811061048d57fe5b90506020020160208101906104a291906116da565b6001600160a01b03167ff4a60a74fb565dfd083c5755117b74c21251de3a0e0ed2c0e4f23461a413309060405160405180910390a25060010161035b565b505050565b60008060006104f386610e4b565b90506000811361050a576000809250925050610542565b600061051585610e4b565b90506000811361052d57600080935093505050610542565b61053a8787848885610f46565b909450925050505b935093915050565b610552611643565b6001600160a01b03828116600090815260026020908152604091829020825180840190935280549384168352919290830190600160a01b900460ff16600181111561059957fe5b60018111156105a457fe5b90525090505b919050565b7f000000000000000000000000000000000000000000000000000000000000000090565b60006105ea60015442610e2390919063ffffffff16565b826001600160a01b0316638205bf6a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561062357600080fd5b505afa158015610637573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065b91906118be565b1092915050565b6000546001600160a01b031690565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614156106bc5750670de0b6b3a76400006105aa565b506001600160a01b031660009081526003602052604090205490565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663893d20e86040518163ffffffff1660e01b815260040160206040518083038186803b15801561073357600080fd5b505afa158015610747573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076b9190611700565b905090565b60008061077e8585856104e5565b91509150935093915050565b7f000000000000000000000000000000000000000000000000000000000000000090565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316148061080957506001600160a01b038281166000908152600260205260409020541615155b92915050565b6108176106d8565b6001600160a01b0316336001600160a01b0316146108475760405162461bcd60e51b81526004016102cc90612174565b826108645760405162461bcd60e51b81526004016102cc90612284565b8281146108835760405162461bcd60e51b81526004016102cc90612154565b60005b83811015610a6f576000600260008787858181106108a057fe5b90506020020160208101906108b591906116da565b6001600160a01b039081168252602082019290925260400160002054169050806108f15760405162461bcd60e51b81526004016102cc90612264565b806001600160a01b031684848481811061090757fe5b905060200201602081019061091c91906116da565b6001600160a01b031614156109435760405162461bcd60e51b81526004016102cc906121e4565b61096c84848481811061095257fe5b905060200201602081019061096791906116da565b6110af565b83838381811061097857fe5b905060200201602081019061098d91906116da565b6002600088888681811061099d57fe5b90506020020160208101906109b291906116da565b6001600160a01b039081168252602082019290925260400160002080546001600160a01b031916929091169190911790558585838181106109ef57fe5b9050602002016020810190610a0491906116da565b6001600160a01b03167fea132160c6ec74553a52c5ce52a096299236ff4da86ca7d4ef18da8b70b4559382868686818110610a3b57fe5b9050602002016020810190610a5091906116da565b604051610a5e9291906120c5565b60405180910390a250600101610886565b5050505050565b610a7e6106d8565b6001600160a01b0316336001600160a01b031614610aae5760405162461bcd60e51b81526004016102cc90612174565b610ab78161118b565b50565b60015490565b610ac86106d8565b6001600160a01b0316336001600160a01b031614610af85760405162461bcd60e51b81526004016102cc90612174565b84610b155760405162461bcd60e51b81526004016102cc906121b4565b610bb386868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808a028281018201909352898252909350899250889182918501908490808284376000920191909152505060408051602080890282810182019093528882529093508892508791829185019084908082843760009201919091525061121192505050565b505050505050565b610bc36106d8565b6001600160a01b0316336001600160a01b031614610bf35760405162461bcd60e51b81526004016102cc90612174565b80610c105760405162461bcd60e51b81526004016102cc906121f4565b60005b818110156104e0576000600281858585818110610c2c57fe5b9050602002016020810190610c4191906116da565b6001600160a01b039081168252602082019290925260400160002054161415610c7c5760405162461bcd60e51b81526004016102cc90612294565b60026000848484818110610c8c57fe5b9050602002016020810190610ca191906116da565b6001600160a01b031681526020810191909152604001600090812080546001600160a81b0319169055600390848484818110610cd957fe5b9050602002016020810190610cee91906116da565b6001600160a01b03166001600160a01b0316815260200190815260200160002060009055828282818110610d1e57fe5b9050602002016020810190610d3391906116da565b6001600160a01b03167fb100e8178a081ba9130260173ee2ebe0db3a6c3b6751a7801111ab3017df0e9760405160405180910390a2600101610c13565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03161415610db4575060006105aa565b506001600160a01b0316600090815260026020526040902054600160a01b900460ff1690565b610e1f8282604051602401610df0929190612124565b60408051601f198184030181529190526020810180516001600160e01b031663319af33360e01b17905261151d565b5050565b600082821115610e455760405162461bcd60e51b81526004016102cc906121c4565b50900390565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03161415610e965750670de0b6b3a76400006105aa565b6001600160a01b038083166000908152600260205260409020541680610ece5760405162461bcd60e51b81526004016102cc90612164565b806001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f0757600080fd5b505afa158015610f1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3f91906118be565b9392505050565b6000806000610f5488610d70565b90506000610f6186610d70565b90506000610f6e8a610671565b90506000610f7b88610671565b9050826001811115610f8957fe5b846001811115610f9557fe5b1415610fb757610fa88a838b848b61153e565b600195509550505050506110a5565b60008060009054906101000a90046001600160a01b03166001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561100657600080fd5b505afa15801561101a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103e91906118be565b905060008113611059576000809650965050505050506110a5565b600085600181111561106757fe5b141561108b5761107b8b848c858c86611571565b60019650965050505050506110a5565b6110998b848c858c866115ac565b60019650965050505050505b9550959350505050565b6001600160a01b0381166110d55760405162461bcd60e51b81526004016102cc90612194565b6000816001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561111057600080fd5b505afa158015611124573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114891906118be565b136111655760405162461bcd60e51b81526004016102cc90612254565b61116e816105d3565b15610ab75760405162461bcd60e51b81526004016102cc90612234565b6000546001600160a01b039081169082168114156111bb5760405162461bcd60e51b81526004016102cc90612144565b6111c4826110af565b600080546001600160a01b0319166001600160a01b0384161790556040517f98b60a60ba6130248e985ae4140dc3109d9c2980c7e435fed385e2756bc944619061032f90839085906120c5565b81518351146112325760405162461bcd60e51b81526004016102cc90612274565b80518351146112535760405162461bcd60e51b81526004016102cc90612204565b60005b83518110156115175760006001600160a01b03166002600086848151811061127a57fe5b6020908102919091018101516001600160a01b039081168352908201929092526040016000205416146112bf5760405162461bcd60e51b81526004016102cc906122a4565b60405180604001604052808483815181106112d657fe5b60200260200101516001600160a01b031681526020018383815181106112f857fe5b6020026020010151600181111561130b57fe5b8152506002600086848151811061131e57fe5b6020908102919091018101516001600160a01b039081168352828201939093526040909101600020835181546001600160a01b0319169316929092178083559083015190829060ff60a01b1916600160a01b83600181111561137c57fe5b02179055509050506113c56040518060400160405280600c81526020016b0383934b6b4ba34bb32b99d160a51b8152508583815181106113b857fe5b6020026020010151610dda565b60008482815181106113d357fe5b60200260200101516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561141357600080fd5b505afa158015611427573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061144b91906118fa565b60ff16600a0a9050806003600087858151811061146457fe5b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000208190555084828151811061149c57fe5b60200260200101516001600160a01b03167f742bdf00da3d8f16c0fab93ce38eb6a536a019c9e283888dd44c3a08c0148c028584815181106114da57fe5b60200260200101518585815181106114ee57fe5b602002602001015184604051611506939291906120e0565b60405180910390a250600101611256565b50505050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b600061156761154d86846115d7565b6115618561155b8a896115d7565b906115d7565b90611611565b9695505050505050565b60008061158e670de0b6b3a76400006115618561155b8c8b6115d7565b90506115a0846115618981858a6115d7565b98975050505050505050565b6000806115c1836115618761155b8c8b6115d7565b90506115a084611561898185670de0b6b3a76400005b6000826115e657506000610809565b828202828482816115f357fe5b0414610f3f5760405162461bcd60e51b81526004016102cc90612224565b60008082116116325760405162461bcd60e51b81526004016102cc906121d4565b81838161163b57fe5b049392505050565b604080518082019091526000808252602082015290565b80356108098161238d565b80516108098161238d565b60008083601f84011261168257600080fd5b50813567ffffffffffffffff81111561169a57600080fd5b6020830191508360208202830111156116b257600080fd5b9250929050565b8051610809816123a1565b8035610809816123a1565b8051610809816123aa565b6000602082840312156116ec57600080fd5b60006116f8848461165a565b949350505050565b60006020828403121561171257600080fd5b60006116f88484611665565b60008060006060848603121561173357600080fd5b600061173f868661165a565b9350506020611750868287016116c4565b92505060406117618682870161165a565b9150509250925092565b6000806020838503121561177e57600080fd5b823567ffffffffffffffff81111561179557600080fd5b6117a185828601611670565b92509250509250929050565b600080600080604085870312156117c357600080fd5b843567ffffffffffffffff8111156117da57600080fd5b6117e687828801611670565b9450945050602085013567ffffffffffffffff81111561180557600080fd5b61181187828801611670565b95989497509550505050565b6000806000806000806060878903121561183657600080fd5b863567ffffffffffffffff81111561184d57600080fd5b61185989828a01611670565b9650965050602087013567ffffffffffffffff81111561187857600080fd5b61188489828a01611670565b9450945050604087013567ffffffffffffffff8111156118a357600080fd5b6118af89828a01611670565b92509250509295509295509295565b6000602082840312156118d057600080fd5b60006116f884846116b9565b6000602082840312156118ee57600080fd5b60006116f884846116c4565b60006020828403121561190c57600080fd5b60006116f884846116cf565b61192181612313565b82525050565b6119218161231e565b61192181612342565b600061194482612306565b61194e818561230a565b935061195e81856020860161234d565b61196781612379565b9093019392505050565b600061197e60288361230a565b7f5f5f73657445746855736441676772656761746f723a2056616c756520616c728152671958591e481cd95d60c21b602082015260400192915050565b60006119c860448361230a565b7f7570646174655072696d6974697665733a20556e657175616c205f7072696d6981527f746976657320616e64205f61676772656761746f7273206172726179206c656e6020820152636774687360e01b604082015260600192915050565b6000611a34602d8361230a565b7f5f5f6765744c617465737452617465446174613a205072696d6974697665206481526c1bd95cc81b9bdd08195e1a5cdd609a1b602082015260400192915050565b6000611a8360498361230a565b7f6f6e6c7946756e644465706c6f7965724f776e65723a204f6e6c79207468652081527f46756e644465706c6f796572206f776e65722063616e2063616c6c207468697360208201526810333ab731ba34b7b760b91b604082015260600192915050565b6000611af460288361230a565b7f72656d6f76655374616c655072696d6974697665733a20496e76616c6964207081526772696d697469766560c01b602082015260400192915050565b6000611b3e60278361230a565b7f5f5f76616c696461746541676772656761746f723a20456d707479205f6167678152663932b3b0ba37b960c91b602082015260400192915050565b6000611b8760328361230a565b7f72656d6f76655374616c655072696d6974697665733a205f7072696d6974697681527165732063616e6e6f7420626520656d70747960701b602082015260400192915050565b6000611bdb602a8361230a565b7f6164645072696d6974697665733a205f7072696d6974697665732063616e6e6f8152697420626520656d70747960b01b602082015260400192915050565b6000611c27601e8361230a565b7f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815260200192915050565b6000611c60601a8361230a565b7f536166654d6174683a206469766973696f6e206279207a65726f000000000000815260200192915050565b6000611c9960238361230a565b7f7570646174655072696d6974697665733a2056616c756520616c7265616479208152621cd95d60ea1b602082015260400192915050565b6000611cde602d8361230a565b7f72656d6f76655072696d6974697665733a205f7072696d69746976657320636181526c6e6e6f7420626520656d70747960981b602082015260400192915050565b6000611d2d60428361230a565b7f5f5f6164645072696d6974697665733a20556e657175616c205f7072696d697481527f6976657320616e64205f72617465417373657473206172726179206c656e6774602082015261687360f01b604082015260600192915050565b6000611d9760288361230a565b7f72656d6f76655374616c655072696d6974697665733a2052617465206973206e8152676f74207374616c6560c01b602082015260400192915050565b6000611de160218361230a565b7f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f8152607760f81b602082015260400192915050565b6000611e2460298361230a565b7f5f5f76616c696461746541676772656761746f723a205374616c6520726174658152680819195d1958dd195960ba1b602082015260400192915050565b6000611e6f602a8361230a565b7f5f5f7365745374616c65526174655468726573686f6c643a2056616c756520618152691b1c9958591e481cd95d60b21b602082015260400192915050565b6000611ebb60268361230a565b7f5f5f76616c696461746541676772656761746f723a204e6f20726174652064658152651d1958dd195960d21b602082015260400192915050565b6000611f0360298361230a565b7f7570646174655072696d6974697665733a205072696d6974697665206e6f74208152681e595d08185919195960ba1b602082015260400192915050565b6000611f4e60438361230a565b7f5f5f6164645072696d6974697665733a20556e657175616c205f7072696d697481527f6976657320616e64205f61676772656761746f7273206172726179206c656e6760208201526274687360e81b604082015260600192915050565b6000611fb9602d8361230a565b7f7570646174655072696d6974697665733a205f7072696d69746976657320636181526c6e6e6f7420626520656d70747960981b602082015260400192915050565b600061200860298361230a565b7f72656d6f76655072696d6974697665733a205072696d6974697665206e6f74208152681e595d08185919195960ba1b602082015260400192915050565b600061205360228361230a565b7f5f5f6164645072696d6974697665733a2056616c756520616c72656164792073815261195d60f21b602082015260400192915050565b8051604083019061209b8482611918565b5060208201516115176020850182611930565b6119218161232d565b602081016108098284611918565b604081016120d38285611918565b610f3f6020830184611918565b606081016120ee8286611918565b6120fb6020830185611930565b6116f860408301846120ae565b602081016108098284611927565b602081016108098284611930565b604080825281016121358185611939565b9050610f3f6020830184611918565b6020808252810161080981611971565b60208082528101610809816119bb565b6020808252810161080981611a27565b6020808252810161080981611a76565b6020808252810161080981611ae7565b6020808252810161080981611b31565b6020808252810161080981611b7a565b6020808252810161080981611bce565b6020808252810161080981611c1a565b6020808252810161080981611c53565b6020808252810161080981611c8c565b6020808252810161080981611cd1565b6020808252810161080981611d20565b6020808252810161080981611d8a565b6020808252810161080981611dd4565b6020808252810161080981611e17565b6020808252810161080981611e62565b6020808252810161080981611eae565b6020808252810161080981611ef6565b6020808252810161080981611f41565b6020808252810161080981611fac565b6020808252810161080981611ffb565b6020808252810161080981612046565b60408101610809828461208a565b6020810161080982846120ae565b604081016122de82856120ae565b610f3f6020830184611927565b604081016122f982856120ae565b610f3f60208301846120ae565b5190565b90815260200190565b600061080982612330565b151590565b806105aa81612383565b90565b6001600160a01b031690565b60ff1690565b600061080982612323565b60005b83811015612368578181015183820152602001612350565b838111156115175750506000910152565b601f01601f191690565b60028110610ab757fe5b61239681612313565b8114610ab757600080fd5b6123968161232d565b6123968161233c56fea2646970667358221220e37bce0bb88fbcb2a30595584ee2e3ffe0c76e1a4c5d7bfe63e2c03637bfec9d64736f6c634300060c0033",
  "devdoc": {
    "author": "Enzyme Council <security@enzyme.finance>",
    "kind": "dev",
    "methods": {
      "addPrimitives(address[],address[],uint8[])": {
        "params": {
          "_aggregators": "The ordered aggregators corresponding to the list of _primitives",
          "_primitives": "The primitives to add",
          "_rateAssets": "The ordered rate assets corresponding to the list of _primitives"
        }
      },
      "calcCanonicalValue(address,uint256,address)": {
        "params": {
          "_baseAsset": "The base asset",
          "_baseAssetAmount": "The base asset amount to convert",
          "_quoteAsset": "The quote asset"
        },
        "returns": {
          "isValid_": "True if the rates used in calculations are deemed valid",
          "quoteAssetAmount_": "The equivalent quote asset amount"
        }
      },
      "calcLiveValue(address,uint256,address)": {
        "details": "Live and canonical values are the same for Chainlink",
        "params": {
          "_baseAsset": "The base asset",
          "_baseAssetAmount": "The base asset amount to convert",
          "_quoteAsset": "The quote asset"
        },
        "returns": {
          "isValid_": "True if the rates used in calculations are deemed valid",
          "quoteAssetAmount_": "The equivalent quote asset amount"
        }
      },
      "getAggregatorInfoForPrimitive(address)": {
        "params": {
          "_primitive": "The primitive asset for which to get the aggregatorInfo value"
        },
        "returns": {
          "aggregatorInfo_": "The aggregatorInfo value"
        }
      },
      "getEthUsdAggregator()": {
        "returns": {
          "ethUsdAggregator_": "The `ethUsdAggregator` variable value"
        }
      },
      "getFundDeployer()": {
        "returns": {
          "fundDeployer_": "The `FUND_DEPLOYER` variable value"
        }
      },
      "getOwner()": {
        "details": "Ownership is deferred to the owner of the FundDeployer contract",
        "returns": {
          "owner_": "The owner"
        }
      },
      "getRateAssetForPrimitive(address)": {
        "details": "This isn't strictly necessary as WETH_TOKEN will be undefined and thus the RateAsset will be the 0-position of the enum (i.e. ETH), but it makes the behavior more explicit",
        "returns": {
          "rateAsset_": "The rateAsset variable value"
        }
      },
      "getStaleRateThreshold()": {
        "returns": {
          "staleRateThreshold_": "The `staleRateThreshold` variable value"
        }
      },
      "getUnitForPrimitive(address)": {
        "returns": {
          "unit_": "The unit variable value"
        }
      },
      "getWethToken()": {
        "returns": {
          "wethToken_": "The `WETH_TOKEN` variable value"
        }
      },
      "isSupportedAsset(address)": {
        "params": {
          "_asset": "The asset to check"
        },
        "returns": {
          "isSupported_": "True if the asset is a supported primitive"
        }
      },
      "rateIsStale(address)": {
        "params": {
          "_aggregator": "The Chainlink aggregator of which to check staleness"
        },
        "returns": {
          "rateIsStale_": "True if the rate is considered stale"
        }
      },
      "removePrimitives(address[])": {
        "params": {
          "_primitives": "The primitives to remove"
        }
      },
      "removeStalePrimitives(address[])": {
        "details": "Callable by anybody",
        "params": {
          "_primitives": "The stale primitives to remove"
        }
      },
      "setEthUsdAggregator(address)": {
        "params": {
          "_nextEthUsdAggregator": "The `ehUsdAggregator` value to set"
        }
      },
      "setStaleRateThreshold(uint256)": {
        "params": {
          "_nextStaleRateThreshold": "The next `staleRateThreshold` value"
        }
      },
      "updatePrimitives(address[],address[])": {
        "params": {
          "_aggregators": "The ordered aggregators corresponding to the list of _primitives",
          "_primitives": "The primitives to update"
        }
      }
    },
    "title": "ChainlinkPriceFeed Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addPrimitives(address[],address[],uint8[])": {
        "notice": "Adds a list of primitives with the given aggregator and rateAsset values"
      },
      "calcCanonicalValue(address,uint256,address)": {
        "notice": "Calculates the value of a base asset in terms of a quote asset (using a canonical rate)"
      },
      "calcLiveValue(address,uint256,address)": {
        "notice": "Calculates the value of a base asset in terms of a quote asset (using a live rate)"
      },
      "getAggregatorInfoForPrimitive(address)": {
        "notice": "Gets the aggregatorInfo variable value for a primitive"
      },
      "getEthUsdAggregator()": {
        "notice": "Gets the `ethUsdAggregator` variable value"
      },
      "getFundDeployer()": {
        "notice": "Gets the `FUND_DEPLOYER` variable"
      },
      "getOwner()": {
        "notice": "Gets the owner of this contract"
      },
      "getRateAssetForPrimitive(address)": {
        "notice": "Gets the rateAsset variable value for a primitive"
      },
      "getStaleRateThreshold()": {
        "notice": "Gets the `staleRateThreshold` variable value"
      },
      "getUnitForPrimitive(address)": {
        "notice": "Gets the unit variable value for a primitive"
      },
      "getWethToken()": {
        "notice": "Gets the `WETH_TOKEN` variable value"
      },
      "isSupportedAsset(address)": {
        "notice": "Checks whether an asset is a supported primitive of the price feed"
      },
      "rateIsStale(address)": {
        "notice": "Checks whether the current rate is considered stale for the specified aggregator"
      },
      "removePrimitives(address[])": {
        "notice": "Removes a list of primitives from the feed"
      },
      "removeStalePrimitives(address[])": {
        "notice": "Removes stale primitives from the feed"
      },
      "setEthUsdAggregator(address)": {
        "notice": "Sets the `ehUsdAggregator` variable value"
      },
      "setStaleRateThreshold(uint256)": {
        "notice": "Sets the `staleRateThreshold` variable"
      },
      "updatePrimitives(address[],address[])": {
        "notice": "Updates the aggregators for given primitives"
      }
    },
    "notice": "A price feed that uses Chainlink oracles as price sources",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 41590,
        "contract": "contracts/release/infrastructure/price-feeds/primitives/ChainlinkPriceFeed.sol:ChainlinkPriceFeed",
        "label": "ethUsdAggregator",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 41592,
        "contract": "contracts/release/infrastructure/price-feeds/primitives/ChainlinkPriceFeed.sol:ChainlinkPriceFeed",
        "label": "staleRateThreshold",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 41596,
        "contract": "contracts/release/infrastructure/price-feeds/primitives/ChainlinkPriceFeed.sol:ChainlinkPriceFeed",
        "label": "primitiveToAggregatorInfo",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(AggregatorInfo)41581_storage)"
      },
      {
        "astId": 41600,
        "contract": "contracts/release/infrastructure/price-feeds/primitives/ChainlinkPriceFeed.sol:ChainlinkPriceFeed",
        "label": "primitiveToUnit",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_enum(RateAsset)41576": {
        "encoding": "inplace",
        "label": "enum ChainlinkPriceFeed.RateAsset",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(AggregatorInfo)41581_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ChainlinkPriceFeed.AggregatorInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(AggregatorInfo)41581_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AggregatorInfo)41581_storage": {
        "encoding": "inplace",
        "label": "struct ChainlinkPriceFeed.AggregatorInfo",
        "members": [
          {
            "astId": 41578,
            "contract": "contracts/release/infrastructure/price-feeds/primitives/ChainlinkPriceFeed.sol:ChainlinkPriceFeed",
            "label": "aggregator",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 41580,
            "contract": "contracts/release/infrastructure/price-feeds/primitives/ChainlinkPriceFeed.sol:ChainlinkPriceFeed",
            "label": "rateAsset",
            "offset": 20,
            "slot": "0",
            "type": "t_enum(RateAsset)41576"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}