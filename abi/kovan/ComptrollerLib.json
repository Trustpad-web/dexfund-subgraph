{
  "address": "0x50381b32b9a1b91D2423d4773A2E02a855cb0c0d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dispatcher",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_fundDeployer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_valueInterpreter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_integrationManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_policyManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_primitivePriceFeed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_synthetixPriceFeed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_synthetixAddressResolver",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sharesDue",
          "type": "uint256"
        }
      ],
      "name": "MigratedSharesDuePaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bool",
          "name": "overridePause",
          "type": "bool"
        }
      ],
      "name": "OverridePauseSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "failureReturnData",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "redeemer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sharesQuantity",
          "type": "uint256"
        }
      ],
      "name": "PreRedeemSharesHookFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "investmentAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sharesIssued",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sharesReceived",
          "type": "uint256"
        }
      ],
      "name": "SharesBought",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "redeemer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sharesQuantity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "receivedAssets",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "receivedAssetQuantities",
          "type": "uint256[]"
        }
      ],
      "name": "SharesRedeemed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "vaultProxy",
          "type": "address"
        }
      ],
      "name": "VaultProxySet",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultProxy",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isMigration",
          "type": "bool"
        }
      ],
      "name": "activate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_buyers",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_investmentAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_minSharesQuantities",
          "type": "uint256[]"
        }
      ],
      "name": "buyShares",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "sharesReceivedAmounts_",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_requireFinality",
          "type": "bool"
        }
      ],
      "name": "calcGav",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "gav_",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isValid_",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_requireFinality",
          "type": "bool"
        }
      ],
      "name": "calcGrossShareValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "grossShareValue_",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isValid_",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_extension",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_actionId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_callArgs",
          "type": "bytes"
        }
      ],
      "name": "callOnExtension",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_feeManagerConfigData",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_policyManagerConfigData",
          "type": "bytes"
        }
      ],
      "name": "configureExtensions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "destruct",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDenominationAsset",
      "outputs": [
        {
          "internalType": "address",
          "name": "denominationAsset_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLibRoutes",
      "outputs": [
        {
          "internalType": "address",
          "name": "dispatcher_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "feeManager_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "fundDeployer_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "integrationManager_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "policyManager_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "primitivePriceFeed_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "valueInterpreter_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOverridePause",
      "outputs": [
        {
          "internalType": "bool",
          "name": "overridePause_",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSharesActionTimelock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "sharesActionTimelock_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSynthetixAddressResolver",
      "outputs": [
        {
          "internalType": "address",
          "name": "synthetixAddressResolver_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSynthetixPriceFeed",
      "outputs": [
        {
          "internalType": "address",
          "name": "synthetixPriceFeed_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVaultProxy",
      "outputs": [
        {
          "internalType": "address",
          "name": "vaultProxy_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_denominationAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_sharesActionTimelock",
          "type": "uint256"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IComptroller.VaultAction",
          "name": "_action",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "_actionData",
          "type": "bytes"
        }
      ],
      "name": "permissionedVaultAction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redeemShares",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "payoutAssets_",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "payoutAmounts_",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_sharesQuantity",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_additionalAssets",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_assetsToSkip",
          "type": "address[]"
        }
      ],
      "name": "redeemSharesDetailed",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "payoutAssets_",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "payoutAmounts_",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_nextOverridePause",
          "type": "bool"
        }
      ],
      "name": "setOverridePause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_contract",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "_selector",
          "type": "bytes4"
        },
        {
          "internalType": "bytes",
          "name": "_encodedArgs",
          "type": "bytes"
        }
      ],
      "name": "vaultCallOnContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1c95b520dfb4c77933fb02b03285bff28ae4977e70a15dc4ae0b90bca8e02480",
  "receipt": {
    "to": null,
    "from": "0xf83F4c3A25b8FEE1722d76e5F72AaFcA00845011",
    "contractAddress": "0x50381b32b9a1b91D2423d4773A2E02a855cb0c0d",
    "transactionIndex": 0,
    "gasUsed": "4536893",
    "logsBloom": "0x
    "blockHash": "0x18a1a416064c6f009e155ee7ee53fb5f28ce46298cef0553e74eb269c1583a7b",
    "transactionHash": "0x1c95b520dfb4c77933fb02b03285bff28ae4977e70a15dc4ae0b90bca8e02480",
    "logs": [],
    "blockNumber": 27796698,
    "cumulativeGasUsed": "4536893",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xeb85C242C8de456aD6b4104b351668aB96399615",
    "0x148a6FFbD7CCF8Ef7DB4dFD3103C4f197f3d46B2",
    "0x1f956E9D93ACa08907323Bf0878A1a87F96a8C65",
    "0xFDB42488D0A2F32693F3D87141806734ea7833b9",
    "0x35a9ed450d4b5a12e24Ff81df198C7e412Aa2745",
    "0x008DBE548c97D253c8161305883AE506f264c4fD",
    "0x2cC6D6915A9E9f340435b7AD8C2e916706b8FD59",
    "0xfE9bE5590f2BEEb56F76D1CEcf815E89b8C9020C",
    "0x93A5c5c7547832c8ebFcCAbc2157D43A9c5E68d4"
  ],
  "solcInputHash": "a255b7352a771229d5d6ada28c33f53e",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dispatcher\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fundDeployer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_valueInterpreter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_integrationManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_policyManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_primitivePriceFeed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_synthetixPriceFeed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_synthetixAddressResolver\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharesDue\",\"type\":\"uint256\"}],\"name\":\"MigratedSharesDuePaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"overridePause\",\"type\":\"bool\"}],\"name\":\"OverridePauseSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"failureReturnData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharesQuantity\",\"type\":\"uint256\"}],\"name\":\"PreRedeemSharesHookFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"investmentAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharesIssued\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharesReceived\",\"type\":\"uint256\"}],\"name\":\"SharesBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharesQuantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"receivedAssets\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"receivedAssetQuantities\",\"type\":\"uint256[]\"}],\"name\":\"SharesRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vaultProxy\",\"type\":\"address\"}],\"name\":\"VaultProxySet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isMigration\",\"type\":\"bool\"}],\"name\":\"activate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_buyers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_investmentAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_minSharesQuantities\",\"type\":\"uint256[]\"}],\"name\":\"buyShares\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"sharesReceivedAmounts_\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_requireFinality\",\"type\":\"bool\"}],\"name\":\"calcGav\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gav_\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isValid_\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_requireFinality\",\"type\":\"bool\"}],\"name\":\"calcGrossShareValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"grossShareValue_\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isValid_\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_extension\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_actionId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_callArgs\",\"type\":\"bytes\"}],\"name\":\"callOnExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_feeManagerConfigData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_policyManagerConfigData\",\"type\":\"bytes\"}],\"name\":\"configureExtensions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destruct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDenominationAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"denominationAsset_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLibRoutes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"dispatcher_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeManager_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundDeployer_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"integrationManager_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"policyManager_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"primitivePriceFeed_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"valueInterpreter_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOverridePause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"overridePause_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSharesActionTimelock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sharesActionTimelock_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSynthetixAddressResolver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"synthetixAddressResolver_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSynthetixPriceFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"synthetixPriceFeed_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"vaultProxy_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_denominationAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sharesActionTimelock\",\"type\":\"uint256\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IComptroller.VaultAction\",\"name\":\"_action\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_actionData\",\"type\":\"bytes\"}],\"name\":\"permissionedVaultAction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemShares\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"payoutAssets_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"payoutAmounts_\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sharesQuantity\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_additionalAssets\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_assetsToSkip\",\"type\":\"address[]\"}],\"name\":\"redeemSharesDetailed\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"payoutAssets_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"payoutAmounts_\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_nextOverridePause\",\"type\":\"bool\"}],\"name\":\"setOverridePause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"_selector\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"_encodedArgs\",\"type\":\"bytes\"}],\"name\":\"vaultCallOnContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Enzyme Council <security@enzyme.finance>\",\"kind\":\"dev\",\"methods\":{\"activate(address,bool)\":{\"details\":\"No need to assert anything beyond FundDeployer access.\",\"params\":{\"_isMigration\":\"True if a migrated fund is being activated\",\"_vaultProxy\":\"The VaultProxy to attach to the fund\"}},\"buyShares(address[],uint256[],uint256[])\":{\"details\":\"Param arrays have indexes corresponding to individual __buyShares() orders.\",\"params\":{\"_buyers\":\"The accounts for which to buy shares\",\"_investmentAmounts\":\"The amounts of the fund's denomination asset with which to buy shares for the corresponding _buyers\",\"_minSharesQuantities\":\"The minimum quantities of shares to buy with the corresponding _investmentAmounts\"},\"returns\":{\"sharesReceivedAmounts_\":\"The actual amounts of shares received by the corresponding _buyers\"}},\"calcGav(bool)\":{\"params\":{\"_requireFinality\":\"True if all assets must have exact final balances settled\"},\"returns\":{\"gav_\":\"The fund GAV\",\"isValid_\":\"True if the conversion rates used to derive the GAV are all valid\"}},\"calcGrossShareValue(bool)\":{\"details\":\"Does not account for any fees outstanding.\",\"params\":{\"_requireFinality\":\"True if all assets must have exact final balances settled\"},\"returns\":{\"grossShareValue_\":\"The amount of the denomination asset per share\",\"isValid_\":\"True if the conversion rates to derive the value are all valid\"}},\"callOnExtension(address,uint256,bytes)\":{\"details\":\"Used to route arbitrary calls, so that msg.sender is the ComptrollerProxy (for access control). Uses a mutex of sorts that allows \\\"permissioned vault actions\\\" during calls originating from this function.\",\"params\":{\"_actionId\":\"An ID representing the action to take on the extension (see extension)\",\"_callArgs\":\"The encoded data for the call\",\"_extension\":\"The Extension contract to call (e.g., FeeManager)\"}},\"configureExtensions(bytes,bytes)\":{\"details\":\"No need to assert anything beyond FundDeployer access. Called atomically with init(), but after ComptrollerLib has been deployed, giving access to its state and interface\",\"params\":{\"_feeManagerConfigData\":\"Encoded config for fees to enable\",\"_policyManagerConfigData\":\"Encoded config for policies to enable\"}},\"destruct()\":{\"details\":\"No need to assert anything beyond FundDeployer access. Calling onlyNotPaused here rather than in the FundDeployer allows the owner to potentially override the pause and rescue unpaid fees.\"},\"getDenominationAsset()\":{\"returns\":{\"denominationAsset_\":\"The `denominationAsset` variable value\"}},\"getLibRoutes()\":{\"returns\":{\"dispatcher_\":\"The `DISPATCHER` variable value\",\"feeManager_\":\"The `FEE_MANAGER` variable value\",\"fundDeployer_\":\"The `FUND_DEPLOYER` variable value\",\"integrationManager_\":\"The `INTEGRATION_MANAGER` variable value\",\"policyManager_\":\"The `POLICY_MANAGER` variable value\",\"primitivePriceFeed_\":\"The `PRIMITIVE_PRICE_FEED` variable value\",\"valueInterpreter_\":\"The `VALUE_INTERPRETER` variable value\"}},\"getOverridePause()\":{\"returns\":{\"overridePause_\":\"The `overridePause` variable value\"}},\"getSharesActionTimelock()\":{\"returns\":{\"sharesActionTimelock_\":\"The `sharesActionTimelock` variable value\"}},\"getSynthetixAddressResolver()\":{\"returns\":{\"synthetixAddressResolver_\":\"The `SYNTHETIX_ADDRESS_RESOLVER` variable value\"}},\"getSynthetixPriceFeed()\":{\"returns\":{\"synthetixPriceFeed_\":\"The `SYNTHETIX_PRICE_FEED` variable value\"}},\"getVaultProxy()\":{\"returns\":{\"vaultProxy_\":\"The `vaultProxy` variable value\"}},\"init(address,uint256)\":{\"details\":\"Pseudo-constructor per proxy. No need to assert access because this is called atomically on deployment, and once it's called, it cannot be called again.\",\"params\":{\"_denominationAsset\":\"The asset in which the fund's value should be denominated\",\"_sharesActionTimelock\":\"The minimum number of seconds between any two \\\"shares actions\\\" (buying or selling shares) by the same user\"}},\"permissionedVaultAction(uint8,bytes)\":{\"params\":{\"_action\":\"The enum representing the VaultAction to perform on the VaultProxy\",\"_actionData\":\"The call data for the action to perform\"}},\"redeemShares()\":{\"details\":\"See __redeemShares() for further detail\",\"returns\":{\"payoutAmounts_\":\"The amount of each asset paid out to the redeemer\",\"payoutAssets_\":\"The assets paid out to the redeemer\"}},\"redeemSharesDetailed(uint256,address[],address[])\":{\"details\":\"Any claim to passed _assetsToSkip will be forfeited entirely. This should generally only be exercised if a bad asset is causing redemption to fail.\",\"params\":{\"_additionalAssets\":\"Additional (non-tracked) assets to claim\",\"_assetsToSkip\":\"Tracked assets to forfeit\",\"_sharesQuantity\":\"The quantity of shares to redeem\"},\"returns\":{\"payoutAmounts_\":\"The amount of each asset paid out to the redeemer\",\"payoutAssets_\":\"The assets paid out to the redeemer\"}},\"setOverridePause(bool)\":{\"params\":{\"_nextOverridePause\":\"True if the pause should be overrode\"}},\"vaultCallOnContract(address,bytes4,bytes)\":{\"params\":{\"_contract\":\"The contract to call\",\"_encodedArgs\":\"The encoded arguments for the call\",\"_selector\":\"The selector to call\"}}},\"title\":\"ComptrollerLib Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"activate(address,bool)\":{\"notice\":\"Activates the fund by attaching a VaultProxy and activating all Extensions\"},\"buyShares(address[],uint256[],uint256[])\":{\"notice\":\"Buys shares in the fund for multiple sets of criteria\"},\"calcGav(bool)\":{\"notice\":\"Calculates the gross asset value (GAV) of the fund\"},\"calcGrossShareValue(bool)\":{\"notice\":\"Calculates the gross value of 1 unit of shares in the fund's denomination asset\"},\"callOnExtension(address,uint256,bytes)\":{\"notice\":\"Calls a specified action on an Extension\"},\"configureExtensions(bytes,bytes)\":{\"notice\":\"Configure the extensions of a fund\"},\"destruct()\":{\"notice\":\"Remove the config for a fund\"},\"getDenominationAsset()\":{\"notice\":\"Gets the `denominationAsset` variable\"},\"getLibRoutes()\":{\"notice\":\"Gets the routes for the various contracts used by all funds\"},\"getOverridePause()\":{\"notice\":\"Gets the `overridePause` variable\"},\"getSharesActionTimelock()\":{\"notice\":\"Gets the `sharesActionTimelock` variable\"},\"getSynthetixAddressResolver()\":{\"notice\":\"Gets the `SYNTHETIX_ADDRESS_RESOLVER` variable\"},\"getSynthetixPriceFeed()\":{\"notice\":\"Gets the `SYNTHETIX_PRICE_FEED` variable\"},\"getVaultProxy()\":{\"notice\":\"Gets the `vaultProxy` variable\"},\"init(address,uint256)\":{\"notice\":\"Initializes a fund with its core config\"},\"permissionedVaultAction(uint8,bytes)\":{\"notice\":\"Makes a permissioned, state-changing call on the VaultProxy contract\"},\"redeemShares()\":{\"notice\":\"Redeem all of the sender's shares for a proportionate slice of the fund's assets\"},\"redeemSharesDetailed(uint256,address[],address[])\":{\"notice\":\"Redeem a specified quantity of the sender's shares for a proportionate slice of the fund's assets, optionally specifying additional assets and assets to skip.\"},\"setOverridePause(bool)\":{\"notice\":\"Sets or unsets an override on a release-wide pause\"},\"vaultCallOnContract(address,bytes4,bytes)\":{\"notice\":\"Makes an arbitrary call with the VaultProxy contract as the sender\"}},\"notice\":\"The core logic library shared by all funds\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/release/core/fund/comptroller/ComptrollerLib.sol\":\"ComptrollerLib\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/persistent/dispatcher/IDispatcher.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IDispatcher Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IDispatcher {\\n    function cancelMigration(address _vaultProxy, bool _bypassFailure) external;\\n\\n    function claimOwnership() external;\\n\\n    function deployVaultProxy(\\n        address _vaultLib,\\n        address _owner,\\n        address _vaultAccessor,\\n        string calldata _fundName\\n    ) external returns (address vaultProxy_);\\n\\n    function executeMigration(address _vaultProxy, bool _bypassFailure) external;\\n\\n    function getCurrentFundDeployer() external view returns (address currentFundDeployer_);\\n\\n    function getFundDeployerForVaultProxy(address _vaultProxy)\\n        external\\n        view\\n        returns (address fundDeployer_);\\n\\n    function getMigrationRequestDetailsForVaultProxy(address _vaultProxy)\\n        external\\n        view\\n        returns (\\n            address nextFundDeployer_,\\n            address nextVaultAccessor_,\\n            address nextVaultLib_,\\n            uint256 executableTimestamp_\\n        );\\n\\n    function getMigrationTimelock() external view returns (uint256 migrationTimelock_);\\n\\n    function getNominatedOwner() external view returns (address nominatedOwner_);\\n\\n    function getOwner() external view returns (address owner_);\\n\\n    function getSharesTokenSymbol() external view returns (string memory sharesTokenSymbol_);\\n\\n    function getTimelockRemainingForMigrationRequest(address _vaultProxy)\\n        external\\n        view\\n        returns (uint256 secondsRemaining_);\\n\\n    function hasExecutableMigrationRequest(address _vaultProxy)\\n        external\\n        view\\n        returns (bool hasExecutableRequest_);\\n\\n    function hasMigrationRequest(address _vaultProxy)\\n        external\\n        view\\n        returns (bool hasMigrationRequest_);\\n\\n    function removeNominatedOwner() external;\\n\\n    function setCurrentFundDeployer(address _nextFundDeployer) external;\\n\\n    function setMigrationTimelock(uint256 _nextTimelock) external;\\n\\n    function setNominatedOwner(address _nextNominatedOwner) external;\\n\\n    function setSharesTokenSymbol(string calldata _nextSymbol) external;\\n\\n    function signalMigration(\\n        address _vaultProxy,\\n        address _nextVaultAccessor,\\n        address _nextVaultLib,\\n        bool _bypassFailure\\n    ) external;\\n}\\n\",\"keccak256\":\"0x0e6b0e6cf325d4f6332b8eb2b3c446b2ef3ca8456bdf0d12318d0fd9e90aeb30\",\"license\":\"GPL-3.0\"},\"contracts/persistent/utils/IMigratableVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IMigratableVault Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @dev DO NOT EDIT CONTRACT\\ninterface IMigratableVault {\\n    function canMigrate(address _who) external view returns (bool canMigrate_);\\n\\n    function init(\\n        address _owner,\\n        address _accessor,\\n        string calldata _fundName\\n    ) external;\\n\\n    function setAccessor(address _nextAccessor) external;\\n\\n    function setVaultLib(address _nextVaultLib) external;\\n}\\n\",\"keccak256\":\"0x8e1355a7efa8ec2172f5c9b532071def392b86ab1e5534d2fc73417a6e9f7238\",\"license\":\"GPL-3.0\"},\"contracts/release/core/fund-deployer/IFundDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IFundDeployer Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IFundDeployer {\\n    enum ReleaseStatus {PreLaunch, Live, Paused}\\n\\n    function getOwner() external view returns (address);\\n\\n    function getReleaseStatus() external view returns (ReleaseStatus);\\n\\n    function isRegisteredVaultCall(address, bytes4) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4147fc50c342dad395c366634a6bfa76020a76d7710698e2e79ab26ed8f5d31b\",\"license\":\"GPL-3.0\"},\"contracts/release/core/fund/comptroller/ComptrollerLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"../../../../persistent/dispatcher/IDispatcher.sol\\\";\\nimport \\\"../../../extensions/IExtension.sol\\\";\\nimport \\\"../../../extensions/fee-manager/IFeeManager.sol\\\";\\nimport \\\"../../../extensions/policy-manager/IPolicyManager.sol\\\";\\nimport \\\"../../../infrastructure/price-feeds/primitives/IPrimitivePriceFeed.sol\\\";\\nimport \\\"../../../infrastructure/value-interpreter/IValueInterpreter.sol\\\";\\nimport \\\"../../../utils/AddressArrayLib.sol\\\";\\nimport \\\"../../../utils/AssetFinalityResolver.sol\\\";\\nimport \\\"../../fund-deployer/IFundDeployer.sol\\\";\\nimport \\\"../vault/IVault.sol\\\";\\nimport \\\"./IComptroller.sol\\\";\\n\\n/// @title ComptrollerLib Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice The core logic library shared by all funds\\ncontract ComptrollerLib is IComptroller, AssetFinalityResolver {\\n    using AddressArrayLib for address[];\\n    using SafeMath for uint256;\\n    using SafeERC20 for ERC20;\\n\\n    event MigratedSharesDuePaid(uint256 sharesDue);\\n\\n    event OverridePauseSet(bool indexed overridePause);\\n\\n    event PreRedeemSharesHookFailed(\\n        bytes failureReturnData,\\n        address redeemer,\\n        uint256 sharesQuantity\\n    );\\n\\n    event SharesBought(\\n        address indexed caller,\\n        address indexed buyer,\\n        uint256 investmentAmount,\\n        uint256 sharesIssued,\\n        uint256 sharesReceived\\n    );\\n\\n    event SharesRedeemed(\\n        address indexed redeemer,\\n        uint256 sharesQuantity,\\n        address[] receivedAssets,\\n        uint256[] receivedAssetQuantities\\n    );\\n\\n    event VaultProxySet(address vaultProxy);\\n\\n    // Constants and immutables - shared by all proxies\\n    uint256 private constant SHARES_UNIT = 10**18;\\n    address private immutable DISPATCHER;\\n    address private immutable FUND_DEPLOYER;\\n    address private immutable FEE_MANAGER;\\n    address private immutable INTEGRATION_MANAGER;\\n    address private immutable PRIMITIVE_PRICE_FEED;\\n    address private immutable POLICY_MANAGER;\\n    address private immutable VALUE_INTERPRETER;\\n\\n    // Pseudo-constants (can only be set once)\\n\\n    address internal denominationAsset;\\n    address internal vaultProxy;\\n    // True only for the one non-proxy\\n    bool internal isLib;\\n\\n    // Storage\\n\\n    // Allows a fund owner to override a release-level pause\\n    bool internal overridePause;\\n    // A reverse-mutex, granting atomic permission for particular contracts to make vault calls\\n    bool internal permissionedVaultActionAllowed;\\n    // A mutex to protect against reentrancy\\n    bool internal reentranceLocked;\\n    // A timelock between any \\\"shares actions\\\" (i.e., buy and redeem shares), per-account\\n    uint256 internal sharesActionTimelock;\\n    mapping(address => uint256) internal acctToLastSharesAction;\\n\\n    ///////////////\\n    // MODIFIERS //\\n    ///////////////\\n\\n    modifier allowsPermissionedVaultAction() {\\n        __assertPermissionedVaultActionNotAllowed();\\n        permissionedVaultActionAllowed = true;\\n        _;\\n        permissionedVaultActionAllowed = false;\\n    }\\n\\n    modifier locksReentrance() {\\n        __assertNotReentranceLocked();\\n        reentranceLocked = true;\\n        _;\\n        reentranceLocked = false;\\n    }\\n\\n    modifier onlyActive() {\\n        __assertIsActive(vaultProxy);\\n        _;\\n    }\\n\\n    modifier onlyNotPaused() {\\n        __assertNotPaused();\\n        _;\\n    }\\n\\n    modifier onlyFundDeployer() {\\n        __assertIsFundDeployer(msg.sender);\\n        _;\\n    }\\n\\n    modifier onlyOwner() {\\n        __assertIsOwner(msg.sender);\\n        _;\\n    }\\n\\n    modifier timelockedSharesAction(address _account) {\\n        __assertSharesActionNotTimelocked(_account);\\n        _;\\n        acctToLastSharesAction[_account] = block.timestamp;\\n    }\\n\\n    // ASSERTION HELPERS\\n\\n    // Modifiers are inefficient in terms of contract size,\\n    // so we use helper functions to prevent repetitive inlining of expensive string values.\\n\\n    /// @dev Since vaultProxy is set during activate(),\\n    /// we can check that var rather than storing additional state\\n    function __assertIsActive(address _vaultProxy) private pure {\\n        require(_vaultProxy != address(0), \\\"Fund not active\\\");\\n    }\\n\\n    function __assertIsFundDeployer(address _who) private view {\\n        require(_who == FUND_DEPLOYER, \\\"Only FundDeployer callable\\\");\\n    }\\n\\n    function __assertIsOwner(address _who) private view {\\n        require(_who == IVault(vaultProxy).getOwner(), \\\"Only fund owner callable\\\");\\n    }\\n\\n    function __assertLowLevelCall(bool _success, bytes memory _returnData) private pure {\\n        require(_success, string(_returnData));\\n    }\\n\\n    function __assertNotPaused() private view {\\n        require(!__fundIsPaused(), \\\"Fund is paused\\\");\\n    }\\n\\n    function __assertNotReentranceLocked() private view {\\n        require(!reentranceLocked, \\\"Re-entrance\\\");\\n    }\\n\\n    function __assertPermissionedVaultActionNotAllowed() private view {\\n        require(!permissionedVaultActionAllowed, \\\"Vault action re-entrance\\\");\\n    }\\n\\n    function __assertSharesActionNotTimelocked(address _account) private view {\\n        require(\\n            block.timestamp.sub(acctToLastSharesAction[_account]) >= sharesActionTimelock,\\n            \\\"Shares action timelocked\\\"\\n        );\\n    }\\n\\n    constructor(\\n        address _dispatcher,\\n        address _fundDeployer,\\n        address _valueInterpreter,\\n        address _feeManager,\\n        address _integrationManager,\\n        address _policyManager,\\n        address _primitivePriceFeed,\\n        address _synthetixPriceFeed,\\n        address _synthetixAddressResolver\\n    ) public AssetFinalityResolver(_synthetixPriceFeed, _synthetixAddressResolver) {\\n        DISPATCHER = _dispatcher;\\n        FEE_MANAGER = _feeManager;\\n        FUND_DEPLOYER = _fundDeployer;\\n        INTEGRATION_MANAGER = _integrationManager;\\n        PRIMITIVE_PRICE_FEED = _primitivePriceFeed;\\n        POLICY_MANAGER = _policyManager;\\n        VALUE_INTERPRETER = _valueInterpreter;\\n        isLib = true;\\n    }\\n\\n    /////////////\\n    // GENERAL //\\n    /////////////\\n\\n    /// @notice Calls a specified action on an Extension\\n    /// @param _extension The Extension contract to call (e.g., FeeManager)\\n    /// @param _actionId An ID representing the action to take on the extension (see extension)\\n    /// @param _callArgs The encoded data for the call\\n    /// @dev Used to route arbitrary calls, so that msg.sender is the ComptrollerProxy\\n    /// (for access control). Uses a mutex of sorts that allows \\\"permissioned vault actions\\\"\\n    /// during calls originating from this function.\\n    function callOnExtension(\\n        address _extension,\\n        uint256 _actionId,\\n        bytes calldata _callArgs\\n    ) external override onlyNotPaused onlyActive locksReentrance allowsPermissionedVaultAction {\\n        require(\\n            _extension == FEE_MANAGER || _extension == INTEGRATION_MANAGER,\\n            \\\"callOnExtension: _extension invalid\\\"\\n        );\\n\\n        IExtension(_extension).receiveCallFromComptroller(msg.sender, _actionId, _callArgs);\\n    }\\n\\n    /// @notice Sets or unsets an override on a release-wide pause\\n    /// @param _nextOverridePause True if the pause should be overrode\\n    function setOverridePause(bool _nextOverridePause) external onlyOwner {\\n        require(_nextOverridePause != overridePause, \\\"setOverridePause: Value already set\\\");\\n\\n        overridePause = _nextOverridePause;\\n\\n        emit OverridePauseSet(_nextOverridePause);\\n    }\\n\\n    /// @notice Makes an arbitrary call with the VaultProxy contract as the sender\\n    /// @param _contract The contract to call\\n    /// @param _selector The selector to call\\n    /// @param _encodedArgs The encoded arguments for the call\\n    function vaultCallOnContract(\\n        address _contract,\\n        bytes4 _selector,\\n        bytes calldata _encodedArgs\\n    ) external onlyNotPaused onlyActive onlyOwner {\\n        require(\\n            IFundDeployer(FUND_DEPLOYER).isRegisteredVaultCall(_contract, _selector),\\n            \\\"vaultCallOnContract: Unregistered\\\"\\n        );\\n\\n        IVault(vaultProxy).callOnContract(_contract, abi.encodePacked(_selector, _encodedArgs));\\n    }\\n\\n    /// @dev Helper to check whether the release is paused, and that there is no local override\\n    function __fundIsPaused() private view returns (bool) {\\n        return\\n            IFundDeployer(FUND_DEPLOYER).getReleaseStatus() ==\\n            IFundDeployer.ReleaseStatus.Paused &&\\n            !overridePause;\\n    }\\n\\n    ////////////////////////////////\\n    // PERMISSIONED VAULT ACTIONS //\\n    ////////////////////////////////\\n\\n    /// @notice Makes a permissioned, state-changing call on the VaultProxy contract\\n    /// @param _action The enum representing the VaultAction to perform on the VaultProxy\\n    /// @param _actionData The call data for the action to perform\\n    function permissionedVaultAction(VaultAction _action, bytes calldata _actionData)\\n        external\\n        override\\n        onlyNotPaused\\n        onlyActive\\n    {\\n        __assertPermissionedVaultAction(msg.sender, _action);\\n\\n        if (_action == VaultAction.AddTrackedAsset) {\\n            __vaultActionAddTrackedAsset(_actionData);\\n        } else if (_action == VaultAction.ApproveAssetSpender) {\\n            __vaultActionApproveAssetSpender(_actionData);\\n        } else if (_action == VaultAction.BurnShares) {\\n            __vaultActionBurnShares(_actionData);\\n        } else if (_action == VaultAction.MintShares) {\\n            __vaultActionMintShares(_actionData);\\n        } else if (_action == VaultAction.RemoveTrackedAsset) {\\n            __vaultActionRemoveTrackedAsset(_actionData);\\n        } else if (_action == VaultAction.TransferShares) {\\n            __vaultActionTransferShares(_actionData);\\n        } else if (_action == VaultAction.WithdrawAssetTo) {\\n            __vaultActionWithdrawAssetTo(_actionData);\\n        }\\n    }\\n\\n    /// @dev Helper to assert that a caller is allowed to perform a particular VaultAction\\n    function __assertPermissionedVaultAction(address _caller, VaultAction _action) private view {\\n        require(\\n            permissionedVaultActionAllowed,\\n            \\\"__assertPermissionedVaultAction: No action allowed\\\"\\n        );\\n\\n        if (_caller == INTEGRATION_MANAGER) {\\n            require(\\n                _action == VaultAction.ApproveAssetSpender ||\\n                    _action == VaultAction.AddTrackedAsset ||\\n                    _action == VaultAction.RemoveTrackedAsset ||\\n                    _action == VaultAction.WithdrawAssetTo,\\n                \\\"__assertPermissionedVaultAction: Not valid for IntegrationManager\\\"\\n            );\\n        } else if (_caller == FEE_MANAGER) {\\n            require(\\n                _action == VaultAction.BurnShares ||\\n                    _action == VaultAction.MintShares ||\\n                    _action == VaultAction.TransferShares,\\n                \\\"__assertPermissionedVaultAction: Not valid for FeeManager\\\"\\n            );\\n        } else {\\n            revert(\\\"__assertPermissionedVaultAction: Not a valid actor\\\");\\n        }\\n    }\\n\\n    /// @dev Helper to add a tracked asset to the fund\\n    function __vaultActionAddTrackedAsset(bytes memory _actionData) private {\\n        address asset = abi.decode(_actionData, (address));\\n        IVault(vaultProxy).addTrackedAsset(asset);\\n    }\\n\\n    /// @dev Helper to grant a spender an allowance for a fund's asset\\n    function __vaultActionApproveAssetSpender(bytes memory _actionData) private {\\n        (address asset, address target, uint256 amount) = abi.decode(\\n            _actionData,\\n            (address, address, uint256)\\n        );\\n        IVault(vaultProxy).approveAssetSpender(asset, target, amount);\\n    }\\n\\n    /// @dev Helper to burn fund shares for a particular account\\n    function __vaultActionBurnShares(bytes memory _actionData) private {\\n        (address target, uint256 amount) = abi.decode(_actionData, (address, uint256));\\n        IVault(vaultProxy).burnShares(target, amount);\\n    }\\n\\n    /// @dev Helper to mint fund shares to a particular account\\n    function __vaultActionMintShares(bytes memory _actionData) private {\\n        (address target, uint256 amount) = abi.decode(_actionData, (address, uint256));\\n        IVault(vaultProxy).mintShares(target, amount);\\n    }\\n\\n    /// @dev Helper to remove a tracked asset from the fund\\n    function __vaultActionRemoveTrackedAsset(bytes memory _actionData) private {\\n        address asset = abi.decode(_actionData, (address));\\n\\n        // Allowing this to fail silently makes it cheaper and simpler\\n        // for Extensions to not query for the denomination asset\\n        if (asset != denominationAsset) {\\n            IVault(vaultProxy).removeTrackedAsset(asset);\\n        }\\n    }\\n\\n    /// @dev Helper to transfer fund shares from one account to another\\n    function __vaultActionTransferShares(bytes memory _actionData) private {\\n        (address from, address to, uint256 amount) = abi.decode(\\n            _actionData,\\n            (address, address, uint256)\\n        );\\n        IVault(vaultProxy).transferShares(from, to, amount);\\n    }\\n\\n    /// @dev Helper to withdraw an asset from the VaultProxy to a given account\\n    function __vaultActionWithdrawAssetTo(bytes memory _actionData) private {\\n        (address asset, address target, uint256 amount) = abi.decode(\\n            _actionData,\\n            (address, address, uint256)\\n        );\\n        IVault(vaultProxy).withdrawAssetTo(asset, target, amount);\\n    }\\n\\n    ///////////////\\n    // LIFECYCLE //\\n    ///////////////\\n\\n    /// @notice Initializes a fund with its core config\\n    /// @param _denominationAsset The asset in which the fund's value should be denominated\\n    /// @param _sharesActionTimelock The minimum number of seconds between any two \\\"shares actions\\\"\\n    /// (buying or selling shares) by the same user\\n    /// @dev Pseudo-constructor per proxy.\\n    /// No need to assert access because this is called atomically on deployment,\\n    /// and once it's called, it cannot be called again.\\n    function init(address _denominationAsset, uint256 _sharesActionTimelock) external override {\\n        require(denominationAsset == address(0), \\\"init: Already initialized\\\");\\n        require(\\n            IPrimitivePriceFeed(PRIMITIVE_PRICE_FEED).isSupportedAsset(_denominationAsset),\\n            \\\"init: Bad denomination asset\\\"\\n        );\\n\\n        denominationAsset = _denominationAsset;\\n        sharesActionTimelock = _sharesActionTimelock;\\n    }\\n\\n    /// @notice Configure the extensions of a fund\\n    /// @param _feeManagerConfigData Encoded config for fees to enable\\n    /// @param _policyManagerConfigData Encoded config for policies to enable\\n    /// @dev No need to assert anything beyond FundDeployer access.\\n    /// Called atomically with init(), but after ComptrollerLib has been deployed,\\n    /// giving access to its state and interface\\n    function configureExtensions(\\n        bytes calldata _feeManagerConfigData,\\n        bytes calldata _policyManagerConfigData\\n    ) external override onlyFundDeployer {\\n        if (_feeManagerConfigData.length > 0) {\\n            IExtension(FEE_MANAGER).setConfigForFund(_feeManagerConfigData);\\n        }\\n        if (_policyManagerConfigData.length > 0) {\\n            IExtension(POLICY_MANAGER).setConfigForFund(_policyManagerConfigData);\\n        }\\n    }\\n\\n    /// @notice Activates the fund by attaching a VaultProxy and activating all Extensions\\n    /// @param _vaultProxy The VaultProxy to attach to the fund\\n    /// @param _isMigration True if a migrated fund is being activated\\n    /// @dev No need to assert anything beyond FundDeployer access.\\n    function activate(address _vaultProxy, bool _isMigration) external override onlyFundDeployer {\\n        vaultProxy = _vaultProxy;\\n\\n        emit VaultProxySet(_vaultProxy);\\n\\n        if (_isMigration) {\\n            // Distribute any shares in the VaultProxy to the fund owner.\\n            // This is a mechanism to ensure that even in the edge case of a fund being unable\\n            // to payout fee shares owed during migration, these shares are not lost.\\n            uint256 sharesDue = ERC20(_vaultProxy).balanceOf(_vaultProxy);\\n            if (sharesDue > 0) {\\n                IVault(_vaultProxy).transferShares(\\n                    _vaultProxy,\\n                    IVault(_vaultProxy).getOwner(),\\n                    sharesDue\\n                );\\n\\n                emit MigratedSharesDuePaid(sharesDue);\\n            }\\n        }\\n\\n        // Note: a future release could consider forcing the adding of a tracked asset here,\\n        // just in case a fund is migrating from an old configuration where they are not able\\n        // to remove an asset to get under the tracked assets limit\\n        IVault(_vaultProxy).addTrackedAsset(denominationAsset);\\n\\n        // Activate extensions\\n        IExtension(FEE_MANAGER).activateForFund(_isMigration);\\n        IExtension(INTEGRATION_MANAGER).activateForFund(_isMigration);\\n        IExtension(POLICY_MANAGER).activateForFund(_isMigration);\\n    }\\n\\n    /// @notice Remove the config for a fund\\n    /// @dev No need to assert anything beyond FundDeployer access.\\n    /// Calling onlyNotPaused here rather than in the FundDeployer allows\\n    /// the owner to potentially override the pause and rescue unpaid fees.\\n    function destruct()\\n        external\\n        override\\n        onlyFundDeployer\\n        onlyNotPaused\\n        allowsPermissionedVaultAction\\n    {\\n        // Failsafe to protect the libs against selfdestruct\\n        require(!isLib, \\\"destruct: Only delegate callable\\\");\\n\\n        // Deactivate the extensions\\n        IExtension(FEE_MANAGER).deactivateForFund();\\n        IExtension(INTEGRATION_MANAGER).deactivateForFund();\\n        IExtension(POLICY_MANAGER).deactivateForFund();\\n\\n        // Delete storage of ComptrollerProxy\\n        // There should never be ETH in the ComptrollerLib, so no need to waste gas\\n        // to get the fund owner\\n        selfdestruct(address(0));\\n    }\\n\\n    ////////////////\\n    // ACCOUNTING //\\n    ////////////////\\n\\n    /// @notice Calculates the gross asset value (GAV) of the fund\\n    /// @param _requireFinality True if all assets must have exact final balances settled\\n    /// @return gav_ The fund GAV\\n    /// @return isValid_ True if the conversion rates used to derive the GAV are all valid\\n    function calcGav(bool _requireFinality) public override returns (uint256 gav_, bool isValid_) {\\n        address vaultProxyAddress = vaultProxy;\\n        address[] memory assets = IVault(vaultProxyAddress).getTrackedAssets();\\n        if (assets.length == 0) {\\n            return (0, true);\\n        }\\n\\n        uint256[] memory balances = new uint256[](assets.length);\\n        for (uint256 i; i < assets.length; i++) {\\n            balances[i] = __finalizeIfSynthAndGetAssetBalance(\\n                vaultProxyAddress,\\n                assets[i],\\n                _requireFinality\\n            );\\n        }\\n\\n        (gav_, isValid_) = IValueInterpreter(VALUE_INTERPRETER).calcCanonicalAssetsTotalValue(\\n            assets,\\n            balances,\\n            denominationAsset\\n        );\\n\\n        return (gav_, isValid_);\\n    }\\n\\n    /// @notice Calculates the gross value of 1 unit of shares in the fund's denomination asset\\n    /// @param _requireFinality True if all assets must have exact final balances settled\\n    /// @return grossShareValue_ The amount of the denomination asset per share\\n    /// @return isValid_ True if the conversion rates to derive the value are all valid\\n    /// @dev Does not account for any fees outstanding.\\n    function calcGrossShareValue(bool _requireFinality)\\n        external\\n        override\\n        returns (uint256 grossShareValue_, bool isValid_)\\n    {\\n        uint256 gav;\\n        (gav, isValid_) = calcGav(_requireFinality);\\n\\n        grossShareValue_ = __calcGrossShareValue(\\n            gav,\\n            ERC20(vaultProxy).totalSupply(),\\n            10**uint256(ERC20(denominationAsset).decimals())\\n        );\\n\\n        return (grossShareValue_, isValid_);\\n    }\\n\\n    /// @dev Helper for calculating the gross share value\\n    function __calcGrossShareValue(\\n        uint256 _gav,\\n        uint256 _sharesSupply,\\n        uint256 _denominationAssetUnit\\n    ) private pure returns (uint256 grossShareValue_) {\\n        if (_sharesSupply == 0) {\\n            return _denominationAssetUnit;\\n        }\\n\\n        return _gav.mul(SHARES_UNIT).div(_sharesSupply);\\n    }\\n\\n    ///////////////////\\n    // PARTICIPATION //\\n    ///////////////////\\n\\n    // BUY SHARES\\n\\n    /// @notice Buys shares in the fund for multiple sets of criteria\\n    /// @param _buyers The accounts for which to buy shares\\n    /// @param _investmentAmounts The amounts of the fund's denomination asset\\n    /// with which to buy shares for the corresponding _buyers\\n    /// @param _minSharesQuantities The minimum quantities of shares to buy\\n    /// with the corresponding _investmentAmounts\\n    /// @return sharesReceivedAmounts_ The actual amounts of shares received\\n    /// by the corresponding _buyers\\n    /// @dev Param arrays have indexes corresponding to individual __buyShares() orders.\\n    function buyShares(\\n        address[] calldata _buyers,\\n        uint256[] calldata _investmentAmounts,\\n        uint256[] calldata _minSharesQuantities\\n    )\\n        external\\n        onlyNotPaused\\n        locksReentrance\\n        allowsPermissionedVaultAction\\n        returns (uint256[] memory sharesReceivedAmounts_)\\n    {\\n        require(_buyers.length > 0, \\\"buyShares: Empty _buyers\\\");\\n        require(\\n            _buyers.length == _investmentAmounts.length &&\\n                _buyers.length == _minSharesQuantities.length,\\n            \\\"buyShares: Unequal arrays\\\"\\n        );\\n\\n        address vaultProxyCopy = vaultProxy;\\n        __assertIsActive(vaultProxyCopy);\\n        require(\\n            !IDispatcher(DISPATCHER).hasMigrationRequest(vaultProxyCopy),\\n            \\\"buyShares: Pending migration\\\"\\n        );\\n\\n        (uint256 gav, bool gavIsValid) = calcGav(true);\\n        require(gavIsValid, \\\"buyShares: Invalid GAV\\\");\\n\\n        __buySharesSetupHook(msg.sender, _investmentAmounts, gav);\\n\\n        address denominationAssetCopy = denominationAsset;\\n        uint256 sharePrice = __calcGrossShareValue(\\n            gav,\\n            ERC20(vaultProxyCopy).totalSupply(),\\n            10**uint256(ERC20(denominationAssetCopy).decimals())\\n        );\\n\\n        sharesReceivedAmounts_ = new uint256[](_buyers.length);\\n        for (uint256 i; i < _buyers.length; i++) {\\n            sharesReceivedAmounts_[i] = __buyShares(\\n                _buyers[i],\\n                _investmentAmounts[i],\\n                _minSharesQuantities[i],\\n                vaultProxyCopy,\\n                sharePrice,\\n                gav,\\n                denominationAssetCopy\\n            );\\n\\n            gav = gav.add(_investmentAmounts[i]);\\n        }\\n\\n        __buySharesCompletedHook(msg.sender, sharesReceivedAmounts_, gav);\\n\\n        return sharesReceivedAmounts_;\\n    }\\n\\n    /// @dev Helper to buy shares\\n    function __buyShares(\\n        address _buyer,\\n        uint256 _investmentAmount,\\n        uint256 _minSharesQuantity,\\n        address _vaultProxy,\\n        uint256 _sharePrice,\\n        uint256 _preBuySharesGav,\\n        address _denominationAsset\\n    ) private timelockedSharesAction(_buyer) returns (uint256 sharesReceived_) {\\n        require(_investmentAmount > 0, \\\"__buyShares: Empty _investmentAmount\\\");\\n\\n        // Gives Extensions a chance to run logic prior to the minting of bought shares\\n        __preBuySharesHook(_buyer, _investmentAmount, _minSharesQuantity, _preBuySharesGav);\\n\\n        // Calculate the amount of shares to issue with the investment amount\\n        uint256 sharesIssued = _investmentAmount.mul(SHARES_UNIT).div(_sharePrice);\\n\\n        // Mint shares to the buyer\\n        uint256 prevBuyerShares = ERC20(_vaultProxy).balanceOf(_buyer);\\n        IVault(_vaultProxy).mintShares(_buyer, sharesIssued);\\n\\n        // Transfer the investment asset to the fund.\\n        // Does not follow the checks-effects-interactions pattern, but it is preferred\\n        // to have the final state of the VaultProxy prior to running __postBuySharesHook().\\n        ERC20(_denominationAsset).safeTransferFrom(msg.sender, _vaultProxy, _investmentAmount);\\n\\n        // Gives Extensions a chance to run logic after shares are issued\\n        __postBuySharesHook(_buyer, _investmentAmount, sharesIssued, _preBuySharesGav);\\n\\n        // The number of actual shares received may differ from shares issued due to\\n        // how the PostBuyShares hooks are invoked by Extensions (i.e., fees)\\n        sharesReceived_ = ERC20(_vaultProxy).balanceOf(_buyer).sub(prevBuyerShares);\\n        require(\\n            sharesReceived_ >= _minSharesQuantity,\\n            \\\"__buyShares: Shares received < _minSharesQuantity\\\"\\n        );\\n\\n        emit SharesBought(msg.sender, _buyer, _investmentAmount, sharesIssued, sharesReceived_);\\n\\n        return sharesReceived_;\\n    }\\n\\n    /// @dev Helper for Extension actions after all __buyShares() calls are made\\n    function __buySharesCompletedHook(\\n        address _caller,\\n        uint256[] memory _sharesReceivedAmounts,\\n        uint256 _gav\\n    ) private {\\n        IPolicyManager(POLICY_MANAGER).validatePolicies(\\n            address(this),\\n            IPolicyManager.PolicyHook.BuySharesCompleted,\\n            abi.encode(_caller, _sharesReceivedAmounts, _gav)\\n        );\\n\\n        IFeeManager(FEE_MANAGER).invokeHook(\\n            IFeeManager.FeeHook.BuySharesCompleted,\\n            abi.encode(_caller, _sharesReceivedAmounts),\\n            _gav\\n        );\\n    }\\n\\n    /// @dev Helper for Extension actions before any __buyShares() calls are made\\n    function __buySharesSetupHook(\\n        address _caller,\\n        uint256[] memory _investmentAmounts,\\n        uint256 _gav\\n    ) private {\\n        IPolicyManager(POLICY_MANAGER).validatePolicies(\\n            address(this),\\n            IPolicyManager.PolicyHook.BuySharesSetup,\\n            abi.encode(_caller, _investmentAmounts, _gav)\\n        );\\n\\n        IFeeManager(FEE_MANAGER).invokeHook(\\n            IFeeManager.FeeHook.BuySharesSetup,\\n            abi.encode(_caller, _investmentAmounts),\\n            _gav\\n        );\\n    }\\n\\n    /// @dev Helper for Extension actions immediately prior to issuing shares.\\n    /// This could be cleaned up so both Extensions take the same encoded args and handle GAV\\n    /// in the same way, but there is not the obvious need for gas savings of recycling\\n    /// the GAV value for the current policies as there is for the fees.\\n    function __preBuySharesHook(\\n        address _buyer,\\n        uint256 _investmentAmount,\\n        uint256 _minSharesQuantity,\\n        uint256 _gav\\n    ) private {\\n        IFeeManager(FEE_MANAGER).invokeHook(\\n            IFeeManager.FeeHook.PreBuyShares,\\n            abi.encode(_buyer, _investmentAmount, _minSharesQuantity),\\n            _gav\\n        );\\n\\n        IPolicyManager(POLICY_MANAGER).validatePolicies(\\n            address(this),\\n            IPolicyManager.PolicyHook.PreBuyShares,\\n            abi.encode(_buyer, _investmentAmount, _minSharesQuantity, _gav)\\n        );\\n    }\\n\\n    /// @dev Helper for Extension actions immediately after issuing shares.\\n    /// Same comment applies from __preBuySharesHook() above.\\n    function __postBuySharesHook(\\n        address _buyer,\\n        uint256 _investmentAmount,\\n        uint256 _sharesIssued,\\n        uint256 _preBuySharesGav\\n    ) private {\\n        uint256 gav = _preBuySharesGav.add(_investmentAmount);\\n        IFeeManager(FEE_MANAGER).invokeHook(\\n            IFeeManager.FeeHook.PostBuyShares,\\n            abi.encode(_buyer, _investmentAmount, _sharesIssued),\\n            gav\\n        );\\n\\n        IPolicyManager(POLICY_MANAGER).validatePolicies(\\n            address(this),\\n            IPolicyManager.PolicyHook.PostBuyShares,\\n            abi.encode(_buyer, _investmentAmount, _sharesIssued, gav)\\n        );\\n    }\\n\\n    // REDEEM SHARES\\n\\n    /// @notice Redeem all of the sender's shares for a proportionate slice of the fund's assets\\n    /// @return payoutAssets_ The assets paid out to the redeemer\\n    /// @return payoutAmounts_ The amount of each asset paid out to the redeemer\\n    /// @dev See __redeemShares() for further detail\\n    function redeemShares()\\n        external\\n        returns (address[] memory payoutAssets_, uint256[] memory payoutAmounts_)\\n    {\\n        return\\n            __redeemShares(\\n                msg.sender,\\n                ERC20(vaultProxy).balanceOf(msg.sender),\\n                new address[](0),\\n                new address[](0)\\n            );\\n    }\\n\\n    /// @notice Redeem a specified quantity of the sender's shares for a proportionate slice of\\n    /// the fund's assets, optionally specifying additional assets and assets to skip.\\n    /// @param _sharesQuantity The quantity of shares to redeem\\n    /// @param _additionalAssets Additional (non-tracked) assets to claim\\n    /// @param _assetsToSkip Tracked assets to forfeit\\n    /// @return payoutAssets_ The assets paid out to the redeemer\\n    /// @return payoutAmounts_ The amount of each asset paid out to the redeemer\\n    /// @dev Any claim to passed _assetsToSkip will be forfeited entirely. This should generally\\n    /// only be exercised if a bad asset is causing redemption to fail.\\n    function redeemSharesDetailed(\\n        uint256 _sharesQuantity,\\n        address[] calldata _additionalAssets,\\n        address[] calldata _assetsToSkip\\n    ) external returns (address[] memory payoutAssets_, uint256[] memory payoutAmounts_) {\\n        return __redeemShares(msg.sender, _sharesQuantity, _additionalAssets, _assetsToSkip);\\n    }\\n\\n    /// @dev Helper to parse an array of payout assets during redemption, taking into account\\n    /// additional assets and assets to skip. _assetsToSkip ignores _additionalAssets.\\n    /// All input arrays are assumed to be unique.\\n    function __parseRedemptionPayoutAssets(\\n        address[] memory _trackedAssets,\\n        address[] memory _additionalAssets,\\n        address[] memory _assetsToSkip\\n    ) private pure returns (address[] memory payoutAssets_) {\\n        address[] memory trackedAssetsToPayout = _trackedAssets.removeItems(_assetsToSkip);\\n        if (_additionalAssets.length == 0) {\\n            return trackedAssetsToPayout;\\n        }\\n\\n        // Add additional assets. Duplicates of trackedAssets are ignored.\\n        bool[] memory indexesToAdd = new bool[](_additionalAssets.length);\\n        uint256 additionalItemsCount;\\n        for (uint256 i; i < _additionalAssets.length; i++) {\\n            if (!trackedAssetsToPayout.contains(_additionalAssets[i])) {\\n                indexesToAdd[i] = true;\\n                additionalItemsCount++;\\n            }\\n        }\\n        if (additionalItemsCount == 0) {\\n            return trackedAssetsToPayout;\\n        }\\n\\n        payoutAssets_ = new address[](trackedAssetsToPayout.length.add(additionalItemsCount));\\n        for (uint256 i; i < trackedAssetsToPayout.length; i++) {\\n            payoutAssets_[i] = trackedAssetsToPayout[i];\\n        }\\n        uint256 payoutAssetsIndex = trackedAssetsToPayout.length;\\n        for (uint256 i; i < _additionalAssets.length; i++) {\\n            if (indexesToAdd[i]) {\\n                payoutAssets_[payoutAssetsIndex] = _additionalAssets[i];\\n                payoutAssetsIndex++;\\n            }\\n        }\\n\\n        return payoutAssets_;\\n    }\\n\\n    /// @dev Helper for system actions immediately prior to redeeming shares.\\n    /// Policy validation is not currently allowed on redemption, to ensure continuous redeemability.\\n    function __preRedeemSharesHook(address _redeemer, uint256 _sharesQuantity)\\n        private\\n        allowsPermissionedVaultAction\\n    {\\n        try\\n            IFeeManager(FEE_MANAGER).invokeHook(\\n                IFeeManager.FeeHook.PreRedeemShares,\\n                abi.encode(_redeemer, _sharesQuantity),\\n                0\\n            )\\n         {} catch (bytes memory reason) {\\n            emit PreRedeemSharesHookFailed(reason, _redeemer, _sharesQuantity);\\n        }\\n    }\\n\\n    /// @dev Helper to redeem shares.\\n    /// This function should never fail without a way to bypass the failure, which is assured\\n    /// through two mechanisms:\\n    /// 1. The FeeManager is called with the try/catch pattern to assure that calls to it\\n    /// can never block redemption.\\n    /// 2. If a token fails upon transfer(), that token can be skipped (and its balance forfeited)\\n    /// by explicitly specifying _assetsToSkip.\\n    /// Because of these assurances, shares should always be redeemable, with the exception\\n    /// of the timelock period on shares actions that must be respected.\\n    function __redeemShares(\\n        address _redeemer,\\n        uint256 _sharesQuantity,\\n        address[] memory _additionalAssets,\\n        address[] memory _assetsToSkip\\n    )\\n        private\\n        locksReentrance\\n        returns (address[] memory payoutAssets_, uint256[] memory payoutAmounts_)\\n    {\\n        require(_sharesQuantity > 0, \\\"__redeemShares: _sharesQuantity must be >0\\\");\\n        require(\\n            _additionalAssets.isUniqueSet(),\\n            \\\"__redeemShares: _additionalAssets contains duplicates\\\"\\n        );\\n        require(_assetsToSkip.isUniqueSet(), \\\"__redeemShares: _assetsToSkip contains duplicates\\\");\\n\\n        IVault vaultProxyContract = IVault(vaultProxy);\\n\\n        // Only apply the sharesActionTimelock when a migration is not pending\\n        if (!IDispatcher(DISPATCHER).hasMigrationRequest(address(vaultProxyContract))) {\\n            __assertSharesActionNotTimelocked(_redeemer);\\n            acctToLastSharesAction[_redeemer] = block.timestamp;\\n        }\\n\\n        // When a fund is paused, settling fees will be skipped\\n        if (!__fundIsPaused()) {\\n            // Note that if a fee with `SettlementType.Direct` is charged here (i.e., not `Mint`),\\n            // then those fee shares will be transferred from the user's balance rather\\n            // than reallocated from the sharesQuantity being redeemed.\\n            __preRedeemSharesHook(_redeemer, _sharesQuantity);\\n        }\\n\\n        // Check the shares quantity against the user's balance after settling fees\\n        ERC20 sharesContract = ERC20(address(vaultProxyContract));\\n        require(\\n            _sharesQuantity <= sharesContract.balanceOf(_redeemer),\\n            \\\"__redeemShares: Insufficient shares\\\"\\n        );\\n\\n        // Parse the payout assets given optional params to add or skip assets.\\n        // Note that there is no validation that the _additionalAssets are known assets to\\n        // the protocol. This means that the redeemer could specify a malicious asset,\\n        // but since all state-changing, user-callable functions on this contract share the\\n        // non-reentrant modifier, there is nowhere to perform a reentrancy attack.\\n        payoutAssets_ = __parseRedemptionPayoutAssets(\\n            vaultProxyContract.getTrackedAssets(),\\n            _additionalAssets,\\n            _assetsToSkip\\n        );\\n        require(payoutAssets_.length > 0, \\\"__redeemShares: No payout assets\\\");\\n\\n        // Destroy the shares.\\n        // Must get the shares supply before doing so.\\n        uint256 sharesSupply = sharesContract.totalSupply();\\n        vaultProxyContract.burnShares(_redeemer, _sharesQuantity);\\n\\n        // Calculate and transfer payout asset amounts due to redeemer\\n        payoutAmounts_ = new uint256[](payoutAssets_.length);\\n        address denominationAssetCopy = denominationAsset;\\n        for (uint256 i; i < payoutAssets_.length; i++) {\\n            uint256 assetBalance = __finalizeIfSynthAndGetAssetBalance(\\n                address(vaultProxyContract),\\n                payoutAssets_[i],\\n                true\\n            );\\n\\n            // If all remaining shares are being redeemed, the logic changes slightly\\n            if (_sharesQuantity == sharesSupply) {\\n                payoutAmounts_[i] = assetBalance;\\n                // Remove every tracked asset, except the denomination asset\\n                if (payoutAssets_[i] != denominationAssetCopy) {\\n                    vaultProxyContract.removeTrackedAsset(payoutAssets_[i]);\\n                }\\n            } else {\\n                payoutAmounts_[i] = assetBalance.mul(_sharesQuantity).div(sharesSupply);\\n            }\\n\\n            // Transfer payout asset to redeemer\\n            if (payoutAmounts_[i] > 0) {\\n                vaultProxyContract.withdrawAssetTo(payoutAssets_[i], _redeemer, payoutAmounts_[i]);\\n            }\\n        }\\n\\n        emit SharesRedeemed(_redeemer, _sharesQuantity, payoutAssets_, payoutAmounts_);\\n\\n        return (payoutAssets_, payoutAmounts_);\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the `denominationAsset` variable\\n    /// @return denominationAsset_ The `denominationAsset` variable value\\n    function getDenominationAsset() external view override returns (address denominationAsset_) {\\n        return denominationAsset;\\n    }\\n\\n    /// @notice Gets the routes for the various contracts used by all funds\\n    /// @return dispatcher_ The `DISPATCHER` variable value\\n    /// @return feeManager_ The `FEE_MANAGER` variable value\\n    /// @return fundDeployer_ The `FUND_DEPLOYER` variable value\\n    /// @return integrationManager_ The `INTEGRATION_MANAGER` variable value\\n    /// @return policyManager_ The `POLICY_MANAGER` variable value\\n    /// @return primitivePriceFeed_ The `PRIMITIVE_PRICE_FEED` variable value\\n    /// @return valueInterpreter_ The `VALUE_INTERPRETER` variable value\\n    function getLibRoutes()\\n        external\\n        view\\n        returns (\\n            address dispatcher_,\\n            address feeManager_,\\n            address fundDeployer_,\\n            address integrationManager_,\\n            address policyManager_,\\n            address primitivePriceFeed_,\\n            address valueInterpreter_\\n        )\\n    {\\n        return (\\n            DISPATCHER,\\n            FEE_MANAGER,\\n            FUND_DEPLOYER,\\n            INTEGRATION_MANAGER,\\n            POLICY_MANAGER,\\n            PRIMITIVE_PRICE_FEED,\\n            VALUE_INTERPRETER\\n        );\\n    }\\n\\n    /// @notice Gets the `overridePause` variable\\n    /// @return overridePause_ The `overridePause` variable value\\n    function getOverridePause() external view returns (bool overridePause_) {\\n        return overridePause;\\n    }\\n\\n    /// @notice Gets the `sharesActionTimelock` variable\\n    /// @return sharesActionTimelock_ The `sharesActionTimelock` variable value\\n    function getSharesActionTimelock() external view returns (uint256 sharesActionTimelock_) {\\n        return sharesActionTimelock;\\n    }\\n\\n    /// @notice Gets the `vaultProxy` variable\\n    /// @return vaultProxy_ The `vaultProxy` variable value\\n    function getVaultProxy() external view override returns (address vaultProxy_) {\\n        return vaultProxy;\\n    }\\n}\\n\",\"keccak256\":\"0x17f930af55857ac872b72590e1a390f7ffe6f7c8596365bc3844d3e8bed7fc19\",\"license\":\"GPL-3.0\"},\"contracts/release/core/fund/comptroller/IComptroller.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IComptroller Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IComptroller {\\n    enum VaultAction {\\n        None,\\n        BurnShares,\\n        MintShares,\\n        TransferShares,\\n        ApproveAssetSpender,\\n        WithdrawAssetTo,\\n        AddTrackedAsset,\\n        RemoveTrackedAsset\\n    }\\n\\n    function activate(address, bool) external;\\n\\n    function calcGav(bool) external returns (uint256, bool);\\n\\n    function calcGrossShareValue(bool) external returns (uint256, bool);\\n\\n    function callOnExtension(\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external;\\n\\n    function configureExtensions(bytes calldata, bytes calldata) external;\\n\\n    function destruct() external;\\n\\n    function getDenominationAsset() external view returns (address);\\n\\n    function getVaultProxy() external view returns (address);\\n\\n    function init(address, uint256) external;\\n\\n    function permissionedVaultAction(VaultAction, bytes calldata) external;\\n}\\n\",\"keccak256\":\"0x758108bbd2bae2ced8d4d3fdca63b7d57a4ca4526f184a3c4ec656b674623839\",\"license\":\"GPL-3.0\"},\"contracts/release/core/fund/vault/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../../../../persistent/utils/IMigratableVault.sol\\\";\\n\\n/// @title IVault Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IVault is IMigratableVault {\\n    function addTrackedAsset(address) external;\\n\\n    function approveAssetSpender(\\n        address,\\n        address,\\n        uint256\\n    ) external;\\n\\n    function burnShares(address, uint256) external;\\n\\n    function callOnContract(address, bytes calldata) external;\\n\\n    function getAccessor() external view returns (address);\\n\\n    function getOwner() external view returns (address);\\n\\n    function getTrackedAssets() external view returns (address[] memory);\\n\\n    function isTrackedAsset(address) external view returns (bool);\\n\\n    function mintShares(address, uint256) external;\\n\\n    function removeTrackedAsset(address) external;\\n\\n    function transferShares(\\n        address,\\n        address,\\n        uint256\\n    ) external;\\n\\n    function withdrawAssetTo(\\n        address,\\n        address,\\n        uint256\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6fd299ef44274395da4760c664246a6cc310437a2c426b2a40456446584ea258\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/IExtension.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IExtension Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Interface for all extensions\\ninterface IExtension {\\n    function activateForFund(bool _isMigration) external;\\n\\n    function deactivateForFund() external;\\n\\n    function receiveCallFromComptroller(\\n        address _comptrollerProxy,\\n        uint256 _actionId,\\n        bytes calldata _callArgs\\n    ) external;\\n\\n    function setConfigForFund(bytes calldata _configData) external;\\n}\\n\",\"keccak256\":\"0x7fcbf884a27aca97ce8660cf5af9e52b436896bed8ceff1dd8e570a9358e6432\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/fee-manager/IFeeManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n/// @title FeeManager Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Interface for the FeeManager\\ninterface IFeeManager {\\n    // No fees for the current release are implemented post-redeemShares\\n    enum FeeHook {\\n        Continuous,\\n        BuySharesSetup,\\n        PreBuyShares,\\n        PostBuyShares,\\n        BuySharesCompleted,\\n        PreRedeemShares\\n    }\\n    enum SettlementType {None, Direct, Mint, Burn, MintSharesOutstanding, BurnSharesOutstanding}\\n\\n    function invokeHook(\\n        FeeHook,\\n        bytes calldata,\\n        uint256\\n    ) external;\\n}\\n\",\"keccak256\":\"0x781b522f09edeb7d8dbbd3b4be0a3823592bd308972af44f8f7d03ae4798866e\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/policy-manager/IPolicyManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n/// @title PolicyManager Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Interface for the PolicyManager\\ninterface IPolicyManager {\\n    enum PolicyHook {\\n        BuySharesSetup,\\n        PreBuyShares,\\n        PostBuyShares,\\n        BuySharesCompleted,\\n        PreCallOnIntegration,\\n        PostCallOnIntegration\\n    }\\n\\n    function validatePolicies(\\n        address,\\n        PolicyHook,\\n        bytes calldata\\n    ) external;\\n}\\n\",\"keccak256\":\"0xedf25295ad42998e2651b3828c2be4a6aeef1176e0c669781074394e3d181732\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/utils/FundDeployerOwnerMixin.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../../core/fund-deployer/IFundDeployer.sol\\\";\\n\\n/// @title FundDeployerOwnerMixin Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A mixin contract that defers ownership to the owner of FundDeployer\\nabstract contract FundDeployerOwnerMixin {\\n    address internal immutable FUND_DEPLOYER;\\n\\n    modifier onlyFundDeployerOwner() {\\n        require(\\n            msg.sender == getOwner(),\\n            \\\"onlyFundDeployerOwner: Only the FundDeployer owner can call this function\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(address _fundDeployer) public {\\n        FUND_DEPLOYER = _fundDeployer;\\n    }\\n\\n    /// @notice Gets the owner of this contract\\n    /// @return owner_ The owner\\n    /// @dev Ownership is deferred to the owner of the FundDeployer contract\\n    function getOwner() public view returns (address owner_) {\\n        return IFundDeployer(FUND_DEPLOYER).getOwner();\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the `FUND_DEPLOYER` variable\\n    /// @return fundDeployer_ The `FUND_DEPLOYER` variable value\\n    function getFundDeployer() external view returns (address fundDeployer_) {\\n        return FUND_DEPLOYER;\\n    }\\n}\\n\",\"keccak256\":\"0xae16a22807bc31d46654889122b8db7ee55b731efc8d6feb4c978d13fee3336d\",\"license\":\"GPL-3.0\"},\"contracts/release/infrastructure/price-feeds/derivatives/IDerivativePriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IDerivativePriceFeed Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Simple interface for derivative price source oracle implementations\\ninterface IDerivativePriceFeed {\\n    function calcUnderlyingValues(address, uint256)\\n        external\\n        returns (address[] memory, uint256[] memory);\\n\\n    function isSupportedAsset(address) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5abbc57ccbf28b2c27a0ee496f0a949a0039912975e8f9a65312d884edd05332\",\"license\":\"GPL-3.0\"},\"contracts/release/infrastructure/price-feeds/derivatives/feeds/SynthetixPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"../../../../extensions/utils/FundDeployerOwnerMixin.sol\\\";\\nimport \\\"../../../../interfaces/ISynthetix.sol\\\";\\nimport \\\"../../../../interfaces/ISynthetixAddressResolver.sol\\\";\\nimport \\\"../../../../interfaces/ISynthetixExchangeRates.sol\\\";\\nimport \\\"../../../../interfaces/ISynthetixProxyERC20.sol\\\";\\nimport \\\"../../../../interfaces/ISynthetixSynth.sol\\\";\\nimport \\\"../IDerivativePriceFeed.sol\\\";\\n\\n/// @title SynthetixPriceFeed Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A price feed that uses Synthetix oracles as price sources\\ncontract SynthetixPriceFeed is IDerivativePriceFeed, FundDeployerOwnerMixin {\\n    using SafeMath for uint256;\\n\\n    event SynthAdded(address indexed synth, bytes32 currencyKey);\\n\\n    event SynthCurrencyKeyUpdated(\\n        address indexed synth,\\n        bytes32 prevCurrencyKey,\\n        bytes32 nextCurrencyKey\\n    );\\n\\n    uint256 private constant SYNTH_UNIT = 10**18;\\n    address private immutable ADDRESS_RESOLVER;\\n    address private immutable SUSD;\\n\\n    mapping(address => bytes32) private synthToCurrencyKey;\\n\\n    constructor(\\n        address _fundDeployer,\\n        address _addressResolver,\\n        address _sUSD,\\n        address[] memory _synths\\n    ) public FundDeployerOwnerMixin(_fundDeployer) {\\n        ADDRESS_RESOLVER = _addressResolver;\\n        SUSD = _sUSD;\\n\\n        address[] memory sUSDSynths = new address[](1);\\n        sUSDSynths[0] = _sUSD;\\n\\n        __addSynths(sUSDSynths);\\n        __addSynths(_synths);\\n    }\\n\\n    /// @notice Converts a given amount of a derivative to its underlying asset values\\n    /// @param _derivative The derivative to convert\\n    /// @param _derivativeAmount The amount of the derivative to convert\\n    /// @return underlyings_ The underlying assets for the _derivative\\n    /// @return underlyingAmounts_ The amount of each underlying asset for the equivalent derivative amount\\n    function calcUnderlyingValues(address _derivative, uint256 _derivativeAmount)\\n        external\\n        override\\n        returns (address[] memory underlyings_, uint256[] memory underlyingAmounts_)\\n    {\\n        underlyings_ = new address[](1);\\n        underlyings_[0] = SUSD;\\n        underlyingAmounts_ = new uint256[](1);\\n\\n        bytes32 currencyKey = getCurrencyKeyForSynth(_derivative);\\n        require(currencyKey != 0, \\\"calcUnderlyingValues: _derivative is not supported\\\");\\n\\n        address exchangeRates = ISynthetixAddressResolver(ADDRESS_RESOLVER).requireAndGetAddress(\\n            \\\"ExchangeRates\\\",\\n            \\\"calcUnderlyingValues: Missing ExchangeRates\\\"\\n        );\\n\\n        (uint256 rate, bool isInvalid) = ISynthetixExchangeRates(exchangeRates).rateAndInvalid(\\n            currencyKey\\n        );\\n        require(!isInvalid, \\\"calcUnderlyingValues: _derivative rate is not valid\\\");\\n\\n        underlyingAmounts_[0] = _derivativeAmount.mul(rate).div(SYNTH_UNIT);\\n\\n        return (underlyings_, underlyingAmounts_);\\n    }\\n\\n    /// @notice Checks whether an asset is a supported primitive of the price feed\\n    /// @param _asset The asset to check\\n    /// @return isSupported_ True if the asset is a supported primitive\\n    function isSupportedAsset(address _asset) public view override returns (bool isSupported_) {\\n        return getCurrencyKeyForSynth(_asset) != 0;\\n    }\\n\\n    /////////////////////\\n    // SYNTHS REGISTRY //\\n    /////////////////////\\n\\n    /// @notice Adds Synths to the price feed\\n    /// @param _synths Synths to add\\n    function addSynths(address[] calldata _synths) external onlyFundDeployerOwner {\\n        require(_synths.length > 0, \\\"addSynths: Empty _synths\\\");\\n\\n        __addSynths(_synths);\\n    }\\n\\n    /// @notice Updates the cached currencyKey value for specified Synths\\n    /// @param _synths Synths to update\\n    /// @dev Anybody can call this function\\n    function updateSynthCurrencyKeys(address[] calldata _synths) external {\\n        require(_synths.length > 0, \\\"updateSynthCurrencyKeys: Empty _synths\\\");\\n\\n        for (uint256 i; i < _synths.length; i++) {\\n            bytes32 prevCurrencyKey = synthToCurrencyKey[_synths[i]];\\n            require(prevCurrencyKey != 0, \\\"updateSynthCurrencyKeys: Synth not set\\\");\\n\\n            bytes32 nextCurrencyKey = __getCurrencyKey(_synths[i]);\\n            require(\\n                nextCurrencyKey != prevCurrencyKey,\\n                \\\"updateSynthCurrencyKeys: Synth has correct currencyKey\\\"\\n            );\\n\\n            synthToCurrencyKey[_synths[i]] = nextCurrencyKey;\\n\\n            emit SynthCurrencyKeyUpdated(_synths[i], prevCurrencyKey, nextCurrencyKey);\\n        }\\n    }\\n\\n    /// @dev Helper to add Synths\\n    function __addSynths(address[] memory _synths) private {\\n        for (uint256 i; i < _synths.length; i++) {\\n            require(synthToCurrencyKey[_synths[i]] == 0, \\\"__addSynths: Value already set\\\");\\n\\n            bytes32 currencyKey = __getCurrencyKey(_synths[i]);\\n            require(currencyKey != 0, \\\"__addSynths: No currencyKey\\\");\\n\\n            synthToCurrencyKey[_synths[i]] = currencyKey;\\n\\n            emit SynthAdded(_synths[i], currencyKey);\\n        }\\n    }\\n\\n    /// @dev Helper to query a currencyKey from Synthetix\\n    function __getCurrencyKey(address _synthProxy) private view returns (bytes32 currencyKey_) {\\n        return ISynthetixSynth(ISynthetixProxyERC20(_synthProxy).target()).currencyKey();\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the `ADDRESS_RESOLVER` variable\\n    /// @return addressResolver_ The `ADDRESS_RESOLVER` variable value\\n    function getAddressResolver() external view returns (address) {\\n        return ADDRESS_RESOLVER;\\n    }\\n\\n    /// @notice Gets the currencyKey for multiple given Synths\\n    /// @return currencyKeys_ The currencyKey values\\n    function getCurrencyKeysForSynths(address[] calldata _synths)\\n        external\\n        view\\n        returns (bytes32[] memory currencyKeys_)\\n    {\\n        currencyKeys_ = new bytes32[](_synths.length);\\n        for (uint256 i; i < _synths.length; i++) {\\n            currencyKeys_[i] = synthToCurrencyKey[_synths[i]];\\n        }\\n\\n        return currencyKeys_;\\n    }\\n\\n    /// @notice Gets the `SUSD` variable\\n    /// @return susd_ The `SUSD` variable value\\n    function getSUSD() external view returns (address susd_) {\\n        return SUSD;\\n    }\\n\\n    /// @notice Gets the currencyKey for a given Synth\\n    /// @return currencyKey_ The currencyKey value\\n    function getCurrencyKeyForSynth(address _synth) public view returns (bytes32 currencyKey_) {\\n        return synthToCurrencyKey[_synth];\\n    }\\n}\\n\",\"keccak256\":\"0xf84684c8dfc5047015d8df92e4ba0d1f6e5320a7404b40ecb12146594302c4be\",\"license\":\"GPL-3.0\"},\"contracts/release/infrastructure/price-feeds/primitives/IPrimitivePriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IPrimitivePriceFeed Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Interface for primitive price feeds\\ninterface IPrimitivePriceFeed {\\n    function calcCanonicalValue(\\n        address,\\n        uint256,\\n        address\\n    ) external view returns (uint256, bool);\\n\\n    function calcLiveValue(\\n        address,\\n        uint256,\\n        address\\n    ) external view returns (uint256, bool);\\n\\n    function isSupportedAsset(address) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xd7bd5b75d56c4856f0dacee41240e7efaea3e25beca2c8010f085c7d35c4702e\",\"license\":\"GPL-3.0\"},\"contracts/release/infrastructure/value-interpreter/IValueInterpreter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IValueInterpreter interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Interface for ValueInterpreter\\ninterface IValueInterpreter {\\n    function calcCanonicalAssetValue(\\n        address,\\n        uint256,\\n        address\\n    ) external returns (uint256, bool);\\n\\n    function calcCanonicalAssetsTotalValue(\\n        address[] calldata,\\n        uint256[] calldata,\\n        address\\n    ) external returns (uint256, bool);\\n\\n    function calcLiveAssetValue(\\n        address,\\n        uint256,\\n        address\\n    ) external returns (uint256, bool);\\n\\n    function calcLiveAssetsTotalValue(\\n        address[] calldata,\\n        uint256[] calldata,\\n        address\\n    ) external returns (uint256, bool);\\n}\\n\",\"keccak256\":\"0xcc0c5e93cfbcb2ac7094538eaeed1e3a1d8256fbf160ce0d9171346eb4be128e\",\"license\":\"GPL-3.0\"},\"contracts/release/interfaces/ISynthetix.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title ISynthetix Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface ISynthetix {\\n    function exchangeOnBehalfWithTracking(\\n        address,\\n        bytes32,\\n        uint256,\\n        bytes32,\\n        address,\\n        bytes32\\n    ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x6e90f409738433ba404b21e7593efb37786cceea8740113ab608da9fd53c6db8\",\"license\":\"GPL-3.0\"},\"contracts/release/interfaces/ISynthetixAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title ISynthetixAddressResolver Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface ISynthetixAddressResolver {\\n    function requireAndGetAddress(bytes32, string calldata) external view returns (address);\\n}\\n\",\"keccak256\":\"0x423c90261ed0c5daa3781e3312b583db40ce947610223b9db8e166342272f41f\",\"license\":\"GPL-3.0\"},\"contracts/release/interfaces/ISynthetixExchangeRates.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title ISynthetixExchangeRates Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface ISynthetixExchangeRates {\\n    function rateAndInvalid(bytes32) external view returns (uint256, bool);\\n}\\n\",\"keccak256\":\"0xef9e7a99d1ea30dd423558dc45b513b4ad0fc6df32a05b5258ebfaa89cfcad20\",\"license\":\"GPL-3.0\"},\"contracts/release/interfaces/ISynthetixExchanger.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title ISynthetixExchanger Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface ISynthetixExchanger {\\n    function getAmountsForExchange(\\n        uint256,\\n        bytes32,\\n        bytes32\\n    )\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function settle(address, bytes32)\\n        external\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n}\\n\",\"keccak256\":\"0x4ae27457bdc9145757d3cd8043263c86e218acbd96b96f12722b8054f2283dec\",\"license\":\"GPL-3.0\"},\"contracts/release/interfaces/ISynthetixProxyERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title ISynthetixProxyERC20 Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface ISynthetixProxyERC20 {\\n    function target() external view returns (address);\\n}\\n\",\"keccak256\":\"0x32714bb006e6861aece8fe1a5e3862e0b5562bd7a482ab80f0330f2c0bbc5da6\",\"license\":\"GPL-3.0\"},\"contracts/release/interfaces/ISynthetixSynth.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title ISynthetixSynth Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface ISynthetixSynth {\\n    function currencyKey() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xfad43b0fead48317fd90bfc3874d1511dc0de094764981467fa4cded78b39108\",\"license\":\"GPL-3.0\"},\"contracts/release/utils/AddressArrayLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title AddressArray Library\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A library to extend the address array data type\\nlibrary AddressArrayLib {\\n    /// @dev Helper to add an item to an array. Does not assert uniqueness of the new item.\\n    function addItem(address[] memory _self, address _itemToAdd)\\n        internal\\n        pure\\n        returns (address[] memory nextArray_)\\n    {\\n        nextArray_ = new address[](_self.length + 1);\\n        for (uint256 i; i < _self.length; i++) {\\n            nextArray_[i] = _self[i];\\n        }\\n        nextArray_[_self.length] = _itemToAdd;\\n\\n        return nextArray_;\\n    }\\n\\n    /// @dev Helper to add an item to an array, only if it is not already in the array.\\n    function addUniqueItem(address[] memory _self, address _itemToAdd)\\n        internal\\n        pure\\n        returns (address[] memory nextArray_)\\n    {\\n        if (contains(_self, _itemToAdd)) {\\n            return _self;\\n        }\\n\\n        return addItem(_self, _itemToAdd);\\n    }\\n\\n    /// @dev Helper to verify if an array contains a particular value\\n    function contains(address[] memory _self, address _target)\\n        internal\\n        pure\\n        returns (bool doesContain_)\\n    {\\n        for (uint256 i; i < _self.length; i++) {\\n            if (_target == _self[i]) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /// @dev Helper to reassign all items in an array with a specified value\\n    function fill(address[] memory _self, address _value)\\n        internal\\n        pure\\n        returns (address[] memory nextArray_)\\n    {\\n        nextArray_ = new address[](_self.length);\\n        for (uint256 i; i < nextArray_.length; i++) {\\n            nextArray_[i] = _value;\\n        }\\n\\n        return nextArray_;\\n    }\\n\\n    /// @dev Helper to verify if array is a set of unique values.\\n    /// Does not assert length > 0.\\n    function isUniqueSet(address[] memory _self) internal pure returns (bool isUnique_) {\\n        if (_self.length <= 1) {\\n            return true;\\n        }\\n\\n        uint256 arrayLength = _self.length;\\n        for (uint256 i; i < arrayLength; i++) {\\n            for (uint256 j = i + 1; j < arrayLength; j++) {\\n                if (_self[i] == _self[j]) {\\n                    return false;\\n                }\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /// @dev Helper to remove items from an array. Removes all matching occurrences of each item.\\n    /// Does not assert uniqueness of either array.\\n    function removeItems(address[] memory _self, address[] memory _itemsToRemove)\\n        internal\\n        pure\\n        returns (address[] memory nextArray_)\\n    {\\n        if (_itemsToRemove.length == 0) {\\n            return _self;\\n        }\\n\\n        bool[] memory indexesToRemove = new bool[](_self.length);\\n        uint256 remainingItemsCount = _self.length;\\n        for (uint256 i; i < _self.length; i++) {\\n            if (contains(_itemsToRemove, _self[i])) {\\n                indexesToRemove[i] = true;\\n                remainingItemsCount--;\\n            }\\n        }\\n\\n        if (remainingItemsCount == _self.length) {\\n            nextArray_ = _self;\\n        } else if (remainingItemsCount > 0) {\\n            nextArray_ = new address[](remainingItemsCount);\\n            uint256 nextArrayIndex;\\n            for (uint256 i; i < _self.length; i++) {\\n                if (!indexesToRemove[i]) {\\n                    nextArray_[nextArrayIndex] = _self[i];\\n                    nextArrayIndex++;\\n                }\\n            }\\n        }\\n\\n        return nextArray_;\\n    }\\n}\\n\",\"keccak256\":\"0x702bded074c5190e27ebe39ee77166593cc1296d4cb275c1a96914620ee55c83\",\"license\":\"GPL-3.0\"},\"contracts/release/utils/AssetFinalityResolver.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"../infrastructure/price-feeds/derivatives/feeds/SynthetixPriceFeed.sol\\\";\\nimport \\\"../interfaces/ISynthetixAddressResolver.sol\\\";\\nimport \\\"../interfaces/ISynthetixExchanger.sol\\\";\\n\\n/// @title AssetFinalityResolver Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A contract that helps achieve asset finality\\nabstract contract AssetFinalityResolver {\\n    address internal immutable SYNTHETIX_ADDRESS_RESOLVER;\\n    address internal immutable SYNTHETIX_PRICE_FEED;\\n\\n    constructor(address _synthetixPriceFeed, address _synthetixAddressResolver) public {\\n        SYNTHETIX_ADDRESS_RESOLVER = _synthetixAddressResolver;\\n        SYNTHETIX_PRICE_FEED = _synthetixPriceFeed;\\n    }\\n\\n    /// @dev Helper to finalize a Synth balance at a given target address and return its balance\\n    function __finalizeIfSynthAndGetAssetBalance(\\n        address _target,\\n        address _asset,\\n        bool _requireFinality\\n    ) internal returns (uint256 assetBalance_) {\\n        bytes32 currencyKey = SynthetixPriceFeed(SYNTHETIX_PRICE_FEED).getCurrencyKeyForSynth(\\n            _asset\\n        );\\n        if (currencyKey != 0) {\\n            address synthetixExchanger = ISynthetixAddressResolver(SYNTHETIX_ADDRESS_RESOLVER)\\n                .requireAndGetAddress(\\n                \\\"Exchanger\\\",\\n                \\\"finalizeAndGetAssetBalance: Missing Exchanger\\\"\\n            );\\n            try ISynthetixExchanger(synthetixExchanger).settle(_target, currencyKey)  {} catch {\\n                require(!_requireFinality, \\\"finalizeAndGetAssetBalance: Cannot settle Synth\\\");\\n            }\\n        }\\n\\n        return ERC20(_asset).balanceOf(_target);\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the `SYNTHETIX_ADDRESS_RESOLVER` variable\\n    /// @return synthetixAddressResolver_ The `SYNTHETIX_ADDRESS_RESOLVER` variable value\\n    function getSynthetixAddressResolver()\\n        external\\n        view\\n        returns (address synthetixAddressResolver_)\\n    {\\n        return SYNTHETIX_ADDRESS_RESOLVER;\\n    }\\n\\n    /// @notice Gets the `SYNTHETIX_PRICE_FEED` variable\\n    /// @return synthetixPriceFeed_ The `SYNTHETIX_PRICE_FEED` variable value\\n    function getSynthetixPriceFeed() external view returns (address synthetixPriceFeed_) {\\n        return SYNTHETIX_PRICE_FEED;\\n    }\\n}\\n\",\"keccak256\":\"0x0734a3b11eda41e5e12f0e3ccac2c08114fa8e1f2acc1005f35dde686a0150af\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Enzyme Council <security@enzyme.finance>",
    "kind": "dev",
    "methods": {
      "activate(address,bool)": {
        "details": "No need to assert anything beyond FundDeployer access.",
        "params": {
          "_isMigration": "True if a migrated fund is being activated",
          "_vaultProxy": "The VaultProxy to attach to the fund"
        }
      },
      "buyShares(address[],uint256[],uint256[])": {
        "details": "Param arrays have indexes corresponding to individual __buyShares() orders.",
        "params": {
          "_buyers": "The accounts for which to buy shares",
          "_investmentAmounts": "The amounts of the fund's denomination asset with which to buy shares for the corresponding _buyers",
          "_minSharesQuantities": "The minimum quantities of shares to buy with the corresponding _investmentAmounts"
        },
        "returns": {
          "sharesReceivedAmounts_": "The actual amounts of shares received by the corresponding _buyers"
        }
      },
      "calcGav(bool)": {
        "params": {
          "_requireFinality": "True if all assets must have exact final balances settled"
        },
        "returns": {
          "gav_": "The fund GAV",
          "isValid_": "True if the conversion rates used to derive the GAV are all valid"
        }
      },
      "calcGrossShareValue(bool)": {
        "details": "Does not account for any fees outstanding.",
        "params": {
          "_requireFinality": "True if all assets must have exact final balances settled"
        },
        "returns": {
          "grossShareValue_": "The amount of the denomination asset per share",
          "isValid_": "True if the conversion rates to derive the value are all valid"
        }
      },
      "callOnExtension(address,uint256,bytes)": {
        "details": "Used to route arbitrary calls, so that msg.sender is the ComptrollerProxy (for access control). Uses a mutex of sorts that allows \"permissioned vault actions\" during calls originating from this function.",
        "params": {
          "_actionId": "An ID representing the action to take on the extension (see extension)",
          "_callArgs": "The encoded data for the call",
          "_extension": "The Extension contract to call (e.g., FeeManager)"
        }
      },
      "configureExtensions(bytes,bytes)": {
        "details": "No need to assert anything beyond FundDeployer access. Called atomically with init(), but after ComptrollerLib has been deployed, giving access to its state and interface",
        "params": {
          "_feeManagerConfigData": "Encoded config for fees to enable",
          "_policyManagerConfigData": "Encoded config for policies to enable"
        }
      },
      "destruct()": {
        "details": "No need to assert anything beyond FundDeployer access. Calling onlyNotPaused here rather than in the FundDeployer allows the owner to potentially override the pause and rescue unpaid fees."
      },
      "getDenominationAsset()": {
        "returns": {
          "denominationAsset_": "The `denominationAsset` variable value"
        }
      },
      "getLibRoutes()": {
        "returns": {
          "dispatcher_": "The `DISPATCHER` variable value",
          "feeManager_": "The `FEE_MANAGER` variable value",
          "fundDeployer_": "The `FUND_DEPLOYER` variable value",
          "integrationManager_": "The `INTEGRATION_MANAGER` variable value",
          "policyManager_": "The `POLICY_MANAGER` variable value",
          "primitivePriceFeed_": "The `PRIMITIVE_PRICE_FEED` variable value",
          "valueInterpreter_": "The `VALUE_INTERPRETER` variable value"
        }
      },
      "getOverridePause()": {
        "returns": {
          "overridePause_": "The `overridePause` variable value"
        }
      },
      "getSharesActionTimelock()": {
        "returns": {
          "sharesActionTimelock_": "The `sharesActionTimelock` variable value"
        }
      },
      "getSynthetixAddressResolver()": {
        "returns": {
          "synthetixAddressResolver_": "The `SYNTHETIX_ADDRESS_RESOLVER` variable value"
        }
      },
      "getSynthetixPriceFeed()": {
        "returns": {
          "synthetixPriceFeed_": "The `SYNTHETIX_PRICE_FEED` variable value"
        }
      },
      "getVaultProxy()": {
        "returns": {
          "vaultProxy_": "The `vaultProxy` variable value"
        }
      },
      "init(address,uint256)": {
        "details": "Pseudo-constructor per proxy. No need to assert access because this is called atomically on deployment, and once it's called, it cannot be called again.",
        "params": {
          "_denominationAsset": "The asset in which the fund's value should be denominated",
          "_sharesActionTimelock": "The minimum number of seconds between any two \"shares actions\" (buying or selling shares) by the same user"
        }
      },
      "permissionedVaultAction(uint8,bytes)": {
        "params": {
          "_action": "The enum representing the VaultAction to perform on the VaultProxy",
          "_actionData": "The call data for the action to perform"
        }
      },
      "redeemShares()": {
        "details": "See __redeemShares() for further detail",
        "returns": {
          "payoutAmounts_": "The amount of each asset paid out to the redeemer",
          "payoutAssets_": "The assets paid out to the redeemer"
        }
      },
      "redeemSharesDetailed(uint256,address[],address[])": {
        "details": "Any claim to passed _assetsToSkip will be forfeited entirely. This should generally only be exercised if a bad asset is causing redemption to fail.",
        "params": {
          "_additionalAssets": "Additional (non-tracked) assets to claim",
          "_assetsToSkip": "Tracked assets to forfeit",
          "_sharesQuantity": "The quantity of shares to redeem"
        },
        "returns": {
          "payoutAmounts_": "The amount of each asset paid out to the redeemer",
          "payoutAssets_": "The assets paid out to the redeemer"
        }
      },
      "setOverridePause(bool)": {
        "params": {
          "_nextOverridePause": "True if the pause should be overrode"
        }
      },
      "vaultCallOnContract(address,bytes4,bytes)": {
        "params": {
          "_contract": "The contract to call",
          "_encodedArgs": "The encoded arguments for the call",
          "_selector": "The selector to call"
        }
      }
    },
    "title": "ComptrollerLib Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "activate(address,bool)": {
        "notice": "Activates the fund by attaching a VaultProxy and activating all Extensions"
      },
      "buyShares(address[],uint256[],uint256[])": {
        "notice": "Buys shares in the fund for multiple sets of criteria"
      },
      "calcGav(bool)": {
        "notice": "Calculates the gross asset value (GAV) of the fund"
      },
      "calcGrossShareValue(bool)": {
        "notice": "Calculates the gross value of 1 unit of shares in the fund's denomination asset"
      },
      "callOnExtension(address,uint256,bytes)": {
        "notice": "Calls a specified action on an Extension"
      },
      "configureExtensions(bytes,bytes)": {
        "notice": "Configure the extensions of a fund"
      },
      "destruct()": {
        "notice": "Remove the config for a fund"
      },
      "getDenominationAsset()": {
        "notice": "Gets the `denominationAsset` variable"
      },
      "getLibRoutes()": {
        "notice": "Gets the routes for the various contracts used by all funds"
      },
      "getOverridePause()": {
        "notice": "Gets the `overridePause` variable"
      },
      "getSharesActionTimelock()": {
        "notice": "Gets the `sharesActionTimelock` variable"
      },
      "getSynthetixAddressResolver()": {
        "notice": "Gets the `SYNTHETIX_ADDRESS_RESOLVER` variable"
      },
      "getSynthetixPriceFeed()": {
        "notice": "Gets the `SYNTHETIX_PRICE_FEED` variable"
      },
      "getVaultProxy()": {
        "notice": "Gets the `vaultProxy` variable"
      },
      "init(address,uint256)": {
        "notice": "Initializes a fund with its core config"
      },
      "permissionedVaultAction(uint8,bytes)": {
        "notice": "Makes a permissioned, state-changing call on the VaultProxy contract"
      },
      "redeemShares()": {
        "notice": "Redeem all of the sender's shares for a proportionate slice of the fund's assets"
      },
      "redeemSharesDetailed(uint256,address[],address[])": {
        "notice": "Redeem a specified quantity of the sender's shares for a proportionate slice of the fund's assets, optionally specifying additional assets and assets to skip."
      },
      "setOverridePause(bool)": {
        "notice": "Sets or unsets an override on a release-wide pause"
      },
      "vaultCallOnContract(address,bytes4,bytes)": {
        "notice": "Makes an arbitrary call with the VaultProxy contract as the sender"
      }
    },
    "notice": "The core logic library shared by all funds",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10276,
        "contract": "contracts/release/core/fund/comptroller/ComptrollerLib.sol:ComptrollerLib",
        "label": "denominationAsset",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 10278,
        "contract": "contracts/release/core/fund/comptroller/ComptrollerLib.sol:ComptrollerLib",
        "label": "vaultProxy",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 10280,
        "contract": "contracts/release/core/fund/comptroller/ComptrollerLib.sol:ComptrollerLib",
        "label": "isLib",
        "offset": 20,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 10282,
        "contract": "contracts/release/core/fund/comptroller/ComptrollerLib.sol:ComptrollerLib",
        "label": "overridePause",
        "offset": 21,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 10284,
        "contract": "contracts/release/core/fund/comptroller/ComptrollerLib.sol:ComptrollerLib",
        "label": "permissionedVaultActionAllowed",
        "offset": 22,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 10286,
        "contract": "contracts/release/core/fund/comptroller/ComptrollerLib.sol:ComptrollerLib",
        "label": "reentranceLocked",
        "offset": 23,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 10288,
        "contract": "contracts/release/core/fund/comptroller/ComptrollerLib.sol:ComptrollerLib",
        "label": "sharesActionTimelock",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 10292,
        "contract": "contracts/release/core/fund/comptroller/ComptrollerLib.sol:ComptrollerLib",
        "label": "acctToLastSharesAction",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}