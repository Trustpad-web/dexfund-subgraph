{
  "address": "0x91eBf511F14a96b25E0BE98E6441bE2EB90A9783",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "calcUnderlyingValues",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isSupportedAsset",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isSupported_",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x59ac11f555332d7afa8f1146def6271b6e63827a4eb2ce7206ca32e4c41891d1",
  "receipt": {
    "to": null,
    "from": "0xf83F4c3A25b8FEE1722d76e5F72AaFcA00845011",
    "contractAddress": "0x91eBf511F14a96b25E0BE98E6441bE2EB90A9783",
    "transactionIndex": 0,
    "gasUsed": "155317",
    "logsBloom": "0x
    "blockHash": "0xfdef9498d76f95c5ba5aa6eab179ec732d453f59c46c208f9930f9d6c32a6f0c",
    "transactionHash": "0x59ac11f555332d7afa8f1146def6271b6e63827a4eb2ce7206ca32e4c41891d1",
    "logs": [],
    "blockNumber": 27798087,
    "cumulativeGasUsed": "155317",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "a255b7352a771229d5d6ada28c33f53e",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"calcUnderlyingValues\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isSupportedAsset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isSupported_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Enzyme Council <security@enzyme.finance>\",\"details\":\"Used purely for extraordinary circumstances where we want to prevent value calculations, while allowing an asset to continue to be in the asset universe\",\"kind\":\"dev\",\"methods\":{\"isSupportedAsset(address)\":{\"returns\":{\"isSupported_\":\"True if the asset is a supported primitive\"}}},\"title\":\"RevertingPriceFeed Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"calcUnderlyingValues(address,uint256)\":{\"notice\":\"Converts a given amount of a derivative to its underlying asset values\"},\"isSupportedAsset(address)\":{\"notice\":\"Checks whether an asset is a supported primitive of the price feed\"}},\"notice\":\"Price feed that always reverts on value conversion\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/release/infrastructure/price-feeds/derivatives/feeds/RevertingPriceFeed.sol\":\"RevertingPriceFeed\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/release/infrastructure/price-feeds/derivatives/IDerivativePriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IDerivativePriceFeed Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Simple interface for derivative price source oracle implementations\\ninterface IDerivativePriceFeed {\\n    function calcUnderlyingValues(address, uint256)\\n        external\\n        returns (address[] memory, uint256[] memory);\\n\\n    function isSupportedAsset(address) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5abbc57ccbf28b2c27a0ee496f0a949a0039912975e8f9a65312d884edd05332\",\"license\":\"GPL-3.0\"},\"contracts/release/infrastructure/price-feeds/derivatives/feeds/RevertingPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../IDerivativePriceFeed.sol\\\";\\n\\n/// @title RevertingPriceFeed Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Price feed that always reverts on value conversion\\n/// @dev Used purely for extraordinary circumstances where we want to prevent value calculations,\\n/// while allowing an asset to continue to be in the asset universe\\ncontract RevertingPriceFeed is IDerivativePriceFeed {\\n    /// @notice Converts a given amount of a derivative to its underlying asset values\\n    function calcUnderlyingValues(address, uint256)\\n        external\\n        override\\n        returns (address[] memory, uint256[] memory)\\n    {\\n        revert(\\\"calcUnderlyingValues: RevertingPriceFeed\\\");\\n    }\\n\\n    /// @notice Checks whether an asset is a supported primitive of the price feed\\n    /// @return isSupported_ True if the asset is a supported primitive\\n    function isSupportedAsset(address) public view override returns (bool isSupported_) {\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xf01ca67283fcb55a67353883c92e3a920adb798338227e3e15df44446d667a63\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506101d8806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063727212f61461003b5780639be918e614610100575b600080fd5b6100676004803603604081101561005157600080fd5b506001600160a01b03813516906020013561013a565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156100ab578181015183820152602001610093565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156100ea5781810151838201526020016100d2565b5050505090500194505050505060405180910390f35b6101266004803603602081101561011657600080fd5b50356001600160a01b0316610174565b604080519115158252519081900360200190f35b60608060405162461bcd60e51b815260040180806020018281038252602881526020018061017b6028913960400191505060405180910390fd5b5060019056fe63616c63556e6465726c79696e6756616c7565733a20526576657274696e67507269636546656564a26469706673582212200a62e661d3fd076009147e51f937f974dcd42fab9032486daab22ada4536a01964736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c8063727212f61461003b5780639be918e614610100575b600080fd5b6100676004803603604081101561005157600080fd5b506001600160a01b03813516906020013561013a565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156100ab578181015183820152602001610093565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156100ea5781810151838201526020016100d2565b5050505090500194505050505060405180910390f35b6101266004803603602081101561011657600080fd5b50356001600160a01b0316610174565b604080519115158252519081900360200190f35b60608060405162461bcd60e51b815260040180806020018281038252602881526020018061017b6028913960400191505060405180910390fd5b5060019056fe63616c63556e6465726c79696e6756616c7565733a20526576657274696e67507269636546656564a26469706673582212200a62e661d3fd076009147e51f937f974dcd42fab9032486daab22ada4536a01964736f6c634300060c0033",
  "devdoc": {
    "author": "Enzyme Council <security@enzyme.finance>",
    "details": "Used purely for extraordinary circumstances where we want to prevent value calculations, while allowing an asset to continue to be in the asset universe",
    "kind": "dev",
    "methods": {
      "isSupportedAsset(address)": {
        "returns": {
          "isSupported_": "True if the asset is a supported primitive"
        }
      }
    },
    "title": "RevertingPriceFeed Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "calcUnderlyingValues(address,uint256)": {
        "notice": "Converts a given amount of a derivative to its underlying asset values"
      },
      "isSupportedAsset(address)": {
        "notice": "Checks whether an asset is a supported primitive of the price feed"
      }
    },
    "notice": "Price feed that always reverts on value conversion",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}