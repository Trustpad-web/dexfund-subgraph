{
  "address": "0x01441CF6A4bde170d5BeCA5E8B91689E565CB495",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_integrationManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ADD_TRACKED_ASSETS_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "APPROVE_ASSETS_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CLAIM_REWARDS_AND_REINVEST_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CLAIM_REWARDS_AND_SWAP_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CLAIM_REWARDS_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LEND_AND_STAKE_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LEND_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REDEEM_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REMOVE_TRACKED_ASSETS_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STAKE_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TAKE_ORDER_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UNSTAKE_AND_REDEEM_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UNSTAKE_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getIntegrationManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "integrationManager_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUniswapV3Router",
      "outputs": [
        {
          "internalType": "address",
          "name": "router_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "identifier",
      "outputs": [
        {
          "internalType": "string",
          "name": "identifier_",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_selector",
          "type": "bytes4"
        },
        {
          "internalType": "bytes",
          "name": "_encodedCallArgs",
          "type": "bytes"
        }
      ],
      "name": "parseAssetsForMethod",
      "outputs": [
        {
          "internalType": "enum IIntegrationManager.SpendAssetsHandleType",
          "name": "spendAssetsHandleType_",
          "type": "uint8"
        },
        {
          "internalType": "address[]",
          "name": "spendAssets_",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "spendAssetAmounts_",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "incomingAssets_",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "minIncomingAssetAmounts_",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultProxy",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_encodedCallArgs",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "takeOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9fbd2c997849d9e5b01143c925e7be52e13d6f55b5cf9811f9583d4a73c1a166",
  "receipt": {
    "to": null,
    "from": "0xf83F4c3A25b8FEE1722d76e5F72AaFcA00845011",
    "contractAddress": "0x01441CF6A4bde170d5BeCA5E8B91689E565CB495",
    "transactionIndex": 2,
    "gasUsed": "1337906",
    "logsBloom": "0x
    "blockHash": "0x306fc9fa5ee419beb4cfcf078acf2b5d84f8a67ccfc692fcd1e3585cf6e71901",
    "transactionHash": "0x9fbd2c997849d9e5b01143c925e7be52e13d6f55b5cf9811f9583d4a73c1a166",
    "logs": [],
    "blockNumber": 27797722,
    "cumulativeGasUsed": "1461321",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x35a9ed450d4b5a12e24Ff81df198C7e412Aa2745",
    "0x6103CFbCA2e4073512420f1CB86f3CBa366d8F1c"
  ],
  "linkedData": {
    "type": "ADAPTER"
  },
  "solcInputHash": "a255b7352a771229d5d6ada28c33f53e",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_integrationManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ADD_TRACKED_ASSETS_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"APPROVE_ASSETS_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CLAIM_REWARDS_AND_REINVEST_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CLAIM_REWARDS_AND_SWAP_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CLAIM_REWARDS_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LEND_AND_STAKE_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LEND_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REDEEM_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REMOVE_TRACKED_ASSETS_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKE_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TAKE_ORDER_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNSTAKE_AND_REDEEM_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNSTAKE_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIntegrationManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"integrationManager_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUniswapV3Router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"router_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"identifier\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"identifier_\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_selector\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"_encodedCallArgs\",\"type\":\"bytes\"}],\"name\":\"parseAssetsForMethod\",\"outputs\":[{\"internalType\":\"enum IIntegrationManager.SpendAssetsHandleType\",\"name\":\"spendAssetsHandleType_\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"spendAssets_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"spendAssetAmounts_\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"incomingAssets_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minIncomingAssetAmounts_\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_encodedCallArgs\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"takeOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Enzyme Council <security@enzyme.finance>\",\"kind\":\"dev\",\"methods\":{\"getIntegrationManager()\":{\"returns\":{\"integrationManager_\":\"The `INTEGRATION_MANAGER` variable value\"}},\"getUniswapV3Router()\":{\"returns\":{\"router_\":\"The `UNISWAP_V3_ROUTER` variable value\"}},\"identifier()\":{\"returns\":{\"identifier_\":\"An identifier string\"}},\"parseAssetsForMethod(bytes4,bytes)\":{\"params\":{\"_encodedCallArgs\":\"The encoded parameters for the callOnIntegration\",\"_selector\":\"The function selector for the callOnIntegration\"},\"returns\":{\"incomingAssets_\":\"The assets to receive in the call\",\"minIncomingAssetAmounts_\":\"The min asset amounts to receive in the call\",\"spendAssetAmounts_\":\"The max asset amounts to spend in the call\",\"spendAssetsHandleType_\":\"A type that dictates how to handle granting the adapter access to spend assets (`None` by default)\",\"spendAssets_\":\"The assets to spend in the call\"}},\"takeOrder(address,bytes,bytes)\":{\"params\":{\"_encodedCallArgs\":\"Encoded order parameters\",\"_vaultProxy\":\"The VaultProxy of the calling fund\"}}},\"title\":\"UniswapV3SwapAdapter Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getIntegrationManager()\":{\"notice\":\"Gets the `INTEGRATION_MANAGER` variable\"},\"getUniswapV3Router()\":{\"notice\":\"Gets the `UNISWAP_V3_ROUTER` variable\"},\"identifier()\":{\"notice\":\"Provides a constant string identifier for an adapter\"},\"parseAssetsForMethod(bytes4,bytes)\":{\"notice\":\"Parses the expected assets to receive from a call on integration\"},\"takeOrder(address,bytes,bytes)\":{\"notice\":\"Trades assets on UniswapV3\"}},\"notice\":\"Adapter for interacting with UniswapV3 swaps\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/release/extensions/integration-manager/integrations/adapters/UniswapV3Adapter.sol\":\"UniswapV3Adapter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/release/extensions/integration-manager/IIntegrationManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IIntegrationManager interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Interface for the IntegrationManager\\ninterface IIntegrationManager {\\n    enum SpendAssetsHandleType {None, Approve, Transfer, Remove}\\n}\\n\",\"keccak256\":\"0x775b57aa3f44b527874e5fd848084ad6d9188d71882be033a49107e8d9a133e8\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/integration-manager/integrations/IIntegrationAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../IIntegrationManager.sol\\\";\\n\\n/// @title Integration Adapter interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Interface for all integration adapters\\ninterface IIntegrationAdapter {\\n    function identifier() external pure returns (string memory identifier_);\\n\\n    function parseAssetsForMethod(bytes4 _selector, bytes calldata _encodedCallArgs)\\n        external\\n        view\\n        returns (\\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType_,\\n            address[] memory spendAssets_,\\n            uint256[] memory spendAssetAmounts_,\\n            address[] memory incomingAssets_,\\n            uint256[] memory minIncomingAssetAmounts_\\n        );\\n}\\n\",\"keccak256\":\"0x7831b14ba1bb8abb1171986606cdd81e097566322178b83c68781d5fee0469f1\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/integration-manager/integrations/adapters/UniswapV3Adapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../utils/actions/UniswapV3ActionsMixin.sol\\\";\\nimport \\\"../utils/AdapterBase2.sol\\\";\\n\\n/// @title UniswapV3SwapAdapter Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Adapter for interacting with UniswapV3 swaps\\ncontract UniswapV3Adapter is AdapterBase2, UniswapV3ActionsMixin {\\n    constructor(address _integrationManager, address _router)\\n        public\\n        AdapterBase2(_integrationManager)\\n        UniswapV3ActionsMixin(_router)\\n    {}\\n\\n    // EXTERNAL FUNCTIONS\\n\\n    /// @notice Provides a constant string identifier for an adapter\\n    /// @return identifier_ An identifier string\\n    function identifier() external pure override returns (string memory identifier_) {\\n        return \\\"UNISWAP_V3\\\";\\n    }\\n\\n    /// @notice Trades assets on UniswapV3\\n    /// @param _vaultProxy The VaultProxy of the calling fund\\n    /// @param _encodedCallArgs Encoded order parameters\\n    function takeOrder(\\n        address _vaultProxy,\\n        bytes calldata _encodedCallArgs,\\n        bytes calldata\\n    ) external onlyIntegrationManager {\\n        (\\n            address[] memory pathAddresses,\\n            uint24[] memory pathFees,\\n            uint256 outgoingAssetAmount,\\n            uint256 minIncomingAssetAmount\\n        ) = __decodeCallArgs(_encodedCallArgs);\\n\\n        __uniswapV3Swap(\\n            _vaultProxy,\\n            pathAddresses,\\n            pathFees,\\n            outgoingAssetAmount,\\n            minIncomingAssetAmount\\n        );\\n    }\\n\\n    /// @notice Parses the expected assets to receive from a call on integration\\n    /// @param _selector The function selector for the callOnIntegration\\n    /// @param _encodedCallArgs The encoded parameters for the callOnIntegration\\n    /// @return spendAssetsHandleType_ A type that dictates how to handle granting\\n    /// the adapter access to spend assets (`None` by default)\\n    /// @return spendAssets_ The assets to spend in the call\\n    /// @return spendAssetAmounts_ The max asset amounts to spend in the call\\n    /// @return incomingAssets_ The assets to receive in the call\\n    /// @return minIncomingAssetAmounts_ The min asset amounts to receive in the call\\n    function parseAssetsForMethod(bytes4 _selector, bytes calldata _encodedCallArgs)\\n        external\\n        view\\n        override\\n        returns (\\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType_,\\n            address[] memory spendAssets_,\\n            uint256[] memory spendAssetAmounts_,\\n            address[] memory incomingAssets_,\\n            uint256[] memory minIncomingAssetAmounts_\\n        )\\n    {\\n        require(_selector == TAKE_ORDER_SELECTOR, \\\"parseAssetsForMethod: _selector invalid\\\");\\n\\n        (\\n            address[] memory pathAddresses,\\n            uint24[] memory pathFees,\\n            uint256 outgoingAssetAmount,\\n            uint256 minIncomingAssetAmount\\n        ) = __decodeCallArgs(_encodedCallArgs);\\n\\n        require(pathAddresses.length >= 2, \\\"parseAssetsForMethod: pathAddresses must be >= 2\\\");\\n        require(\\n            pathAddresses.length == pathFees.length + 1,\\n            \\\"parseAssetsForMethod: incorrect pathAddresses or pathFees length\\\"\\n        );\\n\\n        spendAssets_ = new address[](1);\\n        spendAssets_[0] = pathAddresses[0];\\n        spendAssetAmounts_ = new uint256[](1);\\n        spendAssetAmounts_[0] = outgoingAssetAmount;\\n\\n        incomingAssets_ = new address[](1);\\n        incomingAssets_[0] = pathAddresses[pathAddresses.length - 1];\\n        minIncomingAssetAmounts_ = new uint256[](1);\\n        minIncomingAssetAmounts_[0] = minIncomingAssetAmount;\\n\\n        return (\\n            IIntegrationManager.SpendAssetsHandleType.Transfer,\\n            spendAssets_,\\n            spendAssetAmounts_,\\n            incomingAssets_,\\n            minIncomingAssetAmounts_\\n        );\\n    }\\n\\n    /// @dev Helper to decode the encoded callOnIntegration call arguments\\n    function __decodeCallArgs(bytes memory _encodedCallArgs)\\n        private\\n        pure\\n        returns (\\n            address[] memory pathAddresses,\\n            uint24[] memory pathFees,\\n            uint256 outgoingAssetAmount,\\n            uint256 minIncomingAssetAmount\\n        )\\n    {\\n        return abi.decode(_encodedCallArgs, (address[], uint24[], uint256, uint256));\\n    }\\n}\\n\",\"keccak256\":\"0x13a78c6caa798b5b59ea5650cd3f81a8e946aabc6c74912d43b2732de68490e9\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/integration-manager/integrations/utils/AdapterBase.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"../IIntegrationAdapter.sol\\\";\\nimport \\\"./IntegrationSelectors.sol\\\";\\n\\n/// @title AdapterBase Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A base contract for integration adapters\\nabstract contract AdapterBase is IIntegrationAdapter, IntegrationSelectors {\\n    using SafeERC20 for ERC20;\\n\\n    address internal immutable INTEGRATION_MANAGER;\\n\\n    /// @dev Provides a standard implementation for transferring assets between\\n    /// the fund's VaultProxy and the adapter, by wrapping the adapter action.\\n    /// This modifier should be implemented in almost all adapter actions, unless they\\n    /// do not move assets or can spend and receive assets directly with the VaultProxy\\n    modifier fundAssetsTransferHandler(\\n        address _vaultProxy,\\n        bytes memory _encodedAssetTransferArgs\\n    ) {\\n        (\\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType,\\n            address[] memory spendAssets,\\n            uint256[] memory spendAssetAmounts,\\n            address[] memory incomingAssets\\n        ) = __decodeEncodedAssetTransferArgs(_encodedAssetTransferArgs);\\n\\n        // Take custody of spend assets (if necessary)\\n        if (spendAssetsHandleType == IIntegrationManager.SpendAssetsHandleType.Approve) {\\n            for (uint256 i = 0; i < spendAssets.length; i++) {\\n                ERC20(spendAssets[i]).safeTransferFrom(\\n                    _vaultProxy,\\n                    address(this),\\n                    spendAssetAmounts[i]\\n                );\\n            }\\n        }\\n\\n        // Execute call\\n        _;\\n\\n        // Transfer remaining assets back to the fund's VaultProxy\\n        __transferContractAssetBalancesToFund(_vaultProxy, incomingAssets);\\n        __transferContractAssetBalancesToFund(_vaultProxy, spendAssets);\\n    }\\n\\n    modifier onlyIntegrationManager() {\\n        require(\\n            msg.sender == INTEGRATION_MANAGER,\\n            \\\"Only the IntegrationManager can call this function\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(address _integrationManager) public {\\n        INTEGRATION_MANAGER = _integrationManager;\\n    }\\n\\n    // INTERNAL FUNCTIONS\\n\\n    /// @dev Helper for adapters to approve their integratees with the max amount of an asset.\\n    /// Since everything is done atomically, and only the balances to-be-used are sent to adapters,\\n    /// there is no need to approve exact amounts on every call.\\n    function __approveMaxAsNeeded(\\n        address _asset,\\n        address _target,\\n        uint256 _neededAmount\\n    ) internal {\\n        if (ERC20(_asset).allowance(address(this), _target) < _neededAmount) {\\n            ERC20(_asset).safeApprove(_target, type(uint256).max);\\n        }\\n    }\\n\\n    /// @dev Helper to decode the _encodedAssetTransferArgs param passed to adapter call\\n    function __decodeEncodedAssetTransferArgs(bytes memory _encodedAssetTransferArgs)\\n        internal\\n        pure\\n        returns (\\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType_,\\n            address[] memory spendAssets_,\\n            uint256[] memory spendAssetAmounts_,\\n            address[] memory incomingAssets_\\n        )\\n    {\\n        return\\n            abi.decode(\\n                _encodedAssetTransferArgs,\\n                (IIntegrationManager.SpendAssetsHandleType, address[], uint256[], address[])\\n            );\\n    }\\n\\n    /// @dev Helper to transfer full contract balances of assets to the specified VaultProxy\\n    function __transferContractAssetBalancesToFund(address _vaultProxy, address[] memory _assets)\\n        private\\n    {\\n        for (uint256 i = 0; i < _assets.length; i++) {\\n            uint256 postCallAmount = ERC20(_assets[i]).balanceOf(address(this));\\n            if (postCallAmount > 0) {\\n                ERC20(_assets[i]).safeTransfer(_vaultProxy, postCallAmount);\\n            }\\n        }\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the `INTEGRATION_MANAGER` variable\\n    /// @return integrationManager_ The `INTEGRATION_MANAGER` variable value\\n    function getIntegrationManager() external view returns (address integrationManager_) {\\n        return INTEGRATION_MANAGER;\\n    }\\n}\\n\",\"keccak256\":\"0x5e015f0edff7be2e1b73a3718e66faf1925fedbee5214e8b352ade80b376e49b\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/integration-manager/integrations/utils/AdapterBase2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./AdapterBase.sol\\\";\\n\\n/// @title AdapterBase2 Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A base contract for integration adapters that extends AdapterBase\\n/// @dev This is a temporary contract that will be merged into AdapterBase with the next release\\nabstract contract AdapterBase2 is AdapterBase {\\n    /// @dev Provides a standard implementation for transferring incoming assets and\\n    /// unspent spend assets from an adapter to a VaultProxy at the end of an adapter action\\n    modifier postActionAssetsTransferHandler(\\n        address _vaultProxy,\\n        bytes memory _encodedAssetTransferArgs\\n    ) {\\n        _;\\n\\n        (\\n            ,\\n            address[] memory spendAssets,\\n            ,\\n            address[] memory incomingAssets\\n        ) = __decodeEncodedAssetTransferArgs(_encodedAssetTransferArgs);\\n\\n        __transferFullAssetBalances(_vaultProxy, incomingAssets);\\n        __transferFullAssetBalances(_vaultProxy, spendAssets);\\n    }\\n\\n    /// @dev Provides a standard implementation for transferring incoming assets\\n    /// from an adapter to a VaultProxy at the end of an adapter action\\n    modifier postActionIncomingAssetsTransferHandler(\\n        address _vaultProxy,\\n        bytes memory _encodedAssetTransferArgs\\n    ) {\\n        _;\\n\\n        (, , , address[] memory incomingAssets) = __decodeEncodedAssetTransferArgs(\\n            _encodedAssetTransferArgs\\n        );\\n\\n        __transferFullAssetBalances(_vaultProxy, incomingAssets);\\n    }\\n\\n    /// @dev Provides a standard implementation for transferring unspent spend assets\\n    /// from an adapter to a VaultProxy at the end of an adapter action\\n    modifier postActionSpendAssetsTransferHandler(\\n        address _vaultProxy,\\n        bytes memory _encodedAssetTransferArgs\\n    ) {\\n        _;\\n\\n        (, address[] memory spendAssets, , ) = __decodeEncodedAssetTransferArgs(\\n            _encodedAssetTransferArgs\\n        );\\n\\n        __transferFullAssetBalances(_vaultProxy, spendAssets);\\n    }\\n\\n    constructor(address _integrationManager) public AdapterBase(_integrationManager) {}\\n\\n    /// @dev Helper to transfer full asset balances of current contract to the specified target\\n    function __transferFullAssetBalances(address _target, address[] memory _assets) internal {\\n        for (uint256 i = 0; i < _assets.length; i++) {\\n            uint256 balance = ERC20(_assets[i]).balanceOf(address(this));\\n            if (balance > 0) {\\n                ERC20(_assets[i]).safeTransfer(_target, balance);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa5594ed46431f4b58245fcf2a26ac25d87502d7529036906ec6bf07d444e7692\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/integration-manager/integrations/utils/IntegrationSelectors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IntegrationSelectors Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Selectors for integration actions\\n/// @dev Selectors are created from their signatures rather than hardcoded for easy verification\\nabstract contract IntegrationSelectors {\\n    // Tracked assets\\n    bytes4 public constant ADD_TRACKED_ASSETS_SELECTOR = bytes4(\\n        keccak256(\\\"addTrackedAssets(address,bytes,bytes)\\\")\\n    );\\n    bytes4 public constant REMOVE_TRACKED_ASSETS_SELECTOR = bytes4(\\n        keccak256(\\\"removeTrackedAssets(address,bytes,bytes)\\\")\\n    );\\n\\n    // Asset approval\\n    bytes4 public constant APPROVE_ASSETS_SELECTOR = bytes4(\\n        keccak256(\\\"approveAssets(address,bytes,bytes)\\\")\\n    );\\n\\n    // Trading\\n    bytes4 public constant TAKE_ORDER_SELECTOR = bytes4(\\n        keccak256(\\\"takeOrder(address,bytes,bytes)\\\")\\n    );\\n\\n    // Lending\\n    bytes4 public constant LEND_SELECTOR = bytes4(keccak256(\\\"lend(address,bytes,bytes)\\\"));\\n    bytes4 public constant REDEEM_SELECTOR = bytes4(keccak256(\\\"redeem(address,bytes,bytes)\\\"));\\n\\n    // Staking\\n    bytes4 public constant STAKE_SELECTOR = bytes4(keccak256(\\\"stake(address,bytes,bytes)\\\"));\\n    bytes4 public constant UNSTAKE_SELECTOR = bytes4(keccak256(\\\"unstake(address,bytes,bytes)\\\"));\\n\\n    // Rewards\\n    bytes4 public constant CLAIM_REWARDS_SELECTOR = bytes4(\\n        keccak256(\\\"claimRewards(address,bytes,bytes)\\\")\\n    );\\n\\n    // Combined\\n    bytes4 public constant CLAIM_REWARDS_AND_REINVEST_SELECTOR = bytes4(\\n        keccak256(\\\"claimRewardsAndReinvest(address,bytes,bytes)\\\")\\n    );\\n    bytes4 public constant CLAIM_REWARDS_AND_SWAP_SELECTOR = bytes4(\\n        keccak256(\\\"claimRewardsAndSwap(address,bytes,bytes)\\\")\\n    );\\n    bytes4 public constant LEND_AND_STAKE_SELECTOR = bytes4(\\n        keccak256(\\\"lendAndStake(address,bytes,bytes)\\\")\\n    );\\n    bytes4 public constant UNSTAKE_AND_REDEEM_SELECTOR = bytes4(\\n        keccak256(\\\"unstakeAndRedeem(address,bytes,bytes)\\\")\\n    );\\n}\\n\",\"keccak256\":\"0xc4642035f4c87808494beb8e852bae33fc950b17a7b44dadfadc033d87ed27fb\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/integration-manager/integrations/utils/actions/UniswapV3ActionsMixin.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../../../../interfaces/IUniswapV3SwapRouter.sol\\\";\\nimport \\\"../../../../../utils/AssetHelpers.sol\\\";\\n\\n/// @title UniswapV3ActionsMixin Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Mixin contract for interacting with Uniswap v3\\nabstract contract UniswapV3ActionsMixin is AssetHelpers {\\n    address private immutable UNISWAP_V3_ROUTER;\\n\\n    constructor(address _router) public {\\n        UNISWAP_V3_ROUTER = _router;\\n    }\\n\\n    /// @dev Helper to execute a swap\\n    // UniswapV3 paths are packed encoded as (address(_pathAddresses[i]), uint24(_pathFees[i]), address(_pathAddresses[i + 1]), [...])\\n    // _pathFees[i] represents the fee for the pool between _pathAddresses(i) and _pathAddresses(i+1)\\n    function __uniswapV3Swap(\\n        address _recipient,\\n        address[] memory _pathAddresses,\\n        uint24[] memory _pathFees,\\n        uint256 _outgoingAssetAmount,\\n        uint256 _minIncomingAssetAmount\\n    ) internal {\\n        __approveAssetMaxAsNeeded(_pathAddresses[0], UNISWAP_V3_ROUTER, _outgoingAssetAmount);\\n\\n        bytes memory encodedPath;\\n\\n        for (uint256 i; i < _pathAddresses.length; i++) {\\n            if (i != _pathAddresses.length - 1) {\\n                encodedPath = abi.encodePacked(encodedPath, _pathAddresses[i], _pathFees[i]);\\n            } else {\\n                encodedPath = abi.encodePacked(encodedPath, _pathAddresses[i]);\\n            }\\n        }\\n\\n        IUniswapV3SwapRouter.ExactInputParams memory input = IUniswapV3SwapRouter\\n            .ExactInputParams({\\n            path: encodedPath,\\n            recipient: _recipient,\\n            deadline: block.timestamp + 1,\\n            amountIn: _outgoingAssetAmount,\\n            amountOutMinimum: _minIncomingAssetAmount\\n        });\\n\\n        // Execute fill\\n        IUniswapV3SwapRouter(UNISWAP_V3_ROUTER).exactInput(input);\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the `UNISWAP_V3_ROUTER` variable\\n    /// @return router_ The `UNISWAP_V3_ROUTER` variable value\\n    function getUniswapV3Router() public view returns (address router_) {\\n        return UNISWAP_V3_ROUTER;\\n    }\\n}\\n\",\"keccak256\":\"0x9fe500a04504643e497b4b119d15b28a752a0dd3eaff2df0dd002b563c39c80c\",\"license\":\"GPL-3.0\"},\"contracts/release/interfaces/IUniswapV3SwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n/// @title IUniswapV3Router Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @dev Minimal interface for our interactions with Uniswap V3's Router\\ninterface IUniswapV3SwapRouter {\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    function exactInput(ExactInputParams calldata) external payable returns (uint256);\\n}\\n\",\"keccak256\":\"0xf8fc3ec7698a5cbc1ac63d3602c005590485a85083bd2d6e3d0c65feb0b26374\",\"license\":\"GPL-3.0\"},\"contracts/release/utils/AssetHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\n/// @title AssetHelpers Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A util contract for common token actions\\nabstract contract AssetHelpers {\\n    using SafeERC20 for ERC20;\\n    using SafeMath for uint256;\\n\\n    /// @dev Helper to approve a target account with the max amount of an asset.\\n    /// This is helpful for fully trusted contracts, such as adapters that\\n    /// interact with external protocol like Uniswap, Compound, etc.\\n    function __approveAssetMaxAsNeeded(\\n        address _asset,\\n        address _target,\\n        uint256 _neededAmount\\n    ) internal {\\n        if (ERC20(_asset).allowance(address(this), _target) < _neededAmount) {\\n            ERC20(_asset).safeApprove(_target, type(uint256).max);\\n        }\\n    }\\n\\n    /// @dev Helper to get the balances of specified assets for a target\\n    function __getAssetBalances(address _target, address[] memory _assets)\\n        internal\\n        view\\n        returns (uint256[] memory balances_)\\n    {\\n        balances_ = new uint256[](_assets.length);\\n        for (uint256 i; i < _assets.length; i++) {\\n            balances_[i] = ERC20(_assets[i]).balanceOf(_target);\\n        }\\n\\n        return balances_;\\n    }\\n\\n    /// @dev Helper to transfer full asset balances from a target to the current contract.\\n    /// Requires an adequate allowance for each asset granted to the current contract for the target.\\n    function __pullFullAssetBalances(address _target, address[] memory _assets)\\n        internal\\n        returns (uint256[] memory amountsTransferred_)\\n    {\\n        amountsTransferred_ = new uint256[](_assets.length);\\n        for (uint256 i; i < _assets.length; i++) {\\n            ERC20 assetContract = ERC20(_assets[i]);\\n            amountsTransferred_[i] = assetContract.balanceOf(_target);\\n            if (amountsTransferred_[i] > 0) {\\n                assetContract.safeTransferFrom(_target, address(this), amountsTransferred_[i]);\\n            }\\n        }\\n\\n        return amountsTransferred_;\\n    }\\n\\n    /// @dev Helper to transfer partial asset balances from a target to the current contract.\\n    /// Requires an adequate allowance for each asset granted to the current contract for the target.\\n    function __pullPartialAssetBalances(\\n        address _target,\\n        address[] memory _assets,\\n        uint256[] memory _amountsToExclude\\n    ) internal returns (uint256[] memory amountsTransferred_) {\\n        amountsTransferred_ = new uint256[](_assets.length);\\n        for (uint256 i; i < _assets.length; i++) {\\n            ERC20 assetContract = ERC20(_assets[i]);\\n            amountsTransferred_[i] = assetContract.balanceOf(_target).sub(_amountsToExclude[i]);\\n            if (amountsTransferred_[i] > 0) {\\n                assetContract.safeTransferFrom(_target, address(this), amountsTransferred_[i]);\\n            }\\n        }\\n\\n        return amountsTransferred_;\\n    }\\n\\n    /// @dev Helper to transfer full asset balances from the current contract to a target\\n    function __pushFullAssetBalances(address _target, address[] memory _assets)\\n        internal\\n        returns (uint256[] memory amountsTransferred_)\\n    {\\n        amountsTransferred_ = new uint256[](_assets.length);\\n        for (uint256 i; i < _assets.length; i++) {\\n            ERC20 assetContract = ERC20(_assets[i]);\\n            amountsTransferred_[i] = assetContract.balanceOf(address(this));\\n            if (amountsTransferred_[i] > 0) {\\n                assetContract.safeTransfer(_target, amountsTransferred_[i]);\\n            }\\n        }\\n\\n        return amountsTransferred_;\\n    }\\n}\\n\",\"keccak256\":\"0x86cef70bb917da925fdf43f5a6d6e7f3c1f5d1aff505c4500c47304f26b8ec26\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b506040516200183938038062001839833981016040819052620000349162000066565b6001600160601b0319606092831b8116608052911b1660a052620000d1565b80516200006081620000b7565b92915050565b600080604083850312156200007a57600080fd5b600062000088858562000053565b92505060206200009b8582860162000053565b9150509250929050565b60006001600160a01b03821662000060565b620000c281620000a5565b8114620000ce57600080fd5b50565b60805160601c60a05160601c61172f6200010a600039806106295280610742528061085152508061020f5280610695525061172f6000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c80637998a1c4116100a2578063e27a06b511610071578063e27a06b5146101dc578063e4d90478146101e4578063e7c45690146101ec578063f0753994146101f4578063f7d882b5146101fc57610116565b80637998a1c4146101a2578063863e5ad0146101b7578063b23228cf146101bf578063b9e3de44146101c757610116565b80633ffc1591116100e95780633ffc15911461015e57806340da225d1461016657806340f8cfcf1461016e5780635ca62b3c1461017657806376cc7ac61461017e57610116565b806303e38a2b1461011b578063080456c114610130578063131461c01461014e578063257cb1a314610156575b600080fd5b61012e610129366004610df1565b610204565b005b6101386102ba565b60405161014591906114a2565b60405180910390f35b6101386102de565b610138610302565b610138610326565b61013861034a565b61013861036e565b610138610392565b61019161018c366004610f2e565b6103b6565b6040516101459594939291906114b0565b6101aa6105bb565b604051610145919061150c565b6101386105df565b610138610603565b6101cf610627565b604051610145919061145e565b61013861064b565b61013861066f565b6101cf610693565b6101386106b7565b6101386106db565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146102555760405162461bcd60e51b815260040161024c9061153d565b60405180910390fd5b60608060008061029a88888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506106ff92505050565b93509350935093506102af8985858585610728565b505050505050505050565b7f8334eb99be0145865eba9889fca2ee920288090caefff4cc776038e20ad9259a81565b7f29fa046e79524c3c5ac4c01df692c35e217802b2b13b21121b76cf0ef02b138c81565b7f099f75155f0e997bf83a7993a71d5e7e7540bd386fe1e84643a09ce6b412521981565b7ffa7dd04da627f433da73c4355ead9c75682a67a8fc84d3f6170ef0922f402d2481565b7fb9dfbaccbe5cd2a84fdcf1d15f23ef25d23086f5afbaa99516065ed4a5bbc7a381565b7ff658eb804cc1da8af5599b584aaf3d55407a3c721c42641a6a5270e963d782c381565b7fdfd5ee0f6067928bf85a7c4430811282840bc99332dda3dab462c02bf95b67cc81565b600060608080806001600160e01b031988166303e38a2b60e01b146103ed5760405162461bcd60e51b815260040161024c9061151d565b6060806000806104328b8b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506106ff92505050565b935093509350935060028451101561045c5760405162461bcd60e51b815260040161024c9061154d565b82516001018451146104805760405162461bcd60e51b815260040161024c9061156d565b6040805160018082528183019092529060208083019080368337019050509750836000815181106104ad57fe5b6020026020010151886000815181106104c257fe5b6001600160a01b0392909216602092830291909101820152604080516001808252818301909252918281019080368337019050509650818760008151811061050657fe5b6020908102919091010152604080516001808252818301909252908160200160208202803683370190505095508360018551038151811061054357fe5b60200260200101518660008151811061055857fe5b6001600160a01b0392909216602092830291909101820152604080516001808252818301909252918281019080368337019050509450808560008151811061059c57fe5b6020026020010181815250506002985050505050939792965093509350565b60408051808201909152600a815269554e49535741505f563360b01b602082015290565b7f03e38a2bd7063d45c897edeafc330e71657502dd86434d3c37a489caf116af6981565b7f68e30677f607df46e87da13e15b637784cfa62374b653f35ab43d10361a2f83081565b7f000000000000000000000000000000000000000000000000000000000000000090565b7f848f3a590fb2f9795d1a275009c54c26c53833277c96b90e0ddd01753a1d590681565b7f3377e18acf9e83665eacd6af109261424fca32a298e2fc2e6095ba563fb8390e81565b7f000000000000000000000000000000000000000000000000000000000000000090565b7f1d51f49b5273d9ddbb643dc349fab8d36dbb470209c2ea71033bea49dd311c2781565b7fc29fa9dde84204c2908778afd0613d802d31cf046179b88f6d2b4a4e507ea2d581565b606080600080848060200190518101906107199190610e78565b93509350935093509193509193565b6107678460008151811061073857fe5b60200260200101517f0000000000000000000000000000000000000000000000000000000000000000846108f7565b606060005b855181101561081157600186510381146107d1578186828151811061078d57fe5b60200260200101518683815181106107a157fe5b60200260200101516040516020016107bb9392919061142b565b6040516020818303038152906040529150610809565b818682815181106107de57fe5b60200260200101516040516020016107f7929190611409565b60405160208183030381529060405291505b60010161076c565b5061081a610c39565b6040518060a00160405280838152602001886001600160a01b031681526020014260010181526020018581526020018481525090507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c04b8d59826040518263ffffffff1660e01b815260040161089b919061159d565b602060405180830381600087803b1580156108b557600080fd5b505af11580156108c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ed9190610f84565b5050505050505050565b604051636eb1769f60e11b815281906001600160a01b0385169063dd62ed3e90610927903090879060040161146c565b60206040518083038186803b15801561093f57600080fd5b505afa158015610953573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109779190610f84565b1015610993576109936001600160a01b03841683600019610998565b505050565b801580610a205750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e906109ce903090869060040161146c565b60206040518083038186803b1580156109e657600080fd5b505afa1580156109fa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1e9190610f84565b155b610a3c5760405162461bcd60e51b815260040161024c9061158d565b6109938363095ea7b360e01b8484604051602401610a5b929190611487565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526060610ae2826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610b1c9092919063ffffffff16565b8051909150156109935780806020019051810190610b009190610f08565b6109935760405162461bcd60e51b815260040161024c9061157d565b6060610b2b8484600085610b35565b90505b9392505050565b606082471015610b575760405162461bcd60e51b815260040161024c9061152d565b610b6085610bf6565b610b7c5760405162461bcd60e51b815260040161024c9061155d565b60006060866001600160a01b03168587604051610b9991906113fd565b60006040518083038185875af1925050503d8060008114610bd6576040519150601f19603f3d011682016040523d82523d6000602084013e610bdb565b606091505b5091509150610beb828286610c00565b979650505050505050565b803b15155b919050565b60608315610c0f575081610b2e565b825115610c1f5782518084602001fd5b8160405162461bcd60e51b815260040161024c919061150c565b6040518060a001604052806060815260200160006001600160a01b031681526020016000815260200160008152602001600081525090565b8035610c7c816116c1565b92915050565b8051610c7c816116c1565b600082601f830112610c9e57600080fd5b8151610cb1610cac826115d5565b6115ae565b91508181835260208401935060208101905083856020840282011115610cd657600080fd5b60005b83811015610d025781610cec8882610c82565b8452506020928301929190910190600101610cd9565b5050505092915050565b600082601f830112610d1d57600080fd5b8151610d2b610cac826115d5565b91508181835260208401935060208101905083856020840282011115610d5057600080fd5b60005b83811015610d025781610d668882610ddb565b8452506020928301929190910190600101610d53565b8051610c7c816116d5565b8035610c7c816116de565b60008083601f840112610da457600080fd5b50813567ffffffffffffffff811115610dbc57600080fd5b602083019150836001820283011115610dd457600080fd5b9250929050565b8051610c7c816116e7565b8051610c7c816116f0565b600080600080600060608688031215610e0957600080fd5b6000610e158888610c71565b955050602086013567ffffffffffffffff811115610e3257600080fd5b610e3e88828901610d92565b9450945050604086013567ffffffffffffffff811115610e5d57600080fd5b610e6988828901610d92565b92509250509295509295909350565b60008060008060808587031215610e8e57600080fd5b845167ffffffffffffffff811115610ea557600080fd5b610eb187828801610c8d565b945050602085015167ffffffffffffffff811115610ece57600080fd5b610eda87828801610d0c565b9350506040610eeb87828801610de6565b9250506060610efc87828801610de6565b91505092959194509250565b600060208284031215610f1a57600080fd5b6000610f268484610d7c565b949350505050565b600080600060408486031215610f4357600080fd5b6000610f4f8686610d87565b935050602084013567ffffffffffffffff811115610f6c57600080fd5b610f7886828701610d92565b92509250509250925092565b600060208284031215610f9657600080fd5b6000610f268484610de6565b6000610fae8383610fc2565b505060200190565b6000610fae83836113f4565b610fcb81611609565b82525050565b610fcb610fdd82611609565b611682565b6000610fed826115fc565b610ff78185611600565b9350611002836115f6565b8060005b8381101561103057815161101a8882610fa2565b9750611025836115f6565b925050600101611006565b509495945050505050565b6000611046826115fc565b6110508185611600565b935061105b836115f6565b8060005b838110156110305781516110738882610fb6565b975061107e836115f6565b92505060010161105f565b610fcb81611619565b600061109d826115fc565b6110a78185611600565b93506110b7818560208601611652565b6110c08161169e565b9093019392505050565b60006110d5826115fc565b6110df8185610bfb565b93506110ef818560208601611652565b9290920192915050565b610fcb81611647565b600061110f602783611600565b7f7061727365417373657473466f724d6574686f643a205f73656c6563746f72208152661a5b9d985b1a5960ca1b602082015260400192915050565b6000611158602683611600565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f8152651c8818d85b1b60d21b602082015260400192915050565b60006111a0603283611600565b7f4f6e6c792074686520496e746567726174696f6e4d616e616765722063616e2081527131b0b636103a3434b990333ab731ba34b7b760711b602082015260400192915050565b60006111f4603083611600565b7f7061727365417373657473466f724d6574686f643a207061746841646472657381526f39b2b99036bab9ba103132901f1e901960811b602082015260400192915050565b6000611246601d83611600565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000815260200192915050565b600061127f604083611600565b7f7061727365417373657473466f724d6574686f643a20696e636f72726563742081527f70617468416464726573736573206f72207061746846656573206c656e677468602082015260400192915050565b60006112de602a83611600565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e8152691bdd081cdd58d8d9595960b21b602082015260400192915050565b600061132a603683611600565b7f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f81527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b602082015260400192915050565b805160a08084526000919084019061138d8282611092565b91505060208301516113a26020860182610fc2565b5060408301516113b560408601826113f4565b5060608301516113c860608601826113f4565b5060808301516113db60808601826113f4565b509392505050565b610fcb6113ef8261163c565b611693565b610fcb81611644565b6000610b2e82846110ca565b600061141582856110ca565b91506114218284610fd1565b5060140192915050565b600061143782866110ca565b91506114438285610fd1565b60148201915061145382846113e3565b506003019392505050565b60208101610c7c8284610fc2565b6040810161147a8285610fc2565b610b2e6020830184610fc2565b604081016114958285610fc2565b610b2e60208301846113f4565b60208101610c7c8284611089565b60a081016114be82886110f9565b81810360208301526114d08187610fe2565b905081810360408301526114e4818661103b565b905081810360608301526114f88185610fe2565b90508181036080830152610beb818461103b565b60208082528101610b2e8184611092565b60208082528101610c7c81611102565b60208082528101610c7c8161114b565b60208082528101610c7c81611193565b60208082528101610c7c816111e7565b60208082528101610c7c81611239565b60208082528101610c7c81611272565b60208082528101610c7c816112d1565b60208082528101610c7c8161131d565b60208082528101610b2e8184611375565b60405181810167ffffffffffffffff811182821017156115cd57600080fd5b604052919050565b600067ffffffffffffffff8211156115ec57600080fd5b5060209081020190565b60200190565b5190565b90815260200190565b6000610c7c82611630565b151590565b6001600160e01b03191690565b80610bfb816116b4565b6001600160a01b031690565b62ffffff1690565b90565b6000610c7c82611626565b60005b8381101561166d578181015183820152602001611655565b8381111561167c576000848401525b50505050565b6000610c7c826000610c7c826116ae565b6000610c7c826116a8565b601f01601f191690565b60e81b90565b60601b90565b600481106116be57fe5b50565b6116ca81611609565b81146116be57600080fd5b6116ca81611614565b6116ca81611619565b6116ca8161163c565b6116ca8161164456fea26469706673582212202ead9a6b8699abed99d99d558a9a2003cf0e72f91bac4fa8627bff98db09b82a64736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101165760003560e01c80637998a1c4116100a2578063e27a06b511610071578063e27a06b5146101dc578063e4d90478146101e4578063e7c45690146101ec578063f0753994146101f4578063f7d882b5146101fc57610116565b80637998a1c4146101a2578063863e5ad0146101b7578063b23228cf146101bf578063b9e3de44146101c757610116565b80633ffc1591116100e95780633ffc15911461015e57806340da225d1461016657806340f8cfcf1461016e5780635ca62b3c1461017657806376cc7ac61461017e57610116565b806303e38a2b1461011b578063080456c114610130578063131461c01461014e578063257cb1a314610156575b600080fd5b61012e610129366004610df1565b610204565b005b6101386102ba565b60405161014591906114a2565b60405180910390f35b6101386102de565b610138610302565b610138610326565b61013861034a565b61013861036e565b610138610392565b61019161018c366004610f2e565b6103b6565b6040516101459594939291906114b0565b6101aa6105bb565b604051610145919061150c565b6101386105df565b610138610603565b6101cf610627565b604051610145919061145e565b61013861064b565b61013861066f565b6101cf610693565b6101386106b7565b6101386106db565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146102555760405162461bcd60e51b815260040161024c9061153d565b60405180910390fd5b60608060008061029a88888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506106ff92505050565b93509350935093506102af8985858585610728565b505050505050505050565b7f8334eb99be0145865eba9889fca2ee920288090caefff4cc776038e20ad9259a81565b7f29fa046e79524c3c5ac4c01df692c35e217802b2b13b21121b76cf0ef02b138c81565b7f099f75155f0e997bf83a7993a71d5e7e7540bd386fe1e84643a09ce6b412521981565b7ffa7dd04da627f433da73c4355ead9c75682a67a8fc84d3f6170ef0922f402d2481565b7fb9dfbaccbe5cd2a84fdcf1d15f23ef25d23086f5afbaa99516065ed4a5bbc7a381565b7ff658eb804cc1da8af5599b584aaf3d55407a3c721c42641a6a5270e963d782c381565b7fdfd5ee0f6067928bf85a7c4430811282840bc99332dda3dab462c02bf95b67cc81565b600060608080806001600160e01b031988166303e38a2b60e01b146103ed5760405162461bcd60e51b815260040161024c9061151d565b6060806000806104328b8b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506106ff92505050565b935093509350935060028451101561045c5760405162461bcd60e51b815260040161024c9061154d565b82516001018451146104805760405162461bcd60e51b815260040161024c9061156d565b6040805160018082528183019092529060208083019080368337019050509750836000815181106104ad57fe5b6020026020010151886000815181106104c257fe5b6001600160a01b0392909216602092830291909101820152604080516001808252818301909252918281019080368337019050509650818760008151811061050657fe5b6020908102919091010152604080516001808252818301909252908160200160208202803683370190505095508360018551038151811061054357fe5b60200260200101518660008151811061055857fe5b6001600160a01b0392909216602092830291909101820152604080516001808252818301909252918281019080368337019050509450808560008151811061059c57fe5b6020026020010181815250506002985050505050939792965093509350565b60408051808201909152600a815269554e49535741505f563360b01b602082015290565b7f03e38a2bd7063d45c897edeafc330e71657502dd86434d3c37a489caf116af6981565b7f68e30677f607df46e87da13e15b637784cfa62374b653f35ab43d10361a2f83081565b7f000000000000000000000000000000000000000000000000000000000000000090565b7f848f3a590fb2f9795d1a275009c54c26c53833277c96b90e0ddd01753a1d590681565b7f3377e18acf9e83665eacd6af109261424fca32a298e2fc2e6095ba563fb8390e81565b7f000000000000000000000000000000000000000000000000000000000000000090565b7f1d51f49b5273d9ddbb643dc349fab8d36dbb470209c2ea71033bea49dd311c2781565b7fc29fa9dde84204c2908778afd0613d802d31cf046179b88f6d2b4a4e507ea2d581565b606080600080848060200190518101906107199190610e78565b93509350935093509193509193565b6107678460008151811061073857fe5b60200260200101517f0000000000000000000000000000000000000000000000000000000000000000846108f7565b606060005b855181101561081157600186510381146107d1578186828151811061078d57fe5b60200260200101518683815181106107a157fe5b60200260200101516040516020016107bb9392919061142b565b6040516020818303038152906040529150610809565b818682815181106107de57fe5b60200260200101516040516020016107f7929190611409565b60405160208183030381529060405291505b60010161076c565b5061081a610c39565b6040518060a00160405280838152602001886001600160a01b031681526020014260010181526020018581526020018481525090507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c04b8d59826040518263ffffffff1660e01b815260040161089b919061159d565b602060405180830381600087803b1580156108b557600080fd5b505af11580156108c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ed9190610f84565b5050505050505050565b604051636eb1769f60e11b815281906001600160a01b0385169063dd62ed3e90610927903090879060040161146c565b60206040518083038186803b15801561093f57600080fd5b505afa158015610953573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109779190610f84565b1015610993576109936001600160a01b03841683600019610998565b505050565b801580610a205750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e906109ce903090869060040161146c565b60206040518083038186803b1580156109e657600080fd5b505afa1580156109fa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1e9190610f84565b155b610a3c5760405162461bcd60e51b815260040161024c9061158d565b6109938363095ea7b360e01b8484604051602401610a5b929190611487565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526060610ae2826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610b1c9092919063ffffffff16565b8051909150156109935780806020019051810190610b009190610f08565b6109935760405162461bcd60e51b815260040161024c9061157d565b6060610b2b8484600085610b35565b90505b9392505050565b606082471015610b575760405162461bcd60e51b815260040161024c9061152d565b610b6085610bf6565b610b7c5760405162461bcd60e51b815260040161024c9061155d565b60006060866001600160a01b03168587604051610b9991906113fd565b60006040518083038185875af1925050503d8060008114610bd6576040519150601f19603f3d011682016040523d82523d6000602084013e610bdb565b606091505b5091509150610beb828286610c00565b979650505050505050565b803b15155b919050565b60608315610c0f575081610b2e565b825115610c1f5782518084602001fd5b8160405162461bcd60e51b815260040161024c919061150c565b6040518060a001604052806060815260200160006001600160a01b031681526020016000815260200160008152602001600081525090565b8035610c7c816116c1565b92915050565b8051610c7c816116c1565b600082601f830112610c9e57600080fd5b8151610cb1610cac826115d5565b6115ae565b91508181835260208401935060208101905083856020840282011115610cd657600080fd5b60005b83811015610d025781610cec8882610c82565b8452506020928301929190910190600101610cd9565b5050505092915050565b600082601f830112610d1d57600080fd5b8151610d2b610cac826115d5565b91508181835260208401935060208101905083856020840282011115610d5057600080fd5b60005b83811015610d025781610d668882610ddb565b8452506020928301929190910190600101610d53565b8051610c7c816116d5565b8035610c7c816116de565b60008083601f840112610da457600080fd5b50813567ffffffffffffffff811115610dbc57600080fd5b602083019150836001820283011115610dd457600080fd5b9250929050565b8051610c7c816116e7565b8051610c7c816116f0565b600080600080600060608688031215610e0957600080fd5b6000610e158888610c71565b955050602086013567ffffffffffffffff811115610e3257600080fd5b610e3e88828901610d92565b9450945050604086013567ffffffffffffffff811115610e5d57600080fd5b610e6988828901610d92565b92509250509295509295909350565b60008060008060808587031215610e8e57600080fd5b845167ffffffffffffffff811115610ea557600080fd5b610eb187828801610c8d565b945050602085015167ffffffffffffffff811115610ece57600080fd5b610eda87828801610d0c565b9350506040610eeb87828801610de6565b9250506060610efc87828801610de6565b91505092959194509250565b600060208284031215610f1a57600080fd5b6000610f268484610d7c565b949350505050565b600080600060408486031215610f4357600080fd5b6000610f4f8686610d87565b935050602084013567ffffffffffffffff811115610f6c57600080fd5b610f7886828701610d92565b92509250509250925092565b600060208284031215610f9657600080fd5b6000610f268484610de6565b6000610fae8383610fc2565b505060200190565b6000610fae83836113f4565b610fcb81611609565b82525050565b610fcb610fdd82611609565b611682565b6000610fed826115fc565b610ff78185611600565b9350611002836115f6565b8060005b8381101561103057815161101a8882610fa2565b9750611025836115f6565b925050600101611006565b509495945050505050565b6000611046826115fc565b6110508185611600565b935061105b836115f6565b8060005b838110156110305781516110738882610fb6565b975061107e836115f6565b92505060010161105f565b610fcb81611619565b600061109d826115fc565b6110a78185611600565b93506110b7818560208601611652565b6110c08161169e565b9093019392505050565b60006110d5826115fc565b6110df8185610bfb565b93506110ef818560208601611652565b9290920192915050565b610fcb81611647565b600061110f602783611600565b7f7061727365417373657473466f724d6574686f643a205f73656c6563746f72208152661a5b9d985b1a5960ca1b602082015260400192915050565b6000611158602683611600565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f8152651c8818d85b1b60d21b602082015260400192915050565b60006111a0603283611600565b7f4f6e6c792074686520496e746567726174696f6e4d616e616765722063616e2081527131b0b636103a3434b990333ab731ba34b7b760711b602082015260400192915050565b60006111f4603083611600565b7f7061727365417373657473466f724d6574686f643a207061746841646472657381526f39b2b99036bab9ba103132901f1e901960811b602082015260400192915050565b6000611246601d83611600565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000815260200192915050565b600061127f604083611600565b7f7061727365417373657473466f724d6574686f643a20696e636f72726563742081527f70617468416464726573736573206f72207061746846656573206c656e677468602082015260400192915050565b60006112de602a83611600565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e8152691bdd081cdd58d8d9595960b21b602082015260400192915050565b600061132a603683611600565b7f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f81527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b602082015260400192915050565b805160a08084526000919084019061138d8282611092565b91505060208301516113a26020860182610fc2565b5060408301516113b560408601826113f4565b5060608301516113c860608601826113f4565b5060808301516113db60808601826113f4565b509392505050565b610fcb6113ef8261163c565b611693565b610fcb81611644565b6000610b2e82846110ca565b600061141582856110ca565b91506114218284610fd1565b5060140192915050565b600061143782866110ca565b91506114438285610fd1565b60148201915061145382846113e3565b506003019392505050565b60208101610c7c8284610fc2565b6040810161147a8285610fc2565b610b2e6020830184610fc2565b604081016114958285610fc2565b610b2e60208301846113f4565b60208101610c7c8284611089565b60a081016114be82886110f9565b81810360208301526114d08187610fe2565b905081810360408301526114e4818661103b565b905081810360608301526114f88185610fe2565b90508181036080830152610beb818461103b565b60208082528101610b2e8184611092565b60208082528101610c7c81611102565b60208082528101610c7c8161114b565b60208082528101610c7c81611193565b60208082528101610c7c816111e7565b60208082528101610c7c81611239565b60208082528101610c7c81611272565b60208082528101610c7c816112d1565b60208082528101610c7c8161131d565b60208082528101610b2e8184611375565b60405181810167ffffffffffffffff811182821017156115cd57600080fd5b604052919050565b600067ffffffffffffffff8211156115ec57600080fd5b5060209081020190565b60200190565b5190565b90815260200190565b6000610c7c82611630565b151590565b6001600160e01b03191690565b80610bfb816116b4565b6001600160a01b031690565b62ffffff1690565b90565b6000610c7c82611626565b60005b8381101561166d578181015183820152602001611655565b8381111561167c576000848401525b50505050565b6000610c7c826000610c7c826116ae565b6000610c7c826116a8565b601f01601f191690565b60e81b90565b60601b90565b600481106116be57fe5b50565b6116ca81611609565b81146116be57600080fd5b6116ca81611614565b6116ca81611619565b6116ca8161163c565b6116ca8161164456fea26469706673582212202ead9a6b8699abed99d99d558a9a2003cf0e72f91bac4fa8627bff98db09b82a64736f6c634300060c0033",
  "devdoc": {
    "author": "Enzyme Council <security@enzyme.finance>",
    "kind": "dev",
    "methods": {
      "getIntegrationManager()": {
        "returns": {
          "integrationManager_": "The `INTEGRATION_MANAGER` variable value"
        }
      },
      "getUniswapV3Router()": {
        "returns": {
          "router_": "The `UNISWAP_V3_ROUTER` variable value"
        }
      },
      "identifier()": {
        "returns": {
          "identifier_": "An identifier string"
        }
      },
      "parseAssetsForMethod(bytes4,bytes)": {
        "params": {
          "_encodedCallArgs": "The encoded parameters for the callOnIntegration",
          "_selector": "The function selector for the callOnIntegration"
        },
        "returns": {
          "incomingAssets_": "The assets to receive in the call",
          "minIncomingAssetAmounts_": "The min asset amounts to receive in the call",
          "spendAssetAmounts_": "The max asset amounts to spend in the call",
          "spendAssetsHandleType_": "A type that dictates how to handle granting the adapter access to spend assets (`None` by default)",
          "spendAssets_": "The assets to spend in the call"
        }
      },
      "takeOrder(address,bytes,bytes)": {
        "params": {
          "_encodedCallArgs": "Encoded order parameters",
          "_vaultProxy": "The VaultProxy of the calling fund"
        }
      }
    },
    "title": "UniswapV3SwapAdapter Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getIntegrationManager()": {
        "notice": "Gets the `INTEGRATION_MANAGER` variable"
      },
      "getUniswapV3Router()": {
        "notice": "Gets the `UNISWAP_V3_ROUTER` variable"
      },
      "identifier()": {
        "notice": "Provides a constant string identifier for an adapter"
      },
      "parseAssetsForMethod(bytes4,bytes)": {
        "notice": "Parses the expected assets to receive from a call on integration"
      },
      "takeOrder(address,bytes,bytes)": {
        "notice": "Trades assets on UniswapV3"
      }
    },
    "notice": "Adapter for interacting with UniswapV3 swaps",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}