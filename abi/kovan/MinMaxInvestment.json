{
  "address": "0xb2c37f3d8C5f22c891Ff43f59d33DE53Dd97d71c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_policyManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "comptrollerProxy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minInvestmentAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxInvestmentAmount",
          "type": "uint256"
        }
      ],
      "name": "FundSettingsSet",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "activateForFund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_comptrollerProxy",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_encodedSettings",
          "type": "bytes"
        }
      ],
      "name": "addFundSettings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_comptrollerProxy",
          "type": "address"
        }
      ],
      "name": "getFundSettings",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "minInvestmentAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxInvestmentAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct MinMaxInvestment.FundSettings",
          "name": "fundSettings_",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPolicyManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "policyManager_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "identifier",
      "outputs": [
        {
          "internalType": "string",
          "name": "identifier_",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "implementedHooks",
      "outputs": [
        {
          "internalType": "enum IPolicyManager.PolicyHook[]",
          "name": "implementedHooks_",
          "type": "uint8[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_comptrollerProxy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_investmentAmount",
          "type": "uint256"
        }
      ],
      "name": "passesRule",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isValid_",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_comptrollerProxy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_encodedSettings",
          "type": "bytes"
        }
      ],
      "name": "updateFundSettings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_comptrollerProxy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "enum IPolicyManager.PolicyHook",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "_encodedArgs",
          "type": "bytes"
        }
      ],
      "name": "validateRule",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isValid_",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x974194a0a9d01bacb4e56dd3764037375f82ec2e350e8eafa44c37d5c21cc458",
  "receipt": {
    "to": null,
    "from": "0xf83F4c3A25b8FEE1722d76e5F72AaFcA00845011",
    "contractAddress": "0xb2c37f3d8C5f22c891Ff43f59d33DE53Dd97d71c",
    "transactionIndex": 0,
    "gasUsed": "669796",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xd39cef49a0221975fbd9a2be06248a50e6e44229d13eff0f900ed4605ef5552b",
    "transactionHash": "0x974194a0a9d01bacb4e56dd3764037375f82ec2e350e8eafa44c37d5c21cc458",
    "logs": [],
    "blockNumber": 27798083,
    "cumulativeGasUsed": "669796",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x008DBE548c97D253c8161305883AE506f264c4fD"
  ],
  "linkedData": {
    "type": "POLICY"
  },
  "solcInputHash": "a255b7352a771229d5d6ada28c33f53e",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_policyManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"comptrollerProxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minInvestmentAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxInvestmentAmount\",\"type\":\"uint256\"}],\"name\":\"FundSettingsSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"activateForFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_comptrollerProxy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_encodedSettings\",\"type\":\"bytes\"}],\"name\":\"addFundSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_comptrollerProxy\",\"type\":\"address\"}],\"name\":\"getFundSettings\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"minInvestmentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxInvestmentAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct MinMaxInvestment.FundSettings\",\"name\":\"fundSettings_\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPolicyManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"policyManager_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"identifier\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"identifier_\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementedHooks\",\"outputs\":[{\"internalType\":\"enum IPolicyManager.PolicyHook[]\",\"name\":\"implementedHooks_\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_comptrollerProxy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_investmentAmount\",\"type\":\"uint256\"}],\"name\":\"passesRule\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isValid_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_comptrollerProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_encodedSettings\",\"type\":\"bytes\"}],\"name\":\"updateFundSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_comptrollerProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"enum IPolicyManager.PolicyHook\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_encodedArgs\",\"type\":\"bytes\"}],\"name\":\"validateRule\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isValid_\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Enzyme Council <security@enzyme.finance>\",\"kind\":\"dev\",\"methods\":{\"activateForFund(address,address)\":{\"details\":\"Unimplemented by default, can be overridden by the policy\"},\"addFundSettings(address,bytes)\":{\"params\":{\"_comptrollerProxy\":\"The fund's ComptrollerProxy address\",\"_encodedSettings\":\"Encoded settings to apply to a fund\"}},\"getFundSettings(address)\":{\"params\":{\"_comptrollerProxy\":\"The ComptrollerProxy of the fund\"},\"returns\":{\"fundSettings_\":\"The fund settings\"}},\"getPolicyManager()\":{\"returns\":{\"policyManager_\":\"The `POLICY_MANAGER` variable value\"}},\"identifier()\":{\"returns\":{\"identifier_\":\"The identifer string\"}},\"implementedHooks()\":{\"returns\":{\"implementedHooks_\":\"The implemented PolicyHooks\"}},\"passesRule(address,uint256)\":{\"params\":{\"_comptrollerProxy\":\"The fund's ComptrollerProxy address\",\"_investmentAmount\":\"The investment amount for which to check the rule\"},\"returns\":{\"isValid_\":\"True if the rule passes\"}},\"updateFundSettings(address,address,bytes)\":{\"params\":{\"_comptrollerProxy\":\"The fund's ComptrollerProxy address\",\"_encodedSettings\":\"Encoded settings to apply to a fund\"}},\"validateRule(address,address,uint8,bytes)\":{\"params\":{\"_comptrollerProxy\":\"The fund's ComptrollerProxy address\",\"_encodedArgs\":\"Encoded args with which to validate the rule\"},\"returns\":{\"isValid_\":\"True if the rule passes\"}}},\"title\":\"MinMaxInvestment Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"activateForFund(address,address)\":{\"notice\":\"Validates and initializes a policy as necessary prior to fund activation\"},\"addFundSettings(address,bytes)\":{\"notice\":\"Adds the initial policy settings for a fund\"},\"getFundSettings(address)\":{\"notice\":\"Gets the min and max investment amount for a given fund\"},\"getPolicyManager()\":{\"notice\":\"Gets the `POLICY_MANAGER` variable value\"},\"identifier()\":{\"notice\":\"Provides a constant string identifier for a policy\"},\"implementedHooks()\":{\"notice\":\"Gets the implemented PolicyHooks for a policy\"},\"passesRule(address,uint256)\":{\"notice\":\"Checks whether a particular condition passes the rule for a particular fund\"},\"updateFundSettings(address,address,bytes)\":{\"notice\":\"Updates the policy settings for a fund\"},\"validateRule(address,address,uint8,bytes)\":{\"notice\":\"Apply the rule with the specified parameters of a PolicyHook\"}},\"notice\":\"A policy that restricts the amount of the fund's denomination asset that a user can send in a single call to buy shares in a fund\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/release/extensions/policy-manager/policies/buy-shares/MinMaxInvestment.sol\":\"MinMaxInvestment\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/release/extensions/policy-manager/IPolicy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IPolicyManager.sol\\\";\\n\\n/// @title Policy Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IPolicy {\\n    function activateForFund(address _comptrollerProxy, address _vaultProxy) external;\\n\\n    function addFundSettings(address _comptrollerProxy, bytes calldata _encodedSettings) external;\\n\\n    function identifier() external pure returns (string memory identifier_);\\n\\n    function implementedHooks()\\n        external\\n        view\\n        returns (IPolicyManager.PolicyHook[] memory implementedHooks_);\\n\\n    function updateFundSettings(\\n        address _comptrollerProxy,\\n        address _vaultProxy,\\n        bytes calldata _encodedSettings\\n    ) external;\\n\\n    function validateRule(\\n        address _comptrollerProxy,\\n        address _vaultProxy,\\n        IPolicyManager.PolicyHook _hook,\\n        bytes calldata _encodedArgs\\n    ) external returns (bool isValid_);\\n}\\n\",\"keccak256\":\"0x0e2e8a653f8c136c50e9b8642bd57744fe581d005e1ee787476a86f3ef40551f\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/policy-manager/IPolicyManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n/// @title PolicyManager Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Interface for the PolicyManager\\ninterface IPolicyManager {\\n    enum PolicyHook {\\n        BuySharesSetup,\\n        PreBuyShares,\\n        PostBuyShares,\\n        BuySharesCompleted,\\n        PreCallOnIntegration,\\n        PostCallOnIntegration\\n    }\\n\\n    function validatePolicies(\\n        address,\\n        PolicyHook,\\n        bytes calldata\\n    ) external;\\n}\\n\",\"keccak256\":\"0xedf25295ad42998e2651b3828c2be4a6aeef1176e0c669781074394e3d181732\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/policy-manager/policies/buy-shares/MinMaxInvestment.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./utils/PreBuySharesValidatePolicyBase.sol\\\";\\n\\n/// @title MinMaxInvestment Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A policy that restricts the amount of the fund's denomination asset that a user can\\n/// send in a single call to buy shares in a fund\\ncontract MinMaxInvestment is PreBuySharesValidatePolicyBase {\\n    event FundSettingsSet(\\n        address indexed comptrollerProxy,\\n        uint256 minInvestmentAmount,\\n        uint256 maxInvestmentAmount\\n    );\\n\\n    struct FundSettings {\\n        uint256 minInvestmentAmount;\\n        uint256 maxInvestmentAmount;\\n    }\\n\\n    mapping(address => FundSettings) private comptrollerProxyToFundSettings;\\n\\n    constructor(address _policyManager) public PolicyBase(_policyManager) {}\\n\\n    /// @notice Adds the initial policy settings for a fund\\n    /// @param _comptrollerProxy The fund's ComptrollerProxy address\\n    /// @param _encodedSettings Encoded settings to apply to a fund\\n    function addFundSettings(address _comptrollerProxy, bytes calldata _encodedSettings)\\n        external\\n        override\\n        onlyPolicyManager\\n    {\\n        __setFundSettings(_comptrollerProxy, _encodedSettings);\\n    }\\n\\n    /// @notice Provides a constant string identifier for a policy\\n    /// @return identifier_ The identifer string\\n    function identifier() external pure override returns (string memory identifier_) {\\n        return \\\"MIN_MAX_INVESTMENT\\\";\\n    }\\n\\n    /// @notice Updates the policy settings for a fund\\n    /// @param _comptrollerProxy The fund's ComptrollerProxy address\\n    /// @param _encodedSettings Encoded settings to apply to a fund\\n    function updateFundSettings(\\n        address _comptrollerProxy,\\n        address,\\n        bytes calldata _encodedSettings\\n    ) external override onlyPolicyManager {\\n        __setFundSettings(_comptrollerProxy, _encodedSettings);\\n    }\\n\\n    /// @notice Checks whether a particular condition passes the rule for a particular fund\\n    /// @param _comptrollerProxy The fund's ComptrollerProxy address\\n    /// @param _investmentAmount The investment amount for which to check the rule\\n    /// @return isValid_ True if the rule passes\\n    function passesRule(address _comptrollerProxy, uint256 _investmentAmount)\\n        public\\n        view\\n        returns (bool isValid_)\\n    {\\n        uint256 minInvestmentAmount = comptrollerProxyToFundSettings[_comptrollerProxy]\\n            .minInvestmentAmount;\\n        uint256 maxInvestmentAmount = comptrollerProxyToFundSettings[_comptrollerProxy]\\n            .maxInvestmentAmount;\\n\\n        // Both minInvestmentAmount and maxInvestmentAmount can be 0 in order to close the fund\\n        // temporarily\\n        if (minInvestmentAmount == 0) {\\n            return _investmentAmount <= maxInvestmentAmount;\\n        } else if (maxInvestmentAmount == 0) {\\n            return _investmentAmount >= minInvestmentAmount;\\n        }\\n        return\\n            _investmentAmount >= minInvestmentAmount && _investmentAmount <= maxInvestmentAmount;\\n    }\\n\\n    /// @notice Apply the rule with the specified parameters of a PolicyHook\\n    /// @param _comptrollerProxy The fund's ComptrollerProxy address\\n    /// @param _encodedArgs Encoded args with which to validate the rule\\n    /// @return isValid_ True if the rule passes\\n    function validateRule(\\n        address _comptrollerProxy,\\n        address,\\n        IPolicyManager.PolicyHook,\\n        bytes calldata _encodedArgs\\n    ) external override returns (bool isValid_) {\\n        (, uint256 investmentAmount, , ) = __decodeRuleArgs(_encodedArgs);\\n\\n        return passesRule(_comptrollerProxy, investmentAmount);\\n    }\\n\\n    /// @dev Helper to set the policy settings for a fund\\n    /// @param _comptrollerProxy The fund's ComptrollerProxy address\\n    /// @param _encodedSettings Encoded settings to apply to a fund\\n    function __setFundSettings(address _comptrollerProxy, bytes memory _encodedSettings) private {\\n        (uint256 minInvestmentAmount, uint256 maxInvestmentAmount) = abi.decode(\\n            _encodedSettings,\\n            (uint256, uint256)\\n        );\\n\\n        require(\\n            maxInvestmentAmount == 0 || minInvestmentAmount < maxInvestmentAmount,\\n            \\\"__setFundSettings: minInvestmentAmount must be less than maxInvestmentAmount\\\"\\n        );\\n\\n        comptrollerProxyToFundSettings[_comptrollerProxy]\\n            .minInvestmentAmount = minInvestmentAmount;\\n        comptrollerProxyToFundSettings[_comptrollerProxy]\\n            .maxInvestmentAmount = maxInvestmentAmount;\\n\\n        emit FundSettingsSet(_comptrollerProxy, minInvestmentAmount, maxInvestmentAmount);\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the min and max investment amount for a given fund\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\n    /// @return fundSettings_ The fund settings\\n    function getFundSettings(address _comptrollerProxy)\\n        external\\n        view\\n        returns (FundSettings memory fundSettings_)\\n    {\\n        return comptrollerProxyToFundSettings[_comptrollerProxy];\\n    }\\n}\\n\",\"keccak256\":\"0x149a61d4d0f66aa6c122c3aa9e673e6bda6693ec644618da397a3b2394223b3d\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/policy-manager/policies/buy-shares/utils/PreBuySharesValidatePolicyBase.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../../utils/PolicyBase.sol\\\";\\n\\n/// @title BuySharesPolicyMixin Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A mixin contract for policies that only implement the PreBuyShares policy hook\\nabstract contract PreBuySharesValidatePolicyBase is PolicyBase {\\n    /// @notice Gets the implemented PolicyHooks for a policy\\n    /// @return implementedHooks_ The implemented PolicyHooks\\n    function implementedHooks()\\n        external\\n        view\\n        override\\n        returns (IPolicyManager.PolicyHook[] memory implementedHooks_)\\n    {\\n        implementedHooks_ = new IPolicyManager.PolicyHook[](1);\\n        implementedHooks_[0] = IPolicyManager.PolicyHook.PreBuyShares;\\n\\n        return implementedHooks_;\\n    }\\n\\n    /// @notice Helper to decode rule arguments\\n    function __decodeRuleArgs(bytes memory _encodedArgs)\\n        internal\\n        pure\\n        returns (\\n            address buyer_,\\n            uint256 investmentAmount_,\\n            uint256 minSharesQuantity_,\\n            uint256 gav_\\n        )\\n    {\\n        return abi.decode(_encodedArgs, (address, uint256, uint256, uint256));\\n    }\\n}\\n\",\"keccak256\":\"0xc66f93a7087d707a3b242bbd026c9e9030bf85d900ae9d9384bc982b48b6a357\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/policy-manager/policies/utils/PolicyBase.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../../IPolicy.sol\\\";\\n\\n/// @title PolicyBase Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Abstract base contract for all policies\\nabstract contract PolicyBase is IPolicy {\\n    address internal immutable POLICY_MANAGER;\\n\\n    modifier onlyPolicyManager() {\\n        require(msg.sender == POLICY_MANAGER, \\\"Only the PolicyManager can make this call\\\");\\n        _;\\n    }\\n\\n    constructor(address _policyManager) public {\\n        POLICY_MANAGER = _policyManager;\\n    }\\n\\n    /// @notice Validates and initializes a policy as necessary prior to fund activation\\n    /// @dev Unimplemented by default, can be overridden by the policy\\n    function activateForFund(address, address) external virtual override {\\n        return;\\n    }\\n\\n    /// @notice Updates the policy settings for a fund\\n    /// @dev Disallowed by default, can be overridden by the policy\\n    function updateFundSettings(\\n        address,\\n        address,\\n        bytes calldata\\n    ) external virtual override {\\n        revert(\\\"updateFundSettings: Updates not allowed for this policy\\\");\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the `POLICY_MANAGER` variable value\\n    /// @return policyManager_ The `POLICY_MANAGER` variable value\\n    function getPolicyManager() external view returns (address policyManager_) {\\n        return POLICY_MANAGER;\\n    }\\n}\\n\",\"keccak256\":\"0x1945bf07b104c92801ba497d074275b25736899ef9f076faa36c2dd9ceac7cc5\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610be8380380610be883398101604081905261002f91610055565b60601b6001600160601b0319166080526100a3565b805161004f8161008c565b92915050565b60006020828403121561006757600080fd5b60006100738484610044565b949350505050565b60006001600160a01b03821661004f565b6100958161007b565b81146100a057600080fd5b50565b60805160601c610b1e6100ca60003980610179528061033452806104105250610b1e6000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80636e3a9982116100665780636e3a9982146101095780637998a1c41461011c5780638945f19014610131578063cbf54bb214610144578063d44ad6cb1461015957610093565b80630f5f6b4f146100985780633146d058146100ad5780634fa4e54b146100c05780635b8f1c5a146100e9575b600080fd5b6100ab6100a6366004610742565b61016e565b005b6100ab6100bb366004610622565b610204565b6100d36100ce36600461059b565b610208565b6040516100e09190610a0b565b60405180910390f35b6100fc6100f73660046106c4565b610245565b6040516100e091906109cc565b6100fc610117366004610798565b6102a1565b6101246102fd565b6040516100e091906109da565b6100ab61013f36600461065c565b610329565b61014c6103b7565b6040516100e091906109b4565b61016161040e565b6040516100e091906109a6565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146101bf5760405162461bcd60e51b81526004016101b6906109eb565b60405180910390fd5b6101ff8383838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061043292505050565b505050565b5050565b610210610501565b506001600160a01b0381166000908152602081815260409182902082518084019093528054835260010154908201525b919050565b60008061028784848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506104d892505050565b505091505061029687826102a1565b979650505050505050565b6001600160a01b03821660009081526020819052604081208054600190910154816102d25783111591506102f79050565b806102e2575082101590506102f7565b8184101580156102f25750808411155b925050505b92915050565b60408051808201909152601281527113525397d3505617d253959154d51351539560721b602082015290565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146103715760405162461bcd60e51b81526004016101b6906109eb565b6103b18483838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061043292505050565b50505050565b604080516001808252818301909252606091602080830190803683370190505090506001816000815181106103e857fe5b602002602001019060058111156103fb57fe5b9081600581111561040857fe5b90525090565b7f000000000000000000000000000000000000000000000000000000000000000090565b6000808280602001905181019061044991906107c8565b91509150806000148061045b57508082105b6104775760405162461bcd60e51b81526004016101b6906109fb565b6001600160a01b03841660008181526020819052604090819020848155600101839055517fed112d6c0e84b6900209ce5a4c04541bc63a517e0160888c447ee70be47ce60f906104ca9085908590610a19565b60405180910390a250505050565b600080600080848060200190518101906104f291906105c1565b93509350935093509193509193565b604051806040016040528060008152602001600081525090565b80356102f781610abe565b80516102f781610abe565b60008083601f84011261054357600080fd5b50813567ffffffffffffffff81111561055b57600080fd5b60208301915083600182028301111561057357600080fd5b9250929050565b80356102f781610ad2565b80356102f781610adf565b80516102f781610adf565b6000602082840312156105ad57600080fd5b60006105b9848461051b565b949350505050565b600080600080608085870312156105d757600080fd5b60006105e38787610526565b94505060206105f487828801610590565b935050604061060587828801610590565b925050606061061687828801610590565b91505092959194509250565b6000806040838503121561063557600080fd5b6000610641858561051b565b92505060206106528582860161051b565b9150509250929050565b6000806000806060858703121561067257600080fd5b600061067e878761051b565b945050602061068f8782880161051b565b935050604085013567ffffffffffffffff8111156106ac57600080fd5b6106b887828801610531565b95989497509550505050565b6000806000806000608086880312156106dc57600080fd5b60006106e8888861051b565b95505060206106f98882890161051b565b945050604061070a8882890161057a565b935050606086013567ffffffffffffffff81111561072757600080fd5b61073388828901610531565b92509250509295509295909350565b60008060006040848603121561075757600080fd5b6000610763868661051b565b935050602084013567ffffffffffffffff81111561078057600080fd5b61078c86828701610531565b92509250509250925092565b600080604083850312156107ab57600080fd5b60006107b7858561051b565b925050602061065285828601610585565b600080604083850312156107db57600080fd5b60006107e78585610590565b925050602061065285828601610590565b6000610804838361087d565b505060200190565b61081581610a47565b82525050565b600061082682610a3a565b6108308185610a3e565b935061083b83610a34565b8060005b8381101561086957815161085388826107f8565b975061085e83610a34565b92505060010161083f565b509495945050505050565b61081581610a52565b61081581610a70565b600061089182610a3a565b61089b8185610a3e565b93506108ab818560208601610a7b565b6108b481610aa7565b9093019392505050565b60006108cb602983610a3e565b7f4f6e6c792074686520506f6c6963794d616e616765722063616e206d616b65208152681d1a1a5cc818d85b1b60ba1b602082015260400192915050565b6000610916604c83610a3e565b7f5f5f73657446756e6453657474696e67733a206d696e496e766573746d656e7481527f416d6f756e74206d757374206265206c657373207468616e206d6178496e766560208201526b1cdd1b595b9d105b5bdd5b9d60a21b604082015260600192915050565b8051604083019061098e848261099d565b5060208201516103b160208501825b61081581610a6d565b602081016102f7828461080c565b602080825281016109c5818461081b565b9392505050565b602081016102f78284610874565b602080825281016109c58184610886565b602080825281016102f7816108be565b602080825281016102f781610909565b604081016102f7828461097d565b60408101610a27828561099d565b6109c5602083018461099d565b60200190565b5190565b90815260200190565b60006102f782610a61565b151590565b8061024081610ab1565b6001600160a01b031690565b90565b60006102f782610a57565b60005b83811015610a96578181015183820152602001610a7e565b838111156103b15750506000910152565b601f01601f191690565b60068110610abb57fe5b50565b610ac781610a47565b8114610abb57600080fd5b60068110610abb57600080fd5b610ac781610a6d56fea2646970667358221220709d8091c5658c028cafbbc384e31e365e4e5f87df1cd153dc188e6fa82a646364736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c80636e3a9982116100665780636e3a9982146101095780637998a1c41461011c5780638945f19014610131578063cbf54bb214610144578063d44ad6cb1461015957610093565b80630f5f6b4f146100985780633146d058146100ad5780634fa4e54b146100c05780635b8f1c5a146100e9575b600080fd5b6100ab6100a6366004610742565b61016e565b005b6100ab6100bb366004610622565b610204565b6100d36100ce36600461059b565b610208565b6040516100e09190610a0b565b60405180910390f35b6100fc6100f73660046106c4565b610245565b6040516100e091906109cc565b6100fc610117366004610798565b6102a1565b6101246102fd565b6040516100e091906109da565b6100ab61013f36600461065c565b610329565b61014c6103b7565b6040516100e091906109b4565b61016161040e565b6040516100e091906109a6565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146101bf5760405162461bcd60e51b81526004016101b6906109eb565b60405180910390fd5b6101ff8383838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061043292505050565b505050565b5050565b610210610501565b506001600160a01b0381166000908152602081815260409182902082518084019093528054835260010154908201525b919050565b60008061028784848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506104d892505050565b505091505061029687826102a1565b979650505050505050565b6001600160a01b03821660009081526020819052604081208054600190910154816102d25783111591506102f79050565b806102e2575082101590506102f7565b8184101580156102f25750808411155b925050505b92915050565b60408051808201909152601281527113525397d3505617d253959154d51351539560721b602082015290565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146103715760405162461bcd60e51b81526004016101b6906109eb565b6103b18483838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061043292505050565b50505050565b604080516001808252818301909252606091602080830190803683370190505090506001816000815181106103e857fe5b602002602001019060058111156103fb57fe5b9081600581111561040857fe5b90525090565b7f000000000000000000000000000000000000000000000000000000000000000090565b6000808280602001905181019061044991906107c8565b91509150806000148061045b57508082105b6104775760405162461bcd60e51b81526004016101b6906109fb565b6001600160a01b03841660008181526020819052604090819020848155600101839055517fed112d6c0e84b6900209ce5a4c04541bc63a517e0160888c447ee70be47ce60f906104ca9085908590610a19565b60405180910390a250505050565b600080600080848060200190518101906104f291906105c1565b93509350935093509193509193565b604051806040016040528060008152602001600081525090565b80356102f781610abe565b80516102f781610abe565b60008083601f84011261054357600080fd5b50813567ffffffffffffffff81111561055b57600080fd5b60208301915083600182028301111561057357600080fd5b9250929050565b80356102f781610ad2565b80356102f781610adf565b80516102f781610adf565b6000602082840312156105ad57600080fd5b60006105b9848461051b565b949350505050565b600080600080608085870312156105d757600080fd5b60006105e38787610526565b94505060206105f487828801610590565b935050604061060587828801610590565b925050606061061687828801610590565b91505092959194509250565b6000806040838503121561063557600080fd5b6000610641858561051b565b92505060206106528582860161051b565b9150509250929050565b6000806000806060858703121561067257600080fd5b600061067e878761051b565b945050602061068f8782880161051b565b935050604085013567ffffffffffffffff8111156106ac57600080fd5b6106b887828801610531565b95989497509550505050565b6000806000806000608086880312156106dc57600080fd5b60006106e8888861051b565b95505060206106f98882890161051b565b945050604061070a8882890161057a565b935050606086013567ffffffffffffffff81111561072757600080fd5b61073388828901610531565b92509250509295509295909350565b60008060006040848603121561075757600080fd5b6000610763868661051b565b935050602084013567ffffffffffffffff81111561078057600080fd5b61078c86828701610531565b92509250509250925092565b600080604083850312156107ab57600080fd5b60006107b7858561051b565b925050602061065285828601610585565b600080604083850312156107db57600080fd5b60006107e78585610590565b925050602061065285828601610590565b6000610804838361087d565b505060200190565b61081581610a47565b82525050565b600061082682610a3a565b6108308185610a3e565b935061083b83610a34565b8060005b8381101561086957815161085388826107f8565b975061085e83610a34565b92505060010161083f565b509495945050505050565b61081581610a52565b61081581610a70565b600061089182610a3a565b61089b8185610a3e565b93506108ab818560208601610a7b565b6108b481610aa7565b9093019392505050565b60006108cb602983610a3e565b7f4f6e6c792074686520506f6c6963794d616e616765722063616e206d616b65208152681d1a1a5cc818d85b1b60ba1b602082015260400192915050565b6000610916604c83610a3e565b7f5f5f73657446756e6453657474696e67733a206d696e496e766573746d656e7481527f416d6f756e74206d757374206265206c657373207468616e206d6178496e766560208201526b1cdd1b595b9d105b5bdd5b9d60a21b604082015260600192915050565b8051604083019061098e848261099d565b5060208201516103b160208501825b61081581610a6d565b602081016102f7828461080c565b602080825281016109c5818461081b565b9392505050565b602081016102f78284610874565b602080825281016109c58184610886565b602080825281016102f7816108be565b602080825281016102f781610909565b604081016102f7828461097d565b60408101610a27828561099d565b6109c5602083018461099d565b60200190565b5190565b90815260200190565b60006102f782610a61565b151590565b8061024081610ab1565b6001600160a01b031690565b90565b60006102f782610a57565b60005b83811015610a96578181015183820152602001610a7e565b838111156103b15750506000910152565b601f01601f191690565b60068110610abb57fe5b50565b610ac781610a47565b8114610abb57600080fd5b60068110610abb57600080fd5b610ac781610a6d56fea2646970667358221220709d8091c5658c028cafbbc384e31e365e4e5f87df1cd153dc188e6fa82a646364736f6c634300060c0033",
  "devdoc": {
    "author": "Enzyme Council <security@enzyme.finance>",
    "kind": "dev",
    "methods": {
      "activateForFund(address,address)": {
        "details": "Unimplemented by default, can be overridden by the policy"
      },
      "addFundSettings(address,bytes)": {
        "params": {
          "_comptrollerProxy": "The fund's ComptrollerProxy address",
          "_encodedSettings": "Encoded settings to apply to a fund"
        }
      },
      "getFundSettings(address)": {
        "params": {
          "_comptrollerProxy": "The ComptrollerProxy of the fund"
        },
        "returns": {
          "fundSettings_": "The fund settings"
        }
      },
      "getPolicyManager()": {
        "returns": {
          "policyManager_": "The `POLICY_MANAGER` variable value"
        }
      },
      "identifier()": {
        "returns": {
          "identifier_": "The identifer string"
        }
      },
      "implementedHooks()": {
        "returns": {
          "implementedHooks_": "The implemented PolicyHooks"
        }
      },
      "passesRule(address,uint256)": {
        "params": {
          "_comptrollerProxy": "The fund's ComptrollerProxy address",
          "_investmentAmount": "The investment amount for which to check the rule"
        },
        "returns": {
          "isValid_": "True if the rule passes"
        }
      },
      "updateFundSettings(address,address,bytes)": {
        "params": {
          "_comptrollerProxy": "The fund's ComptrollerProxy address",
          "_encodedSettings": "Encoded settings to apply to a fund"
        }
      },
      "validateRule(address,address,uint8,bytes)": {
        "params": {
          "_comptrollerProxy": "The fund's ComptrollerProxy address",
          "_encodedArgs": "Encoded args with which to validate the rule"
        },
        "returns": {
          "isValid_": "True if the rule passes"
        }
      }
    },
    "title": "MinMaxInvestment Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "activateForFund(address,address)": {
        "notice": "Validates and initializes a policy as necessary prior to fund activation"
      },
      "addFundSettings(address,bytes)": {
        "notice": "Adds the initial policy settings for a fund"
      },
      "getFundSettings(address)": {
        "notice": "Gets the min and max investment amount for a given fund"
      },
      "getPolicyManager()": {
        "notice": "Gets the `POLICY_MANAGER` variable value"
      },
      "identifier()": {
        "notice": "Provides a constant string identifier for a policy"
      },
      "implementedHooks()": {
        "notice": "Gets the implemented PolicyHooks for a policy"
      },
      "passesRule(address,uint256)": {
        "notice": "Checks whether a particular condition passes the rule for a particular fund"
      },
      "updateFundSettings(address,address,bytes)": {
        "notice": "Updates the policy settings for a fund"
      },
      "validateRule(address,address,uint8,bytes)": {
        "notice": "Apply the rule with the specified parameters of a PolicyHook"
      }
    },
    "notice": "A policy that restricts the amount of the fund's denomination asset that a user can send in a single call to buy shares in a fund",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 35523,
        "contract": "contracts/release/extensions/policy-manager/policies/buy-shares/MinMaxInvestment.sol:MinMaxInvestment",
        "label": "comptrollerProxyToFundSettings",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_struct(FundSettings)35519_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(FundSettings)35519_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MinMaxInvestment.FundSettings)",
        "numberOfBytes": "32",
        "value": "t_struct(FundSettings)35519_storage"
      },
      "t_struct(FundSettings)35519_storage": {
        "encoding": "inplace",
        "label": "struct MinMaxInvestment.FundSettings",
        "members": [
          {
            "astId": 35516,
            "contract": "contracts/release/extensions/policy-manager/policies/buy-shares/MinMaxInvestment.sol:MinMaxInvestment",
            "label": "minInvestmentAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 35518,
            "contract": "contracts/release/extensions/policy-manager/policies/buy-shares/MinMaxInvestment.sol:MinMaxInvestment",
            "label": "maxInvestmentAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}