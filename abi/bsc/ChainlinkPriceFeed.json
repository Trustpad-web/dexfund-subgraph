{
  "address": "0x993cC884478d1cf0938e51f2bBa89C94891Bac40",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fundDeployer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wethToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ethUsdAggregator",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_primitives",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_aggregators",
          "type": "address[]"
        },
        {
          "internalType": "enum ChainlinkPriceFeed.RateAsset[]",
          "name": "_rateAssets",
          "type": "uint8[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "prevEthUsdAggregator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "nextEthUsdAggregator",
          "type": "address"
        }
      ],
      "name": "EthUsdAggregatorSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "primitive",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "aggregator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum ChainlinkPriceFeed.RateAsset",
          "name": "rateAsset",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unit",
          "type": "uint256"
        }
      ],
      "name": "PrimitiveAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "primitive",
          "type": "address"
        }
      ],
      "name": "PrimitiveRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "primitive",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "prevAggregator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "nextAggregator",
          "type": "address"
        }
      ],
      "name": "PrimitiveUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "primitive",
          "type": "address"
        }
      ],
      "name": "StalePrimitiveRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prevStaleRateThreshold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nextStaleRateThreshold",
          "type": "uint256"
        }
      ],
      "name": "StaleRateThresholdSet",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_primitives",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_aggregators",
          "type": "address[]"
        },
        {
          "internalType": "enum ChainlinkPriceFeed.RateAsset[]",
          "name": "_rateAssets",
          "type": "uint8[]"
        }
      ],
      "name": "addPrimitives",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_baseAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_baseAssetAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_quoteAsset",
          "type": "address"
        }
      ],
      "name": "calcCanonicalValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "quoteAssetAmount_",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isValid_",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_baseAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_baseAssetAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_quoteAsset",
          "type": "address"
        }
      ],
      "name": "calcLiveValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "quoteAssetAmount_",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isValid_",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_primitive",
          "type": "address"
        }
      ],
      "name": "getAggregatorInfoForPrimitive",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "aggregator",
              "type": "address"
            },
            {
              "internalType": "enum ChainlinkPriceFeed.RateAsset",
              "name": "rateAsset",
              "type": "uint8"
            }
          ],
          "internalType": "struct ChainlinkPriceFeed.AggregatorInfo",
          "name": "aggregatorInfo_",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEthUsdAggregator",
      "outputs": [
        {
          "internalType": "address",
          "name": "ethUsdAggregator_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFundDeployer",
      "outputs": [
        {
          "internalType": "address",
          "name": "fundDeployer_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_primitive",
          "type": "address"
        }
      ],
      "name": "getRateAssetForPrimitive",
      "outputs": [
        {
          "internalType": "enum ChainlinkPriceFeed.RateAsset",
          "name": "rateAsset_",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStaleRateThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "staleRateThreshold_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_primitive",
          "type": "address"
        }
      ],
      "name": "getUnitForPrimitive",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "unit_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWethToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "wethToken_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "isSupportedAsset",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isSupported_",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_aggregator",
          "type": "address"
        }
      ],
      "name": "rateIsStale",
      "outputs": [
        {
          "internalType": "bool",
          "name": "rateIsStale_",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_primitives",
          "type": "address[]"
        }
      ],
      "name": "removePrimitives",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_primitives",
          "type": "address[]"
        }
      ],
      "name": "removeStalePrimitives",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nextEthUsdAggregator",
          "type": "address"
        }
      ],
      "name": "setEthUsdAggregator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_nextStaleRateThreshold",
          "type": "uint256"
        }
      ],
      "name": "setStaleRateThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_primitives",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_aggregators",
          "type": "address[]"
        }
      ],
      "name": "updatePrimitives",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x50bad25e6d490ca3734a0006b1651784fa1b720c3d7543493940723591323a05",
  "receipt": {
    "to": null,
    "from": "0x5DB342FB039C1c85bec5fE89Af6734621f421D84",
    "contractAddress": "0x993cC884478d1cf0938e51f2bBa89C94891Bac40",
    "transactionIndex": 132,
    "gasUsed": "3307051",
    "logsBloom": "0x0000000000020020000000004800000000000010000000000000000004000080000010000000000800000000000004000000004000400000000000000080000000000000000008000000020000000000008000000000004200000050000008202000000000000001000001000000000000000002000180000c8000000000000080800000000010000808008000000000000000000200000000004c0000000000000000000000000000000000080004800000004000000180000000000100000000000800000000000000000000000040000100000000000000000000000000010000000100000200000002040800000000000000000000000000000000000000",
    "blockHash": "0x5e7fbd6373d2a0a267049c7d4fce81fd0ef20020ed762847433256fb9016bd23",
    "transactionHash": "0x50bad25e6d490ca3734a0006b1651784fa1b720c3d7543493940723591323a05",
    "logs": [
      {
        "transactionIndex": 132,
        "blockNumber": 13430322,
        "transactionHash": "0x50bad25e6d490ca3734a0006b1651784fa1b720c3d7543493940723591323a05",
        "address": "0x993cC884478d1cf0938e51f2bBa89C94891Bac40",
        "topics": [
          "0x98b60a60ba6130248e985ae4140dc3109d9c2980c7e435fed385e2756bc94461"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000567f2323251f0aab15c8dfb1967e4e8a7d42aee",
        "logIndex": 469,
        "blockHash": "0x5e7fbd6373d2a0a267049c7d4fce81fd0ef20020ed762847433256fb9016bd23"
      },
      {
        "transactionIndex": 132,
        "blockNumber": 13430322,
        "transactionHash": "0x50bad25e6d490ca3734a0006b1651784fa1b720c3d7543493940723591323a05",
        "address": "0x993cC884478d1cf0938e51f2bBa89C94891Bac40",
        "topics": [
          "0x742bdf00da3d8f16c0fab93ce38eb6a536a019c9e283888dd44c3a08c0148c02",
          "0x000000000000000000000000a1faa113cbe53436df28ff0aee54275c13b40975"
        ],
        "data": "0x0000000000000000000000007bc032a7c19b1bdcb981d892854d090cfb0f238e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a7640000",
        "logIndex": 470,
        "blockHash": "0x5e7fbd6373d2a0a267049c7d4fce81fd0ef20020ed762847433256fb9016bd23"
      },
      {
        "transactionIndex": 132,
        "blockNumber": 13430322,
        "transactionHash": "0x50bad25e6d490ca3734a0006b1651784fa1b720c3d7543493940723591323a05",
        "address": "0x993cC884478d1cf0938e51f2bBa89C94891Bac40",
        "topics": [
          "0x742bdf00da3d8f16c0fab93ce38eb6a536a019c9e283888dd44c3a08c0148c02",
          "0x000000000000000000000000ad6caeb32cd2c308980a548bd0bc5aa4306c6c18"
        ],
        "data": "0x000000000000000000000000c78b99ae87ff43535b0c782128db3cb49c74a4d300000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000de0b6b3a7640000",
        "logIndex": 471,
        "blockHash": "0x5e7fbd6373d2a0a267049c7d4fce81fd0ef20020ed762847433256fb9016bd23"
      },
      {
        "transactionIndex": 132,
        "blockNumber": 13430322,
        "transactionHash": "0x50bad25e6d490ca3734a0006b1651784fa1b720c3d7543493940723591323a05",
        "address": "0x993cC884478d1cf0938e51f2bBa89C94891Bac40",
        "topics": [
          "0x742bdf00da3d8f16c0fab93ce38eb6a536a019c9e283888dd44c3a08c0148c02",
          "0x000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d56"
        ],
        "data": "0x00000000000000000000000087ea38c9f24264ec1fff41b04ec94a97caf9994100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a7640000",
        "logIndex": 472,
        "blockHash": "0x5e7fbd6373d2a0a267049c7d4fce81fd0ef20020ed762847433256fb9016bd23"
      },
      {
        "transactionIndex": 132,
        "blockNumber": 13430322,
        "transactionHash": "0x50bad25e6d490ca3734a0006b1651784fa1b720c3d7543493940723591323a05",
        "address": "0x993cC884478d1cf0938e51f2bBa89C94891Bac40",
        "topics": [
          "0x742bdf00da3d8f16c0fab93ce38eb6a536a019c9e283888dd44c3a08c0148c02",
          "0x0000000000000000000000004b87642aedf10b642be4663db842ecc5a88bf5ba"
        ],
        "data": "0x000000000000000000000000fc362828930519f236ad0c8f126b7996562a695a00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000de0b6b3a7640000",
        "logIndex": 473,
        "blockHash": "0x5e7fbd6373d2a0a267049c7d4fce81fd0ef20020ed762847433256fb9016bd23"
      },
      {
        "transactionIndex": 132,
        "blockNumber": 13430322,
        "transactionHash": "0x50bad25e6d490ca3734a0006b1651784fa1b720c3d7543493940723591323a05",
        "address": "0x993cC884478d1cf0938e51f2bBa89C94891Bac40",
        "topics": [
          "0x742bdf00da3d8f16c0fab93ce38eb6a536a019c9e283888dd44c3a08c0148c02",
          "0x00000000000000000000000052ce071bd9b1c4b00a0b92d298c512478cad67e8"
        ],
        "data": "0x0000000000000000000000000db8945f9aef5651fa5bd52314c5aae78dfde54000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000de0b6b3a7640000",
        "logIndex": 474,
        "blockHash": "0x5e7fbd6373d2a0a267049c7d4fce81fd0ef20020ed762847433256fb9016bd23"
      },
      {
        "transactionIndex": 132,
        "blockNumber": 13430322,
        "transactionHash": "0x50bad25e6d490ca3734a0006b1651784fa1b720c3d7543493940723591323a05",
        "address": "0x993cC884478d1cf0938e51f2bBa89C94891Bac40",
        "topics": [
          "0x742bdf00da3d8f16c0fab93ce38eb6a536a019c9e283888dd44c3a08c0148c02",
          "0x0000000000000000000000001af3f329e8be154074d8769d1ffa4ee058b1dbc3"
        ],
        "data": "0x0000000000000000000000008ec213e7191488c7873cec6dac8e97cdbadb7b3500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a7640000",
        "logIndex": 475,
        "blockHash": "0x5e7fbd6373d2a0a267049c7d4fce81fd0ef20020ed762847433256fb9016bd23"
      },
      {
        "transactionIndex": 132,
        "blockNumber": 13430322,
        "transactionHash": "0x50bad25e6d490ca3734a0006b1651784fa1b720c3d7543493940723591323a05",
        "address": "0x993cC884478d1cf0938e51f2bBa89C94891Bac40",
        "topics": [
          "0x742bdf00da3d8f16c0fab93ce38eb6a536a019c9e283888dd44c3a08c0148c02",
          "0x000000000000000000000000564d4a58fd000aa7b3e80f8a1f2a8e67f759151d"
        ],
        "data": "0x0000000000000000000000007ee7e7847ffc93f8cf67bccc0002aff9c52de5240000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000003b9aca00",
        "logIndex": 476,
        "blockHash": "0x5e7fbd6373d2a0a267049c7d4fce81fd0ef20020ed762847433256fb9016bd23"
      },
      {
        "transactionIndex": 132,
        "blockNumber": 13430322,
        "transactionHash": "0x50bad25e6d490ca3734a0006b1651784fa1b720c3d7543493940723591323a05",
        "address": "0x993cC884478d1cf0938e51f2bBa89C94891Bac40",
        "topics": [
          "0x742bdf00da3d8f16c0fab93ce38eb6a536a019c9e283888dd44c3a08c0148c02",
          "0x000000000000000000000000f8a0bf9cf54bb92f17374d9e9a321e6a111a51bd"
        ],
        "data": "0x000000000000000000000000b38722f6a608646a538e882ee9972d15c86fc59700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a7640000",
        "logIndex": 477,
        "blockHash": "0x5e7fbd6373d2a0a267049c7d4fce81fd0ef20020ed762847433256fb9016bd23"
      },
      {
        "transactionIndex": 132,
        "blockNumber": 13430322,
        "transactionHash": "0x50bad25e6d490ca3734a0006b1651784fa1b720c3d7543493940723591323a05",
        "address": "0x993cC884478d1cf0938e51f2bBa89C94891Bac40",
        "topics": [
          "0x742bdf00da3d8f16c0fab93ce38eb6a536a019c9e283888dd44c3a08c0148c02",
          "0x000000000000000000000000947950bcc74888a40ffa2593c5798f11fc9124c4"
        ],
        "data": "0x000000000000000000000000a679c72a97b654cfff58ab704de3ba15cde89b0700000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000de0b6b3a7640000",
        "logIndex": 478,
        "blockHash": "0x5e7fbd6373d2a0a267049c7d4fce81fd0ef20020ed762847433256fb9016bd23"
      },
      {
        "transactionIndex": 132,
        "blockNumber": 13430322,
        "transactionHash": "0x50bad25e6d490ca3734a0006b1651784fa1b720c3d7543493940723591323a05",
        "address": "0x993cC884478d1cf0938e51f2bBa89C94891Bac40",
        "topics": [
          "0x742bdf00da3d8f16c0fab93ce38eb6a536a019c9e283888dd44c3a08c0148c02",
          "0x00000000000000000000000047bead2563dcbf3bf2c9407fea4dc236faba485a"
        ],
        "data": "0x000000000000000000000000e188a9875af525d25334d75f3327863b2b8cd0f100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000de0b6b3a7640000",
        "logIndex": 479,
        "blockHash": "0x5e7fbd6373d2a0a267049c7d4fce81fd0ef20020ed762847433256fb9016bd23"
      },
      {
        "transactionIndex": 132,
        "blockNumber": 13430322,
        "transactionHash": "0x50bad25e6d490ca3734a0006b1651784fa1b720c3d7543493940723591323a05",
        "address": "0x993cC884478d1cf0938e51f2bBa89C94891Bac40",
        "topics": [
          "0x742bdf00da3d8f16c0fab93ce38eb6a536a019c9e283888dd44c3a08c0148c02",
          "0x000000000000000000000000bf5140a22578168fd562dccf235e5d43a02ce9b1"
        ],
        "data": "0x00000000000000000000000025298f020c3ca1392da76eb7ac844813b218ccf700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a7640000",
        "logIndex": 480,
        "blockHash": "0x5e7fbd6373d2a0a267049c7d4fce81fd0ef20020ed762847433256fb9016bd23"
      },
      {
        "transactionIndex": 132,
        "blockNumber": 13430322,
        "transactionHash": "0x50bad25e6d490ca3734a0006b1651784fa1b720c3d7543493940723591323a05",
        "address": "0x993cC884478d1cf0938e51f2bBa89C94891Bac40",
        "topics": [
          "0x742bdf00da3d8f16c0fab93ce38eb6a536a019c9e283888dd44c3a08c0148c02",
          "0x0000000000000000000000008ac76a51cc950d9822d68b83fe1ad97b32cd580d"
        ],
        "data": "0x00000000000000000000000045f86ca2a8bc9ebd757225b19a1a0d7051be46db00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a7640000",
        "logIndex": 481,
        "blockHash": "0x5e7fbd6373d2a0a267049c7d4fce81fd0ef20020ed762847433256fb9016bd23"
      },
      {
        "transactionIndex": 132,
        "blockNumber": 13430322,
        "transactionHash": "0x50bad25e6d490ca3734a0006b1651784fa1b720c3d7543493940723591323a05",
        "address": "0x993cC884478d1cf0938e51f2bBa89C94891Bac40",
        "topics": [
          "0x742bdf00da3d8f16c0fab93ce38eb6a536a019c9e283888dd44c3a08c0148c02",
          "0x00000000000000000000000055d398326f99059ff775485246999027b3197955"
        ],
        "data": "0x000000000000000000000000d5c40f5144848bd4ef08a9605d860e727b99151300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a7640000",
        "logIndex": 482,
        "blockHash": "0x5e7fbd6373d2a0a267049c7d4fce81fd0ef20020ed762847433256fb9016bd23"
      },
      {
        "transactionIndex": 132,
        "blockNumber": 13430322,
        "transactionHash": "0x50bad25e6d490ca3734a0006b1651784fa1b720c3d7543493940723591323a05",
        "address": "0x993cC884478d1cf0938e51f2bBa89C94891Bac40",
        "topics": [
          "0x742bdf00da3d8f16c0fab93ce38eb6a536a019c9e283888dd44c3a08c0148c02",
          "0x0000000000000000000000007130d2a12b9bcbfae4f2634d864a1ee1ce3ead9c"
        ],
        "data": "0x000000000000000000000000116eeb23384451c78ed366d4f67d5ad44ee771a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a7640000",
        "logIndex": 483,
        "blockHash": "0x5e7fbd6373d2a0a267049c7d4fce81fd0ef20020ed762847433256fb9016bd23"
      },
      {
        "transactionIndex": 132,
        "blockNumber": 13430322,
        "transactionHash": "0x50bad25e6d490ca3734a0006b1651784fa1b720c3d7543493940723591323a05",
        "address": "0x993cC884478d1cf0938e51f2bBa89C94891Bac40",
        "topics": [
          "0x742bdf00da3d8f16c0fab93ce38eb6a536a019c9e283888dd44c3a08c0148c02",
          "0x00000000000000000000000088f1a5ae2a3bf98aeaf342d26b30a79438c9142e"
        ],
        "data": "0x000000000000000000000000f841761481df19831ccc851a54d8350ae602258300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a7640000",
        "logIndex": 484,
        "blockHash": "0x5e7fbd6373d2a0a267049c7d4fce81fd0ef20020ed762847433256fb9016bd23"
      },
      {
        "transactionIndex": 132,
        "blockNumber": 13430322,
        "transactionHash": "0x50bad25e6d490ca3734a0006b1651784fa1b720c3d7543493940723591323a05",
        "address": "0x993cC884478d1cf0938e51f2bBa89C94891Bac40",
        "topics": [
          "0x742bdf00da3d8f16c0fab93ce38eb6a536a019c9e283888dd44c3a08c0148c02",
          "0x0000000000000000000000000ddc5e539af1753693e9463ca619406b1b06d66e"
        ],
        "data": "0x000000000000000000000000fc362828930519f236ad0c8f126b7996562a695a0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000e8d4a51000",
        "logIndex": 485,
        "blockHash": "0x5e7fbd6373d2a0a267049c7d4fce81fd0ef20020ed762847433256fb9016bd23"
      }
    ],
    "blockNumber": 13430322,
    "cumulativeGasUsed": "24989438",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x734ceE454CE959387170bfc301e3C77fF8305383",
    "0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c",
    "0x0567F2323251f0Aab15c8dFb1967E4e8A7D42aeE",
    [
      "0xa1faa113cbe53436df28ff0aee54275c13b40975",
      "0xad6caeb32cd2c308980a548bd0bc5aa4306c6c18",
      "0xe9e7cea3dedca5984780bafc599bd69add087d56",
      "0x4b87642aedf10b642be4663db842ecc5a88bf5ba",
      "0x52ce071bd9b1c4b00a0b92d298c512478cad67e8",
      "0x1af3f329e8be154074d8769d1ffa4ee058b1dbc3",
      "0x564d4a58fd000aa7b3e80f8a1f2a8e67f759151d",
      "0xf8a0bf9cf54bb92f17374d9e9a321e6a111a51bd",
      "0x947950bcc74888a40ffa2593c5798f11fc9124c4",
      "0x47bead2563dcbf3bf2c9407fea4dc236faba485a",
      "0xBf5140A22578168FD562DCcF235E5D43A02ce9B1",
      "0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d",
      "0x55d398326f99059ff775485246999027b3197955",
      "0x7130d2a12b9bcbfae4f2634d864a1ee1ce3ead9c",
      "0x88f1a5ae2a3bf98aeaf342d26b30a79438c9142e",
      "0x0ddc5e539af1753693e9463ca619406b1b06d66e"
    ],
    [
      "0x7bC032A7C19B1BdCb981D892854d090cfB0f238E",
      "0xC78b99Ae87fF43535b0C782128DB3cB49c74A4d3",
      "0x87Ea38c9F24264Ec1Fff41B04ec94a97Caf99941",
      "0xFc362828930519f236ad0c8f126B7996562a695A",
      "0x0Db8945f9aEf5651fa5bd52314C5aAe78DfDe540",
      "0x8EC213E7191488C7873cEC6daC8e97cdbAdb7B35",
      "0x7ee7E7847FFC93F8Cf67BCCc0002afF9C52DE524",
      "0xB38722F6A608646a538E882Ee9972D15c86Fc597",
      "0xa679C72a97B654CFfF58aB704de3BA15Cde89B07",
      "0xE188A9875af525d25334d75F3327863B2b8cd0F1",
      "0x25298F020c3CA1392da76Eb7Ac844813b218ccf7",
      "0x45f86CA2A8BC9EBD757225B19a1A0D7051bE46Db",
      "0xD5c40f5144848Bd4EF08a9605d860e727b991513",
      "0x116EeB23384451C78ed366D4f67D5AD44eE771A0",
      "0xF841761481DF19831cCC851A54D8350aE6022583",
      "0xFc362828930519f236ad0c8f126B7996562a695A"
    ],
    [
      0,
      1,
      0,
      1,
      1,
      0,
      1,
      0,
      1,
      1,
      0,
      0,
      0,
      0,
      0,
      1
    ]
  ],
  "solcInputHash": "d9ca3c6c6b3274b287f1d69a6e9ab10d",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fundDeployer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wethToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ethUsdAggregator\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_primitives\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_aggregators\",\"type\":\"address[]\"},{\"internalType\":\"enum ChainlinkPriceFeed.RateAsset[]\",\"name\":\"_rateAssets\",\"type\":\"uint8[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prevEthUsdAggregator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nextEthUsdAggregator\",\"type\":\"address\"}],\"name\":\"EthUsdAggregatorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"primitive\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"aggregator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum ChainlinkPriceFeed.RateAsset\",\"name\":\"rateAsset\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unit\",\"type\":\"uint256\"}],\"name\":\"PrimitiveAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"primitive\",\"type\":\"address\"}],\"name\":\"PrimitiveRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"primitive\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prevAggregator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nextAggregator\",\"type\":\"address\"}],\"name\":\"PrimitiveUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"primitive\",\"type\":\"address\"}],\"name\":\"StalePrimitiveRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevStaleRateThreshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextStaleRateThreshold\",\"type\":\"uint256\"}],\"name\":\"StaleRateThresholdSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_primitives\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_aggregators\",\"type\":\"address[]\"},{\"internalType\":\"enum ChainlinkPriceFeed.RateAsset[]\",\"name\":\"_rateAssets\",\"type\":\"uint8[]\"}],\"name\":\"addPrimitives\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_baseAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_baseAssetAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_quoteAsset\",\"type\":\"address\"}],\"name\":\"calcCanonicalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"quoteAssetAmount_\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isValid_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_baseAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_baseAssetAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_quoteAsset\",\"type\":\"address\"}],\"name\":\"calcLiveValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"quoteAssetAmount_\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isValid_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_primitive\",\"type\":\"address\"}],\"name\":\"getAggregatorInfoForPrimitive\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"aggregator\",\"type\":\"address\"},{\"internalType\":\"enum ChainlinkPriceFeed.RateAsset\",\"name\":\"rateAsset\",\"type\":\"uint8\"}],\"internalType\":\"struct ChainlinkPriceFeed.AggregatorInfo\",\"name\":\"aggregatorInfo_\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEthUsdAggregator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"ethUsdAggregator_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFundDeployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"fundDeployer_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_primitive\",\"type\":\"address\"}],\"name\":\"getRateAssetForPrimitive\",\"outputs\":[{\"internalType\":\"enum ChainlinkPriceFeed.RateAsset\",\"name\":\"rateAsset_\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStaleRateThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"staleRateThreshold_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_primitive\",\"type\":\"address\"}],\"name\":\"getUnitForPrimitive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unit_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWethToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"wethToken_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"isSupportedAsset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isSupported_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aggregator\",\"type\":\"address\"}],\"name\":\"rateIsStale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"rateIsStale_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_primitives\",\"type\":\"address[]\"}],\"name\":\"removePrimitives\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_primitives\",\"type\":\"address[]\"}],\"name\":\"removeStalePrimitives\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nextEthUsdAggregator\",\"type\":\"address\"}],\"name\":\"setEthUsdAggregator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nextStaleRateThreshold\",\"type\":\"uint256\"}],\"name\":\"setStaleRateThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_primitives\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_aggregators\",\"type\":\"address[]\"}],\"name\":\"updatePrimitives\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Enzyme Council <security@enzyme.finance>\",\"kind\":\"dev\",\"methods\":{\"addPrimitives(address[],address[],uint8[])\":{\"params\":{\"_aggregators\":\"The ordered aggregators corresponding to the list of _primitives\",\"_primitives\":\"The primitives to add\",\"_rateAssets\":\"The ordered rate assets corresponding to the list of _primitives\"}},\"calcCanonicalValue(address,uint256,address)\":{\"params\":{\"_baseAsset\":\"The base asset\",\"_baseAssetAmount\":\"The base asset amount to convert\",\"_quoteAsset\":\"The quote asset\"},\"returns\":{\"isValid_\":\"True if the rates used in calculations are deemed valid\",\"quoteAssetAmount_\":\"The equivalent quote asset amount\"}},\"calcLiveValue(address,uint256,address)\":{\"details\":\"Live and canonical values are the same for Chainlink\",\"params\":{\"_baseAsset\":\"The base asset\",\"_baseAssetAmount\":\"The base asset amount to convert\",\"_quoteAsset\":\"The quote asset\"},\"returns\":{\"isValid_\":\"True if the rates used in calculations are deemed valid\",\"quoteAssetAmount_\":\"The equivalent quote asset amount\"}},\"getAggregatorInfoForPrimitive(address)\":{\"params\":{\"_primitive\":\"The primitive asset for which to get the aggregatorInfo value\"},\"returns\":{\"aggregatorInfo_\":\"The aggregatorInfo value\"}},\"getEthUsdAggregator()\":{\"returns\":{\"ethUsdAggregator_\":\"The `ethUsdAggregator` variable value\"}},\"getFundDeployer()\":{\"returns\":{\"fundDeployer_\":\"The `FUND_DEPLOYER` variable value\"}},\"getOwner()\":{\"details\":\"Ownership is deferred to the owner of the FundDeployer contract\",\"returns\":{\"owner_\":\"The owner\"}},\"getRateAssetForPrimitive(address)\":{\"details\":\"This isn't strictly necessary as WETH_TOKEN will be undefined and thus the RateAsset will be the 0-position of the enum (i.e. ETH), but it makes the behavior more explicit\",\"returns\":{\"rateAsset_\":\"The rateAsset variable value\"}},\"getStaleRateThreshold()\":{\"returns\":{\"staleRateThreshold_\":\"The `staleRateThreshold` variable value\"}},\"getUnitForPrimitive(address)\":{\"returns\":{\"unit_\":\"The unit variable value\"}},\"getWethToken()\":{\"returns\":{\"wethToken_\":\"The `WETH_TOKEN` variable value\"}},\"isSupportedAsset(address)\":{\"params\":{\"_asset\":\"The asset to check\"},\"returns\":{\"isSupported_\":\"True if the asset is a supported primitive\"}},\"rateIsStale(address)\":{\"params\":{\"_aggregator\":\"The Chainlink aggregator of which to check staleness\"},\"returns\":{\"rateIsStale_\":\"True if the rate is considered stale\"}},\"removePrimitives(address[])\":{\"params\":{\"_primitives\":\"The primitives to remove\"}},\"removeStalePrimitives(address[])\":{\"details\":\"Callable by anybody\",\"params\":{\"_primitives\":\"The stale primitives to remove\"}},\"setEthUsdAggregator(address)\":{\"params\":{\"_nextEthUsdAggregator\":\"The `ehUsdAggregator` value to set\"}},\"setStaleRateThreshold(uint256)\":{\"params\":{\"_nextStaleRateThreshold\":\"The next `staleRateThreshold` value\"}},\"updatePrimitives(address[],address[])\":{\"params\":{\"_aggregators\":\"The ordered aggregators corresponding to the list of _primitives\",\"_primitives\":\"The primitives to update\"}}},\"title\":\"ChainlinkPriceFeed Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addPrimitives(address[],address[],uint8[])\":{\"notice\":\"Adds a list of primitives with the given aggregator and rateAsset values\"},\"calcCanonicalValue(address,uint256,address)\":{\"notice\":\"Calculates the value of a base asset in terms of a quote asset (using a canonical rate)\"},\"calcLiveValue(address,uint256,address)\":{\"notice\":\"Calculates the value of a base asset in terms of a quote asset (using a live rate)\"},\"getAggregatorInfoForPrimitive(address)\":{\"notice\":\"Gets the aggregatorInfo variable value for a primitive\"},\"getEthUsdAggregator()\":{\"notice\":\"Gets the `ethUsdAggregator` variable value\"},\"getFundDeployer()\":{\"notice\":\"Gets the `FUND_DEPLOYER` variable\"},\"getOwner()\":{\"notice\":\"Gets the owner of this contract\"},\"getRateAssetForPrimitive(address)\":{\"notice\":\"Gets the rateAsset variable value for a primitive\"},\"getStaleRateThreshold()\":{\"notice\":\"Gets the `staleRateThreshold` variable value\"},\"getUnitForPrimitive(address)\":{\"notice\":\"Gets the unit variable value for a primitive\"},\"getWethToken()\":{\"notice\":\"Gets the `WETH_TOKEN` variable value\"},\"isSupportedAsset(address)\":{\"notice\":\"Checks whether an asset is a supported primitive of the price feed\"},\"rateIsStale(address)\":{\"notice\":\"Checks whether the current rate is considered stale for the specified aggregator\"},\"removePrimitives(address[])\":{\"notice\":\"Removes a list of primitives from the feed\"},\"removeStalePrimitives(address[])\":{\"notice\":\"Removes stale primitives from the feed\"},\"setEthUsdAggregator(address)\":{\"notice\":\"Sets the `ehUsdAggregator` variable value\"},\"setStaleRateThreshold(uint256)\":{\"notice\":\"Sets the `staleRateThreshold` variable\"},\"updatePrimitives(address[],address[])\":{\"notice\":\"Updates the aggregators for given primitives\"}},\"notice\":\"A price feed that uses Chainlink oracles as price sources\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/release/infrastructure/price-feeds/primitives/ChainlinkPriceFeed.sol\":\"ChainlinkPriceFeed\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/release/core/fund-deployer/IFundDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title IFundDeployer Interface\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\ninterface IFundDeployer {\\r\\n    enum ReleaseStatus {PreLaunch, Live, Paused}\\r\\n\\r\\n    function getOwner() external view returns (address);\\r\\n\\r\\n    function getReleaseStatus() external view returns (ReleaseStatus);\\r\\n\\r\\n    function isRegisteredVaultCall(address, bytes4) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x3c8c95a5d0e03da6a5f0278e5fbe40bf4f2d274afc2d52815fefaba847931bf9\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/utils/FundDeployerOwnerMixin.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"../../core/fund-deployer/IFundDeployer.sol\\\";\\r\\n\\r\\n/// @title FundDeployerOwnerMixin Contract\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\n/// @notice A mixin contract that defers ownership to the owner of FundDeployer\\r\\nabstract contract FundDeployerOwnerMixin {\\r\\n    address internal immutable FUND_DEPLOYER;\\r\\n\\r\\n    modifier onlyFundDeployerOwner() {\\r\\n        require(\\r\\n            msg.sender == getOwner(),\\r\\n            \\\"onlyFundDeployerOwner: Only the FundDeployer owner can call this function\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(address _fundDeployer) public {\\r\\n        FUND_DEPLOYER = _fundDeployer;\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the owner of this contract\\r\\n    /// @return owner_ The owner\\r\\n    /// @dev Ownership is deferred to the owner of the FundDeployer contract\\r\\n    function getOwner() public view returns (address owner_) {\\r\\n        return IFundDeployer(FUND_DEPLOYER).getOwner();\\r\\n    }\\r\\n\\r\\n    ///////////////////\\r\\n    // STATE GETTERS //\\r\\n    ///////////////////\\r\\n\\r\\n    /// @notice Gets the `FUND_DEPLOYER` variable\\r\\n    /// @return fundDeployer_ The `FUND_DEPLOYER` variable value\\r\\n    function getFundDeployer() external view returns (address fundDeployer_) {\\r\\n        return FUND_DEPLOYER;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf6af8390b7e3ac7579250ce5aebe0faafeeb58e60ead667e002b9286dfd160e5\",\"license\":\"GPL-3.0\"},\"contracts/release/infrastructure/price-feeds/primitives/ChainlinkPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"../../../extensions/utils/FundDeployerOwnerMixin.sol\\\";\\nimport \\\"../../../interfaces/IChainlinkAggregator.sol\\\";\\nimport \\\"./IPrimitivePriceFeed.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n/// @title ChainlinkPriceFeed Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A price feed that uses Chainlink oracles as price sources\\ncontract ChainlinkPriceFeed is IPrimitivePriceFeed, FundDeployerOwnerMixin {\\n    using SafeMath for uint256;\\n\\n    event EthUsdAggregatorSet(address prevEthUsdAggregator, address nextEthUsdAggregator);\\n\\n    event PrimitiveAdded(\\n        address indexed primitive,\\n        address aggregator,\\n        RateAsset rateAsset,\\n        uint256 unit\\n    );\\n\\n    event PrimitiveRemoved(address indexed primitive);\\n\\n    event PrimitiveUpdated(\\n        address indexed primitive,\\n        address prevAggregator,\\n        address nextAggregator\\n    );\\n\\n    event StalePrimitiveRemoved(address indexed primitive);\\n\\n    event StaleRateThresholdSet(uint256 prevStaleRateThreshold, uint256 nextStaleRateThreshold);\\n\\n    enum RateAsset {\\n        ETH,\\n        USD\\n    }\\n\\n    struct AggregatorInfo {\\n        address aggregator;\\n        RateAsset rateAsset;\\n    }\\n\\n    uint256 private constant ETH_UNIT = 10**18;\\n    address private immutable WETH_TOKEN;\\n\\n    address private ethUsdAggregator;\\n    uint256 private staleRateThreshold;\\n    mapping(address => AggregatorInfo) private primitiveToAggregatorInfo;\\n    mapping(address => uint256) private primitiveToUnit;\\n\\n    constructor(\\n        address _fundDeployer,\\n        address _wethToken,\\n        address _ethUsdAggregator,\\n        address[] memory _primitives,\\n        address[] memory _aggregators,\\n        RateAsset[] memory _rateAssets\\n    ) public FundDeployerOwnerMixin(_fundDeployer) {\\n        WETH_TOKEN = _wethToken;\\n        staleRateThreshold = 25 hours; // 24 hour heartbeat + 1hr buffer\\n        __setEthUsdAggregator(_ethUsdAggregator);\\n        if (_primitives.length > 0) {\\n            __addPrimitives(_primitives, _aggregators, _rateAssets);\\n        }\\n    }\\n\\n    // EXTERNAL FUNCTIONS\\n\\n    /// @notice Calculates the value of a base asset in terms of a quote asset (using a canonical rate)\\n    /// @param _baseAsset The base asset\\n    /// @param _baseAssetAmount The base asset amount to convert\\n    /// @param _quoteAsset The quote asset\\n    /// @return quoteAssetAmount_ The equivalent quote asset amount\\n    /// @return isValid_ True if the rates used in calculations are deemed valid\\n    function calcCanonicalValue(\\n        address _baseAsset,\\n        uint256 _baseAssetAmount,\\n        address _quoteAsset\\n    ) public view override returns (uint256 quoteAssetAmount_, bool isValid_) {\\n        // Case where _baseAsset == _quoteAsset is handled by ValueInterpreter\\n\\n        int256 baseAssetRate = __getLatestRateData(_baseAsset);\\n        if (baseAssetRate <= 0) {\\n            return (0, false);\\n        }\\n\\n        int256 quoteAssetRate = __getLatestRateData(_quoteAsset);\\n        if (quoteAssetRate <= 0) {\\n            return (0, false);\\n        }\\n\\n        (quoteAssetAmount_, isValid_) = __calcConversionAmount(\\n            _baseAsset,\\n            _baseAssetAmount,\\n            uint256(baseAssetRate),\\n            _quoteAsset,\\n            uint256(quoteAssetRate)\\n        );\\n\\n        return (quoteAssetAmount_, isValid_);\\n    }\\n\\n    /// @notice Calculates the value of a base asset in terms of a quote asset (using a live rate)\\n    /// @param _baseAsset The base asset\\n    /// @param _baseAssetAmount The base asset amount to convert\\n    /// @param _quoteAsset The quote asset\\n    /// @return quoteAssetAmount_ The equivalent quote asset amount\\n    /// @return isValid_ True if the rates used in calculations are deemed valid\\n    /// @dev Live and canonical values are the same for Chainlink\\n    function calcLiveValue(\\n        address _baseAsset,\\n        uint256 _baseAssetAmount,\\n        address _quoteAsset\\n    ) external view override returns (uint256 quoteAssetAmount_, bool isValid_) {\\n        return calcCanonicalValue(_baseAsset, _baseAssetAmount, _quoteAsset);\\n    }\\n\\n    /// @notice Checks whether an asset is a supported primitive of the price feed\\n    /// @param _asset The asset to check\\n    /// @return isSupported_ True if the asset is a supported primitive\\n    function isSupportedAsset(address _asset) external view override returns (bool isSupported_) {\\n        return _asset == WETH_TOKEN || primitiveToAggregatorInfo[_asset].aggregator != address(0);\\n    }\\n\\n    /// @notice Sets the `ehUsdAggregator` variable value\\n    /// @param _nextEthUsdAggregator The `ehUsdAggregator` value to set\\n    function setEthUsdAggregator(address _nextEthUsdAggregator) external onlyFundDeployerOwner {\\n        __setEthUsdAggregator(_nextEthUsdAggregator);\\n    }\\n\\n    // PRIVATE FUNCTIONS\\n\\n    /// @dev Helper to convert an amount from a _baseAsset to a _quoteAsset\\n    function __calcConversionAmount(\\n        address _baseAsset,\\n        uint256 _baseAssetAmount,\\n        uint256 _baseAssetRate,\\n        address _quoteAsset,\\n        uint256 _quoteAssetRate\\n    ) private view returns (uint256 quoteAssetAmount_, bool isValid_) {\\n        RateAsset baseAssetRateAsset = getRateAssetForPrimitive(_baseAsset);\\n        RateAsset quoteAssetRateAsset = getRateAssetForPrimitive(_quoteAsset);\\n        uint256 baseAssetUnit = getUnitForPrimitive(_baseAsset);\\n        uint256 quoteAssetUnit = getUnitForPrimitive(_quoteAsset);\\n\\n        // If rates are both in ETH or both in USD\\n        if (baseAssetRateAsset == quoteAssetRateAsset) {\\n            return (\\n                __calcConversionAmountSameRateAsset(\\n                    _baseAssetAmount,\\n                    baseAssetUnit,\\n                    _baseAssetRate,\\n                    quoteAssetUnit,\\n                    _quoteAssetRate\\n                ),\\n                true\\n            );\\n        }\\n\\n        int256 ethPerUsdRate = IChainlinkAggregator(ethUsdAggregator).latestAnswer();\\n        if (ethPerUsdRate <= 0) {\\n            return (0, false);\\n        }\\n\\n        // If _baseAsset's rate is in ETH and _quoteAsset's rate is in USD\\n        if (baseAssetRateAsset == RateAsset.ETH) {\\n            return (\\n                __calcConversionAmountEthRateAssetToUsdRateAsset(\\n                    _baseAssetAmount,\\n                    baseAssetUnit,\\n                    _baseAssetRate,\\n                    quoteAssetUnit,\\n                    _quoteAssetRate,\\n                    uint256(ethPerUsdRate)\\n                ),\\n                true\\n            );\\n        }\\n\\n        // If _baseAsset's rate is in USD and _quoteAsset's rate is in ETH\\n        return (\\n            __calcConversionAmountUsdRateAssetToEthRateAsset(\\n                _baseAssetAmount,\\n                baseAssetUnit,\\n                _baseAssetRate,\\n                quoteAssetUnit,\\n                _quoteAssetRate,\\n                uint256(ethPerUsdRate)\\n            ),\\n            true\\n        );\\n    }\\n\\n    /// @dev Helper to convert amounts where the base asset has an ETH rate and the quote asset has a USD rate\\n    function __calcConversionAmountEthRateAssetToUsdRateAsset(\\n        uint256 _baseAssetAmount,\\n        uint256 _baseAssetUnit,\\n        uint256 _baseAssetRate,\\n        uint256 _quoteAssetUnit,\\n        uint256 _quoteAssetRate,\\n        uint256 _ethPerUsdRate\\n    ) private pure returns (uint256 quoteAssetAmount_) {\\n        // Only allows two consecutive multiplication operations to avoid potential overflow.\\n        // Intermediate step needed to resolve stack-too-deep error.\\n        uint256 intermediateStep = _baseAssetAmount.mul(_baseAssetRate).mul(_ethPerUsdRate).div(\\n            ETH_UNIT\\n        );\\n\\n        return intermediateStep.mul(_quoteAssetUnit).div(_baseAssetUnit).div(_quoteAssetRate);\\n    }\\n\\n    /// @dev Helper to convert amounts where base and quote assets both have ETH rates or both have USD rates\\n    function __calcConversionAmountSameRateAsset(\\n        uint256 _baseAssetAmount,\\n        uint256 _baseAssetUnit,\\n        uint256 _baseAssetRate,\\n        uint256 _quoteAssetUnit,\\n        uint256 _quoteAssetRate\\n    ) private pure returns (uint256 quoteAssetAmount_) {\\n        // Only allows two consecutive multiplication operations to avoid potential overflow\\n        return\\n            _baseAssetAmount.mul(_baseAssetRate).mul(_quoteAssetUnit).div(\\n                _baseAssetUnit.mul(_quoteAssetRate)\\n            );\\n    }\\n\\n    /// @dev Helper to convert amounts where the base asset has a USD rate and the quote asset has an ETH rate\\n    function __calcConversionAmountUsdRateAssetToEthRateAsset(\\n        uint256 _baseAssetAmount,\\n        uint256 _baseAssetUnit,\\n        uint256 _baseAssetRate,\\n        uint256 _quoteAssetUnit,\\n        uint256 _quoteAssetRate,\\n        uint256 _ethPerUsdRate\\n    ) private pure returns (uint256 quoteAssetAmount_) {\\n        // Only allows two consecutive multiplication operations to avoid potential overflow\\n        // Intermediate step needed to resolve stack-too-deep error.\\n        uint256 intermediateStep = _baseAssetAmount.mul(_baseAssetRate).mul(_quoteAssetUnit).div(\\n            _ethPerUsdRate\\n        );\\n\\n        return intermediateStep.mul(ETH_UNIT).div(_baseAssetUnit).div(_quoteAssetRate);\\n    }\\n\\n    /// @dev Helper to get the latest rate for a given primitive\\n    function __getLatestRateData(address _primitive) private view returns (int256 rate_) {\\n        if (_primitive == WETH_TOKEN) {\\n            return int256(ETH_UNIT);\\n        }\\n\\n        address aggregator = primitiveToAggregatorInfo[_primitive].aggregator;\\n        require(aggregator != address(0), \\\"__getLatestRateData: Primitive does not exist\\\");\\n\\n        return IChainlinkAggregator(aggregator).latestAnswer();\\n    }\\n\\n    /// @dev Helper to set the `ethUsdAggregator` value\\n    function __setEthUsdAggregator(address _nextEthUsdAggregator) private {\\n        address prevEthUsdAggregator = ethUsdAggregator;\\n        require(\\n            _nextEthUsdAggregator != prevEthUsdAggregator,\\n            \\\"__setEthUsdAggregator: Value already set\\\"\\n        );\\n\\n        __validateAggregator(_nextEthUsdAggregator);\\n\\n        ethUsdAggregator = _nextEthUsdAggregator;\\n\\n        emit EthUsdAggregatorSet(prevEthUsdAggregator, _nextEthUsdAggregator);\\n    }\\n\\n    /////////////////////////\\n    // PRIMITIVES REGISTRY //\\n    /////////////////////////\\n\\n    /// @notice Adds a list of primitives with the given aggregator and rateAsset values\\n    /// @param _primitives The primitives to add\\n    /// @param _aggregators The ordered aggregators corresponding to the list of _primitives\\n    /// @param _rateAssets The ordered rate assets corresponding to the list of _primitives\\n    function addPrimitives(\\n        address[] calldata _primitives,\\n        address[] calldata _aggregators,\\n        RateAsset[] calldata _rateAssets\\n    ) external onlyFundDeployerOwner {\\n        require(_primitives.length > 0, \\\"addPrimitives: _primitives cannot be empty\\\");\\n\\n        __addPrimitives(_primitives, _aggregators, _rateAssets);\\n    }\\n\\n    /// @notice Removes a list of primitives from the feed\\n    /// @param _primitives The primitives to remove\\n    function removePrimitives(address[] calldata _primitives) external onlyFundDeployerOwner {\\n        require(_primitives.length > 0, \\\"removePrimitives: _primitives cannot be empty\\\");\\n\\n        for (uint256 i; i < _primitives.length; i++) {\\n            require(\\n                primitiveToAggregatorInfo[_primitives[i]].aggregator != address(0),\\n                \\\"removePrimitives: Primitive not yet added\\\"\\n            );\\n\\n            delete primitiveToAggregatorInfo[_primitives[i]];\\n            delete primitiveToUnit[_primitives[i]];\\n\\n            emit PrimitiveRemoved(_primitives[i]);\\n        }\\n    }\\n\\n    /// @notice Removes stale primitives from the feed\\n    /// @param _primitives The stale primitives to remove\\n    /// @dev Callable by anybody\\n    function removeStalePrimitives(address[] calldata _primitives) external {\\n        require(_primitives.length > 0, \\\"removeStalePrimitives: _primitives cannot be empty\\\");\\n\\n        for (uint256 i; i < _primitives.length; i++) {\\n            address aggregatorAddress = primitiveToAggregatorInfo[_primitives[i]].aggregator;\\n            require(aggregatorAddress != address(0), \\\"removeStalePrimitives: Invalid primitive\\\");\\n            require(rateIsStale(aggregatorAddress), \\\"removeStalePrimitives: Rate is not stale\\\");\\n\\n            delete primitiveToAggregatorInfo[_primitives[i]];\\n            delete primitiveToUnit[_primitives[i]];\\n\\n            emit StalePrimitiveRemoved(_primitives[i]);\\n        }\\n    }\\n\\n    /// @notice Sets the `staleRateThreshold` variable\\n    /// @param _nextStaleRateThreshold The next `staleRateThreshold` value\\n    function setStaleRateThreshold(uint256 _nextStaleRateThreshold)\\n        external\\n        onlyFundDeployerOwner\\n    {\\n        uint256 prevStaleRateThreshold = staleRateThreshold;\\n        require(\\n            _nextStaleRateThreshold != prevStaleRateThreshold,\\n            \\\"__setStaleRateThreshold: Value already set\\\"\\n        );\\n\\n        staleRateThreshold = _nextStaleRateThreshold;\\n\\n        emit StaleRateThresholdSet(prevStaleRateThreshold, _nextStaleRateThreshold);\\n    }\\n\\n    /// @notice Updates the aggregators for given primitives\\n    /// @param _primitives The primitives to update\\n    /// @param _aggregators The ordered aggregators corresponding to the list of _primitives\\n    function updatePrimitives(address[] calldata _primitives, address[] calldata _aggregators)\\n        external\\n        onlyFundDeployerOwner\\n    {\\n        require(_primitives.length > 0, \\\"updatePrimitives: _primitives cannot be empty\\\");\\n        require(\\n            _primitives.length == _aggregators.length,\\n            \\\"updatePrimitives: Unequal _primitives and _aggregators array lengths\\\"\\n        );\\n\\n        for (uint256 i; i < _primitives.length; i++) {\\n            address prevAggregator = primitiveToAggregatorInfo[_primitives[i]].aggregator;\\n            require(prevAggregator != address(0), \\\"updatePrimitives: Primitive not yet added\\\");\\n            require(_aggregators[i] != prevAggregator, \\\"updatePrimitives: Value already set\\\");\\n\\n            __validateAggregator(_aggregators[i]);\\n\\n            primitiveToAggregatorInfo[_primitives[i]].aggregator = _aggregators[i];\\n\\n            emit PrimitiveUpdated(_primitives[i], prevAggregator, _aggregators[i]);\\n        }\\n    }\\n\\n    /// @notice Checks whether the current rate is considered stale for the specified aggregator\\n    /// @param _aggregator The Chainlink aggregator of which to check staleness\\n    /// @return rateIsStale_ True if the rate is considered stale\\n    function rateIsStale(address _aggregator) public view returns (bool rateIsStale_) {\\n        return\\n            IChainlinkAggregator(_aggregator).latestTimestamp() <\\n            block.timestamp.sub(staleRateThreshold);\\n    }\\n\\n    /// @dev Helper to add primitives to the feed\\n    function __addPrimitives(\\n        address[] memory _primitives,\\n        address[] memory _aggregators,\\n        RateAsset[] memory _rateAssets\\n    ) private {\\n        require(\\n            _primitives.length == _aggregators.length,\\n            \\\"__addPrimitives: Unequal _primitives and _aggregators array lengths\\\"\\n        );\\n        require(\\n            _primitives.length == _rateAssets.length,\\n            \\\"__addPrimitives: Unequal _primitives and _rateAssets array lengths\\\"\\n        );\\n\\n        for (uint256 i = 0; i < _primitives.length; i++) {\\n            require(\\n                primitiveToAggregatorInfo[_primitives[i]].aggregator == address(0),\\n                \\\"__addPrimitives: Value already set\\\"\\n            );\\n\\n            __validateAggregator(_aggregators[i]);\\n\\n            primitiveToAggregatorInfo[_primitives[i]] = AggregatorInfo({\\n                aggregator: _aggregators[i],\\n                rateAsset: _rateAssets[i]\\n            });\\n\\n            console.log(\\\"primitives: \\\", _primitives[i]);\\n            // Store the amount that makes up 1 unit given the asset's decimals\\n            uint256 unit = 10**uint256(ERC20(_primitives[i]).decimals());\\n            primitiveToUnit[_primitives[i]] = unit;\\n\\n            emit PrimitiveAdded(_primitives[i], _aggregators[i], _rateAssets[i], unit);\\n        }\\n    }\\n\\n    /// @dev Helper to validate an aggregator by checking its return values for the expected interface\\n    function __validateAggregator(address _aggregator) private view {\\n        require(_aggregator != address(0), \\\"__validateAggregator: Empty _aggregator\\\");\\n\\n        require(\\n            IChainlinkAggregator(_aggregator).latestAnswer() > 0,\\n            \\\"__validateAggregator: No rate detected\\\"\\n        );\\n        require(!rateIsStale(_aggregator), \\\"__validateAggregator: Stale rate detected\\\");\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the aggregatorInfo variable value for a primitive\\n    /// @param _primitive The primitive asset for which to get the aggregatorInfo value\\n    /// @return aggregatorInfo_ The aggregatorInfo value\\n    function getAggregatorInfoForPrimitive(address _primitive)\\n        external\\n        view\\n        returns (AggregatorInfo memory aggregatorInfo_)\\n    {\\n        return primitiveToAggregatorInfo[_primitive];\\n    }\\n\\n    /// @notice Gets the `ethUsdAggregator` variable value\\n    /// @return ethUsdAggregator_ The `ethUsdAggregator` variable value\\n    function getEthUsdAggregator() external view returns (address ethUsdAggregator_) {\\n        return ethUsdAggregator;\\n    }\\n\\n    /// @notice Gets the `staleRateThreshold` variable value\\n    /// @return staleRateThreshold_ The `staleRateThreshold` variable value\\n    function getStaleRateThreshold() external view returns (uint256 staleRateThreshold_) {\\n        return staleRateThreshold;\\n    }\\n\\n    /// @notice Gets the `WETH_TOKEN` variable value\\n    /// @return wethToken_ The `WETH_TOKEN` variable value\\n    function getWethToken() external view returns (address wethToken_) {\\n        return WETH_TOKEN;\\n    }\\n\\n    /// @notice Gets the rateAsset variable value for a primitive\\n    /// @return rateAsset_ The rateAsset variable value\\n    /// @dev This isn't strictly necessary as WETH_TOKEN will be undefined and thus\\n    /// the RateAsset will be the 0-position of the enum (i.e. ETH), but it makes the\\n    /// behavior more explicit\\n    function getRateAssetForPrimitive(address _primitive)\\n        public\\n        view\\n        returns (RateAsset rateAsset_)\\n    {\\n        if (_primitive == WETH_TOKEN) {\\n            return RateAsset.ETH;\\n        }\\n\\n        return primitiveToAggregatorInfo[_primitive].rateAsset;\\n    }\\n\\n    /// @notice Gets the unit variable value for a primitive\\n    /// @return unit_ The unit variable value\\n    function getUnitForPrimitive(address _primitive) public view returns (uint256 unit_) {\\n        if (_primitive == WETH_TOKEN) {\\n            return ETH_UNIT;\\n        }\\n\\n        return primitiveToUnit[_primitive];\\n    }\\n}\\n\",\"keccak256\":\"0xb06d6e8e6e8018dc26627887e2235fd2f21ff46c894e2e69a720d0ce19866387\",\"license\":\"GPL-3.0\"},\"contracts/release/infrastructure/price-feeds/primitives/IPrimitivePriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title IPrimitivePriceFeed Interface\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\n/// @notice Interface for primitive price feeds\\r\\ninterface IPrimitivePriceFeed {\\r\\n    function calcCanonicalValue(\\r\\n        address,\\r\\n        uint256,\\r\\n        address\\r\\n    ) external view returns (uint256, bool);\\r\\n\\r\\n    function calcLiveValue(\\r\\n        address,\\r\\n        uint256,\\r\\n        address\\r\\n    ) external view returns (uint256, bool);\\r\\n\\r\\n    function isSupportedAsset(address) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x4ec94b8620d068e9e520d87e7e0eda9828ab465de5b5aefe3880dc619782e02a\",\"license\":\"GPL-3.0\"},\"contracts/release/interfaces/IChainlinkAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title IChainlinkAggregator Interface\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\ninterface IChainlinkAggregator {\\r\\n    function latestAnswer() external view returns (int256);\\r\\n\\r\\n    function latestTimestamp() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x71d73e379795cfa2c6f733a69f6a13dfc5e859af4809a4a3a34bf220d580bac1\",\"license\":\"GPL-3.0\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162003252380380620032528339810160408190526200003491620007e0565b6001600160601b0319606087811b821660805286901b1660a05262015f90600155620000608462000081565b82511562000075576200007583838362000123565b50505050505062000dea565b6000546001600160a01b03908116908216811415620000bd5760405162461bcd60e51b8152600401620000b49062000c4b565b60405180910390fd5b620000c8826200047e565b600080546001600160a01b0319166001600160a01b0384161790556040517f98b60a60ba6130248e985ae4140dc3109d9c2980c7e435fed385e2756bc944619062000117908390859062000bd3565b60405180910390a15050565b8151835114620001475760405162461bcd60e51b8152600401620000b49062000cb7565b80518351146200016b5760405162461bcd60e51b8152600401620000b49062000c81565b60005b8351811015620004785760006001600160a01b0316600260008684815181106200019457fe5b6020908102919091018101516001600160a01b03908116835290820192909252604001600020541614620001dc5760405162461bcd60e51b8152600401620000b49062000cc9565b62000201838281518110620001ed57fe5b60200260200101516200047e60201b60201c565b60405180604001604052808483815181106200021957fe5b60200260200101516001600160a01b031681526020018383815181106200023c57fe5b602002602001015160018111156200025057fe5b815250600260008684815181106200026457fe5b6020908102919091018101516001600160a01b039081168352828201939093526040909101600020835181546001600160a01b0319169316929092178083559083015190829060ff60a01b1916600160a01b836001811115620002c357fe5b02179055509050506200031a6040518060400160405280600c81526020016b0383934b6b4ba34bb32b99d160a51b8152508583815181106200030157fe5b60200260200101516200056c60201b62000dda1760201c565b60008482815181106200032957fe5b60200260200101516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156200036a57600080fd5b505afa1580156200037f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003a59190620008e5565b60ff16600a0a90508060036000878581518110620003bf57fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002081905550848281518110620003f857fe5b60200260200101516001600160a01b03167f742bdf00da3d8f16c0fab93ce38eb6a536a019c9e283888dd44c3a08c0148c028584815181106200043757fe5b60200260200101518585815181106200044c57fe5b602002602001015184604051620004669392919062000bf9565b60405180910390a2506001016200016e565b50505050565b6001600160a01b038116620004a75760405162461bcd60e51b8152600401620000b49062000c5d565b6000816001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b158015620004e357600080fd5b505afa158015620004f8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200051e9190620008bc565b136200053e5760405162461bcd60e51b8152600401620000b49062000ca5565b6200054981620005bd565b15620005695760405162461bcd60e51b8152600401620000b49062000c93565b50565b620005b982826040516024016200058592919062000c27565b60408051601f198184030181529190526020810180516001600160e01b0390811663319af33360e01b179091526200065916565b5050565b6000620005db600154426200067a60201b62000e231790919060201c565b826001600160a01b0316638205bf6a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200061557600080fd5b505afa1580156200062a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006509190620008bc565b1090505b919050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b6000828211156200069f5760405162461bcd60e51b8152600401620000b49062000c6f565b508082035b92915050565b8051620006a48162000daf565b600082601f830112620006c957600080fd5b8151620006e0620006da8262000d02565b62000cdb565b915081818352602084019350602081019050838560208402820111156200070657600080fd5b60005b838110156200073657816200071f8882620006aa565b845250602092830192919091019060010162000709565b5050505092915050565b600082601f8301126200075257600080fd5b815162000763620006da8262000d02565b915081818352602084019350602081019050838560208402820111156200078957600080fd5b60005b83811015620007365781620007a28882620007b9565b84525060209283019291909101906001016200078c565b8051620006a48162000dc6565b8051620006a48162000dd4565b8051620006a48162000ddf565b60008060008060008060c08789031215620007fa57600080fd5b6000620008088989620006aa565b96505060206200081b89828a01620006aa565b95505060406200082e89828a01620006aa565b94505060608701516001600160401b038111156200084b57600080fd5b6200085989828a01620006b7565b93505060808701516001600160401b038111156200087657600080fd5b6200088489828a01620006b7565b92505060a08701516001600160401b03811115620008a157600080fd5b620008af89828a0162000740565b9150509295509295509295565b600060208284031215620008cf57600080fd5b6000620008dd8484620007c6565b949350505050565b600060208284031215620008f857600080fd5b6000620008dd8484620007d3565b620009118162000d30565b82525050565b620009118162000d5e565b60006200092f8262000d23565b6200093b818562000d27565b93506200094d81856020860162000d6b565b620009588162000d9a565b9093019392505050565b60006200097160288362000d27565b7f5f5f73657445746855736441676772656761746f723a2056616c756520616c728152671958591e481cd95d60c21b602082015260400192915050565b6000620009bd60278362000d27565b7f5f5f76616c696461746541676772656761746f723a20456d707479205f6167678152663932b3b0ba37b960c91b602082015260400192915050565b600062000a08601e8362000d27565b7f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815260200192915050565b600062000a4360428362000d27565b6000805160206200323283398151915281527f6976657320616e64205f72617465417373657473206172726179206c656e6774602082015261687360f01b604082015260600192915050565b600062000a9e60298362000d27565b7f5f5f76616c696461746541676772656761746f723a205374616c6520726174658152680819195d1958dd195960ba1b602082015260400192915050565b600062000aeb60268362000d27565b7f5f5f76616c696461746541676772656761746f723a204e6f20726174652064658152651d1958dd195960d21b602082015260400192915050565b600062000b3560438362000d27565b6000805160206200323283398151915281527f6976657320616e64205f61676772656761746f7273206172726179206c656e6760208201526274687360e81b604082015260600192915050565b600062000b9160228362000d27565b7f5f5f6164645072696d6974697665733a2056616c756520616c72656164792073815261195d60f21b602082015260400192915050565b620009118162000d49565b6040810162000be3828562000906565b62000bf2602083018462000906565b9392505050565b6060810162000c09828662000906565b62000c18602083018562000917565b620008dd604083018462000bc8565b6040808252810162000c3a818562000922565b905062000bf2602083018462000906565b60208082528101620006a48162000962565b60208082528101620006a481620009ae565b60208082528101620006a481620009f9565b60208082528101620006a48162000a34565b60208082528101620006a48162000a8f565b60208082528101620006a48162000adc565b60208082528101620006a48162000b26565b60208082528101620006a48162000b82565b6040518181016001600160401b038111828210171562000cfa57600080fd5b604052919050565b60006001600160401b0382111562000d1957600080fd5b5060209081020190565b5190565b90815260200190565b6000620006a48262000d4c565b80620006548162000da4565b90565b6001600160a01b031690565b60ff1690565b6000620006a48262000d3d565b60005b8381101562000d8857818101518382015260200162000d6e565b83811115620004785750506000910152565b601f01601f191690565b600281106200056957fe5b62000dba8162000d30565b81146200056957600080fd5b600281106200056957600080fd5b62000dba8162000d49565b62000dba8162000d58565b60805160601c60a05160601c61240562000e2d600039806105b1528061067552806107b25280610d745280610e4f5250806106dc528061078c52506124056000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c80638a275539116100a2578063a98acadc11610071578063a98acadc14610233578063b54fbdaa14610246578063cf0399c81461024e578063e106264f14610261578063e35e318e1461027457610116565b80638a275539146101f257806397c0ac87146102055780639be918e61461020d578063a8527ea81461022057610116565b80634c252f91116100e95780634c252f911461018d578063587fe0b2146101a257806374626f87146101c2578063787f2568146101ca578063893d20e8146101ea57610116565b806309157f951461011b578063149b83e6146101305780631b9548f81461014357806332d95e6c1461016d575b600080fd5b61012e6101293660046118f8565b610294565b005b61012e61013e366004611787565b61033b565b61015661015136600461173a565b6104e5565b6040516101649291906122ec565b60405180910390f35b61018061017b3660046116f6565b61054a565b60405161016491906122d0565b6101956105af565b60405161016491906120d3565b6101b56101b03660046116f6565b6105d3565b6040516101649190612124565b610195610662565b6101dd6101d83660046116f6565b610671565b60405161016491906122de565b6101956106d8565b61015661020036600461173a565b610770565b61019561078a565b6101b561021b3660046116f6565b6107ae565b61012e61022e3660046117c9565b61080f565b61012e6102413660046116f6565b610a76565b6101dd610aba565b61012e61025c366004611839565b610ac0565b61012e61026f366004611787565b610bbb565b6102876102823660046116f6565b610d70565b6040516101649190612132565b61029c6106d8565b6001600160a01b0316336001600160a01b0316146102d55760405162461bcd60e51b81526004016102cc90612190565b60405180910390fd5b600154818114156102f85760405162461bcd60e51b81526004016102cc90612260565b60018290556040517f97f8e271e60eea593a857fceac8dc84e2ebf697b2771f3ca4dabf8255ee55fde9061032f9083908590612307565b60405180910390a15050565b806103585760405162461bcd60e51b81526004016102cc906121c0565b60005b818110156104e05760006002600085858581811061037557fe5b905060200201602081019061038a91906116f6565b6001600160a01b039081168252602082019290925260400160002054169050806103c65760405162461bcd60e51b81526004016102cc906121a0565b6103cf816105d3565b6103eb5760405162461bcd60e51b81526004016102cc90612230565b600260008585858181106103fb57fe5b905060200201602081019061041091906116f6565b6001600160a01b031681526020810191909152604001600090812080546001600160a81b031916905560039085858581811061044857fe5b905060200201602081019061045d91906116f6565b6001600160a01b03166001600160a01b031681526020019081526020016000206000905583838381811061048d57fe5b90506020020160208101906104a291906116f6565b6001600160a01b03167ff4a60a74fb565dfd083c5755117b74c21251de3a0e0ed2c0e4f23461a413309060405160405180910390a25060010161035b565b505050565b60008060006104f386610e4b565b90506000811361050a576000809250925050610542565b600061051585610e4b565b90506000811361052d57600080935093505050610542565b61053a8787848885610f46565b909450925050505b935093915050565b61055261165f565b6001600160a01b03828116600090815260026020908152604091829020825180840190935280549384168352919290830190600160a01b900460ff16600181111561059957fe5b60018111156105a457fe5b90525090505b919050565b7f000000000000000000000000000000000000000000000000000000000000000090565b60006105ea60015442610e2390919063ffffffff16565b826001600160a01b0316638205bf6a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561062357600080fd5b505afa158015610637573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065b91906118da565b1092915050565b6000546001600160a01b031690565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614156106bc5750670de0b6b3a76400006105aa565b506001600160a01b031660009081526003602052604090205490565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663893d20e86040518163ffffffff1660e01b815260040160206040518083038186803b15801561073357600080fd5b505afa158015610747573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076b919061171c565b905090565b60008061077e8585856104e5565b91509150935093915050565b7f000000000000000000000000000000000000000000000000000000000000000090565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316148061080957506001600160a01b038281166000908152600260205260409020541615155b92915050565b6108176106d8565b6001600160a01b0316336001600160a01b0316146108475760405162461bcd60e51b81526004016102cc90612190565b826108645760405162461bcd60e51b81526004016102cc906122a0565b8281146108835760405162461bcd60e51b81526004016102cc90612170565b60005b83811015610a6f576000600260008787858181106108a057fe5b90506020020160208101906108b591906116f6565b6001600160a01b039081168252602082019290925260400160002054169050806108f15760405162461bcd60e51b81526004016102cc90612280565b806001600160a01b031684848481811061090757fe5b905060200201602081019061091c91906116f6565b6001600160a01b031614156109435760405162461bcd60e51b81526004016102cc90612200565b61096c84848481811061095257fe5b905060200201602081019061096791906116f6565b6110af565b83838381811061097857fe5b905060200201602081019061098d91906116f6565b6002600088888681811061099d57fe5b90506020020160208101906109b291906116f6565b6001600160a01b039081168252602082019290925260400160002080546001600160a01b031916929091169190911790558585838181106109ef57fe5b9050602002016020810190610a0491906116f6565b6001600160a01b03167fea132160c6ec74553a52c5ce52a096299236ff4da86ca7d4ef18da8b70b4559382868686818110610a3b57fe5b9050602002016020810190610a5091906116f6565b604051610a5e9291906120e1565b60405180910390a250600101610886565b5050505050565b610a7e6106d8565b6001600160a01b0316336001600160a01b031614610aae5760405162461bcd60e51b81526004016102cc90612190565b610ab78161118b565b50565b60015490565b610ac86106d8565b6001600160a01b0316336001600160a01b031614610af85760405162461bcd60e51b81526004016102cc90612190565b84610b155760405162461bcd60e51b81526004016102cc906121d0565b610bb386868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808a028281018201909352898252909350899250889182918501908490808284376000920191909152505060408051602080890282810182019093528882529093508892508791829185019084908082843760009201919091525061121192505050565b505050505050565b610bc36106d8565b6001600160a01b0316336001600160a01b031614610bf35760405162461bcd60e51b81526004016102cc90612190565b80610c105760405162461bcd60e51b81526004016102cc90612210565b60005b818110156104e0576000600281858585818110610c2c57fe5b9050602002016020810190610c4191906116f6565b6001600160a01b039081168252602082019290925260400160002054161415610c7c5760405162461bcd60e51b81526004016102cc906122b0565b60026000848484818110610c8c57fe5b9050602002016020810190610ca191906116f6565b6001600160a01b031681526020810191909152604001600090812080546001600160a81b0319169055600390848484818110610cd957fe5b9050602002016020810190610cee91906116f6565b6001600160a01b03166001600160a01b0316815260200190815260200160002060009055828282818110610d1e57fe5b9050602002016020810190610d3391906116f6565b6001600160a01b03167fb100e8178a081ba9130260173ee2ebe0db3a6c3b6751a7801111ab3017df0e9760405160405180910390a2600101610c13565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03161415610db4575060006105aa565b506001600160a01b0316600090815260026020526040902054600160a01b900460ff1690565b610e1f8282604051602401610df0929190612140565b60408051601f198184030181529190526020810180516001600160e01b031663319af33360e01b179052611539565b5050565b600082821115610e455760405162461bcd60e51b81526004016102cc906121e0565b50900390565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03161415610e965750670de0b6b3a76400006105aa565b6001600160a01b038083166000908152600260205260409020541680610ece5760405162461bcd60e51b81526004016102cc90612180565b806001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f0757600080fd5b505afa158015610f1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3f91906118da565b9392505050565b6000806000610f5488610d70565b90506000610f6186610d70565b90506000610f6e8a610671565b90506000610f7b88610671565b9050826001811115610f8957fe5b846001811115610f9557fe5b1415610fb757610fa88a838b848b61155a565b600195509550505050506110a5565b60008060009054906101000a90046001600160a01b03166001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561100657600080fd5b505afa15801561101a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103e91906118da565b905060008113611059576000809650965050505050506110a5565b600085600181111561106757fe5b141561108b5761107b8b848c858c8661158d565b60019650965050505050506110a5565b6110998b848c858c866115c8565b60019650965050505050505b9550959350505050565b6001600160a01b0381166110d55760405162461bcd60e51b81526004016102cc906121b0565b6000816001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561111057600080fd5b505afa158015611124573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114891906118da565b136111655760405162461bcd60e51b81526004016102cc90612270565b61116e816105d3565b15610ab75760405162461bcd60e51b81526004016102cc90612250565b6000546001600160a01b039081169082168114156111bb5760405162461bcd60e51b81526004016102cc90612160565b6111c4826110af565b600080546001600160a01b0319166001600160a01b0384161790556040517f98b60a60ba6130248e985ae4140dc3109d9c2980c7e435fed385e2756bc944619061032f90839085906120e1565b81518351146112325760405162461bcd60e51b81526004016102cc90612290565b80518351146112535760405162461bcd60e51b81526004016102cc90612220565b60005b83518110156115335760006001600160a01b03166002600086848151811061127a57fe5b6020908102919091018101516001600160a01b039081168352908201929092526040016000205416146112bf5760405162461bcd60e51b81526004016102cc906122c0565b6112db8382815181106112ce57fe5b60200260200101516110af565b60405180604001604052808483815181106112f257fe5b60200260200101516001600160a01b0316815260200183838151811061131457fe5b6020026020010151600181111561132757fe5b8152506002600086848151811061133a57fe5b6020908102919091018101516001600160a01b039081168352828201939093526040909101600020835181546001600160a01b0319169316929092178083559083015190829060ff60a01b1916600160a01b83600181111561139857fe5b02179055509050506113e16040518060400160405280600c81526020016b0383934b6b4ba34bb32b99d160a51b8152508583815181106113d457fe5b6020026020010151610dda565b60008482815181106113ef57fe5b60200260200101516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561142f57600080fd5b505afa158015611443573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114679190611916565b60ff16600a0a9050806003600087858151811061148057fe5b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020819055508482815181106114b857fe5b60200260200101516001600160a01b03167f742bdf00da3d8f16c0fab93ce38eb6a536a019c9e283888dd44c3a08c0148c028584815181106114f657fe5b602002602001015185858151811061150a57fe5b602002602001015184604051611522939291906120fc565b60405180910390a250600101611256565b50505050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b600061158361156986846115f3565b61157d856115778a896115f3565b906115f3565b9061162d565b9695505050505050565b6000806115aa670de0b6b3a764000061157d856115778c8b6115f3565b90506115bc8461157d8981858a6115f3565b98975050505050505050565b6000806115dd8361157d876115778c8b6115f3565b90506115bc8461157d898185670de0b6b3a76400005b60008261160257506000610809565b8282028284828161160f57fe5b0414610f3f5760405162461bcd60e51b81526004016102cc90612240565b600080821161164e5760405162461bcd60e51b81526004016102cc906121f0565b81838161165757fe5b049392505050565b604080518082019091526000808252602082015290565b8035610809816123a9565b8051610809816123a9565b60008083601f84011261169e57600080fd5b50813567ffffffffffffffff8111156116b657600080fd5b6020830191508360208202830111156116ce57600080fd5b9250929050565b8051610809816123bd565b8035610809816123bd565b8051610809816123c6565b60006020828403121561170857600080fd5b60006117148484611676565b949350505050565b60006020828403121561172e57600080fd5b60006117148484611681565b60008060006060848603121561174f57600080fd5b600061175b8686611676565b935050602061176c868287016116e0565b925050604061177d86828701611676565b9150509250925092565b6000806020838503121561179a57600080fd5b823567ffffffffffffffff8111156117b157600080fd5b6117bd8582860161168c565b92509250509250929050565b600080600080604085870312156117df57600080fd5b843567ffffffffffffffff8111156117f657600080fd5b6118028782880161168c565b9450945050602085013567ffffffffffffffff81111561182157600080fd5b61182d8782880161168c565b95989497509550505050565b6000806000806000806060878903121561185257600080fd5b863567ffffffffffffffff81111561186957600080fd5b61187589828a0161168c565b9650965050602087013567ffffffffffffffff81111561189457600080fd5b6118a089828a0161168c565b9450945050604087013567ffffffffffffffff8111156118bf57600080fd5b6118cb89828a0161168c565b92509250509295509295509295565b6000602082840312156118ec57600080fd5b600061171484846116d5565b60006020828403121561190a57600080fd5b600061171484846116e0565b60006020828403121561192857600080fd5b600061171484846116eb565b61193d8161232f565b82525050565b61193d8161233a565b61193d8161235e565b600061196082612322565b61196a8185612326565b935061197a818560208601612369565b61198381612395565b9093019392505050565b600061199a602883612326565b7f5f5f73657445746855736441676772656761746f723a2056616c756520616c728152671958591e481cd95d60c21b602082015260400192915050565b60006119e4604483612326565b7f7570646174655072696d6974697665733a20556e657175616c205f7072696d6981527f746976657320616e64205f61676772656761746f7273206172726179206c656e6020820152636774687360e01b604082015260600192915050565b6000611a50602d83612326565b7f5f5f6765744c617465737452617465446174613a205072696d6974697665206481526c1bd95cc81b9bdd08195e1a5cdd609a1b602082015260400192915050565b6000611a9f604983612326565b7f6f6e6c7946756e644465706c6f7965724f776e65723a204f6e6c79207468652081527f46756e644465706c6f796572206f776e65722063616e2063616c6c207468697360208201526810333ab731ba34b7b760b91b604082015260600192915050565b6000611b10602883612326565b7f72656d6f76655374616c655072696d6974697665733a20496e76616c6964207081526772696d697469766560c01b602082015260400192915050565b6000611b5a602783612326565b7f5f5f76616c696461746541676772656761746f723a20456d707479205f6167678152663932b3b0ba37b960c91b602082015260400192915050565b6000611ba3603283612326565b7f72656d6f76655374616c655072696d6974697665733a205f7072696d6974697681527165732063616e6e6f7420626520656d70747960701b602082015260400192915050565b6000611bf7602a83612326565b7f6164645072696d6974697665733a205f7072696d6974697665732063616e6e6f8152697420626520656d70747960b01b602082015260400192915050565b6000611c43601e83612326565b7f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815260200192915050565b6000611c7c601a83612326565b7f536166654d6174683a206469766973696f6e206279207a65726f000000000000815260200192915050565b6000611cb5602383612326565b7f7570646174655072696d6974697665733a2056616c756520616c7265616479208152621cd95d60ea1b602082015260400192915050565b6000611cfa602d83612326565b7f72656d6f76655072696d6974697665733a205f7072696d69746976657320636181526c6e6e6f7420626520656d70747960981b602082015260400192915050565b6000611d49604283612326565b7f5f5f6164645072696d6974697665733a20556e657175616c205f7072696d697481527f6976657320616e64205f72617465417373657473206172726179206c656e6774602082015261687360f01b604082015260600192915050565b6000611db3602883612326565b7f72656d6f76655374616c655072696d6974697665733a2052617465206973206e8152676f74207374616c6560c01b602082015260400192915050565b6000611dfd602183612326565b7f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f8152607760f81b602082015260400192915050565b6000611e40602983612326565b7f5f5f76616c696461746541676772656761746f723a205374616c6520726174658152680819195d1958dd195960ba1b602082015260400192915050565b6000611e8b602a83612326565b7f5f5f7365745374616c65526174655468726573686f6c643a2056616c756520618152691b1c9958591e481cd95d60b21b602082015260400192915050565b6000611ed7602683612326565b7f5f5f76616c696461746541676772656761746f723a204e6f20726174652064658152651d1958dd195960d21b602082015260400192915050565b6000611f1f602983612326565b7f7570646174655072696d6974697665733a205072696d6974697665206e6f74208152681e595d08185919195960ba1b602082015260400192915050565b6000611f6a604383612326565b7f5f5f6164645072696d6974697665733a20556e657175616c205f7072696d697481527f6976657320616e64205f61676772656761746f7273206172726179206c656e6760208201526274687360e81b604082015260600192915050565b6000611fd5602d83612326565b7f7570646174655072696d6974697665733a205f7072696d69746976657320636181526c6e6e6f7420626520656d70747960981b602082015260400192915050565b6000612024602983612326565b7f72656d6f76655072696d6974697665733a205072696d6974697665206e6f74208152681e595d08185919195960ba1b602082015260400192915050565b600061206f602283612326565b7f5f5f6164645072696d6974697665733a2056616c756520616c72656164792073815261195d60f21b602082015260400192915050565b805160408301906120b78482611934565b506020820151611533602085018261194c565b61193d81612349565b602081016108098284611934565b604081016120ef8285611934565b610f3f6020830184611934565b6060810161210a8286611934565b612117602083018561194c565b61171460408301846120ca565b602081016108098284611943565b60208101610809828461194c565b604080825281016121518185611955565b9050610f3f6020830184611934565b602080825281016108098161198d565b60208082528101610809816119d7565b6020808252810161080981611a43565b6020808252810161080981611a92565b6020808252810161080981611b03565b6020808252810161080981611b4d565b6020808252810161080981611b96565b6020808252810161080981611bea565b6020808252810161080981611c36565b6020808252810161080981611c6f565b6020808252810161080981611ca8565b6020808252810161080981611ced565b6020808252810161080981611d3c565b6020808252810161080981611da6565b6020808252810161080981611df0565b6020808252810161080981611e33565b6020808252810161080981611e7e565b6020808252810161080981611eca565b6020808252810161080981611f12565b6020808252810161080981611f5d565b6020808252810161080981611fc8565b6020808252810161080981612017565b6020808252810161080981612062565b6040810161080982846120a6565b6020810161080982846120ca565b604081016122fa82856120ca565b610f3f6020830184611943565b6040810161231582856120ca565b610f3f60208301846120ca565b5190565b90815260200190565b60006108098261234c565b151590565b806105aa8161239f565b90565b6001600160a01b031690565b60ff1690565b60006108098261233f565b60005b8381101561238457818101518382015260200161236c565b838111156115335750506000910152565b601f01601f191690565b60028110610ab757fe5b6123b28161232f565b8114610ab757600080fd5b6123b281612349565b6123b28161235856fea2646970667358221220a37809ce387580ea48c8142eb39e932ac6b80c07ae8ea5a0e891b278298a932964736f6c634300060c00335f5f6164645072696d6974697665733a20556e657175616c205f7072696d6974",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101165760003560e01c80638a275539116100a2578063a98acadc11610071578063a98acadc14610233578063b54fbdaa14610246578063cf0399c81461024e578063e106264f14610261578063e35e318e1461027457610116565b80638a275539146101f257806397c0ac87146102055780639be918e61461020d578063a8527ea81461022057610116565b80634c252f91116100e95780634c252f911461018d578063587fe0b2146101a257806374626f87146101c2578063787f2568146101ca578063893d20e8146101ea57610116565b806309157f951461011b578063149b83e6146101305780631b9548f81461014357806332d95e6c1461016d575b600080fd5b61012e6101293660046118f8565b610294565b005b61012e61013e366004611787565b61033b565b61015661015136600461173a565b6104e5565b6040516101649291906122ec565b60405180910390f35b61018061017b3660046116f6565b61054a565b60405161016491906122d0565b6101956105af565b60405161016491906120d3565b6101b56101b03660046116f6565b6105d3565b6040516101649190612124565b610195610662565b6101dd6101d83660046116f6565b610671565b60405161016491906122de565b6101956106d8565b61015661020036600461173a565b610770565b61019561078a565b6101b561021b3660046116f6565b6107ae565b61012e61022e3660046117c9565b61080f565b61012e6102413660046116f6565b610a76565b6101dd610aba565b61012e61025c366004611839565b610ac0565b61012e61026f366004611787565b610bbb565b6102876102823660046116f6565b610d70565b6040516101649190612132565b61029c6106d8565b6001600160a01b0316336001600160a01b0316146102d55760405162461bcd60e51b81526004016102cc90612190565b60405180910390fd5b600154818114156102f85760405162461bcd60e51b81526004016102cc90612260565b60018290556040517f97f8e271e60eea593a857fceac8dc84e2ebf697b2771f3ca4dabf8255ee55fde9061032f9083908590612307565b60405180910390a15050565b806103585760405162461bcd60e51b81526004016102cc906121c0565b60005b818110156104e05760006002600085858581811061037557fe5b905060200201602081019061038a91906116f6565b6001600160a01b039081168252602082019290925260400160002054169050806103c65760405162461bcd60e51b81526004016102cc906121a0565b6103cf816105d3565b6103eb5760405162461bcd60e51b81526004016102cc90612230565b600260008585858181106103fb57fe5b905060200201602081019061041091906116f6565b6001600160a01b031681526020810191909152604001600090812080546001600160a81b031916905560039085858581811061044857fe5b905060200201602081019061045d91906116f6565b6001600160a01b03166001600160a01b031681526020019081526020016000206000905583838381811061048d57fe5b90506020020160208101906104a291906116f6565b6001600160a01b03167ff4a60a74fb565dfd083c5755117b74c21251de3a0e0ed2c0e4f23461a413309060405160405180910390a25060010161035b565b505050565b60008060006104f386610e4b565b90506000811361050a576000809250925050610542565b600061051585610e4b565b90506000811361052d57600080935093505050610542565b61053a8787848885610f46565b909450925050505b935093915050565b61055261165f565b6001600160a01b03828116600090815260026020908152604091829020825180840190935280549384168352919290830190600160a01b900460ff16600181111561059957fe5b60018111156105a457fe5b90525090505b919050565b7f000000000000000000000000000000000000000000000000000000000000000090565b60006105ea60015442610e2390919063ffffffff16565b826001600160a01b0316638205bf6a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561062357600080fd5b505afa158015610637573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065b91906118da565b1092915050565b6000546001600160a01b031690565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614156106bc5750670de0b6b3a76400006105aa565b506001600160a01b031660009081526003602052604090205490565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663893d20e86040518163ffffffff1660e01b815260040160206040518083038186803b15801561073357600080fd5b505afa158015610747573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076b919061171c565b905090565b60008061077e8585856104e5565b91509150935093915050565b7f000000000000000000000000000000000000000000000000000000000000000090565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316148061080957506001600160a01b038281166000908152600260205260409020541615155b92915050565b6108176106d8565b6001600160a01b0316336001600160a01b0316146108475760405162461bcd60e51b81526004016102cc90612190565b826108645760405162461bcd60e51b81526004016102cc906122a0565b8281146108835760405162461bcd60e51b81526004016102cc90612170565b60005b83811015610a6f576000600260008787858181106108a057fe5b90506020020160208101906108b591906116f6565b6001600160a01b039081168252602082019290925260400160002054169050806108f15760405162461bcd60e51b81526004016102cc90612280565b806001600160a01b031684848481811061090757fe5b905060200201602081019061091c91906116f6565b6001600160a01b031614156109435760405162461bcd60e51b81526004016102cc90612200565b61096c84848481811061095257fe5b905060200201602081019061096791906116f6565b6110af565b83838381811061097857fe5b905060200201602081019061098d91906116f6565b6002600088888681811061099d57fe5b90506020020160208101906109b291906116f6565b6001600160a01b039081168252602082019290925260400160002080546001600160a01b031916929091169190911790558585838181106109ef57fe5b9050602002016020810190610a0491906116f6565b6001600160a01b03167fea132160c6ec74553a52c5ce52a096299236ff4da86ca7d4ef18da8b70b4559382868686818110610a3b57fe5b9050602002016020810190610a5091906116f6565b604051610a5e9291906120e1565b60405180910390a250600101610886565b5050505050565b610a7e6106d8565b6001600160a01b0316336001600160a01b031614610aae5760405162461bcd60e51b81526004016102cc90612190565b610ab78161118b565b50565b60015490565b610ac86106d8565b6001600160a01b0316336001600160a01b031614610af85760405162461bcd60e51b81526004016102cc90612190565b84610b155760405162461bcd60e51b81526004016102cc906121d0565b610bb386868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808a028281018201909352898252909350899250889182918501908490808284376000920191909152505060408051602080890282810182019093528882529093508892508791829185019084908082843760009201919091525061121192505050565b505050505050565b610bc36106d8565b6001600160a01b0316336001600160a01b031614610bf35760405162461bcd60e51b81526004016102cc90612190565b80610c105760405162461bcd60e51b81526004016102cc90612210565b60005b818110156104e0576000600281858585818110610c2c57fe5b9050602002016020810190610c4191906116f6565b6001600160a01b039081168252602082019290925260400160002054161415610c7c5760405162461bcd60e51b81526004016102cc906122b0565b60026000848484818110610c8c57fe5b9050602002016020810190610ca191906116f6565b6001600160a01b031681526020810191909152604001600090812080546001600160a81b0319169055600390848484818110610cd957fe5b9050602002016020810190610cee91906116f6565b6001600160a01b03166001600160a01b0316815260200190815260200160002060009055828282818110610d1e57fe5b9050602002016020810190610d3391906116f6565b6001600160a01b03167fb100e8178a081ba9130260173ee2ebe0db3a6c3b6751a7801111ab3017df0e9760405160405180910390a2600101610c13565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03161415610db4575060006105aa565b506001600160a01b0316600090815260026020526040902054600160a01b900460ff1690565b610e1f8282604051602401610df0929190612140565b60408051601f198184030181529190526020810180516001600160e01b031663319af33360e01b179052611539565b5050565b600082821115610e455760405162461bcd60e51b81526004016102cc906121e0565b50900390565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03161415610e965750670de0b6b3a76400006105aa565b6001600160a01b038083166000908152600260205260409020541680610ece5760405162461bcd60e51b81526004016102cc90612180565b806001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f0757600080fd5b505afa158015610f1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3f91906118da565b9392505050565b6000806000610f5488610d70565b90506000610f6186610d70565b90506000610f6e8a610671565b90506000610f7b88610671565b9050826001811115610f8957fe5b846001811115610f9557fe5b1415610fb757610fa88a838b848b61155a565b600195509550505050506110a5565b60008060009054906101000a90046001600160a01b03166001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561100657600080fd5b505afa15801561101a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103e91906118da565b905060008113611059576000809650965050505050506110a5565b600085600181111561106757fe5b141561108b5761107b8b848c858c8661158d565b60019650965050505050506110a5565b6110998b848c858c866115c8565b60019650965050505050505b9550959350505050565b6001600160a01b0381166110d55760405162461bcd60e51b81526004016102cc906121b0565b6000816001600160a01b03166350d25bcd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561111057600080fd5b505afa158015611124573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114891906118da565b136111655760405162461bcd60e51b81526004016102cc90612270565b61116e816105d3565b15610ab75760405162461bcd60e51b81526004016102cc90612250565b6000546001600160a01b039081169082168114156111bb5760405162461bcd60e51b81526004016102cc90612160565b6111c4826110af565b600080546001600160a01b0319166001600160a01b0384161790556040517f98b60a60ba6130248e985ae4140dc3109d9c2980c7e435fed385e2756bc944619061032f90839085906120e1565b81518351146112325760405162461bcd60e51b81526004016102cc90612290565b80518351146112535760405162461bcd60e51b81526004016102cc90612220565b60005b83518110156115335760006001600160a01b03166002600086848151811061127a57fe5b6020908102919091018101516001600160a01b039081168352908201929092526040016000205416146112bf5760405162461bcd60e51b81526004016102cc906122c0565b6112db8382815181106112ce57fe5b60200260200101516110af565b60405180604001604052808483815181106112f257fe5b60200260200101516001600160a01b0316815260200183838151811061131457fe5b6020026020010151600181111561132757fe5b8152506002600086848151811061133a57fe5b6020908102919091018101516001600160a01b039081168352828201939093526040909101600020835181546001600160a01b0319169316929092178083559083015190829060ff60a01b1916600160a01b83600181111561139857fe5b02179055509050506113e16040518060400160405280600c81526020016b0383934b6b4ba34bb32b99d160a51b8152508583815181106113d457fe5b6020026020010151610dda565b60008482815181106113ef57fe5b60200260200101516001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561142f57600080fd5b505afa158015611443573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114679190611916565b60ff16600a0a9050806003600087858151811061148057fe5b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020819055508482815181106114b857fe5b60200260200101516001600160a01b03167f742bdf00da3d8f16c0fab93ce38eb6a536a019c9e283888dd44c3a08c0148c028584815181106114f657fe5b602002602001015185858151811061150a57fe5b602002602001015184604051611522939291906120fc565b60405180910390a250600101611256565b50505050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b600061158361156986846115f3565b61157d856115778a896115f3565b906115f3565b9061162d565b9695505050505050565b6000806115aa670de0b6b3a764000061157d856115778c8b6115f3565b90506115bc8461157d8981858a6115f3565b98975050505050505050565b6000806115dd8361157d876115778c8b6115f3565b90506115bc8461157d898185670de0b6b3a76400005b60008261160257506000610809565b8282028284828161160f57fe5b0414610f3f5760405162461bcd60e51b81526004016102cc90612240565b600080821161164e5760405162461bcd60e51b81526004016102cc906121f0565b81838161165757fe5b049392505050565b604080518082019091526000808252602082015290565b8035610809816123a9565b8051610809816123a9565b60008083601f84011261169e57600080fd5b50813567ffffffffffffffff8111156116b657600080fd5b6020830191508360208202830111156116ce57600080fd5b9250929050565b8051610809816123bd565b8035610809816123bd565b8051610809816123c6565b60006020828403121561170857600080fd5b60006117148484611676565b949350505050565b60006020828403121561172e57600080fd5b60006117148484611681565b60008060006060848603121561174f57600080fd5b600061175b8686611676565b935050602061176c868287016116e0565b925050604061177d86828701611676565b9150509250925092565b6000806020838503121561179a57600080fd5b823567ffffffffffffffff8111156117b157600080fd5b6117bd8582860161168c565b92509250509250929050565b600080600080604085870312156117df57600080fd5b843567ffffffffffffffff8111156117f657600080fd5b6118028782880161168c565b9450945050602085013567ffffffffffffffff81111561182157600080fd5b61182d8782880161168c565b95989497509550505050565b6000806000806000806060878903121561185257600080fd5b863567ffffffffffffffff81111561186957600080fd5b61187589828a0161168c565b9650965050602087013567ffffffffffffffff81111561189457600080fd5b6118a089828a0161168c565b9450945050604087013567ffffffffffffffff8111156118bf57600080fd5b6118cb89828a0161168c565b92509250509295509295509295565b6000602082840312156118ec57600080fd5b600061171484846116d5565b60006020828403121561190a57600080fd5b600061171484846116e0565b60006020828403121561192857600080fd5b600061171484846116eb565b61193d8161232f565b82525050565b61193d8161233a565b61193d8161235e565b600061196082612322565b61196a8185612326565b935061197a818560208601612369565b61198381612395565b9093019392505050565b600061199a602883612326565b7f5f5f73657445746855736441676772656761746f723a2056616c756520616c728152671958591e481cd95d60c21b602082015260400192915050565b60006119e4604483612326565b7f7570646174655072696d6974697665733a20556e657175616c205f7072696d6981527f746976657320616e64205f61676772656761746f7273206172726179206c656e6020820152636774687360e01b604082015260600192915050565b6000611a50602d83612326565b7f5f5f6765744c617465737452617465446174613a205072696d6974697665206481526c1bd95cc81b9bdd08195e1a5cdd609a1b602082015260400192915050565b6000611a9f604983612326565b7f6f6e6c7946756e644465706c6f7965724f776e65723a204f6e6c79207468652081527f46756e644465706c6f796572206f776e65722063616e2063616c6c207468697360208201526810333ab731ba34b7b760b91b604082015260600192915050565b6000611b10602883612326565b7f72656d6f76655374616c655072696d6974697665733a20496e76616c6964207081526772696d697469766560c01b602082015260400192915050565b6000611b5a602783612326565b7f5f5f76616c696461746541676772656761746f723a20456d707479205f6167678152663932b3b0ba37b960c91b602082015260400192915050565b6000611ba3603283612326565b7f72656d6f76655374616c655072696d6974697665733a205f7072696d6974697681527165732063616e6e6f7420626520656d70747960701b602082015260400192915050565b6000611bf7602a83612326565b7f6164645072696d6974697665733a205f7072696d6974697665732063616e6e6f8152697420626520656d70747960b01b602082015260400192915050565b6000611c43601e83612326565b7f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815260200192915050565b6000611c7c601a83612326565b7f536166654d6174683a206469766973696f6e206279207a65726f000000000000815260200192915050565b6000611cb5602383612326565b7f7570646174655072696d6974697665733a2056616c756520616c7265616479208152621cd95d60ea1b602082015260400192915050565b6000611cfa602d83612326565b7f72656d6f76655072696d6974697665733a205f7072696d69746976657320636181526c6e6e6f7420626520656d70747960981b602082015260400192915050565b6000611d49604283612326565b7f5f5f6164645072696d6974697665733a20556e657175616c205f7072696d697481527f6976657320616e64205f72617465417373657473206172726179206c656e6774602082015261687360f01b604082015260600192915050565b6000611db3602883612326565b7f72656d6f76655374616c655072696d6974697665733a2052617465206973206e8152676f74207374616c6560c01b602082015260400192915050565b6000611dfd602183612326565b7f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f8152607760f81b602082015260400192915050565b6000611e40602983612326565b7f5f5f76616c696461746541676772656761746f723a205374616c6520726174658152680819195d1958dd195960ba1b602082015260400192915050565b6000611e8b602a83612326565b7f5f5f7365745374616c65526174655468726573686f6c643a2056616c756520618152691b1c9958591e481cd95d60b21b602082015260400192915050565b6000611ed7602683612326565b7f5f5f76616c696461746541676772656761746f723a204e6f20726174652064658152651d1958dd195960d21b602082015260400192915050565b6000611f1f602983612326565b7f7570646174655072696d6974697665733a205072696d6974697665206e6f74208152681e595d08185919195960ba1b602082015260400192915050565b6000611f6a604383612326565b7f5f5f6164645072696d6974697665733a20556e657175616c205f7072696d697481527f6976657320616e64205f61676772656761746f7273206172726179206c656e6760208201526274687360e81b604082015260600192915050565b6000611fd5602d83612326565b7f7570646174655072696d6974697665733a205f7072696d69746976657320636181526c6e6e6f7420626520656d70747960981b602082015260400192915050565b6000612024602983612326565b7f72656d6f76655072696d6974697665733a205072696d6974697665206e6f74208152681e595d08185919195960ba1b602082015260400192915050565b600061206f602283612326565b7f5f5f6164645072696d6974697665733a2056616c756520616c72656164792073815261195d60f21b602082015260400192915050565b805160408301906120b78482611934565b506020820151611533602085018261194c565b61193d81612349565b602081016108098284611934565b604081016120ef8285611934565b610f3f6020830184611934565b6060810161210a8286611934565b612117602083018561194c565b61171460408301846120ca565b602081016108098284611943565b60208101610809828461194c565b604080825281016121518185611955565b9050610f3f6020830184611934565b602080825281016108098161198d565b60208082528101610809816119d7565b6020808252810161080981611a43565b6020808252810161080981611a92565b6020808252810161080981611b03565b6020808252810161080981611b4d565b6020808252810161080981611b96565b6020808252810161080981611bea565b6020808252810161080981611c36565b6020808252810161080981611c6f565b6020808252810161080981611ca8565b6020808252810161080981611ced565b6020808252810161080981611d3c565b6020808252810161080981611da6565b6020808252810161080981611df0565b6020808252810161080981611e33565b6020808252810161080981611e7e565b6020808252810161080981611eca565b6020808252810161080981611f12565b6020808252810161080981611f5d565b6020808252810161080981611fc8565b6020808252810161080981612017565b6020808252810161080981612062565b6040810161080982846120a6565b6020810161080982846120ca565b604081016122fa82856120ca565b610f3f6020830184611943565b6040810161231582856120ca565b610f3f60208301846120ca565b5190565b90815260200190565b60006108098261234c565b151590565b806105aa8161239f565b90565b6001600160a01b031690565b60ff1690565b60006108098261233f565b60005b8381101561238457818101518382015260200161236c565b838111156115335750506000910152565b601f01601f191690565b60028110610ab757fe5b6123b28161232f565b8114610ab757600080fd5b6123b281612349565b6123b28161235856fea2646970667358221220a37809ce387580ea48c8142eb39e932ac6b80c07ae8ea5a0e891b278298a932964736f6c634300060c0033",
  "devdoc": {
    "author": "Enzyme Council <security@enzyme.finance>",
    "kind": "dev",
    "methods": {
      "addPrimitives(address[],address[],uint8[])": {
        "params": {
          "_aggregators": "The ordered aggregators corresponding to the list of _primitives",
          "_primitives": "The primitives to add",
          "_rateAssets": "The ordered rate assets corresponding to the list of _primitives"
        }
      },
      "calcCanonicalValue(address,uint256,address)": {
        "params": {
          "_baseAsset": "The base asset",
          "_baseAssetAmount": "The base asset amount to convert",
          "_quoteAsset": "The quote asset"
        },
        "returns": {
          "isValid_": "True if the rates used in calculations are deemed valid",
          "quoteAssetAmount_": "The equivalent quote asset amount"
        }
      },
      "calcLiveValue(address,uint256,address)": {
        "details": "Live and canonical values are the same for Chainlink",
        "params": {
          "_baseAsset": "The base asset",
          "_baseAssetAmount": "The base asset amount to convert",
          "_quoteAsset": "The quote asset"
        },
        "returns": {
          "isValid_": "True if the rates used in calculations are deemed valid",
          "quoteAssetAmount_": "The equivalent quote asset amount"
        }
      },
      "getAggregatorInfoForPrimitive(address)": {
        "params": {
          "_primitive": "The primitive asset for which to get the aggregatorInfo value"
        },
        "returns": {
          "aggregatorInfo_": "The aggregatorInfo value"
        }
      },
      "getEthUsdAggregator()": {
        "returns": {
          "ethUsdAggregator_": "The `ethUsdAggregator` variable value"
        }
      },
      "getFundDeployer()": {
        "returns": {
          "fundDeployer_": "The `FUND_DEPLOYER` variable value"
        }
      },
      "getOwner()": {
        "details": "Ownership is deferred to the owner of the FundDeployer contract",
        "returns": {
          "owner_": "The owner"
        }
      },
      "getRateAssetForPrimitive(address)": {
        "details": "This isn't strictly necessary as WETH_TOKEN will be undefined and thus the RateAsset will be the 0-position of the enum (i.e. ETH), but it makes the behavior more explicit",
        "returns": {
          "rateAsset_": "The rateAsset variable value"
        }
      },
      "getStaleRateThreshold()": {
        "returns": {
          "staleRateThreshold_": "The `staleRateThreshold` variable value"
        }
      },
      "getUnitForPrimitive(address)": {
        "returns": {
          "unit_": "The unit variable value"
        }
      },
      "getWethToken()": {
        "returns": {
          "wethToken_": "The `WETH_TOKEN` variable value"
        }
      },
      "isSupportedAsset(address)": {
        "params": {
          "_asset": "The asset to check"
        },
        "returns": {
          "isSupported_": "True if the asset is a supported primitive"
        }
      },
      "rateIsStale(address)": {
        "params": {
          "_aggregator": "The Chainlink aggregator of which to check staleness"
        },
        "returns": {
          "rateIsStale_": "True if the rate is considered stale"
        }
      },
      "removePrimitives(address[])": {
        "params": {
          "_primitives": "The primitives to remove"
        }
      },
      "removeStalePrimitives(address[])": {
        "details": "Callable by anybody",
        "params": {
          "_primitives": "The stale primitives to remove"
        }
      },
      "setEthUsdAggregator(address)": {
        "params": {
          "_nextEthUsdAggregator": "The `ehUsdAggregator` value to set"
        }
      },
      "setStaleRateThreshold(uint256)": {
        "params": {
          "_nextStaleRateThreshold": "The next `staleRateThreshold` value"
        }
      },
      "updatePrimitives(address[],address[])": {
        "params": {
          "_aggregators": "The ordered aggregators corresponding to the list of _primitives",
          "_primitives": "The primitives to update"
        }
      }
    },
    "title": "ChainlinkPriceFeed Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addPrimitives(address[],address[],uint8[])": {
        "notice": "Adds a list of primitives with the given aggregator and rateAsset values"
      },
      "calcCanonicalValue(address,uint256,address)": {
        "notice": "Calculates the value of a base asset in terms of a quote asset (using a canonical rate)"
      },
      "calcLiveValue(address,uint256,address)": {
        "notice": "Calculates the value of a base asset in terms of a quote asset (using a live rate)"
      },
      "getAggregatorInfoForPrimitive(address)": {
        "notice": "Gets the aggregatorInfo variable value for a primitive"
      },
      "getEthUsdAggregator()": {
        "notice": "Gets the `ethUsdAggregator` variable value"
      },
      "getFundDeployer()": {
        "notice": "Gets the `FUND_DEPLOYER` variable"
      },
      "getOwner()": {
        "notice": "Gets the owner of this contract"
      },
      "getRateAssetForPrimitive(address)": {
        "notice": "Gets the rateAsset variable value for a primitive"
      },
      "getStaleRateThreshold()": {
        "notice": "Gets the `staleRateThreshold` variable value"
      },
      "getUnitForPrimitive(address)": {
        "notice": "Gets the unit variable value for a primitive"
      },
      "getWethToken()": {
        "notice": "Gets the `WETH_TOKEN` variable value"
      },
      "isSupportedAsset(address)": {
        "notice": "Checks whether an asset is a supported primitive of the price feed"
      },
      "rateIsStale(address)": {
        "notice": "Checks whether the current rate is considered stale for the specified aggregator"
      },
      "removePrimitives(address[])": {
        "notice": "Removes a list of primitives from the feed"
      },
      "removeStalePrimitives(address[])": {
        "notice": "Removes stale primitives from the feed"
      },
      "setEthUsdAggregator(address)": {
        "notice": "Sets the `ehUsdAggregator` variable value"
      },
      "setStaleRateThreshold(uint256)": {
        "notice": "Sets the `staleRateThreshold` variable"
      },
      "updatePrimitives(address[],address[])": {
        "notice": "Updates the aggregators for given primitives"
      }
    },
    "notice": "A price feed that uses Chainlink oracles as price sources",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 41590,
        "contract": "contracts/release/infrastructure/price-feeds/primitives/ChainlinkPriceFeed.sol:ChainlinkPriceFeed",
        "label": "ethUsdAggregator",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 41592,
        "contract": "contracts/release/infrastructure/price-feeds/primitives/ChainlinkPriceFeed.sol:ChainlinkPriceFeed",
        "label": "staleRateThreshold",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 41596,
        "contract": "contracts/release/infrastructure/price-feeds/primitives/ChainlinkPriceFeed.sol:ChainlinkPriceFeed",
        "label": "primitiveToAggregatorInfo",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(AggregatorInfo)41581_storage)"
      },
      {
        "astId": 41600,
        "contract": "contracts/release/infrastructure/price-feeds/primitives/ChainlinkPriceFeed.sol:ChainlinkPriceFeed",
        "label": "primitiveToUnit",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_enum(RateAsset)41576": {
        "encoding": "inplace",
        "label": "enum ChainlinkPriceFeed.RateAsset",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(AggregatorInfo)41581_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ChainlinkPriceFeed.AggregatorInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(AggregatorInfo)41581_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AggregatorInfo)41581_storage": {
        "encoding": "inplace",
        "label": "struct ChainlinkPriceFeed.AggregatorInfo",
        "members": [
          {
            "astId": 41578,
            "contract": "contracts/release/infrastructure/price-feeds/primitives/ChainlinkPriceFeed.sol:ChainlinkPriceFeed",
            "label": "aggregator",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 41580,
            "contract": "contracts/release/infrastructure/price-feeds/primitives/ChainlinkPriceFeed.sol:ChainlinkPriceFeed",
            "label": "rateAsset",
            "offset": 20,
            "slot": "0",
            "type": "t_enum(RateAsset)41576"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}