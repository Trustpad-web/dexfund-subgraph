{
  "address": "0x7B60E1E40A1268b9c78b342fB9767e0b76Dafb34",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_integrationManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_synthetixPriceFeed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_originator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_synthetix",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_trackingCode",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ADD_TRACKED_ASSETS_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "APPROVE_ASSETS_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CLAIM_REWARDS_AND_REINVEST_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CLAIM_REWARDS_AND_SWAP_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CLAIM_REWARDS_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LEND_AND_STAKE_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LEND_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REDEEM_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REMOVE_TRACKED_ASSETS_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STAKE_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TAKE_ORDER_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UNSTAKE_AND_REDEEM_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UNSTAKE_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getIntegrationManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "integrationManager_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOriginator",
      "outputs": [
        {
          "internalType": "address",
          "name": "originator_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSynthetix",
      "outputs": [
        {
          "internalType": "address",
          "name": "synthetix_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSynthetixPriceFeed",
      "outputs": [
        {
          "internalType": "address",
          "name": "synthetixPriceFeed_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTrackingCode",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "trackingCode_",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "identifier",
      "outputs": [
        {
          "internalType": "string",
          "name": "identifier_",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_selector",
          "type": "bytes4"
        },
        {
          "internalType": "bytes",
          "name": "_encodedCallArgs",
          "type": "bytes"
        }
      ],
      "name": "parseAssetsForMethod",
      "outputs": [
        {
          "internalType": "enum IIntegrationManager.SpendAssetsHandleType",
          "name": "spendAssetsHandleType_",
          "type": "uint8"
        },
        {
          "internalType": "address[]",
          "name": "spendAssets_",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "spendAssetAmounts_",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "incomingAssets_",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "minIncomingAssetAmounts_",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultProxy",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_encodedCallArgs",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "takeOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7e1ffae88501675397daaab0a1ea778947d8dd7816e063261536123c505d383c",
  "receipt": {
    "to": null,
    "from": "0x5DB342FB039C1c85bec5fE89Af6734621f421D84",
    "contractAddress": "0x7B60E1E40A1268b9c78b342fB9767e0b76Dafb34",
    "transactionIndex": 191,
    "gasUsed": "832417",
    "logsBloom": "0x
    "blockHash": "0xceb96345feebff111ac6614e2f7ed16c5156bb7d5084787e3880be715e9b963e",
    "transactionHash": "0x7e1ffae88501675397daaab0a1ea778947d8dd7816e063261536123c505d383c",
    "logs": [],
    "blockNumber": 13430392,
    "cumulativeGasUsed": "27831687",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2B3189e520608b6BBf7666442eF52B185EefcD5c",
    "0x484Ab03caBb8240343F00BA89010229fBf77cC62",
    "0x0000000000000000000000000000000000000000",
    "0x0000000000000000000000000000000000000000",
    "0x454e5a594d450000000000000000000000000000000000000000000000000000"
  ],
  "linkedData": {
    "type": "ADAPTER"
  },
  "solcInputHash": "d9ca3c6c6b3274b287f1d69a6e9ab10d",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_integrationManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_synthetixPriceFeed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_originator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_synthetix\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_trackingCode\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ADD_TRACKED_ASSETS_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"APPROVE_ASSETS_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CLAIM_REWARDS_AND_REINVEST_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CLAIM_REWARDS_AND_SWAP_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CLAIM_REWARDS_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LEND_AND_STAKE_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LEND_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REDEEM_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REMOVE_TRACKED_ASSETS_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKE_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TAKE_ORDER_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNSTAKE_AND_REDEEM_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNSTAKE_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIntegrationManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"integrationManager_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOriginator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"originator_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSynthetix\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"synthetix_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSynthetixPriceFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"synthetixPriceFeed_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTrackingCode\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"trackingCode_\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"identifier\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"identifier_\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_selector\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"_encodedCallArgs\",\"type\":\"bytes\"}],\"name\":\"parseAssetsForMethod\",\"outputs\":[{\"internalType\":\"enum IIntegrationManager.SpendAssetsHandleType\",\"name\":\"spendAssetsHandleType_\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"spendAssets_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"spendAssetAmounts_\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"incomingAssets_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minIncomingAssetAmounts_\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_encodedCallArgs\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"takeOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Enzyme Council <security@enzyme.finance>\",\"kind\":\"dev\",\"methods\":{\"getIntegrationManager()\":{\"returns\":{\"integrationManager_\":\"The `INTEGRATION_MANAGER` variable value\"}},\"getOriginator()\":{\"returns\":{\"originator_\":\"The `ORIGINATOR` variable value\"}},\"getSynthetix()\":{\"returns\":{\"synthetix_\":\"The `SYNTHETIX` variable value\"}},\"getSynthetixPriceFeed()\":{\"returns\":{\"synthetixPriceFeed_\":\"The `SYNTHETIX_PRICE_FEED` variable value\"}},\"getTrackingCode()\":{\"returns\":{\"trackingCode_\":\"The `TRACKING_CODE` variable value\"}},\"identifier()\":{\"returns\":{\"identifier_\":\"An identifier string\"}},\"parseAssetsForMethod(bytes4,bytes)\":{\"params\":{\"_encodedCallArgs\":\"The encoded parameters for the callOnIntegration\",\"_selector\":\"The function selector for the callOnIntegration\"},\"returns\":{\"incomingAssets_\":\"The assets to receive in the call\",\"minIncomingAssetAmounts_\":\"The min asset amounts to receive in the call\",\"spendAssetAmounts_\":\"The max asset amounts to spend in the call\",\"spendAssetsHandleType_\":\"A type that dictates how to handle granting the adapter access to spend assets (`None` by default)\",\"spendAssets_\":\"The assets to spend in the call\"}},\"takeOrder(address,bytes,bytes)\":{\"params\":{\"_encodedCallArgs\":\"Encoded order parameters\",\"_vaultProxy\":\"The VaultProxy of the calling fund\"}}},\"title\":\"SynthetixAdapter Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getIntegrationManager()\":{\"notice\":\"Gets the `INTEGRATION_MANAGER` variable\"},\"getOriginator()\":{\"notice\":\"Gets the `ORIGINATOR` variable\"},\"getSynthetix()\":{\"notice\":\"Gets the `SYNTHETIX` variable\"},\"getSynthetixPriceFeed()\":{\"notice\":\"Gets the `SYNTHETIX_PRICE_FEED` variable\"},\"getTrackingCode()\":{\"notice\":\"Gets the `TRACKING_CODE` variable\"},\"identifier()\":{\"notice\":\"Provides a constant string identifier for an adapter\"},\"parseAssetsForMethod(bytes4,bytes)\":{\"notice\":\"Parses the expected assets to receive from a call on integration\"},\"takeOrder(address,bytes,bytes)\":{\"notice\":\"Trades assets on Synthetix\"}},\"notice\":\"Adapter for interacting with Synthetix\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/release/extensions/integration-manager/integrations/adapters/SynthetixAdapter.sol\":\"SynthetixAdapter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/release/core/fund-deployer/IFundDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title IFundDeployer Interface\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\ninterface IFundDeployer {\\r\\n    enum ReleaseStatus {PreLaunch, Live, Paused}\\r\\n\\r\\n    function getOwner() external view returns (address);\\r\\n\\r\\n    function getReleaseStatus() external view returns (ReleaseStatus);\\r\\n\\r\\n    function isRegisteredVaultCall(address, bytes4) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x3c8c95a5d0e03da6a5f0278e5fbe40bf4f2d274afc2d52815fefaba847931bf9\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/integration-manager/IIntegrationManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title IIntegrationManager interface\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\n/// @notice Interface for the IntegrationManager\\r\\ninterface IIntegrationManager {\\r\\n    enum SpendAssetsHandleType {None, Approve, Transfer, Remove}\\r\\n}\\r\\n\",\"keccak256\":\"0xdcfcaaebcf2d3309e29391e0e2f6bdff09527787d4312dd6713a96f5e51b8262\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/integration-manager/integrations/IIntegrationAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"../IIntegrationManager.sol\\\";\\r\\n\\r\\n/// @title Integration Adapter interface\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\n/// @notice Interface for all integration adapters\\r\\ninterface IIntegrationAdapter {\\r\\n    function identifier() external pure returns (string memory identifier_);\\r\\n\\r\\n    function parseAssetsForMethod(bytes4 _selector, bytes calldata _encodedCallArgs)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType_,\\r\\n            address[] memory spendAssets_,\\r\\n            uint256[] memory spendAssetAmounts_,\\r\\n            address[] memory incomingAssets_,\\r\\n            uint256[] memory minIncomingAssetAmounts_\\r\\n        );\\r\\n}\\r\\n\",\"keccak256\":\"0xd3635cf4bf3d4a9b2926a691e45acf69492585ee6e1e7e0fad18703e272ad273\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/integration-manager/integrations/adapters/SynthetixAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"../../../../infrastructure/price-feeds/derivatives/feeds/SynthetixPriceFeed.sol\\\";\\r\\nimport \\\"../../../../interfaces/ISynthetix.sol\\\";\\r\\nimport \\\"../utils/AdapterBase.sol\\\";\\r\\n\\r\\n/// @title SynthetixAdapter Contract\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\n/// @notice Adapter for interacting with Synthetix\\r\\ncontract SynthetixAdapter is AdapterBase {\\r\\n    address private immutable ORIGINATOR;\\r\\n    address private immutable SYNTHETIX;\\r\\n    address private immutable SYNTHETIX_PRICE_FEED;\\r\\n    bytes32 private immutable TRACKING_CODE;\\r\\n\\r\\n    constructor(\\r\\n        address _integrationManager,\\r\\n        address _synthetixPriceFeed,\\r\\n        address _originator,\\r\\n        address _synthetix,\\r\\n        bytes32 _trackingCode\\r\\n    ) public AdapterBase(_integrationManager) {\\r\\n        ORIGINATOR = _originator;\\r\\n        SYNTHETIX = _synthetix;\\r\\n        SYNTHETIX_PRICE_FEED = _synthetixPriceFeed;\\r\\n        TRACKING_CODE = _trackingCode;\\r\\n    }\\r\\n\\r\\n    // EXTERNAL FUNCTIONS\\r\\n\\r\\n    /// @notice Provides a constant string identifier for an adapter\\r\\n    /// @return identifier_ An identifier string\\r\\n    function identifier() external pure override returns (string memory identifier_) {\\r\\n        return \\\"SYNTHETIX\\\";\\r\\n    }\\r\\n\\r\\n    /// @notice Parses the expected assets to receive from a call on integration\\r\\n    /// @param _selector The function selector for the callOnIntegration\\r\\n    /// @param _encodedCallArgs The encoded parameters for the callOnIntegration\\r\\n    /// @return spendAssetsHandleType_ A type that dictates how to handle granting\\r\\n    /// the adapter access to spend assets (`None` by default)\\r\\n    /// @return spendAssets_ The assets to spend in the call\\r\\n    /// @return spendAssetAmounts_ The max asset amounts to spend in the call\\r\\n    /// @return incomingAssets_ The assets to receive in the call\\r\\n    /// @return minIncomingAssetAmounts_ The min asset amounts to receive in the call\\r\\n    function parseAssetsForMethod(bytes4 _selector, bytes calldata _encodedCallArgs)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (\\r\\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType_,\\r\\n            address[] memory spendAssets_,\\r\\n            uint256[] memory spendAssetAmounts_,\\r\\n            address[] memory incomingAssets_,\\r\\n            uint256[] memory minIncomingAssetAmounts_\\r\\n        )\\r\\n    {\\r\\n        require(_selector == TAKE_ORDER_SELECTOR, \\\"parseAssetsForMethod: _selector invalid\\\");\\r\\n\\r\\n        (\\r\\n            address incomingAsset,\\r\\n            uint256 minIncomingAssetAmount,\\r\\n            address outgoingAsset,\\r\\n            uint256 outgoingAssetAmount\\r\\n        ) = __decodeCallArgs(_encodedCallArgs);\\r\\n\\r\\n        spendAssets_ = new address[](1);\\r\\n        spendAssets_[0] = outgoingAsset;\\r\\n        spendAssetAmounts_ = new uint256[](1);\\r\\n        spendAssetAmounts_[0] = outgoingAssetAmount;\\r\\n\\r\\n        incomingAssets_ = new address[](1);\\r\\n        incomingAssets_[0] = incomingAsset;\\r\\n        minIncomingAssetAmounts_ = new uint256[](1);\\r\\n        minIncomingAssetAmounts_[0] = minIncomingAssetAmount;\\r\\n\\r\\n        return (\\r\\n            IIntegrationManager.SpendAssetsHandleType.None,\\r\\n            spendAssets_,\\r\\n            spendAssetAmounts_,\\r\\n            incomingAssets_,\\r\\n            minIncomingAssetAmounts_\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Trades assets on Synthetix\\r\\n    /// @param _vaultProxy The VaultProxy of the calling fund\\r\\n    /// @param _encodedCallArgs Encoded order parameters\\r\\n    function takeOrder(\\r\\n        address _vaultProxy,\\r\\n        bytes calldata _encodedCallArgs,\\r\\n        bytes calldata\\r\\n    ) external onlyIntegrationManager {\\r\\n        (\\r\\n            address incomingAsset,\\r\\n            ,\\r\\n            address outgoingAsset,\\r\\n            uint256 outgoingAssetAmount\\r\\n        ) = __decodeCallArgs(_encodedCallArgs);\\r\\n\\r\\n        address[] memory synths = new address[](2);\\r\\n        synths[0] = outgoingAsset;\\r\\n        synths[1] = incomingAsset;\\r\\n\\r\\n        bytes32[] memory currencyKeys = SynthetixPriceFeed(SYNTHETIX_PRICE_FEED)\\r\\n            .getCurrencyKeysForSynths(synths);\\r\\n\\r\\n        ISynthetix(SYNTHETIX).exchangeOnBehalfWithTracking(\\r\\n            _vaultProxy,\\r\\n            currencyKeys[0],\\r\\n            outgoingAssetAmount,\\r\\n            currencyKeys[1],\\r\\n            ORIGINATOR,\\r\\n            TRACKING_CODE\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // PRIVATE FUNCTIONS\\r\\n\\r\\n    /// @dev Helper to decode the encoded call arguments\\r\\n    function __decodeCallArgs(bytes memory _encodedCallArgs)\\r\\n        private\\r\\n        pure\\r\\n        returns (\\r\\n            address incomingAsset_,\\r\\n            uint256 minIncomingAssetAmount_,\\r\\n            address outgoingAsset_,\\r\\n            uint256 outgoingAssetAmount_\\r\\n        )\\r\\n    {\\r\\n        return abi.decode(_encodedCallArgs, (address, uint256, address, uint256));\\r\\n    }\\r\\n\\r\\n    ///////////////////\\r\\n    // STATE GETTERS //\\r\\n    ///////////////////\\r\\n\\r\\n    /// @notice Gets the `ORIGINATOR` variable\\r\\n    /// @return originator_ The `ORIGINATOR` variable value\\r\\n    function getOriginator() external view returns (address originator_) {\\r\\n        return ORIGINATOR;\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the `SYNTHETIX` variable\\r\\n    /// @return synthetix_ The `SYNTHETIX` variable value\\r\\n    function getSynthetix() external view returns (address synthetix_) {\\r\\n        return SYNTHETIX;\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the `SYNTHETIX_PRICE_FEED` variable\\r\\n    /// @return synthetixPriceFeed_ The `SYNTHETIX_PRICE_FEED` variable value\\r\\n    function getSynthetixPriceFeed() external view returns (address synthetixPriceFeed_) {\\r\\n        return SYNTHETIX_PRICE_FEED;\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the `TRACKING_CODE` variable\\r\\n    /// @return trackingCode_ The `TRACKING_CODE` variable value\\r\\n    function getTrackingCode() external view returns (bytes32 trackingCode_) {\\r\\n        return TRACKING_CODE;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9c2be3a5ab6f28a752f1d4255c982790b576a5d81f926e6f4b075eb30d18926a\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/integration-manager/integrations/utils/AdapterBase.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"../IIntegrationAdapter.sol\\\";\\r\\nimport \\\"./IntegrationSelectors.sol\\\";\\r\\n\\r\\n/// @title AdapterBase Contract\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\n/// @notice A base contract for integration adapters\\r\\nabstract contract AdapterBase is IIntegrationAdapter, IntegrationSelectors {\\r\\n    using SafeERC20 for ERC20;\\r\\n\\r\\n    address internal immutable INTEGRATION_MANAGER;\\r\\n\\r\\n    /// @dev Provides a standard implementation for transferring assets between\\r\\n    /// the fund's VaultProxy and the adapter, by wrapping the adapter action.\\r\\n    /// This modifier should be implemented in almost all adapter actions, unless they\\r\\n    /// do not move assets or can spend and receive assets directly with the VaultProxy\\r\\n    modifier fundAssetsTransferHandler(\\r\\n        address _vaultProxy,\\r\\n        bytes memory _encodedAssetTransferArgs\\r\\n    ) {\\r\\n        (\\r\\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType,\\r\\n            address[] memory spendAssets,\\r\\n            uint256[] memory spendAssetAmounts,\\r\\n            address[] memory incomingAssets\\r\\n        ) = __decodeEncodedAssetTransferArgs(_encodedAssetTransferArgs);\\r\\n\\r\\n        // Take custody of spend assets (if necessary)\\r\\n        if (spendAssetsHandleType == IIntegrationManager.SpendAssetsHandleType.Approve) {\\r\\n            for (uint256 i = 0; i < spendAssets.length; i++) {\\r\\n                ERC20(spendAssets[i]).safeTransferFrom(\\r\\n                    _vaultProxy,\\r\\n                    address(this),\\r\\n                    spendAssetAmounts[i]\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Execute call\\r\\n        _;\\r\\n\\r\\n        // Transfer remaining assets back to the fund's VaultProxy\\r\\n        __transferContractAssetBalancesToFund(_vaultProxy, incomingAssets);\\r\\n        __transferContractAssetBalancesToFund(_vaultProxy, spendAssets);\\r\\n    }\\r\\n\\r\\n    modifier onlyIntegrationManager() {\\r\\n        require(\\r\\n            msg.sender == INTEGRATION_MANAGER,\\r\\n            \\\"Only the IntegrationManager can call this function\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(address _integrationManager) public {\\r\\n        INTEGRATION_MANAGER = _integrationManager;\\r\\n    }\\r\\n\\r\\n    // INTERNAL FUNCTIONS\\r\\n\\r\\n    /// @dev Helper for adapters to approve their integratees with the max amount of an asset.\\r\\n    /// Since everything is done atomically, and only the balances to-be-used are sent to adapters,\\r\\n    /// there is no need to approve exact amounts on every call.\\r\\n    function __approveMaxAsNeeded(\\r\\n        address _asset,\\r\\n        address _target,\\r\\n        uint256 _neededAmount\\r\\n    ) internal {\\r\\n        if (ERC20(_asset).allowance(address(this), _target) < _neededAmount) {\\r\\n            ERC20(_asset).safeApprove(_target, type(uint256).max);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to decode the _encodedAssetTransferArgs param passed to adapter call\\r\\n    function __decodeEncodedAssetTransferArgs(bytes memory _encodedAssetTransferArgs)\\r\\n        internal\\r\\n        pure\\r\\n        returns (\\r\\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType_,\\r\\n            address[] memory spendAssets_,\\r\\n            uint256[] memory spendAssetAmounts_,\\r\\n            address[] memory incomingAssets_\\r\\n        )\\r\\n    {\\r\\n        return\\r\\n            abi.decode(\\r\\n                _encodedAssetTransferArgs,\\r\\n                (IIntegrationManager.SpendAssetsHandleType, address[], uint256[], address[])\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to transfer full contract balances of assets to the specified VaultProxy\\r\\n    function __transferContractAssetBalancesToFund(address _vaultProxy, address[] memory _assets)\\r\\n        private\\r\\n    {\\r\\n        for (uint256 i = 0; i < _assets.length; i++) {\\r\\n            uint256 postCallAmount = ERC20(_assets[i]).balanceOf(address(this));\\r\\n            if (postCallAmount > 0) {\\r\\n                ERC20(_assets[i]).safeTransfer(_vaultProxy, postCallAmount);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    ///////////////////\\r\\n    // STATE GETTERS //\\r\\n    ///////////////////\\r\\n\\r\\n    /// @notice Gets the `INTEGRATION_MANAGER` variable\\r\\n    /// @return integrationManager_ The `INTEGRATION_MANAGER` variable value\\r\\n    function getIntegrationManager() external view returns (address integrationManager_) {\\r\\n        return INTEGRATION_MANAGER;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x599794e4474eb906a0e1ae6c5051aa6289047e548bb9f605171c248e7758a783\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/integration-manager/integrations/utils/IntegrationSelectors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title IntegrationSelectors Contract\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\n/// @notice Selectors for integration actions\\r\\n/// @dev Selectors are created from their signatures rather than hardcoded for easy verification\\r\\nabstract contract IntegrationSelectors {\\r\\n    // Tracked assets\\r\\n    bytes4 public constant ADD_TRACKED_ASSETS_SELECTOR = bytes4(\\r\\n        keccak256(\\\"addTrackedAssets(address,bytes,bytes)\\\")\\r\\n    );\\r\\n    bytes4 public constant REMOVE_TRACKED_ASSETS_SELECTOR = bytes4(\\r\\n        keccak256(\\\"removeTrackedAssets(address,bytes,bytes)\\\")\\r\\n    );\\r\\n\\r\\n    // Asset approval\\r\\n    bytes4 public constant APPROVE_ASSETS_SELECTOR = bytes4(\\r\\n        keccak256(\\\"approveAssets(address,bytes,bytes)\\\")\\r\\n    );\\r\\n\\r\\n    // Trading\\r\\n    bytes4 public constant TAKE_ORDER_SELECTOR = bytes4(\\r\\n        keccak256(\\\"takeOrder(address,bytes,bytes)\\\")\\r\\n    );\\r\\n\\r\\n    // Lending\\r\\n    bytes4 public constant LEND_SELECTOR = bytes4(keccak256(\\\"lend(address,bytes,bytes)\\\"));\\r\\n    bytes4 public constant REDEEM_SELECTOR = bytes4(keccak256(\\\"redeem(address,bytes,bytes)\\\"));\\r\\n\\r\\n    // Staking\\r\\n    bytes4 public constant STAKE_SELECTOR = bytes4(keccak256(\\\"stake(address,bytes,bytes)\\\"));\\r\\n    bytes4 public constant UNSTAKE_SELECTOR = bytes4(keccak256(\\\"unstake(address,bytes,bytes)\\\"));\\r\\n\\r\\n    // Rewards\\r\\n    bytes4 public constant CLAIM_REWARDS_SELECTOR = bytes4(\\r\\n        keccak256(\\\"claimRewards(address,bytes,bytes)\\\")\\r\\n    );\\r\\n\\r\\n    // Combined\\r\\n    bytes4 public constant CLAIM_REWARDS_AND_REINVEST_SELECTOR = bytes4(\\r\\n        keccak256(\\\"claimRewardsAndReinvest(address,bytes,bytes)\\\")\\r\\n    );\\r\\n    bytes4 public constant CLAIM_REWARDS_AND_SWAP_SELECTOR = bytes4(\\r\\n        keccak256(\\\"claimRewardsAndSwap(address,bytes,bytes)\\\")\\r\\n    );\\r\\n    bytes4 public constant LEND_AND_STAKE_SELECTOR = bytes4(\\r\\n        keccak256(\\\"lendAndStake(address,bytes,bytes)\\\")\\r\\n    );\\r\\n    bytes4 public constant UNSTAKE_AND_REDEEM_SELECTOR = bytes4(\\r\\n        keccak256(\\\"unstakeAndRedeem(address,bytes,bytes)\\\")\\r\\n    );\\r\\n}\\r\\n\",\"keccak256\":\"0x95effa25980655a5ce2e211ecc466bbed3509da2f88708287c372faa5b93030e\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/utils/FundDeployerOwnerMixin.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"../../core/fund-deployer/IFundDeployer.sol\\\";\\r\\n\\r\\n/// @title FundDeployerOwnerMixin Contract\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\n/// @notice A mixin contract that defers ownership to the owner of FundDeployer\\r\\nabstract contract FundDeployerOwnerMixin {\\r\\n    address internal immutable FUND_DEPLOYER;\\r\\n\\r\\n    modifier onlyFundDeployerOwner() {\\r\\n        require(\\r\\n            msg.sender == getOwner(),\\r\\n            \\\"onlyFundDeployerOwner: Only the FundDeployer owner can call this function\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(address _fundDeployer) public {\\r\\n        FUND_DEPLOYER = _fundDeployer;\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the owner of this contract\\r\\n    /// @return owner_ The owner\\r\\n    /// @dev Ownership is deferred to the owner of the FundDeployer contract\\r\\n    function getOwner() public view returns (address owner_) {\\r\\n        return IFundDeployer(FUND_DEPLOYER).getOwner();\\r\\n    }\\r\\n\\r\\n    ///////////////////\\r\\n    // STATE GETTERS //\\r\\n    ///////////////////\\r\\n\\r\\n    /// @notice Gets the `FUND_DEPLOYER` variable\\r\\n    /// @return fundDeployer_ The `FUND_DEPLOYER` variable value\\r\\n    function getFundDeployer() external view returns (address fundDeployer_) {\\r\\n        return FUND_DEPLOYER;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf6af8390b7e3ac7579250ce5aebe0faafeeb58e60ead667e002b9286dfd160e5\",\"license\":\"GPL-3.0\"},\"contracts/release/infrastructure/price-feeds/derivatives/IDerivativePriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title IDerivativePriceFeed Interface\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\n/// @notice Simple interface for derivative price source oracle implementations\\r\\ninterface IDerivativePriceFeed {\\r\\n    function calcUnderlyingValues(address, uint256)\\r\\n        external\\r\\n        returns (address[] memory, uint256[] memory);\\r\\n\\r\\n    function isSupportedAsset(address) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x577c4605a159c1083ef8d823d3b18896c321fd712071360ae235e22bf207cad0\",\"license\":\"GPL-3.0\"},\"contracts/release/infrastructure/price-feeds/derivatives/feeds/SynthetixPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"../../../../extensions/utils/FundDeployerOwnerMixin.sol\\\";\\r\\nimport \\\"../../../../interfaces/ISynthetix.sol\\\";\\r\\nimport \\\"../../../../interfaces/ISynthetixAddressResolver.sol\\\";\\r\\nimport \\\"../../../../interfaces/ISynthetixExchangeRates.sol\\\";\\r\\nimport \\\"../../../../interfaces/ISynthetixProxyERC20.sol\\\";\\r\\nimport \\\"../../../../interfaces/ISynthetixSynth.sol\\\";\\r\\nimport \\\"../IDerivativePriceFeed.sol\\\";\\r\\n\\r\\n/// @title SynthetixPriceFeed Contract\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\n/// @notice A price feed that uses Synthetix oracles as price sources\\r\\ncontract SynthetixPriceFeed is IDerivativePriceFeed, FundDeployerOwnerMixin {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    event SynthAdded(address indexed synth, bytes32 currencyKey);\\r\\n\\r\\n    event SynthCurrencyKeyUpdated(\\r\\n        address indexed synth,\\r\\n        bytes32 prevCurrencyKey,\\r\\n        bytes32 nextCurrencyKey\\r\\n    );\\r\\n\\r\\n    uint256 private constant SYNTH_UNIT = 10**18;\\r\\n    address private immutable ADDRESS_RESOLVER;\\r\\n    address private immutable SUSD;\\r\\n\\r\\n    mapping(address => bytes32) private synthToCurrencyKey;\\r\\n\\r\\n    constructor(\\r\\n        address _fundDeployer,\\r\\n        address _addressResolver,\\r\\n        address _sUSD,\\r\\n        address[] memory _synths\\r\\n    ) public FundDeployerOwnerMixin(_fundDeployer) {\\r\\n        ADDRESS_RESOLVER = _addressResolver;\\r\\n        SUSD = _sUSD;\\r\\n\\r\\n        if (_sUSD != address(0)) {\\r\\n            address[] memory sUSDSynths = new address[](1);\\r\\n            sUSDSynths[0] = _sUSD;\\r\\n            __addSynths(sUSDSynths);\\r\\n        }\\r\\n        __addSynths(_synths);\\r\\n    }\\r\\n\\r\\n    /// @notice Converts a given amount of a derivative to its underlying asset values\\r\\n    /// @param _derivative The derivative to convert\\r\\n    /// @param _derivativeAmount The amount of the derivative to convert\\r\\n    /// @return underlyings_ The underlying assets for the _derivative\\r\\n    /// @return underlyingAmounts_ The amount of each underlying asset for the equivalent derivative amount\\r\\n    function calcUnderlyingValues(address _derivative, uint256 _derivativeAmount)\\r\\n        external\\r\\n        override\\r\\n        returns (address[] memory underlyings_, uint256[] memory underlyingAmounts_)\\r\\n    {\\r\\n        underlyings_ = new address[](1);\\r\\n        underlyings_[0] = SUSD;\\r\\n        underlyingAmounts_ = new uint256[](1);\\r\\n\\r\\n        bytes32 currencyKey = getCurrencyKeyForSynth(_derivative);\\r\\n        require(currencyKey != 0, \\\"calcUnderlyingValues: _derivative is not supported\\\");\\r\\n\\r\\n        address exchangeRates = ISynthetixAddressResolver(ADDRESS_RESOLVER).requireAndGetAddress(\\r\\n            \\\"ExchangeRates\\\",\\r\\n            \\\"calcUnderlyingValues: Missing ExchangeRates\\\"\\r\\n        );\\r\\n\\r\\n        (uint256 rate, bool isInvalid) = ISynthetixExchangeRates(exchangeRates).rateAndInvalid(\\r\\n            currencyKey\\r\\n        );\\r\\n        require(!isInvalid, \\\"calcUnderlyingValues: _derivative rate is not valid\\\");\\r\\n\\r\\n        underlyingAmounts_[0] = _derivativeAmount.mul(rate).div(SYNTH_UNIT);\\r\\n\\r\\n        return (underlyings_, underlyingAmounts_);\\r\\n    }\\r\\n\\r\\n    /// @notice Checks whether an asset is a supported primitive of the price feed\\r\\n    /// @param _asset The asset to check\\r\\n    /// @return isSupported_ True if the asset is a supported primitive\\r\\n    function isSupportedAsset(address _asset) public view override returns (bool isSupported_) {\\r\\n        return getCurrencyKeyForSynth(_asset) != 0;\\r\\n    }\\r\\n\\r\\n    /////////////////////\\r\\n    // SYNTHS REGISTRY //\\r\\n    /////////////////////\\r\\n\\r\\n    /// @notice Adds Synths to the price feed\\r\\n    /// @param _synths Synths to add\\r\\n    function addSynths(address[] calldata _synths) external onlyFundDeployerOwner {\\r\\n        require(_synths.length > 0, \\\"addSynths: Empty _synths\\\");\\r\\n\\r\\n        __addSynths(_synths);\\r\\n    }\\r\\n\\r\\n    /// @notice Updates the cached currencyKey value for specified Synths\\r\\n    /// @param _synths Synths to update\\r\\n    /// @dev Anybody can call this function\\r\\n    function updateSynthCurrencyKeys(address[] calldata _synths) external {\\r\\n        require(_synths.length > 0, \\\"updateSynthCurrencyKeys: Empty _synths\\\");\\r\\n\\r\\n        for (uint256 i; i < _synths.length; i++) {\\r\\n            bytes32 prevCurrencyKey = synthToCurrencyKey[_synths[i]];\\r\\n            require(prevCurrencyKey != 0, \\\"updateSynthCurrencyKeys: Synth not set\\\");\\r\\n\\r\\n            bytes32 nextCurrencyKey = __getCurrencyKey(_synths[i]);\\r\\n            require(\\r\\n                nextCurrencyKey != prevCurrencyKey,\\r\\n                \\\"updateSynthCurrencyKeys: Synth has correct currencyKey\\\"\\r\\n            );\\r\\n\\r\\n            synthToCurrencyKey[_synths[i]] = nextCurrencyKey;\\r\\n\\r\\n            emit SynthCurrencyKeyUpdated(_synths[i], prevCurrencyKey, nextCurrencyKey);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to add Synths\\r\\n    function __addSynths(address[] memory _synths) private {\\r\\n        for (uint256 i; i < _synths.length; i++) {\\r\\n            require(synthToCurrencyKey[_synths[i]] == 0, \\\"__addSynths: Value already set\\\");\\r\\n\\r\\n            bytes32 currencyKey = __getCurrencyKey(_synths[i]);\\r\\n            require(currencyKey != 0, \\\"__addSynths: No currencyKey\\\");\\r\\n\\r\\n            synthToCurrencyKey[_synths[i]] = currencyKey;\\r\\n\\r\\n            emit SynthAdded(_synths[i], currencyKey);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to query a currencyKey from Synthetix\\r\\n    function __getCurrencyKey(address _synthProxy) private view returns (bytes32 currencyKey_) {\\r\\n        return ISynthetixSynth(ISynthetixProxyERC20(_synthProxy).target()).currencyKey();\\r\\n    }\\r\\n\\r\\n    ///////////////////\\r\\n    // STATE GETTERS //\\r\\n    ///////////////////\\r\\n\\r\\n    /// @notice Gets the `ADDRESS_RESOLVER` variable\\r\\n    /// @return addressResolver_ The `ADDRESS_RESOLVER` variable value\\r\\n    function getAddressResolver() external view returns (address) {\\r\\n        return ADDRESS_RESOLVER;\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the currencyKey for multiple given Synths\\r\\n    /// @return currencyKeys_ The currencyKey values\\r\\n    function getCurrencyKeysForSynths(address[] calldata _synths)\\r\\n        external\\r\\n        view\\r\\n        returns (bytes32[] memory currencyKeys_)\\r\\n    {\\r\\n        currencyKeys_ = new bytes32[](_synths.length);\\r\\n        for (uint256 i; i < _synths.length; i++) {\\r\\n            currencyKeys_[i] = synthToCurrencyKey[_synths[i]];\\r\\n        }\\r\\n\\r\\n        return currencyKeys_;\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the `SUSD` variable\\r\\n    /// @return susd_ The `SUSD` variable value\\r\\n    function getSUSD() external view returns (address susd_) {\\r\\n        return SUSD;\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the currencyKey for a given Synth\\r\\n    /// @return currencyKey_ The currencyKey value\\r\\n    function getCurrencyKeyForSynth(address _synth) public view returns (bytes32 currencyKey_) {\\r\\n        return synthToCurrencyKey[_synth];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf1e28f0f953ee69883261ceddbeb298de89d1a2363e1aff89939fe0b1d23c343\",\"license\":\"GPL-3.0\"},\"contracts/release/interfaces/ISynthetix.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title ISynthetix Interface\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\ninterface ISynthetix {\\r\\n    function exchangeOnBehalfWithTracking(\\r\\n        address,\\r\\n        bytes32,\\r\\n        uint256,\\r\\n        bytes32,\\r\\n        address,\\r\\n        bytes32\\r\\n    ) external returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xde69a616cd0326439e08d99c9f5d1e6f014082493d2a780be2ed8599d601eda3\",\"license\":\"GPL-3.0\"},\"contracts/release/interfaces/ISynthetixAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title ISynthetixAddressResolver Interface\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\ninterface ISynthetixAddressResolver {\\r\\n    function requireAndGetAddress(bytes32, string calldata) external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0x10232ee937df88ecdfda8c600fd2f689542c41616f3177e88e224d01921bdebd\",\"license\":\"GPL-3.0\"},\"contracts/release/interfaces/ISynthetixExchangeRates.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title ISynthetixExchangeRates Interface\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\ninterface ISynthetixExchangeRates {\\r\\n    function rateAndInvalid(bytes32) external view returns (uint256, bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x8436c9a0ac5931f3ef10501f78ce85a41505a34ae5f9af02730ccb1aa054a76c\",\"license\":\"GPL-3.0\"},\"contracts/release/interfaces/ISynthetixProxyERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title ISynthetixProxyERC20 Interface\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\ninterface ISynthetixProxyERC20 {\\r\\n    function target() external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0x2bc57c08164d8f706bf6b336990d5b307062c15e09830ecbac326d3274d00d0c\",\"license\":\"GPL-3.0\"},\"contracts/release/interfaces/ISynthetixSynth.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title ISynthetixSynth Interface\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\ninterface ISynthetixSynth {\\r\\n    function currencyKey() external view returns (bytes32);\\r\\n}\\r\\n\",\"keccak256\":\"0xb377be595624fbf242e48c1e2e7efde4acd7c363a673598eb30da93326defa56\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x61012060405234801561001157600080fd5b50604051610eee380380610eee833981810160405260a081101561003457600080fd5b508051602082015160408301516060808501516080958601516001600160601b031995831b861690965291811b841660a05290811b831660c0521b1660e0526101005260805160601c60a05160601c60c05160601c60e05160601c61010051610e136100db6000398061082552806109e55250806106665280610c295250806107a95280610c4d52508061080452806109315250806105235280610cdd5250610e136000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c806376cc7ac6116100b8578063b23228cf1161007c578063b23228cf146104e8578063e27a06b5146104f0578063e4d90478146104f8578063e7c4569014610500578063f075399414610508578063f7d882b51461051057610137565b806376cc7ac61461029f5780637998a1c414610453578063863e5ad0146104d05780638d064eae146104d857806390956d99146104e057610137565b80633ffc1591116100ff5780633ffc15911461026557806340da225d1461026d57806340f8cfcf1461027557806349f7c02d1461027d5780635ca62b3c1461029757610137565b806303e38a2b1461013c578063080456c11461020c578063131461c01461023157806315c8499e14610239578063257cb1a31461025d575b600080fd5b61020a6004803603606081101561015257600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561017c57600080fd5b82018360208201111561018e57600080fd5b803590602001918460018302840111600160201b831117156101af57600080fd5b919390929091602081019035600160201b8111156101cc57600080fd5b8201836020820111156101de57600080fd5b803590602001918460018302840111600160201b831117156101ff57600080fd5b509092509050610518565b005b6102146108e7565b604080516001600160e01b03199092168252519081900360200190f35b61021461090b565b61024161092f565b604080516001600160a01b039092168252519081900360200190f35b610214610953565b610214610977565b61021461099b565b6102146109bf565b6102856109e3565b60408051918252519081900360200190f35b610214610a07565b61031e600480360360408110156102b557600080fd5b6001600160e01b03198235169190810190604081016020820135600160201b8111156102e057600080fd5b8201836020820111156102f257600080fd5b803590602001918460018302840111600160201b8311171561031357600080fd5b509092509050610a2b565b6040518086600381111561032e57fe5b815260200180602001806020018060200180602001858103855289818151815260200191508051906020019060200280838360005b8381101561037b578181015183820152602001610363565b50505050905001858103845288818151815260200191508051906020019060200280838360005b838110156103ba5781810151838201526020016103a2565b50505050905001858103835287818151815260200191508051906020019060200280838360005b838110156103f95781810151838201526020016103e1565b50505050905001858103825286818151815260200191508051906020019060200280838360005b83811015610438578181015183820152602001610420565b50505050905001995050505050505050505060405180910390f35b61045b610be0565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561049557818101518382015260200161047d565b50505050905090810190601f1680156104c25780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610214610c03565b610241610c27565b610241610c4b565b610214610c6f565b610214610c93565b610214610cb7565b610241610cdb565b610214610cff565b610214610d23565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461057f5760405162461bcd60e51b8152600401808060200182810382526032815260200180610dac6032913960400191505060405180910390fd5b60008060006105c387878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610d4792505050565b6040805160028082526060808301845296995093975091955090925060208301908036833701905050905082816000815181106105fc57fe5b60200260200101906001600160a01b031690816001600160a01b031681525050838160018151811061062a57fe5b6001600160a01b03928316602091820292909201810191909152604051633c13fa7b60e11b8152600481018281528451602483015284516060947f00000000000000000000000000000000000000000000000000000000000000001693637827f4f6938793928392604490920191858101910280838360005b838110156106bb5781810151838201526020016106a3565b505050509050019250505060006040518083038186803b1580156106de57600080fd5b505afa1580156106f2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561071b57600080fd5b8101908080516040519392919084600160201b82111561073a57600080fd5b90830190602082018581111561074f57600080fd5b82518660208202830111600160201b8211171561076b57600080fd5b82525081516020918201928201910280838360005b83811015610798578181015183820152602001610780565b5050505090500160405250505090507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166391e56b688b836000815181106107e457fe5b602002602001015186856001815181106107fa57fe5b60200260200101517f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006040518763ffffffff1660e01b815260040180876001600160a01b03168152602001868152602001858152602001848152602001836001600160a01b031681526020018281526020019650505050505050602060405180830381600087803b1580156108af57600080fd5b505af11580156108c3573d6000803e3d6000fd5b505050506040513d60208110156108d957600080fd5b505050505050505050505050565b7f8334eb99be0145865eba9889fca2ee920288090caefff4cc776038e20ad9259a81565b7f29fa046e79524c3c5ac4c01df692c35e217802b2b13b21121b76cf0ef02b138c81565b7f000000000000000000000000000000000000000000000000000000000000000090565b7f099f75155f0e997bf83a7993a71d5e7e7540bd386fe1e84643a09ce6b412521981565b7ffa7dd04da627f433da73c4355ead9c75682a67a8fc84d3f6170ef0922f402d2481565b7fb9dfbaccbe5cd2a84fdcf1d15f23ef25d23086f5afbaa99516065ed4a5bbc7a381565b7ff658eb804cc1da8af5599b584aaf3d55407a3c721c42641a6a5270e963d782c381565b7f000000000000000000000000000000000000000000000000000000000000000090565b7fdfd5ee0f6067928bf85a7c4430811282840bc99332dda3dab462c02bf95b67cc81565b600060608080806001600160e01b031988166303e38a2b60e01b14610a815760405162461bcd60e51b8152600401808060200182810382526027815260200180610d856027913960400191505060405180910390fd5b600080600080610ac68b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610d4792505050565b6040805160018082528183019092529498509296509094509250602080830190803683370190505097508188600081518110610afe57fe5b6001600160a01b03929092166020928302919091018201526040805160018082528183019092529182810190803683370190505096508087600081518110610b4257fe5b6020908102919091010152604080516001808252818301909252908160200160208202803683370190505095508386600081518110610b7d57fe5b6001600160a01b03929092166020928302919091018201526040805160018082528183019092529182810190803683370190505094508285600081518110610bc157fe5b6020026020010181815250506000985050505050939792965093509350565b6040805180820190915260098152680a6b29ca8908aa892b60bb1b602082015290565b7f03e38a2bd7063d45c897edeafc330e71657502dd86434d3c37a489caf116af6981565b7f000000000000000000000000000000000000000000000000000000000000000090565b7f000000000000000000000000000000000000000000000000000000000000000090565b7f68e30677f607df46e87da13e15b637784cfa62374b653f35ab43d10361a2f83081565b7f848f3a590fb2f9795d1a275009c54c26c53833277c96b90e0ddd01753a1d590681565b7f3377e18acf9e83665eacd6af109261424fca32a298e2fc2e6095ba563fb8390e81565b7f000000000000000000000000000000000000000000000000000000000000000090565b7f1d51f49b5273d9ddbb643dc349fab8d36dbb470209c2ea71033bea49dd311c2781565b7fc29fa9dde84204c2908778afd0613d802d31cf046179b88f6d2b4a4e507ea2d581565b600080600080848060200190516080811015610d6257600080fd5b508051602082015160408301516060909301519198909750919550935091505056fe7061727365417373657473466f724d6574686f643a205f73656c6563746f7220696e76616c69644f6e6c792074686520496e746567726174696f6e4d616e616765722063616e2063616c6c20746869732066756e6374696f6ea26469706673582212208e54afc8f017369ef033b60849f7594708376c7bfd34283dafe0638f7f5795b864736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101375760003560e01c806376cc7ac6116100b8578063b23228cf1161007c578063b23228cf146104e8578063e27a06b5146104f0578063e4d90478146104f8578063e7c4569014610500578063f075399414610508578063f7d882b51461051057610137565b806376cc7ac61461029f5780637998a1c414610453578063863e5ad0146104d05780638d064eae146104d857806390956d99146104e057610137565b80633ffc1591116100ff5780633ffc15911461026557806340da225d1461026d57806340f8cfcf1461027557806349f7c02d1461027d5780635ca62b3c1461029757610137565b806303e38a2b1461013c578063080456c11461020c578063131461c01461023157806315c8499e14610239578063257cb1a31461025d575b600080fd5b61020a6004803603606081101561015257600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561017c57600080fd5b82018360208201111561018e57600080fd5b803590602001918460018302840111600160201b831117156101af57600080fd5b919390929091602081019035600160201b8111156101cc57600080fd5b8201836020820111156101de57600080fd5b803590602001918460018302840111600160201b831117156101ff57600080fd5b509092509050610518565b005b6102146108e7565b604080516001600160e01b03199092168252519081900360200190f35b61021461090b565b61024161092f565b604080516001600160a01b039092168252519081900360200190f35b610214610953565b610214610977565b61021461099b565b6102146109bf565b6102856109e3565b60408051918252519081900360200190f35b610214610a07565b61031e600480360360408110156102b557600080fd5b6001600160e01b03198235169190810190604081016020820135600160201b8111156102e057600080fd5b8201836020820111156102f257600080fd5b803590602001918460018302840111600160201b8311171561031357600080fd5b509092509050610a2b565b6040518086600381111561032e57fe5b815260200180602001806020018060200180602001858103855289818151815260200191508051906020019060200280838360005b8381101561037b578181015183820152602001610363565b50505050905001858103845288818151815260200191508051906020019060200280838360005b838110156103ba5781810151838201526020016103a2565b50505050905001858103835287818151815260200191508051906020019060200280838360005b838110156103f95781810151838201526020016103e1565b50505050905001858103825286818151815260200191508051906020019060200280838360005b83811015610438578181015183820152602001610420565b50505050905001995050505050505050505060405180910390f35b61045b610be0565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561049557818101518382015260200161047d565b50505050905090810190601f1680156104c25780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610214610c03565b610241610c27565b610241610c4b565b610214610c6f565b610214610c93565b610214610cb7565b610241610cdb565b610214610cff565b610214610d23565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461057f5760405162461bcd60e51b8152600401808060200182810382526032815260200180610dac6032913960400191505060405180910390fd5b60008060006105c387878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610d4792505050565b6040805160028082526060808301845296995093975091955090925060208301908036833701905050905082816000815181106105fc57fe5b60200260200101906001600160a01b031690816001600160a01b031681525050838160018151811061062a57fe5b6001600160a01b03928316602091820292909201810191909152604051633c13fa7b60e11b8152600481018281528451602483015284516060947f00000000000000000000000000000000000000000000000000000000000000001693637827f4f6938793928392604490920191858101910280838360005b838110156106bb5781810151838201526020016106a3565b505050509050019250505060006040518083038186803b1580156106de57600080fd5b505afa1580156106f2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561071b57600080fd5b8101908080516040519392919084600160201b82111561073a57600080fd5b90830190602082018581111561074f57600080fd5b82518660208202830111600160201b8211171561076b57600080fd5b82525081516020918201928201910280838360005b83811015610798578181015183820152602001610780565b5050505090500160405250505090507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166391e56b688b836000815181106107e457fe5b602002602001015186856001815181106107fa57fe5b60200260200101517f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006040518763ffffffff1660e01b815260040180876001600160a01b03168152602001868152602001858152602001848152602001836001600160a01b031681526020018281526020019650505050505050602060405180830381600087803b1580156108af57600080fd5b505af11580156108c3573d6000803e3d6000fd5b505050506040513d60208110156108d957600080fd5b505050505050505050505050565b7f8334eb99be0145865eba9889fca2ee920288090caefff4cc776038e20ad9259a81565b7f29fa046e79524c3c5ac4c01df692c35e217802b2b13b21121b76cf0ef02b138c81565b7f000000000000000000000000000000000000000000000000000000000000000090565b7f099f75155f0e997bf83a7993a71d5e7e7540bd386fe1e84643a09ce6b412521981565b7ffa7dd04da627f433da73c4355ead9c75682a67a8fc84d3f6170ef0922f402d2481565b7fb9dfbaccbe5cd2a84fdcf1d15f23ef25d23086f5afbaa99516065ed4a5bbc7a381565b7ff658eb804cc1da8af5599b584aaf3d55407a3c721c42641a6a5270e963d782c381565b7f000000000000000000000000000000000000000000000000000000000000000090565b7fdfd5ee0f6067928bf85a7c4430811282840bc99332dda3dab462c02bf95b67cc81565b600060608080806001600160e01b031988166303e38a2b60e01b14610a815760405162461bcd60e51b8152600401808060200182810382526027815260200180610d856027913960400191505060405180910390fd5b600080600080610ac68b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610d4792505050565b6040805160018082528183019092529498509296509094509250602080830190803683370190505097508188600081518110610afe57fe5b6001600160a01b03929092166020928302919091018201526040805160018082528183019092529182810190803683370190505096508087600081518110610b4257fe5b6020908102919091010152604080516001808252818301909252908160200160208202803683370190505095508386600081518110610b7d57fe5b6001600160a01b03929092166020928302919091018201526040805160018082528183019092529182810190803683370190505094508285600081518110610bc157fe5b6020026020010181815250506000985050505050939792965093509350565b6040805180820190915260098152680a6b29ca8908aa892b60bb1b602082015290565b7f03e38a2bd7063d45c897edeafc330e71657502dd86434d3c37a489caf116af6981565b7f000000000000000000000000000000000000000000000000000000000000000090565b7f000000000000000000000000000000000000000000000000000000000000000090565b7f68e30677f607df46e87da13e15b637784cfa62374b653f35ab43d10361a2f83081565b7f848f3a590fb2f9795d1a275009c54c26c53833277c96b90e0ddd01753a1d590681565b7f3377e18acf9e83665eacd6af109261424fca32a298e2fc2e6095ba563fb8390e81565b7f000000000000000000000000000000000000000000000000000000000000000090565b7f1d51f49b5273d9ddbb643dc349fab8d36dbb470209c2ea71033bea49dd311c2781565b7fc29fa9dde84204c2908778afd0613d802d31cf046179b88f6d2b4a4e507ea2d581565b600080600080848060200190516080811015610d6257600080fd5b508051602082015160408301516060909301519198909750919550935091505056fe7061727365417373657473466f724d6574686f643a205f73656c6563746f7220696e76616c69644f6e6c792074686520496e746567726174696f6e4d616e616765722063616e2063616c6c20746869732066756e6374696f6ea26469706673582212208e54afc8f017369ef033b60849f7594708376c7bfd34283dafe0638f7f5795b864736f6c634300060c0033",
  "devdoc": {
    "author": "Enzyme Council <security@enzyme.finance>",
    "kind": "dev",
    "methods": {
      "getIntegrationManager()": {
        "returns": {
          "integrationManager_": "The `INTEGRATION_MANAGER` variable value"
        }
      },
      "getOriginator()": {
        "returns": {
          "originator_": "The `ORIGINATOR` variable value"
        }
      },
      "getSynthetix()": {
        "returns": {
          "synthetix_": "The `SYNTHETIX` variable value"
        }
      },
      "getSynthetixPriceFeed()": {
        "returns": {
          "synthetixPriceFeed_": "The `SYNTHETIX_PRICE_FEED` variable value"
        }
      },
      "getTrackingCode()": {
        "returns": {
          "trackingCode_": "The `TRACKING_CODE` variable value"
        }
      },
      "identifier()": {
        "returns": {
          "identifier_": "An identifier string"
        }
      },
      "parseAssetsForMethod(bytes4,bytes)": {
        "params": {
          "_encodedCallArgs": "The encoded parameters for the callOnIntegration",
          "_selector": "The function selector for the callOnIntegration"
        },
        "returns": {
          "incomingAssets_": "The assets to receive in the call",
          "minIncomingAssetAmounts_": "The min asset amounts to receive in the call",
          "spendAssetAmounts_": "The max asset amounts to spend in the call",
          "spendAssetsHandleType_": "A type that dictates how to handle granting the adapter access to spend assets (`None` by default)",
          "spendAssets_": "The assets to spend in the call"
        }
      },
      "takeOrder(address,bytes,bytes)": {
        "params": {
          "_encodedCallArgs": "Encoded order parameters",
          "_vaultProxy": "The VaultProxy of the calling fund"
        }
      }
    },
    "title": "SynthetixAdapter Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getIntegrationManager()": {
        "notice": "Gets the `INTEGRATION_MANAGER` variable"
      },
      "getOriginator()": {
        "notice": "Gets the `ORIGINATOR` variable"
      },
      "getSynthetix()": {
        "notice": "Gets the `SYNTHETIX` variable"
      },
      "getSynthetixPriceFeed()": {
        "notice": "Gets the `SYNTHETIX_PRICE_FEED` variable"
      },
      "getTrackingCode()": {
        "notice": "Gets the `TRACKING_CODE` variable"
      },
      "identifier()": {
        "notice": "Provides a constant string identifier for an adapter"
      },
      "parseAssetsForMethod(bytes4,bytes)": {
        "notice": "Parses the expected assets to receive from a call on integration"
      },
      "takeOrder(address,bytes,bytes)": {
        "notice": "Trades assets on Synthetix"
      }
    },
    "notice": "Adapter for interacting with Synthetix",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}