{
  "address": "0x654D14511f12cEB9252b8F0BdDDE98968f80EfF2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fundDeployer",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "comptrollerProxy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "payee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sharesDue",
          "type": "uint256"
        }
      ],
      "name": "AllSharesOutstandingForcePaidForFund",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "fee",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "identifier",
          "type": "string"
        }
      ],
      "name": "FeeDeregistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "comptrollerProxy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "fee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "settingsData",
          "type": "bytes"
        }
      ],
      "name": "FeeEnabledForFund",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "fee",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "identifier",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "enum IFeeManager.FeeHook[]",
          "name": "implementedHooksForSettle",
          "type": "uint8[]"
        },
        {
          "indexed": false,
          "internalType": "enum IFeeManager.FeeHook[]",
          "name": "implementedHooksForUpdate",
          "type": "uint8[]"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "usesGavOnSettle",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "usesGavOnUpdate",
          "type": "bool"
        }
      ],
      "name": "FeeRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "comptrollerProxy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "fee",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "enum IFeeManager.SettlementType",
          "name": "settlementType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "payee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sharesDue",
          "type": "uint256"
        }
      ],
      "name": "FeeSettledForFund",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "comptrollerProxy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "prevFeesRecipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "nextFeesRecipient",
          "type": "address"
        }
      ],
      "name": "FeesRecipientSetForFund",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "comptrollerProxy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "fee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sharesDue",
          "type": "uint256"
        }
      ],
      "name": "SharesOutstandingPaidForFund",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "name": "activateForFund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deactivateForFund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_fees",
          "type": "address[]"
        }
      ],
      "name": "deregisterFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fee",
          "type": "address"
        },
        {
          "internalType": "enum IFeeManager.FeeHook",
          "name": "_hook",
          "type": "uint8"
        }
      ],
      "name": "feeSettlesOnHook",
      "outputs": [
        {
          "internalType": "bool",
          "name": "settlesOnHook_",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fee",
          "type": "address"
        },
        {
          "internalType": "enum IFeeManager.FeeHook",
          "name": "_hook",
          "type": "uint8"
        }
      ],
      "name": "feeUpdatesOnHook",
      "outputs": [
        {
          "internalType": "bool",
          "name": "updatesOnHook_",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fee",
          "type": "address"
        }
      ],
      "name": "feeUsesGavOnSettle",
      "outputs": [
        {
          "internalType": "bool",
          "name": "usesGav_",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fee",
          "type": "address"
        }
      ],
      "name": "feeUsesGavOnUpdate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "usesGav_",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_comptrollerProxy",
          "type": "address"
        }
      ],
      "name": "getEnabledFeesForFund",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "enabledFees_",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_comptrollerProxy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_fee",
          "type": "address"
        }
      ],
      "name": "getFeeSharesOutstandingForFund",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "sharesOutstanding_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFundDeployer",
      "outputs": [
        {
          "internalType": "address",
          "name": "fundDeployer_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRegisteredFees",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "registeredFees_",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_comptrollerProxy",
          "type": "address"
        }
      ],
      "name": "getVaultProxyForFund",
      "outputs": [
        {
          "internalType": "address",
          "name": "vaultProxy_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IFeeManager.FeeHook",
          "name": "_hook",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "_settlementData",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_gav",
          "type": "uint256"
        }
      ],
      "name": "invokeHook",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fee",
          "type": "address"
        }
      ],
      "name": "isRegisteredFee",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isRegisteredFee_",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_actionId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_callArgs",
          "type": "bytes"
        }
      ],
      "name": "receiveCallFromComptroller",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_fees",
          "type": "address[]"
        }
      ],
      "name": "registerFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_configData",
          "type": "bytes"
        }
      ],
      "name": "setConfigForFund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8a004e6e5882b3750339c1b43619311048f0b1e8013f49a5a190a003d5b613f0",
  "receipt": {
    "to": null,
    "from": "0x5DB342FB039C1c85bec5fE89Af6734621f421D84",
    "contractAddress": "0x654D14511f12cEB9252b8F0BdDDE98968f80EfF2",
    "transactionIndex": 144,
    "gasUsed": "2865947",
    "logsBloom": "0x
    "blockHash": "0x478b1e1973e5f411bd2c99a451cad3f0d1d594136809e70b2be7935818cf4778",
    "transactionHash": "0x8a004e6e5882b3750339c1b43619311048f0b1e8013f49a5a190a003d5b613f0",
    "logs": [],
    "blockNumber": 13430368,
    "cumulativeGasUsed": "23199162",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x734ceE454CE959387170bfc301e3C77fF8305383"
  ],
  "solcInputHash": "d9ca3c6c6b3274b287f1d69a6e9ab10d",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fundDeployer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"comptrollerProxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharesDue\",\"type\":\"uint256\"}],\"name\":\"AllSharesOutstandingForcePaidForFund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"identifier\",\"type\":\"string\"}],\"name\":\"FeeDeregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"comptrollerProxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"settingsData\",\"type\":\"bytes\"}],\"name\":\"FeeEnabledForFund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"identifier\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"enum IFeeManager.FeeHook[]\",\"name\":\"implementedHooksForSettle\",\"type\":\"uint8[]\"},{\"indexed\":false,\"internalType\":\"enum IFeeManager.FeeHook[]\",\"name\":\"implementedHooksForUpdate\",\"type\":\"uint8[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"usesGavOnSettle\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"usesGavOnUpdate\",\"type\":\"bool\"}],\"name\":\"FeeRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"comptrollerProxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"enum IFeeManager.SettlementType\",\"name\":\"settlementType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharesDue\",\"type\":\"uint256\"}],\"name\":\"FeeSettledForFund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"comptrollerProxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prevFeesRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nextFeesRecipient\",\"type\":\"address\"}],\"name\":\"FeesRecipientSetForFund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"comptrollerProxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharesDue\",\"type\":\"uint256\"}],\"name\":\"SharesOutstandingPaidForFund\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"activateForFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deactivateForFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_fees\",\"type\":\"address[]\"}],\"name\":\"deregisterFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fee\",\"type\":\"address\"},{\"internalType\":\"enum IFeeManager.FeeHook\",\"name\":\"_hook\",\"type\":\"uint8\"}],\"name\":\"feeSettlesOnHook\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"settlesOnHook_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fee\",\"type\":\"address\"},{\"internalType\":\"enum IFeeManager.FeeHook\",\"name\":\"_hook\",\"type\":\"uint8\"}],\"name\":\"feeUpdatesOnHook\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"updatesOnHook_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fee\",\"type\":\"address\"}],\"name\":\"feeUsesGavOnSettle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"usesGav_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fee\",\"type\":\"address\"}],\"name\":\"feeUsesGavOnUpdate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"usesGav_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_comptrollerProxy\",\"type\":\"address\"}],\"name\":\"getEnabledFeesForFund\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"enabledFees_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_comptrollerProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fee\",\"type\":\"address\"}],\"name\":\"getFeeSharesOutstandingForFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sharesOutstanding_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFundDeployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"fundDeployer_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRegisteredFees\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"registeredFees_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_comptrollerProxy\",\"type\":\"address\"}],\"name\":\"getVaultProxyForFund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"vaultProxy_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IFeeManager.FeeHook\",\"name\":\"_hook\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_settlementData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_gav\",\"type\":\"uint256\"}],\"name\":\"invokeHook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fee\",\"type\":\"address\"}],\"name\":\"isRegisteredFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isRegisteredFee_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_actionId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_callArgs\",\"type\":\"bytes\"}],\"name\":\"receiveCallFromComptroller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_fees\",\"type\":\"address[]\"}],\"name\":\"registerFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_configData\",\"type\":\"bytes\"}],\"name\":\"setConfigForFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Enzyme Council <security@enzyme.finance>\",\"kind\":\"dev\",\"methods\":{\"deactivateForFund()\":{\"details\":\"msg.sender is validated during __invokeHook()\"},\"deregisterFees(address[])\":{\"params\":{\"_fees\":\"Addresses of fees to be deregistered\"}},\"feeSettlesOnHook(address,uint8)\":{\"params\":{\"_fee\":\"The address of the fee to check\",\"_hook\":\"The FeeHook to check\"},\"returns\":{\"settlesOnHook_\":\"True if the fee settles on the given hook\"}},\"feeUpdatesOnHook(address,uint8)\":{\"params\":{\"_fee\":\"The address of the fee to check\",\"_hook\":\"The FeeHook to check\"},\"returns\":{\"updatesOnHook_\":\"True if the fee updates on the given hook\"}},\"feeUsesGavOnSettle(address)\":{\"params\":{\"_fee\":\"The address of the fee to check\"},\"returns\":{\"usesGav_\":\"True if the fee uses GAV during settle() implementation\"}},\"feeUsesGavOnUpdate(address)\":{\"params\":{\"_fee\":\"The address of the fee to check\"},\"returns\":{\"usesGav_\":\"True if the fee uses GAV during update() implementation\"}},\"getEnabledFeesForFund(address)\":{\"params\":{\"_comptrollerProxy\":\"The ComptrollerProxy of the fund\"},\"returns\":{\"enabledFees_\":\"An array of enabled fee addresses\"}},\"getFeeSharesOutstandingForFund(address,address)\":{\"params\":{\"_comptrollerProxy\":\"The ComptrollerProxy of the fund\",\"_fee\":\"The fee address\"},\"returns\":{\"sharesOutstanding_\":\"The amount of shares outstanding\"}},\"getFundDeployer()\":{\"returns\":{\"fundDeployer_\":\"The `FUND_DEPLOYER` variable value\"}},\"getOwner()\":{\"details\":\"Ownership is deferred to the owner of the FundDeployer contract\",\"returns\":{\"owner_\":\"The owner\"}},\"getRegisteredFees()\":{\"returns\":{\"registeredFees_\":\"A list of all registered fee addresses\"}},\"getVaultProxyForFund(address)\":{\"params\":{\"_comptrollerProxy\":\"The ComptrollerProxy of the fund\"},\"returns\":{\"vaultProxy_\":\"The VaultProxy of the fund\"}},\"invokeHook(uint8,bytes,uint256)\":{\"params\":{\"_gav\":\"The GAV for a fund if known in the invocating code, otherwise 0\",\"_hook\":\"The FeeHook to invoke\",\"_settlementData\":\"The encoded settlement parameters specific to the FeeHook\"}},\"isRegisteredFee(address)\":{\"params\":{\"_fee\":\"The address of the fee to check\"},\"returns\":{\"isRegisteredFee_\":\"True if the fee is registered\"}},\"receiveCallFromComptroller(address,uint256,bytes)\":{\"details\":\"This is the only way to call a function on this contract that updates VaultProxy state. For both of these actions, any caller is allowed, so we don't use the caller param.\",\"params\":{\"_actionId\":\"An ID representing the desired action\",\"_callArgs\":\"Encoded arguments specific to the _actionId\"}},\"registerFees(address[])\":{\"details\":\"Stores the hooks that a fee implements and whether each implementation uses GAV, which fronts the gas for calls to check if a hook is implemented, and guarantees that these hook implementation return values do not change post-registration.\",\"params\":{\"_fees\":\"Addresses of fees to be registered\"}},\"setConfigForFund(bytes)\":{\"details\":\"Caller is expected to be a valid ComptrollerProxy, but there isn't a need to validate. The order of `fees` determines the order in which fees of the same FeeHook will be applied. It is recommended to run ManagementFee before PerformanceFee in order to achieve precise PerformanceFee calcs.\",\"params\":{\"_configData\":\"Encoded config data\"}}},\"title\":\"FeeManager Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"activateForFund(bool)\":{\"notice\":\"Activate already-configured fees for use in the calling fund\"},\"deactivateForFund()\":{\"notice\":\"Deactivate fees for a fund\"},\"deregisterFees(address[])\":{\"notice\":\"Remove fees from the list of registered fees\"},\"feeSettlesOnHook(address,uint8)\":{\"notice\":\"Checks if a fee implements settle() on a particular hook\"},\"feeUpdatesOnHook(address,uint8)\":{\"notice\":\"Checks if a fee implements update() on a particular hook\"},\"feeUsesGavOnSettle(address)\":{\"notice\":\"Checks if a fee uses GAV in its settle() implementation\"},\"feeUsesGavOnUpdate(address)\":{\"notice\":\"Checks if a fee uses GAV in its update() implementation\"},\"getEnabledFeesForFund(address)\":{\"notice\":\"Get a list of enabled fees for a given fund\"},\"getFeeSharesOutstandingForFund(address,address)\":{\"notice\":\"Get the amount of shares outstanding for a particular fee for a fund\"},\"getFundDeployer()\":{\"notice\":\"Gets the `FUND_DEPLOYER` variable\"},\"getOwner()\":{\"notice\":\"Gets the owner of this contract\"},\"getRegisteredFees()\":{\"notice\":\"Get all registered fees\"},\"getVaultProxyForFund(address)\":{\"notice\":\"Gets the verified VaultProxy for a given ComptrollerProxy\"},\"invokeHook(uint8,bytes,uint256)\":{\"notice\":\"Allows all fees for a particular FeeHook to implement settle() and update() logic\"},\"isRegisteredFee(address)\":{\"notice\":\"Check whether a fee is registered\"},\"receiveCallFromComptroller(address,uint256,bytes)\":{\"notice\":\"Receives a dispatched `callOnExtension` from a fund's ComptrollerProxy\"},\"registerFees(address[])\":{\"notice\":\"Add fees to the list of registered fees\"},\"setConfigForFund(bytes)\":{\"notice\":\"Enable and configure fees for use in the calling fund\"}},\"notice\":\"Manages fees for funds\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/release/extensions/fee-manager/FeeManager.sol\":\"FeeManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x1562cd9922fbf739edfb979f506809e2743789cbde3177515542161c3d04b164\",\"license\":\"MIT\"},\"contracts/persistent/utils/IMigratableVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title IMigratableVault Interface\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\n/// @dev DO NOT EDIT CONTRACT\\r\\ninterface IMigratableVault {\\r\\n    function canMigrate(address _who) external view returns (bool canMigrate_);\\r\\n\\r\\n    function init(\\r\\n        address _owner,\\r\\n        address _accessor,\\r\\n        string calldata _fundName\\r\\n    ) external;\\r\\n\\r\\n    function setAccessor(address _nextAccessor) external;\\r\\n\\r\\n    function setVaultLib(address _nextVaultLib) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xe57f17e0b9eaaf0090fb0f9039e0dc60d184a05b1a6b02491787c506b7a4a9db\",\"license\":\"GPL-3.0\"},\"contracts/release/core/fund-deployer/IFundDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title IFundDeployer Interface\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\ninterface IFundDeployer {\\r\\n    enum ReleaseStatus {PreLaunch, Live, Paused}\\r\\n\\r\\n    function getOwner() external view returns (address);\\r\\n\\r\\n    function getReleaseStatus() external view returns (ReleaseStatus);\\r\\n\\r\\n    function isRegisteredVaultCall(address, bytes4) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x3c8c95a5d0e03da6a5f0278e5fbe40bf4f2d274afc2d52815fefaba847931bf9\",\"license\":\"GPL-3.0\"},\"contracts/release/core/fund/comptroller/IComptroller.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title IComptroller Interface\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\ninterface IComptroller {\\r\\n    enum VaultAction {\\r\\n        None,\\r\\n        BurnShares,\\r\\n        MintShares,\\r\\n        TransferShares,\\r\\n        ApproveAssetSpender,\\r\\n        WithdrawAssetTo,\\r\\n        AddTrackedAsset,\\r\\n        RemoveTrackedAsset\\r\\n    }\\r\\n\\r\\n    function activate(address, bool) external;\\r\\n\\r\\n    function calcGav(bool) external returns (uint256, bool);\\r\\n\\r\\n    function calcGrossShareValue(bool) external returns (uint256, bool);\\r\\n\\r\\n    function callOnExtension(\\r\\n        address,\\r\\n        uint256,\\r\\n        bytes calldata\\r\\n    ) external;\\r\\n\\r\\n    function configureExtensions(bytes calldata, bytes calldata) external;\\r\\n\\r\\n    function destruct() external;\\r\\n\\r\\n    function getDenominationAsset() external view returns (address);\\r\\n\\r\\n    function getVaultProxy() external view returns (address);\\r\\n\\r\\n    function init(address, uint256) external;\\r\\n\\r\\n    function permissionedVaultAction(VaultAction, bytes calldata) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x642e5667ce4ca04063ceb1aff4137b3c6347b2efefdbff961c42c9c7b061f3aa\",\"license\":\"GPL-3.0\"},\"contracts/release/core/fund/vault/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"../../../../persistent/utils/IMigratableVault.sol\\\";\\r\\n\\r\\n/// @title IVault Interface\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\ninterface IVault is IMigratableVault {\\r\\n    function addTrackedAsset(address) external;\\r\\n\\r\\n    function approveAssetSpender(\\r\\n        address,\\r\\n        address,\\r\\n        uint256\\r\\n    ) external;\\r\\n\\r\\n    function burnShares(address, uint256) external;\\r\\n\\r\\n    function callOnContract(address, bytes calldata) external;\\r\\n\\r\\n    function getAccessor() external view returns (address);\\r\\n\\r\\n    function getOwner() external view returns (address);\\r\\n\\r\\n    function getTrackedAssets() external view returns (address[] memory);\\r\\n\\r\\n    function isTrackedAsset(address) external view returns (bool);\\r\\n\\r\\n    function mintShares(address, uint256) external;\\r\\n\\r\\n    function removeTrackedAsset(address) external;\\r\\n\\r\\n    function transferShares(\\r\\n        address,\\r\\n        address,\\r\\n        uint256\\r\\n    ) external;\\r\\n\\r\\n    function withdrawAssetTo(\\r\\n        address,\\r\\n        address,\\r\\n        uint256\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xd3e432ce41dbb0fc8ae5aa16ab0e053f889caaf803b01743f829e31f644dfb9b\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/IExtension.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title IExtension Interface\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\n/// @notice Interface for all extensions\\r\\ninterface IExtension {\\r\\n    function activateForFund(bool _isMigration) external;\\r\\n\\r\\n    function deactivateForFund() external;\\r\\n\\r\\n    function receiveCallFromComptroller(\\r\\n        address _comptrollerProxy,\\r\\n        uint256 _actionId,\\r\\n        bytes calldata _callArgs\\r\\n    ) external;\\r\\n\\r\\n    function setConfigForFund(bytes calldata _configData) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xadd1b5eaadff01af66e998c5df743c8489b0a944d8d9de861600e68541bab0d7\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/fee-manager/FeeManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\r\\nimport \\\"../../core/fund/comptroller/IComptroller.sol\\\";\\r\\nimport \\\"../../core/fund/vault/IVault.sol\\\";\\r\\nimport \\\"../../utils/AddressArrayLib.sol\\\";\\r\\nimport \\\"../utils/ExtensionBase.sol\\\";\\r\\nimport \\\"../utils/FundDeployerOwnerMixin.sol\\\";\\r\\nimport \\\"../utils/PermissionedVaultActionMixin.sol\\\";\\r\\nimport \\\"./IFee.sol\\\";\\r\\nimport \\\"./IFeeManager.sol\\\";\\r\\n\\r\\n/// @title FeeManager Contract\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\n/// @notice Manages fees for funds\\r\\ncontract FeeManager is\\r\\n    IFeeManager,\\r\\n    ExtensionBase,\\r\\n    FundDeployerOwnerMixin,\\r\\n    PermissionedVaultActionMixin\\r\\n{\\r\\n    using AddressArrayLib for address[];\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    event AllSharesOutstandingForcePaidForFund(\\r\\n        address indexed comptrollerProxy,\\r\\n        address payee,\\r\\n        uint256 sharesDue\\r\\n    );\\r\\n\\r\\n    event FeeDeregistered(address indexed fee, string indexed identifier);\\r\\n\\r\\n    event FeeEnabledForFund(\\r\\n        address indexed comptrollerProxy,\\r\\n        address indexed fee,\\r\\n        bytes settingsData\\r\\n    );\\r\\n\\r\\n    event FeeRegistered(\\r\\n        address indexed fee,\\r\\n        string indexed identifier,\\r\\n        FeeHook[] implementedHooksForSettle,\\r\\n        FeeHook[] implementedHooksForUpdate,\\r\\n        bool usesGavOnSettle,\\r\\n        bool usesGavOnUpdate\\r\\n    );\\r\\n\\r\\n    event FeeSettledForFund(\\r\\n        address indexed comptrollerProxy,\\r\\n        address indexed fee,\\r\\n        SettlementType indexed settlementType,\\r\\n        address payer,\\r\\n        address payee,\\r\\n        uint256 sharesDue\\r\\n    );\\r\\n\\r\\n    event SharesOutstandingPaidForFund(\\r\\n        address indexed comptrollerProxy,\\r\\n        address indexed fee,\\r\\n        uint256 sharesDue\\r\\n    );\\r\\n\\r\\n    event FeesRecipientSetForFund(\\r\\n        address indexed comptrollerProxy,\\r\\n        address prevFeesRecipient,\\r\\n        address nextFeesRecipient\\r\\n    );\\r\\n\\r\\n    EnumerableSet.AddressSet private registeredFees;\\r\\n    mapping(address => bool) private feeToUsesGavOnSettle;\\r\\n    mapping(address => bool) private feeToUsesGavOnUpdate;\\r\\n    mapping(address => mapping(FeeHook => bool)) private feeToHookToImplementsSettle;\\r\\n    mapping(address => mapping(FeeHook => bool)) private feeToHookToImplementsUpdate;\\r\\n\\r\\n    mapping(address => address[]) private comptrollerProxyToFees;\\r\\n    mapping(address => mapping(address => uint256))\\r\\n        private comptrollerProxyToFeeToSharesOutstanding;\\r\\n\\r\\n    constructor(address _fundDeployer) public FundDeployerOwnerMixin(_fundDeployer) {}\\r\\n\\r\\n    // EXTERNAL FUNCTIONS\\r\\n\\r\\n    /// @notice Activate already-configured fees for use in the calling fund\\r\\n    function activateForFund(bool) external override {\\r\\n        address vaultProxy = __setValidatedVaultProxy(msg.sender);\\r\\n\\r\\n        address[] memory enabledFees = comptrollerProxyToFees[msg.sender];\\r\\n        for (uint256 i; i < enabledFees.length; i++) {\\r\\n            IFee(enabledFees[i]).activateForFund(msg.sender, vaultProxy);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Deactivate fees for a fund\\r\\n    /// @dev msg.sender is validated during __invokeHook()\\r\\n    function deactivateForFund() external override {\\r\\n        // Settle continuous fees one last time, but without calling Fee.update()\\r\\n        __invokeHook(msg.sender, IFeeManager.FeeHook.Continuous, \\\"\\\", 0, false);\\r\\n\\r\\n        // Force payout of remaining shares outstanding\\r\\n        __forcePayoutAllSharesOutstanding(msg.sender);\\r\\n\\r\\n        // Clean up storage\\r\\n        __deleteFundStorage(msg.sender);\\r\\n    }\\r\\n\\r\\n    /// @notice Receives a dispatched `callOnExtension` from a fund's ComptrollerProxy\\r\\n    /// @param _actionId An ID representing the desired action\\r\\n    /// @param _callArgs Encoded arguments specific to the _actionId\\r\\n    /// @dev This is the only way to call a function on this contract that updates VaultProxy state.\\r\\n    /// For both of these actions, any caller is allowed, so we don't use the caller param.\\r\\n    function receiveCallFromComptroller(\\r\\n        address,\\r\\n        uint256 _actionId,\\r\\n        bytes calldata _callArgs\\r\\n    ) external override {\\r\\n        if (_actionId == 0) {\\r\\n            // Settle and update all continuous fees\\r\\n            __invokeHook(msg.sender, IFeeManager.FeeHook.Continuous, \\\"\\\", 0, true);\\r\\n        } else if (_actionId == 1) {\\r\\n            __payoutSharesOutstandingForFees(msg.sender, _callArgs);\\r\\n        } else {\\r\\n            revert(\\\"receiveCallFromComptroller: Invalid _actionId\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Enable and configure fees for use in the calling fund\\r\\n    /// @param _configData Encoded config data\\r\\n    /// @dev Caller is expected to be a valid ComptrollerProxy, but there isn't a need to validate.\\r\\n    /// The order of `fees` determines the order in which fees of the same FeeHook will be applied.\\r\\n    /// It is recommended to run ManagementFee before PerformanceFee in order to achieve precise\\r\\n    /// PerformanceFee calcs.\\r\\n    function setConfigForFund(bytes calldata _configData) external override {\\r\\n        (address[] memory fees, bytes[] memory settingsData) = abi.decode(\\r\\n            _configData,\\r\\n            (address[], bytes[])\\r\\n        );\\r\\n\\r\\n        // Sanity checks\\r\\n        require(\\r\\n            fees.length == settingsData.length,\\r\\n            \\\"setConfigForFund: fees and settingsData array lengths unequal\\\"\\r\\n        );\\r\\n        require(fees.isUniqueSet(), \\\"setConfigForFund: fees cannot include duplicates\\\");\\r\\n\\r\\n        // Enable each fee with settings\\r\\n        for (uint256 i; i < fees.length; i++) {\\r\\n            require(isRegisteredFee(fees[i]), \\\"setConfigForFund: Fee is not registered\\\");\\r\\n\\r\\n            // Set fund config on fee\\r\\n            IFee(fees[i]).addFundSettings(msg.sender, settingsData[i]);\\r\\n\\r\\n            // Enable fee for fund\\r\\n            comptrollerProxyToFees[msg.sender].push(fees[i]);\\r\\n\\r\\n            emit FeeEnabledForFund(msg.sender, fees[i], settingsData[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Allows all fees for a particular FeeHook to implement settle() and update() logic\\r\\n    /// @param _hook The FeeHook to invoke\\r\\n    /// @param _settlementData The encoded settlement parameters specific to the FeeHook\\r\\n    /// @param _gav The GAV for a fund if known in the invocating code, otherwise 0\\r\\n    function invokeHook(\\r\\n        FeeHook _hook,\\r\\n        bytes calldata _settlementData,\\r\\n        uint256 _gav\\r\\n    ) external override {\\r\\n        __invokeHook(msg.sender, _hook, _settlementData, _gav, true);\\r\\n    }\\r\\n\\r\\n    // PRIVATE FUNCTIONS\\r\\n\\r\\n    /// @dev Helper to destroy local storage to get gas refund,\\r\\n    /// and to prevent further calls to fee manager\\r\\n    function __deleteFundStorage(address _comptrollerProxy) private {\\r\\n        delete comptrollerProxyToFees[_comptrollerProxy];\\r\\n        delete comptrollerProxyToVaultProxy[_comptrollerProxy];\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to force the payout of shares outstanding across all fees.\\r\\n    /// For the current release, all shares in the VaultProxy are assumed to be\\r\\n    /// shares outstanding from fees. If not, then they were sent there by mistake\\r\\n    /// and are otherwise unrecoverable. We can therefore take the VaultProxy's\\r\\n    /// shares balance as the totalSharesOutstanding to payout to the fund owner.\\r\\n    function __forcePayoutAllSharesOutstanding(address _comptrollerProxy) private {\\r\\n        address vaultProxy = getVaultProxyForFund(_comptrollerProxy);\\r\\n\\r\\n        uint256 totalSharesOutstanding = ERC20(vaultProxy).balanceOf(vaultProxy);\\r\\n        if (totalSharesOutstanding == 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        // Destroy any shares outstanding storage\\r\\n        address[] memory fees = comptrollerProxyToFees[_comptrollerProxy];\\r\\n        for (uint256 i; i < fees.length; i++) {\\r\\n            delete comptrollerProxyToFeeToSharesOutstanding[_comptrollerProxy][fees[i]];\\r\\n        }\\r\\n\\r\\n        // Distribute all shares outstanding to the fees recipient\\r\\n        address payee = IVault(vaultProxy).getOwner();\\r\\n        __transferShares(_comptrollerProxy, vaultProxy, payee, totalSharesOutstanding);\\r\\n\\r\\n        emit AllSharesOutstandingForcePaidForFund(\\r\\n            _comptrollerProxy,\\r\\n            payee,\\r\\n            totalSharesOutstanding\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to get the canonical value of GAV if not yet set and required by fee\\r\\n    function __getGavAsNecessary(\\r\\n        address _comptrollerProxy,\\r\\n        address _fee,\\r\\n        uint256 _gavOrZero\\r\\n    ) private returns (uint256 gav_) {\\r\\n        if (_gavOrZero == 0 && feeUsesGavOnUpdate(_fee)) {\\r\\n            // Assumes that any fee that requires GAV would need to revert if invalid or not final\\r\\n            bool gavIsValid;\\r\\n            (gav_, gavIsValid) = IComptroller(_comptrollerProxy).calcGav(true);\\r\\n            require(gavIsValid, \\\"__getGavAsNecessary: Invalid GAV\\\");\\r\\n        } else {\\r\\n            gav_ = _gavOrZero;\\r\\n        }\\r\\n\\r\\n        return gav_;\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to run settle() on all enabled fees for a fund that implement a given hook, and then to\\r\\n    /// optionally run update() on the same fees. This order allows fees an opportunity to update\\r\\n    /// their local state after all VaultProxy state transitions (i.e., minting, burning,\\r\\n    /// transferring shares) have finished. To optimize for the expensive operation of calculating\\r\\n    /// GAV, once one fee requires GAV, we recycle that `gav` value for subsequent fees.\\r\\n    /// Assumes that _gav is either 0 or has already been validated.\\r\\n    function __invokeHook(\\r\\n        address _comptrollerProxy,\\r\\n        FeeHook _hook,\\r\\n        bytes memory _settlementData,\\r\\n        uint256 _gavOrZero,\\r\\n        bool _updateFees\\r\\n    ) private {\\r\\n        address[] memory fees = comptrollerProxyToFees[_comptrollerProxy];\\r\\n        if (fees.length == 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        address vaultProxy = getVaultProxyForFund(_comptrollerProxy);\\r\\n\\r\\n        // This check isn't strictly necessary, but its cost is insignificant,\\r\\n        // and helps to preserve data integrity.\\r\\n        require(vaultProxy != address(0), \\\"__invokeHook: Fund is not active\\\");\\r\\n\\r\\n        // First, allow all fees to implement settle()\\r\\n        uint256 gav = __settleFees(\\r\\n            _comptrollerProxy,\\r\\n            vaultProxy,\\r\\n            fees,\\r\\n            _hook,\\r\\n            _settlementData,\\r\\n            _gavOrZero\\r\\n        );\\r\\n\\r\\n        // Second, allow fees to implement update()\\r\\n        // This function does not allow any further altering of VaultProxy state\\r\\n        // (i.e., burning, minting, or transferring shares)\\r\\n        if (_updateFees) {\\r\\n            __updateFees(_comptrollerProxy, vaultProxy, fees, _hook, _settlementData, gav);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to payout the shares outstanding for the specified fees.\\r\\n    /// Does not call settle() on fees.\\r\\n    /// Only callable via ComptrollerProxy.callOnExtension().\\r\\n    function __payoutSharesOutstandingForFees(address _comptrollerProxy, bytes memory _callArgs)\\r\\n        private\\r\\n    {\\r\\n        address[] memory fees = abi.decode(_callArgs, (address[]));\\r\\n        address vaultProxy = getVaultProxyForFund(msg.sender);\\r\\n\\r\\n        uint256 sharesOutstandingDue;\\r\\n        for (uint256 i; i < fees.length; i++) {\\r\\n            if (!IFee(fees[i]).payout(_comptrollerProxy, vaultProxy)) {\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n\\r\\n                uint256 sharesOutstandingForFee\\r\\n             = comptrollerProxyToFeeToSharesOutstanding[_comptrollerProxy][fees[i]];\\r\\n            if (sharesOutstandingForFee == 0) {\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            sharesOutstandingDue = sharesOutstandingDue.add(sharesOutstandingForFee);\\r\\n\\r\\n            // Delete shares outstanding and distribute from VaultProxy to the fees recipient\\r\\n            comptrollerProxyToFeeToSharesOutstanding[_comptrollerProxy][fees[i]] = 0;\\r\\n\\r\\n            emit SharesOutstandingPaidForFund(_comptrollerProxy, fees[i], sharesOutstandingForFee);\\r\\n        }\\r\\n\\r\\n        if (sharesOutstandingDue > 0) {\\r\\n            __transferShares(\\r\\n                _comptrollerProxy,\\r\\n                vaultProxy,\\r\\n                IVault(vaultProxy).getOwner(),\\r\\n                sharesOutstandingDue\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to settle a fee\\r\\n    function __settleFee(\\r\\n        address _comptrollerProxy,\\r\\n        address _vaultProxy,\\r\\n        address _fee,\\r\\n        FeeHook _hook,\\r\\n        bytes memory _settlementData,\\r\\n        uint256 _gav\\r\\n    ) private {\\r\\n        (SettlementType settlementType, address payer, uint256 sharesDue) = IFee(_fee).settle(\\r\\n            _comptrollerProxy,\\r\\n            _vaultProxy,\\r\\n            _hook,\\r\\n            _settlementData,\\r\\n            _gav\\r\\n        );\\r\\n        if (settlementType == SettlementType.None) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        address payee;\\r\\n        if (settlementType == SettlementType.Direct) {\\r\\n            payee = IVault(_vaultProxy).getOwner();\\r\\n            __transferShares(_comptrollerProxy, payer, payee, sharesDue);\\r\\n        } else if (settlementType == SettlementType.Mint) {\\r\\n            payee = IVault(_vaultProxy).getOwner();\\r\\n            __mintShares(_comptrollerProxy, payee, sharesDue);\\r\\n        } else if (settlementType == SettlementType.Burn) {\\r\\n            __burnShares(_comptrollerProxy, payer, sharesDue);\\r\\n        } else if (settlementType == SettlementType.MintSharesOutstanding) {\\r\\n            comptrollerProxyToFeeToSharesOutstanding[_comptrollerProxy][_fee] = comptrollerProxyToFeeToSharesOutstanding[_comptrollerProxy][_fee]\\r\\n                .add(sharesDue);\\r\\n\\r\\n            payee = _vaultProxy;\\r\\n            __mintShares(_comptrollerProxy, payee, sharesDue);\\r\\n        } else if (settlementType == SettlementType.BurnSharesOutstanding) {\\r\\n            comptrollerProxyToFeeToSharesOutstanding[_comptrollerProxy][_fee] = comptrollerProxyToFeeToSharesOutstanding[_comptrollerProxy][_fee]\\r\\n                .sub(sharesDue);\\r\\n\\r\\n            payer = _vaultProxy;\\r\\n            __burnShares(_comptrollerProxy, payer, sharesDue);\\r\\n        } else {\\r\\n            revert(\\\"__settleFee: Invalid SettlementType\\\");\\r\\n        }\\r\\n\\r\\n        emit FeeSettledForFund(_comptrollerProxy, _fee, settlementType, payer, payee, sharesDue);\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to settle fees that implement a given fee hook\\r\\n    function __settleFees(\\r\\n        address _comptrollerProxy,\\r\\n        address _vaultProxy,\\r\\n        address[] memory _fees,\\r\\n        FeeHook _hook,\\r\\n        bytes memory _settlementData,\\r\\n        uint256 _gavOrZero\\r\\n    ) private returns (uint256 gav_) {\\r\\n        gav_ = _gavOrZero;\\r\\n\\r\\n        for (uint256 i; i < _fees.length; i++) {\\r\\n            if (!feeSettlesOnHook(_fees[i], _hook)) {\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            gav_ = __getGavAsNecessary(_comptrollerProxy, _fees[i], gav_);\\r\\n\\r\\n            __settleFee(_comptrollerProxy, _vaultProxy, _fees[i], _hook, _settlementData, gav_);\\r\\n        }\\r\\n\\r\\n        return gav_;\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to update fees that implement a given fee hook\\r\\n    function __updateFees(\\r\\n        address _comptrollerProxy,\\r\\n        address _vaultProxy,\\r\\n        address[] memory _fees,\\r\\n        FeeHook _hook,\\r\\n        bytes memory _settlementData,\\r\\n        uint256 _gavOrZero\\r\\n    ) private {\\r\\n        uint256 gav = _gavOrZero;\\r\\n\\r\\n        for (uint256 i; i < _fees.length; i++) {\\r\\n            if (!feeUpdatesOnHook(_fees[i], _hook)) {\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            gav = __getGavAsNecessary(_comptrollerProxy, _fees[i], gav);\\r\\n\\r\\n            IFee(_fees[i]).update(_comptrollerProxy, _vaultProxy, _hook, _settlementData, gav);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    ///////////////////\\r\\n    // FEES REGISTRY //\\r\\n    ///////////////////\\r\\n\\r\\n    /// @notice Remove fees from the list of registered fees\\r\\n    /// @param _fees Addresses of fees to be deregistered\\r\\n    function deregisterFees(address[] calldata _fees) external onlyFundDeployerOwner {\\r\\n        require(_fees.length > 0, \\\"deregisterFees: _fees cannot be empty\\\");\\r\\n\\r\\n        for (uint256 i; i < _fees.length; i++) {\\r\\n            require(isRegisteredFee(_fees[i]), \\\"deregisterFees: fee is not registered\\\");\\r\\n\\r\\n            registeredFees.remove(_fees[i]);\\r\\n\\r\\n            emit FeeDeregistered(_fees[i], IFee(_fees[i]).identifier());\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Add fees to the list of registered fees\\r\\n    /// @param _fees Addresses of fees to be registered\\r\\n    /// @dev Stores the hooks that a fee implements and whether each implementation uses GAV,\\r\\n    /// which fronts the gas for calls to check if a hook is implemented, and guarantees\\r\\n    /// that these hook implementation return values do not change post-registration.\\r\\n    function registerFees(address[] calldata _fees) external onlyFundDeployerOwner {\\r\\n        require(_fees.length > 0, \\\"registerFees: _fees cannot be empty\\\");\\r\\n\\r\\n        for (uint256 i; i < _fees.length; i++) {\\r\\n            require(!isRegisteredFee(_fees[i]), \\\"registerFees: fee already registered\\\");\\r\\n\\r\\n            registeredFees.add(_fees[i]);\\r\\n\\r\\n            IFee feeContract = IFee(_fees[i]);\\r\\n            (\\r\\n                FeeHook[] memory implementedHooksForSettle,\\r\\n                FeeHook[] memory implementedHooksForUpdate,\\r\\n                bool usesGavOnSettle,\\r\\n                bool usesGavOnUpdate\\r\\n            ) = feeContract.implementedHooks();\\r\\n\\r\\n            // Stores the hooks for which each fee implements settle() and update()\\r\\n            for (uint256 j; j < implementedHooksForSettle.length; j++) {\\r\\n                feeToHookToImplementsSettle[_fees[i]][implementedHooksForSettle[j]] = true;\\r\\n            }\\r\\n            for (uint256 j; j < implementedHooksForUpdate.length; j++) {\\r\\n                feeToHookToImplementsUpdate[_fees[i]][implementedHooksForUpdate[j]] = true;\\r\\n            }\\r\\n\\r\\n            // Stores whether each fee requires GAV during its implementations for settle() and update()\\r\\n            if (usesGavOnSettle) {\\r\\n                feeToUsesGavOnSettle[_fees[i]] = true;\\r\\n            }\\r\\n            if (usesGavOnUpdate) {\\r\\n                feeToUsesGavOnUpdate[_fees[i]] = true;\\r\\n            }\\r\\n\\r\\n            emit FeeRegistered(\\r\\n                _fees[i],\\r\\n                feeContract.identifier(),\\r\\n                implementedHooksForSettle,\\r\\n                implementedHooksForUpdate,\\r\\n                usesGavOnSettle,\\r\\n                usesGavOnUpdate\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    ///////////////////\\r\\n    // STATE GETTERS //\\r\\n    ///////////////////\\r\\n\\r\\n    /// @notice Get a list of enabled fees for a given fund\\r\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\r\\n    /// @return enabledFees_ An array of enabled fee addresses\\r\\n    function getEnabledFeesForFund(address _comptrollerProxy)\\r\\n        external\\r\\n        view\\r\\n        returns (address[] memory enabledFees_)\\r\\n    {\\r\\n        return comptrollerProxyToFees[_comptrollerProxy];\\r\\n    }\\r\\n\\r\\n    /// @notice Get the amount of shares outstanding for a particular fee for a fund\\r\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\r\\n    /// @param _fee The fee address\\r\\n    /// @return sharesOutstanding_ The amount of shares outstanding\\r\\n    function getFeeSharesOutstandingForFund(address _comptrollerProxy, address _fee)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 sharesOutstanding_)\\r\\n    {\\r\\n        return comptrollerProxyToFeeToSharesOutstanding[_comptrollerProxy][_fee];\\r\\n    }\\r\\n\\r\\n    /// @notice Get all registered fees\\r\\n    /// @return registeredFees_ A list of all registered fee addresses\\r\\n    function getRegisteredFees() external view returns (address[] memory registeredFees_) {\\r\\n        registeredFees_ = new address[](registeredFees.length());\\r\\n        for (uint256 i; i < registeredFees_.length; i++) {\\r\\n            registeredFees_[i] = registeredFees.at(i);\\r\\n        }\\r\\n\\r\\n        return registeredFees_;\\r\\n    }\\r\\n\\r\\n    /// @notice Checks if a fee implements settle() on a particular hook\\r\\n    /// @param _fee The address of the fee to check\\r\\n    /// @param _hook The FeeHook to check\\r\\n    /// @return settlesOnHook_ True if the fee settles on the given hook\\r\\n    function feeSettlesOnHook(address _fee, FeeHook _hook)\\r\\n        public\\r\\n        view\\r\\n        returns (bool settlesOnHook_)\\r\\n    {\\r\\n        return feeToHookToImplementsSettle[_fee][_hook];\\r\\n    }\\r\\n\\r\\n    /// @notice Checks if a fee implements update() on a particular hook\\r\\n    /// @param _fee The address of the fee to check\\r\\n    /// @param _hook The FeeHook to check\\r\\n    /// @return updatesOnHook_ True if the fee updates on the given hook\\r\\n    function feeUpdatesOnHook(address _fee, FeeHook _hook)\\r\\n        public\\r\\n        view\\r\\n        returns (bool updatesOnHook_)\\r\\n    {\\r\\n        return feeToHookToImplementsUpdate[_fee][_hook];\\r\\n    }\\r\\n\\r\\n    /// @notice Checks if a fee uses GAV in its settle() implementation\\r\\n    /// @param _fee The address of the fee to check\\r\\n    /// @return usesGav_ True if the fee uses GAV during settle() implementation\\r\\n    function feeUsesGavOnSettle(address _fee) public view returns (bool usesGav_) {\\r\\n        return feeToUsesGavOnSettle[_fee];\\r\\n    }\\r\\n\\r\\n    /// @notice Checks if a fee uses GAV in its update() implementation\\r\\n    /// @param _fee The address of the fee to check\\r\\n    /// @return usesGav_ True if the fee uses GAV during update() implementation\\r\\n    function feeUsesGavOnUpdate(address _fee) public view returns (bool usesGav_) {\\r\\n        return feeToUsesGavOnUpdate[_fee];\\r\\n    }\\r\\n\\r\\n    /// @notice Check whether a fee is registered\\r\\n    /// @param _fee The address of the fee to check\\r\\n    /// @return isRegisteredFee_ True if the fee is registered\\r\\n    function isRegisteredFee(address _fee) public view returns (bool isRegisteredFee_) {\\r\\n        return registeredFees.contains(_fee);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xcafcf49ddfd3845470083ed2b2ae660263d269e090807bfa9c1a86d8ec35b481\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/fee-manager/IFee.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"./IFeeManager.sol\\\";\\r\\n\\r\\n/// @title Fee Interface\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\n/// @notice Interface for all fees\\r\\ninterface IFee {\\r\\n    function activateForFund(address _comptrollerProxy, address _vaultProxy) external;\\r\\n\\r\\n    function addFundSettings(address _comptrollerProxy, bytes calldata _settingsData) external;\\r\\n\\r\\n    function identifier() external pure returns (string memory identifier_);\\r\\n\\r\\n    function implementedHooks()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            IFeeManager.FeeHook[] memory implementedHooksForSettle_,\\r\\n            IFeeManager.FeeHook[] memory implementedHooksForUpdate_,\\r\\n            bool usesGavOnSettle_,\\r\\n            bool usesGavOnUpdate_\\r\\n        );\\r\\n\\r\\n    function payout(address _comptrollerProxy, address _vaultProxy)\\r\\n        external\\r\\n        returns (bool isPayable_);\\r\\n\\r\\n    function settle(\\r\\n        address _comptrollerProxy,\\r\\n        address _vaultProxy,\\r\\n        IFeeManager.FeeHook _hook,\\r\\n        bytes calldata _settlementData,\\r\\n        uint256 _gav\\r\\n    )\\r\\n        external\\r\\n        returns (\\r\\n            IFeeManager.SettlementType settlementType_,\\r\\n            address payer_,\\r\\n            uint256 sharesDue_\\r\\n        );\\r\\n\\r\\n    function update(\\r\\n        address _comptrollerProxy,\\r\\n        address _vaultProxy,\\r\\n        IFeeManager.FeeHook _hook,\\r\\n        bytes calldata _settlementData,\\r\\n        uint256 _gav\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xf8277e5914e538326d65367cb1aaf2b72c14d6457c22796d085e604256dfc24f\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/fee-manager/IFeeManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n/// @title FeeManager Interface\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\n/// @notice Interface for the FeeManager\\r\\ninterface IFeeManager {\\r\\n    // No fees for the current release are implemented post-redeemShares\\r\\n    enum FeeHook {\\r\\n        Continuous,\\r\\n        BuySharesSetup,\\r\\n        PreBuyShares,\\r\\n        PostBuyShares,\\r\\n        BuySharesCompleted,\\r\\n        PreRedeemShares\\r\\n    }\\r\\n    enum SettlementType {None, Direct, Mint, Burn, MintSharesOutstanding, BurnSharesOutstanding}\\r\\n\\r\\n    function invokeHook(\\r\\n        FeeHook,\\r\\n        bytes calldata,\\r\\n        uint256\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x9b36e64b16a92ee93fb07686033a002573bf687019414e8d6e8bd3b5ddfc4dd4\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/utils/ExtensionBase.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"../../core/fund/comptroller/IComptroller.sol\\\";\\r\\nimport \\\"../../core/fund/vault/IVault.sol\\\";\\r\\nimport \\\"../IExtension.sol\\\";\\r\\n\\r\\n/// @title ExtensionBase Contract\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\n/// @notice Base class for an extension\\r\\nabstract contract ExtensionBase is IExtension {\\r\\n    mapping(address => address) internal comptrollerProxyToVaultProxy;\\r\\n\\r\\n    /// @notice Allows extension to run logic during fund activation\\r\\n    /// @dev Unimplemented by default, may be overridden.\\r\\n    function activateForFund(bool) external virtual override {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    /// @notice Allows extension to run logic during fund deactivation (destruct)\\r\\n    /// @dev Unimplemented by default, may be overridden.\\r\\n    function deactivateForFund() external virtual override {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    /// @notice Receives calls from ComptrollerLib.callOnExtension()\\r\\n    /// and dispatches the appropriate action\\r\\n    /// @dev Unimplemented by default, may be overridden.\\r\\n    function receiveCallFromComptroller(\\r\\n        address,\\r\\n        uint256,\\r\\n        bytes calldata\\r\\n    ) external virtual override {\\r\\n        revert(\\\"receiveCallFromComptroller: Unimplemented for Extension\\\");\\r\\n    }\\r\\n\\r\\n    /// @notice Allows extension to run logic during fund configuration\\r\\n    /// @dev Unimplemented by default, may be overridden.\\r\\n    function setConfigForFund(bytes calldata) external virtual override {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to validate a ComptrollerProxy-VaultProxy relation, which we store for both\\r\\n    /// gas savings and to guarantee a spoofed ComptrollerProxy does not change getVaultProxy().\\r\\n    /// Will revert without reason if the expected interfaces do not exist.\\r\\n    function __setValidatedVaultProxy(address _comptrollerProxy)\\r\\n        internal\\r\\n        returns (address vaultProxy_)\\r\\n    {\\r\\n        require(\\r\\n            comptrollerProxyToVaultProxy[_comptrollerProxy] == address(0),\\r\\n            \\\"__setValidatedVaultProxy: Already set\\\"\\r\\n        );\\r\\n\\r\\n        vaultProxy_ = IComptroller(_comptrollerProxy).getVaultProxy();\\r\\n        require(vaultProxy_ != address(0), \\\"__setValidatedVaultProxy: Missing vaultProxy\\\");\\r\\n\\r\\n        require(\\r\\n            _comptrollerProxy == IVault(vaultProxy_).getAccessor(),\\r\\n            \\\"__setValidatedVaultProxy: Not the VaultProxy accessor\\\"\\r\\n        );\\r\\n\\r\\n        comptrollerProxyToVaultProxy[_comptrollerProxy] = vaultProxy_;\\r\\n\\r\\n        return vaultProxy_;\\r\\n    }\\r\\n\\r\\n    ///////////////////\\r\\n    // STATE GETTERS //\\r\\n    ///////////////////\\r\\n\\r\\n    /// @notice Gets the verified VaultProxy for a given ComptrollerProxy\\r\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\r\\n    /// @return vaultProxy_ The VaultProxy of the fund\\r\\n    function getVaultProxyForFund(address _comptrollerProxy)\\r\\n        public\\r\\n        view\\r\\n        returns (address vaultProxy_)\\r\\n    {\\r\\n        return comptrollerProxyToVaultProxy[_comptrollerProxy];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd80f9d8580dc66799c55da1eb67322c93e2bd514f704c31fa15bdfaebc915e2b\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/utils/FundDeployerOwnerMixin.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"../../core/fund-deployer/IFundDeployer.sol\\\";\\r\\n\\r\\n/// @title FundDeployerOwnerMixin Contract\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\n/// @notice A mixin contract that defers ownership to the owner of FundDeployer\\r\\nabstract contract FundDeployerOwnerMixin {\\r\\n    address internal immutable FUND_DEPLOYER;\\r\\n\\r\\n    modifier onlyFundDeployerOwner() {\\r\\n        require(\\r\\n            msg.sender == getOwner(),\\r\\n            \\\"onlyFundDeployerOwner: Only the FundDeployer owner can call this function\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(address _fundDeployer) public {\\r\\n        FUND_DEPLOYER = _fundDeployer;\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the owner of this contract\\r\\n    /// @return owner_ The owner\\r\\n    /// @dev Ownership is deferred to the owner of the FundDeployer contract\\r\\n    function getOwner() public view returns (address owner_) {\\r\\n        return IFundDeployer(FUND_DEPLOYER).getOwner();\\r\\n    }\\r\\n\\r\\n    ///////////////////\\r\\n    // STATE GETTERS //\\r\\n    ///////////////////\\r\\n\\r\\n    /// @notice Gets the `FUND_DEPLOYER` variable\\r\\n    /// @return fundDeployer_ The `FUND_DEPLOYER` variable value\\r\\n    function getFundDeployer() external view returns (address fundDeployer_) {\\r\\n        return FUND_DEPLOYER;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf6af8390b7e3ac7579250ce5aebe0faafeeb58e60ead667e002b9286dfd160e5\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/utils/PermissionedVaultActionMixin.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"../../core/fund/comptroller/IComptroller.sol\\\";\\r\\n\\r\\n/// @title PermissionedVaultActionMixin Contract\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\n/// @notice A mixin contract for extensions that can make permissioned vault calls\\r\\nabstract contract PermissionedVaultActionMixin {\\r\\n    /// @notice Adds a tracked asset to the fund\\r\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\r\\n    /// @param _asset The asset to add\\r\\n    function __addTrackedAsset(address _comptrollerProxy, address _asset) internal {\\r\\n        IComptroller(_comptrollerProxy).permissionedVaultAction(\\r\\n            IComptroller.VaultAction.AddTrackedAsset,\\r\\n            abi.encode(_asset)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Grants an allowance to a spender to use a fund's asset\\r\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\r\\n    /// @param _asset The asset for which to grant an allowance\\r\\n    /// @param _target The spender of the allowance\\r\\n    /// @param _amount The amount of the allowance\\r\\n    function __approveAssetSpender(\\r\\n        address _comptrollerProxy,\\r\\n        address _asset,\\r\\n        address _target,\\r\\n        uint256 _amount\\r\\n    ) internal {\\r\\n        IComptroller(_comptrollerProxy).permissionedVaultAction(\\r\\n            IComptroller.VaultAction.ApproveAssetSpender,\\r\\n            abi.encode(_asset, _target, _amount)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Burns fund shares for a particular account\\r\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\r\\n    /// @param _target The account for which to burn shares\\r\\n    /// @param _amount The amount of shares to burn\\r\\n    function __burnShares(\\r\\n        address _comptrollerProxy,\\r\\n        address _target,\\r\\n        uint256 _amount\\r\\n    ) internal {\\r\\n        IComptroller(_comptrollerProxy).permissionedVaultAction(\\r\\n            IComptroller.VaultAction.BurnShares,\\r\\n            abi.encode(_target, _amount)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Mints fund shares to a particular account\\r\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\r\\n    /// @param _target The account to which to mint shares\\r\\n    /// @param _amount The amount of shares to mint\\r\\n    function __mintShares(\\r\\n        address _comptrollerProxy,\\r\\n        address _target,\\r\\n        uint256 _amount\\r\\n    ) internal {\\r\\n        IComptroller(_comptrollerProxy).permissionedVaultAction(\\r\\n            IComptroller.VaultAction.MintShares,\\r\\n            abi.encode(_target, _amount)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Removes a tracked asset from the fund\\r\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\r\\n    /// @param _asset The asset to remove\\r\\n    function __removeTrackedAsset(address _comptrollerProxy, address _asset) internal {\\r\\n        IComptroller(_comptrollerProxy).permissionedVaultAction(\\r\\n            IComptroller.VaultAction.RemoveTrackedAsset,\\r\\n            abi.encode(_asset)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Transfers fund shares from one account to another\\r\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\r\\n    /// @param _from The account from which to transfer shares\\r\\n    /// @param _to The account to which to transfer shares\\r\\n    /// @param _amount The amount of shares to transfer\\r\\n    function __transferShares(\\r\\n        address _comptrollerProxy,\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256 _amount\\r\\n    ) internal {\\r\\n        IComptroller(_comptrollerProxy).permissionedVaultAction(\\r\\n            IComptroller.VaultAction.TransferShares,\\r\\n            abi.encode(_from, _to, _amount)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Withdraws an asset from the VaultProxy to a given account\\r\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\r\\n    /// @param _asset The asset to withdraw\\r\\n    /// @param _target The account to which to withdraw the asset\\r\\n    /// @param _amount The amount of asset to withdraw\\r\\n    function __withdrawAssetTo(\\r\\n        address _comptrollerProxy,\\r\\n        address _asset,\\r\\n        address _target,\\r\\n        uint256 _amount\\r\\n    ) internal {\\r\\n        IComptroller(_comptrollerProxy).permissionedVaultAction(\\r\\n            IComptroller.VaultAction.WithdrawAssetTo,\\r\\n            abi.encode(_asset, _target, _amount)\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb0175feab46ba56e749a2a5c23225c3508db9402a2f8964fcde6dcc6b8d226a6\",\"license\":\"GPL-3.0\"},\"contracts/release/utils/AddressArrayLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title AddressArray Library\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\n/// @notice A library to extend the address array data type\\r\\nlibrary AddressArrayLib {\\r\\n    /// @dev Helper to add an item to an array. Does not assert uniqueness of the new item.\\r\\n    function addItem(address[] memory _self, address _itemToAdd)\\r\\n        internal\\r\\n        pure\\r\\n        returns (address[] memory nextArray_)\\r\\n    {\\r\\n        nextArray_ = new address[](_self.length + 1);\\r\\n        for (uint256 i; i < _self.length; i++) {\\r\\n            nextArray_[i] = _self[i];\\r\\n        }\\r\\n        nextArray_[_self.length] = _itemToAdd;\\r\\n\\r\\n        return nextArray_;\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to add an item to an array, only if it is not already in the array.\\r\\n    function addUniqueItem(address[] memory _self, address _itemToAdd)\\r\\n        internal\\r\\n        pure\\r\\n        returns (address[] memory nextArray_)\\r\\n    {\\r\\n        if (contains(_self, _itemToAdd)) {\\r\\n            return _self;\\r\\n        }\\r\\n\\r\\n        return addItem(_self, _itemToAdd);\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to verify if an array contains a particular value\\r\\n    function contains(address[] memory _self, address _target)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bool doesContain_)\\r\\n    {\\r\\n        for (uint256 i; i < _self.length; i++) {\\r\\n            if (_target == _self[i]) {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to reassign all items in an array with a specified value\\r\\n    function fill(address[] memory _self, address _value)\\r\\n        internal\\r\\n        pure\\r\\n        returns (address[] memory nextArray_)\\r\\n    {\\r\\n        nextArray_ = new address[](_self.length);\\r\\n        for (uint256 i; i < nextArray_.length; i++) {\\r\\n            nextArray_[i] = _value;\\r\\n        }\\r\\n\\r\\n        return nextArray_;\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to verify if array is a set of unique values.\\r\\n    /// Does not assert length > 0.\\r\\n    function isUniqueSet(address[] memory _self) internal pure returns (bool isUnique_) {\\r\\n        if (_self.length <= 1) {\\r\\n            return true;\\r\\n        }\\r\\n\\r\\n        uint256 arrayLength = _self.length;\\r\\n        for (uint256 i; i < arrayLength; i++) {\\r\\n            for (uint256 j = i + 1; j < arrayLength; j++) {\\r\\n                if (_self[i] == _self[j]) {\\r\\n                    return false;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to remove items from an array. Removes all matching occurrences of each item.\\r\\n    /// Does not assert uniqueness of either array.\\r\\n    function removeItems(address[] memory _self, address[] memory _itemsToRemove)\\r\\n        internal\\r\\n        pure\\r\\n        returns (address[] memory nextArray_)\\r\\n    {\\r\\n        if (_itemsToRemove.length == 0) {\\r\\n            return _self;\\r\\n        }\\r\\n\\r\\n        bool[] memory indexesToRemove = new bool[](_self.length);\\r\\n        uint256 remainingItemsCount = _self.length;\\r\\n        for (uint256 i; i < _self.length; i++) {\\r\\n            if (contains(_itemsToRemove, _self[i])) {\\r\\n                indexesToRemove[i] = true;\\r\\n                remainingItemsCount--;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (remainingItemsCount == _self.length) {\\r\\n            nextArray_ = _self;\\r\\n        } else if (remainingItemsCount > 0) {\\r\\n            nextArray_ = new address[](remainingItemsCount);\\r\\n            uint256 nextArrayIndex;\\r\\n            for (uint256 i; i < _self.length; i++) {\\r\\n                if (!indexesToRemove[i]) {\\r\\n                    nextArray_[nextArrayIndex] = _self[i];\\r\\n                    nextArrayIndex++;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return nextArray_;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9cf10bc53b106758cfd6d754567a98ce1774639d03b9a430ba5ffa0298c160de\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101165760003560e01c8063893d20e8116100a2578063a9f3b42f11610071578063a9f3b42f14610223578063aa051c2c14610236578063bd8e959a14610256578063e2a1b3981461025e578063ec7c39e91461027157610116565b8063893d20e8146101ed57806389cbe1d0146101f557806397c0ac871461020857806399c735831461021057610116565b80633c470297116100e95780633c47029714610181578063467903461461019457806353acffa0146101b45780637759c164146101c757806380d57063146101da57610116565b806306bbda641461011b5780631bee801e1461013957806324da4f191461014e5780633a687cf414610161575b600080fd5b610123610284565b6040516101309190612f84565b60405180910390f35b61014c61014736600461249b565b610319565b005b61014c61015c366004612502565b6103b2565b61017461016f3660046123ed565b610829565b6040516101309190612fdf565b61017461018f3660046123ed565b61084b565b6101a76101a23660046123ed565b610869565b6040516101309190612ea1565b6101746101c236600461246b565b610887565b61014c6101d53660046126d3565b6108d4565b61014c6101e8366004612662565b61091a565b6101a7610a1c565b61014c61020336600461269e565b610ab4565b6101a7610cb3565b61017461021e3660046123ed565b610cd7565b6101236102313660046123ed565b610ce4565b610249610244366004612431565b610d5a565b604051610130919061312c565b61014c610d85565b61014c61026c366004612502565b610db7565b61017461027f36600461246b565b610f77565b60606102906001610f9f565b6001600160401b03811180156102a557600080fd5b506040519080825280602002602001820160405280156102cf578160200160208202803683370190505b50905060005b8151811015610315576102e9600182610faa565b8282815181106102f557fe5b6001600160a01b03909216602092830291909101909101526001016102d5565b5090565b826103425761033d3360006040518060200160405280600081525060006001610fbd565b6103ac565b826001141561038b5761033d3383838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506110a192505050565b60405162461bcd60e51b81526004016103a39061306c565b60405180910390fd5b50505050565b6103ba610a1c565b6001600160a01b0316336001600160a01b0316146103ea5760405162461bcd60e51b81526004016103a39061303c565b806104075760405162461bcd60e51b81526004016103a39061310c565b60005b818110156108245761043683838381811061042157fe5b905060200201602081019061021e91906123ed565b156104535760405162461bcd60e51b81526004016103a3906130dc565b61047f83838381811061046257fe5b905060200201602081019061047791906123ed565b600190611329565b50600083838381811061048e57fe5b90506020020160208101906104a391906123ed565b9050606080600080846001600160a01b031663cbf54bb26040518163ffffffff1660e01b815260040160006040518083038186803b1580156104e457600080fd5b505afa1580156104f8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261052091908101906125d4565b935093509350935060005b84518110156105ce576001600560008b8b8b81811061054657fe5b905060200201602081019061055b91906123ed565b6001600160a01b03166001600160a01b03168152602001908152602001600020600087848151811061058957fe5b6020026020010151600581111561059c57fe5b60058111156105a757fe5b81526020810191909152604001600020805460ff191691151591909117905560010161052b565b5060005b8351811015610675576001600660008b8b8b8181106105ed57fe5b905060200201602081019061060291906123ed565b6001600160a01b03166001600160a01b03168152602001908152602001600020600086848151811061063057fe5b6020026020010151600581111561064357fe5b600581111561064e57fe5b81526020810191909152604001600020805460ff19169115159190911790556001016105d2565b5081156106cc576001600360008a8a8a81811061068e57fe5b90506020020160208101906106a391906123ed565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790555b8015610722576001600460008a8a8a8181106106e457fe5b90506020020160208101906106f991906123ed565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790555b846001600160a01b0316637998a1c46040518163ffffffff1660e01b815260040160006040518083038186803b15801561075b57600080fd5b505afa15801561076f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610797919081019061277d565b6040516107a49190612e95565b60405180910390208888888181106107b857fe5b90506020020160208101906107cd91906123ed565b6001600160a01b03167f0cc09421dfd6f16fe9f3e1329fe97c2c82bed949019621d503a1220831abb62e8686868660405161080b9493929190612f95565b60405180910390a350506001909301925061040a915050565b505050565b6001600160a01b03811660009081526003602052604090205460ff165b919050565b6001600160a01b031660009081526004602052604090205460ff1690565b6001600160a01b039081166000908152602081905260409020541690565b6001600160a01b0382166000908152600660205260408120818360058111156108ac57fe5b60058111156108b757fe5b815260208101919091526040016000205460ff1690505b92915050565b6103ac338585858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525087925060019150610fbd9050565b60006109253361133e565b336000908152600760209081526040918290208054835181840281018401909452808452939450606093909183018282801561098a57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161096c575b5050505050905060005b81518110156103ac578181815181106109a957fe5b60200260200101516001600160a01b0316633146d05833856040518363ffffffff1660e01b81526004016109de929190612eaf565b600060405180830381600087803b1580156109f857600080fd5b505af1158015610a0c573d6000803e3d6000fd5b5050600190920191506109949050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663893d20e86040518163ffffffff1660e01b815260040160206040518083038186803b158015610a7757600080fd5b505afa158015610a8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aaf9190612413565b905090565b606080610ac383850185612577565b915091508051825114610ae85760405162461bcd60e51b81526004016103a39061308c565b610af1826114e4565b610b0d5760405162461bcd60e51b81526004016103a3906130bc565b60005b8251811015610cac57610b35838281518110610b2857fe5b6020026020010151610cd7565b610b515760405162461bcd60e51b81526004016103a39061302c565b828181518110610b5d57fe5b60200260200101516001600160a01b0316630f5f6b4f33848481518110610b8057fe5b60200260200101516040518363ffffffff1660e01b8152600401610ba5929190612eca565b600060405180830381600087803b158015610bbf57600080fd5b505af1158015610bd3573d6000803e3d6000fd5b5050336000908152600760205260409020855190925085915083908110610bf657fe5b60209081029190910181015182546001810184556000938452919092200180546001600160a01b0319166001600160a01b039092169190911790558251839082908110610c3f57fe5b60200260200101516001600160a01b0316336001600160a01b03167f62b7814f137868e44c7a83c2b0a340fc5dacef8f3e748867d0f5f879fc0ef6da848481518110610c8757fe5b6020026020010151604051610c9c9190612fed565b60405180910390a3600101610b10565b5050505050565b7f000000000000000000000000000000000000000000000000000000000000000090565b60006108ce600183611578565b6001600160a01b038116600090815260076020908152604091829020805483518184028101840190945280845260609392830182828015610d4e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610d30575b50505050509050919050565b6001600160a01b03918216600090815260086020908152604080832093909416825291909152205490565b610da333600060405180602001604052806000815250600080610fbd565b610dac3361158d565b610db5336117c7565b565b610dbf610a1c565b6001600160a01b0316336001600160a01b031614610def5760405162461bcd60e51b81526004016103a39061303c565b80610e0c5760405162461bcd60e51b81526004016103a3906130cc565b60005b8181101561082457610e2683838381811061042157fe5b610e425760405162461bcd60e51b81526004016103a3906130ec565b610e6e838383818110610e5157fe5b9050602002016020810190610e6691906123ed565b60019061180f565b50828282818110610e7b57fe5b9050602002016020810190610e9091906123ed565b6001600160a01b0316637998a1c46040518163ffffffff1660e01b815260040160006040518083038186803b158015610ec857600080fd5b505afa158015610edc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f04919081019061277d565b604051610f119190612e95565b6040518091039020838383818110610f2557fe5b9050602002016020810190610f3a91906123ed565b6001600160a01b03167f3a9db4e30d2c448ca18bdd1a6c2e611b9f28cee12f4f6faf79722a0ea2d7242360405160405180910390a3600101610e0f565b6001600160a01b0382166000908152600560208190526040822090829084908111156108ac57fe5b60006108ce82611824565b6000610fb68383611828565b9392505050565b6001600160a01b03851660009081526007602090815260409182902080548351818402810184019094528084526060939283018282801561102757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611009575b5050505050905080516000141561103e5750610cac565b600061104987610869565b90506001600160a01b0381166110715760405162461bcd60e51b81526004016103a39061311c565b60006110818883858a8a8a61186d565b90508315611097576110978883858a8a866118f5565b5050505050505050565b6060818060200190518101906110b79190612543565b905060006110c433610869565b90506000805b83518110156112a6578381815181106110df57fe5b60200260200101516001600160a01b031663b78b481387856040518363ffffffff1660e01b8152600401611114929190612eea565b602060405180830381600087803b15801561112e57600080fd5b505af1158015611142573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111669190612680565b61116f5761129e565b6001600160a01b03861660009081526008602052604081208551829087908590811061119757fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002054905080600014156111d1575061129e565b6111db83826119bc565b9250600060086000896001600160a01b03166001600160a01b03168152602001908152602001600020600087858151811061121257fe5b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000208190555084828151811061124a57fe5b60200260200101516001600160a01b0316876001600160a01b03167fcda32f0422c94049db811f90e9e3e2537f709654eeb3e087d70a5e33916df9a583604051611294919061312c565b60405180910390a3505b6001016110ca565b508015610cac57610cac8583846001600160a01b031663893d20e86040518163ffffffff1660e01b815260040160206040518083038186803b1580156112eb57600080fd5b505afa1580156112ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113239190612413565b846119e1565b6000610fb6836001600160a01b038416611a61565b6001600160a01b03818116600090815260208190526040812054909116156113785760405162461bcd60e51b81526004016103a39061301c565b816001600160a01b031663c98091876040518163ffffffff1660e01b815260040160206040518083038186803b1580156113b157600080fd5b505afa1580156113c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e99190612413565b90506001600160a01b0381166114115760405162461bcd60e51b81526004016103a39061304c565b806001600160a01b0316635a53e3486040518163ffffffff1660e01b815260040160206040518083038186803b15801561144a57600080fd5b505afa15801561145e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114829190612413565b6001600160a01b0316826001600160a01b0316146114b25760405162461bcd60e51b81526004016103a3906130ac565b6001600160a01b03918216600090815260208190526040902080546001600160a01b0319169282169290921790915590565b600060018251116114f757506001610846565b815160005b8181101561156e57600181015b828110156115655784818151811061151d57fe5b60200260200101516001600160a01b031685838151811061153a57fe5b60200260200101516001600160a01b0316141561155d5760009350505050610846565b600101611509565b506001016114fc565b5060019392505050565b6000610fb6836001600160a01b038416611aab565b600061159882610869565b90506000816001600160a01b03166370a08231836040518263ffffffff1660e01b81526004016115c89190612ea1565b60206040518083038186803b1580156115e057600080fd5b505afa1580156115f4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061161891906127b1565b9050806116265750506117c4565b6001600160a01b03831660009081526007602090815260409182902080548351818402810184019094528084526060939283018282801561169057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611672575b5050505050905060005b81518110156116fa576001600160a01b038516600090815260086020526040812083519091908490849081106116cc57fe5b6020908102919091018101516001600160a01b0316825281019190915260400160009081205560010161169a565b506000836001600160a01b031663893d20e86040518163ffffffff1660e01b815260040160206040518083038186803b15801561173657600080fd5b505afa15801561174a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061176e9190612413565b905061177c858583866119e1565b846001600160a01b03167fe1ddc13838bdb841a7c5c11b6f7c9bde7199c71756f2ba118de8cf3e036b91f682856040516117b7929190612f69565b60405180910390a2505050505b50565b6001600160a01b03811660009081526007602052604081206117e89161208d565b6001600160a01b0316600090815260208190526040902080546001600160a01b0319169055565b6000610fb6836001600160a01b038416611ac3565b5490565b8154600090821061184b5760405162461bcd60e51b81526004016103a39061300c565b82600001828154811061185a57fe5b9060005260206000200154905092915050565b8060005b85518110156118e95761189786828151811061188957fe5b602002602001015186610f77565b6118a0576118e1565b6118be888783815181106118b057fe5b602002602001015184611b89565b91506118e188888884815181106118d157fe5b6020026020010151888887611c52565b600101611871565b505b9695505050505050565b8060005b85518110156110975761191f86828151811061191157fe5b602002602001015186610887565b611928576119b4565b611938888783815181106118b057fe5b915085818151811061194657fe5b60200260200101516001600160a01b031663233faf5f89898888876040518663ffffffff1660e01b8152600401611981959493929190612ef8565b600060405180830381600087803b15801561199b57600080fd5b505af11580156119af573d6000803e3d6000fd5b505050505b6001016118f9565b600082820183811015610fb65760405162461bcd60e51b81526004016103a39061305c565b836001600160a01b03166310acd06d6003858585604051602001611a0793929190612f41565b6040516020818303038152906040526040518363ffffffff1660e01b8152600401611a33929190612ffe565b600060405180830381600087803b158015611a4d57600080fd5b505af1158015611097573d6000803e3d6000fd5b6000611a6d8383611aab565b611aa3575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556108ce565b5060006108ce565b60009081526001919091016020526040902054151590565b60008181526001830160205260408120548015611b7f5783546000198083019190810190600090879083908110611af657fe5b9060005260206000200154905080876000018481548110611b1357fe5b600091825260208083209091019290925582815260018981019092526040902090840190558654879080611b4357fe5b600190038181906000526020600020016000905590558660010160008781526020019081526020016000206000905560019450505050506108ce565b60009150506108ce565b600081158015611b9d5750611b9d8361084b565b15611c4b57604051637a89e49360e11b81526000906001600160a01b0386169063f513c92690611bd290600190600401612fdf565b6040805180830381600087803b158015611beb57600080fd5b505af1158015611bff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c2391906127cf565b909250905080611c455760405162461bcd60e51b81526004016103a39061309c565b50610fb6565b5092915050565b6000806000866001600160a01b03166341892d7e8a8a8989896040518663ffffffff1660e01b8152600401611c8b959493929190612ef8565b606060405180830381600087803b158015611ca557600080fd5b505af1158015611cb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cdd9190612730565b919450925090506000836005811115611cf257fe5b1415611d0057505050611fb2565b60006001846005811115611d1057fe5b1415611d9a57886001600160a01b031663893d20e86040518163ffffffff1660e01b815260040160206040518083038186803b158015611d4f57600080fd5b505afa158015611d63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d879190612413565b9050611d958a8483856119e1565b611f52565b6002846005811115611da857fe5b1415611e2c57886001600160a01b031663893d20e86040518163ffffffff1660e01b815260040160206040518083038186803b158015611de757600080fd5b505afa158015611dfb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e1f9190612413565b9050611d958a8284611fba565b6003846005811115611e3a57fe5b1415611e4b57611d958a8484612041565b6004846005811115611e5957fe5b1415611ec2576001600160a01b03808b166000908152600860209081526040808320938c1683529290522054611e8f90836119bc565b6001600160a01b03808c166000908152600860209081526040808320938d16835292905220555087611d958a8284611fba565b6005846005811115611ed057fe5b1415611f3a576001600160a01b03808b166000908152600860209081526040808320938c1683529290522054611f069083612065565b6001600160a01b03808c166000908152600860209081526040808320938d1683529290522055889250611d958a8484612041565b60405162461bcd60e51b81526004016103a3906130fc565b836005811115611f5e57fe5b886001600160a01b03168b6001600160a01b03167fef7da7c40d1fc52df907f6fed0e539680d5fb491c3b8f94db234a360dafe1d62868587604051611fa593929190612f41565b60405180910390a4505050505b505050505050565b826001600160a01b03166310acd06d60028484604051602001611fde929190612f69565b6040516020818303038152906040526040518363ffffffff1660e01b815260040161200a929190612ffe565b600060405180830381600087803b15801561202457600080fd5b505af1158015612038573d6000803e3d6000fd5b50505050505050565b826001600160a01b03166310acd06d60018484604051602001611fde929190612f69565b6000828211156120875760405162461bcd60e51b81526004016103a39061307c565b50900390565b50805460008255906000526020600020908101906117c491905b8082111561031557600081556001016120a7565b80356108ce8161326f565b80516108ce8161326f565b60008083601f8401126120e357600080fd5b5081356001600160401b038111156120fa57600080fd5b60208301915083602082028301111561211257600080fd5b9250929050565b600082601f83011261212a57600080fd5b813561213d61213882613160565b61313a565b9150818183526020840193506020810190508385602084028201111561216257600080fd5b60005b8381101561218e578161217888826120bb565b8452506020928301929190910190600101612165565b5050505092915050565b600082601f8301126121a957600080fd5b81516121b761213882613160565b915081818352602084019350602081019050838560208402820111156121dc57600080fd5b60005b8381101561218e57816121f288826120c6565b84525060209283019291909101906001016121df565b600082601f83011261221957600080fd5b813561222761213882613160565b81815260209384019390925082018360005b8381101561218e578135860161224f888261232c565b8452506020928301929190910190600101612239565b600082601f83011261227657600080fd5b815161228461213882613160565b915081818352602084019350602081019050838560208402820111156122a957600080fd5b60005b8381101561218e57816122bf8882612386565b84525060209283019291909101906001016122ac565b80356108ce81613283565b80516108ce81613283565b60008083601f8401126122fd57600080fd5b5081356001600160401b0381111561231457600080fd5b60208301915083600182028301111561211257600080fd5b600082601f83011261233d57600080fd5b813561234b61213882613180565b9150808252602083016020830185838301111561236757600080fd5b612372838284613219565b50505092915050565b80356108ce8161328c565b80516108ce8161328c565b600082601f8301126123a257600080fd5b81516123b061213882613180565b915080825260208301602083018583830111156123cc57600080fd5b612372838284613225565b80356108ce81613299565b80516108ce81613299565b6000602082840312156123ff57600080fd5b600061240b84846120bb565b949350505050565b60006020828403121561242557600080fd5b600061240b84846120c6565b6000806040838503121561244457600080fd5b600061245085856120bb565b9250506020612461858286016120bb565b9150509250929050565b6000806040838503121561247e57600080fd5b600061248a85856120bb565b92505060206124618582860161237b565b600080600080606085870312156124b157600080fd5b60006124bd87876120bb565b94505060206124ce878288016123d7565b93505060408501356001600160401b038111156124ea57600080fd5b6124f6878288016122eb565b95989497509550505050565b6000806020838503121561251557600080fd5b82356001600160401b0381111561252b57600080fd5b612537858286016120d1565b92509250509250929050565b60006020828403121561255557600080fd5b81516001600160401b0381111561256b57600080fd5b61240b84828501612198565b6000806040838503121561258a57600080fd5b82356001600160401b038111156125a057600080fd5b6125ac85828601612119565b92505060208301356001600160401b038111156125c857600080fd5b61246185828601612208565b600080600080608085870312156125ea57600080fd5b84516001600160401b0381111561260057600080fd5b61260c87828801612265565b94505060208501516001600160401b0381111561262857600080fd5b61263487828801612265565b9350506040612645878288016122e0565b9250506060612656878288016122e0565b91505092959194509250565b60006020828403121561267457600080fd5b600061240b84846122d5565b60006020828403121561269257600080fd5b600061240b84846122e0565b600080602083850312156126b157600080fd5b82356001600160401b038111156126c757600080fd5b612537858286016122eb565b600080600080606085870312156126e957600080fd5b60006126f5878761237b565b94505060208501356001600160401b0381111561271157600080fd5b61271d878288016122eb565b93509350506040612656878288016123d7565b60008060006060848603121561274557600080fd5b60006127518686612386565b9350506020612762868287016120c6565b9250506040612773868287016123e2565b9150509250925092565b60006020828403121561278f57600080fd5b81516001600160401b038111156127a557600080fd5b61240b84828501612391565b6000602082840312156127c357600080fd5b600061240b84846123e2565b600080604083850312156127e257600080fd5b60006127ee85856123e2565b9250506020612461858286016122e0565b600061280b838361282e565b505060200190565b600061280b838361291f565b612828816131ed565b82525050565b612828816131ba565b6000612842826131ad565b61284c81856131b1565b9350612857836131a7565b8060005b8381101561288557815161286f88826127ff565b975061287a836131a7565b92505060010161285b565b509495945050505050565b600061289b826131ad565b6128a581856131b1565b93506128b0836131a7565b8060005b838110156128855781516128c88882612813565b97506128d3836131a7565b9250506001016128b4565b612828816131c5565b60006128f2826131ad565b6128fc81856131b1565b935061290c818560208601613225565b61291581613251565b9093019392505050565b612828816131f8565b61282881613203565b600061293c826131ad565b6129468185610846565b9350612956818560208601613225565b9290920192915050565b600061296d6022836131b1565b7f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e815261647360f01b602082015260400192915050565b60006129b16025836131b1565b7f5f5f73657456616c6964617465645661756c7450726f78793a20416c726561648152641e481cd95d60da1b602082015260400192915050565b60006129f86027836131b1565b7f736574436f6e666967466f7246756e643a20466565206973206e6f74207265678152661a5cdd195c995960ca1b602082015260400192915050565b6000612a416049836131b1565b7f6f6e6c7946756e644465706c6f7965724f776e65723a204f6e6c79207468652081527f46756e644465706c6f796572206f776e65722063616e2063616c6c207468697360208201526810333ab731ba34b7b760b91b604082015260600192915050565b6000612ab2602c836131b1565b7f5f5f73657456616c6964617465645661756c7450726f78793a204d697373696e81526b67207661756c7450726f787960a01b602082015260400192915050565b6000612b00601b836131b1565b7f536166654d6174683a206164646974696f6e206f766572666c6f770000000000815260200192915050565b6000612b39602d836131b1565b7f7265636569766543616c6c46726f6d436f6d7074726f6c6c65723a20496e766181526c1b1a590817d858dd1a5bdb9259609a1b602082015260400192915050565b6000612b88601e836131b1565b7f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815260200192915050565b6000612bc1603d836131b1565b7f736574436f6e666967466f7246756e643a206665657320616e6420736574746981527f6e677344617461206172726179206c656e6774687320756e657175616c000000602082015260400192915050565b6000612c206020836131b1565b7f5f5f67657447617641734e65636573736172793a20496e76616c696420474156815260200192915050565b6000612c596035836131b1565b7f5f5f73657456616c6964617465645661756c7450726f78793a204e6f7420746881527432902b30bab63a283937bc3c9030b1b1b2b9b9b7b960591b602082015260400192915050565b6000612cb06030836131b1565b7f736574436f6e666967466f7246756e643a20666565732063616e6e6f7420696e81526f636c756465206475706c69636174657360801b602082015260400192915050565b6000612d026025836131b1565b7f64657265676973746572466565733a205f666565732063616e6e6f7420626520815264656d70747960d81b602082015260400192915050565b6000612d496024836131b1565b7f7265676973746572466565733a2066656520616c726561647920726567697374815263195c995960e21b602082015260400192915050565b6000612d8f6025836131b1565b7f64657265676973746572466565733a20666565206973206e6f742072656769738152641d195c995960da1b602082015260400192915050565b6000612dd66023836131b1565b7f5f5f736574746c654665653a20496e76616c696420536574746c656d656e745481526279706560e81b602082015260400192915050565b6000612e1b6023836131b1565b7f7265676973746572466565733a205f666565732063616e6e6f7420626520656d81526270747960e81b602082015260400192915050565b6000612e606020836131b1565b7f5f5f696e766f6b65486f6f6b3a2046756e64206973206e6f7420616374697665815260200192915050565b612828816131ea565b6000610fb68284612931565b602081016108ce828461282e565b60408101612ebd828561281f565b610fb6602083018461282e565b60408101612ed8828561281f565b818103602083015261240b81846128e7565b60408101612ebd828561282e565b60a08101612f06828861282e565b612f13602083018761282e565b612f20604083018661291f565b8181036060830152612f3281856128e7565b90506118eb6080830184612e8c565b60608101612f4f828661282e565b612f5c602083018561282e565b61240b6040830184612e8c565b60408101612f77828561282e565b610fb66020830184612e8c565b60208082528101610fb68184612837565b60808082528101612fa68187612890565b90508181036020830152612fba8186612890565b9050612fc960408301856128de565b612fd660608301846128de565b95945050505050565b602081016108ce82846128de565b60208082528101610fb681846128e7565b60408101612ed88285612928565b602080825281016108ce81612960565b602080825281016108ce816129a4565b602080825281016108ce816129eb565b602080825281016108ce81612a34565b602080825281016108ce81612aa5565b602080825281016108ce81612af3565b602080825281016108ce81612b2c565b602080825281016108ce81612b7b565b602080825281016108ce81612bb4565b602080825281016108ce81612c13565b602080825281016108ce81612c4c565b602080825281016108ce81612ca3565b602080825281016108ce81612cf5565b602080825281016108ce81612d3c565b602080825281016108ce81612d82565b602080825281016108ce81612dc9565b602080825281016108ce81612e0e565b602080825281016108ce81612e53565b602081016108ce8284612e8c565b6040518181016001600160401b038111828210171561315857600080fd5b604052919050565b60006001600160401b0382111561317657600080fd5b5060209081020190565b60006001600160401b0382111561319657600080fd5b506020601f91909101601f19160190565b60200190565b5190565b90815260200190565b60006108ce826131de565b151590565b806108468161325b565b8061084681613265565b6001600160a01b031690565b90565b60006108ce8261320e565b60006108ce826131ca565b60006108ce826131d4565b60006108ce826131ba565b82818337506000910152565b60005b83811015613240578181015183820152602001613228565b838111156103ac5750506000910152565b601f01601f191690565b600681106117c457fe5b600881106117c457fe5b613278816131ba565b81146117c457600080fd5b613278816131c5565b600681106117c457600080fd5b613278816131ea56fea2646970667358221220799f438e92aa468cdc60bbdcb01bb7eb8e546990065faa6c24b7944d1914db6d64736f6c634300060c0033",
  "devdoc": {
    "author": "Enzyme Council <security@enzyme.finance>",
    "kind": "dev",
    "methods": {
      "deactivateForFund()": {
        "details": "msg.sender is validated during __invokeHook()"
      },
      "deregisterFees(address[])": {
        "params": {
          "_fees": "Addresses of fees to be deregistered"
        }
      },
      "feeSettlesOnHook(address,uint8)": {
        "params": {
          "_fee": "The address of the fee to check",
          "_hook": "The FeeHook to check"
        },
        "returns": {
          "settlesOnHook_": "True if the fee settles on the given hook"
        }
      },
      "feeUpdatesOnHook(address,uint8)": {
        "params": {
          "_fee": "The address of the fee to check",
          "_hook": "The FeeHook to check"
        },
        "returns": {
          "updatesOnHook_": "True if the fee updates on the given hook"
        }
      },
      "feeUsesGavOnSettle(address)": {
        "params": {
          "_fee": "The address of the fee to check"
        },
        "returns": {
          "usesGav_": "True if the fee uses GAV during settle() implementation"
        }
      },
      "feeUsesGavOnUpdate(address)": {
        "params": {
          "_fee": "The address of the fee to check"
        },
        "returns": {
          "usesGav_": "True if the fee uses GAV during update() implementation"
        }
      },
      "getEnabledFeesForFund(address)": {
        "params": {
          "_comptrollerProxy": "The ComptrollerProxy of the fund"
        },
        "returns": {
          "enabledFees_": "An array of enabled fee addresses"
        }
      },
      "getFeeSharesOutstandingForFund(address,address)": {
        "params": {
          "_comptrollerProxy": "The ComptrollerProxy of the fund",
          "_fee": "The fee address"
        },
        "returns": {
          "sharesOutstanding_": "The amount of shares outstanding"
        }
      },
      "getFundDeployer()": {
        "returns": {
          "fundDeployer_": "The `FUND_DEPLOYER` variable value"
        }
      },
      "getOwner()": {
        "details": "Ownership is deferred to the owner of the FundDeployer contract",
        "returns": {
          "owner_": "The owner"
        }
      },
      "getRegisteredFees()": {
        "returns": {
          "registeredFees_": "A list of all registered fee addresses"
        }
      },
      "getVaultProxyForFund(address)": {
        "params": {
          "_comptrollerProxy": "The ComptrollerProxy of the fund"
        },
        "returns": {
          "vaultProxy_": "The VaultProxy of the fund"
        }
      },
      "invokeHook(uint8,bytes,uint256)": {
        "params": {
          "_gav": "The GAV for a fund if known in the invocating code, otherwise 0",
          "_hook": "The FeeHook to invoke",
          "_settlementData": "The encoded settlement parameters specific to the FeeHook"
        }
      },
      "isRegisteredFee(address)": {
        "params": {
          "_fee": "The address of the fee to check"
        },
        "returns": {
          "isRegisteredFee_": "True if the fee is registered"
        }
      },
      "receiveCallFromComptroller(address,uint256,bytes)": {
        "details": "This is the only way to call a function on this contract that updates VaultProxy state. For both of these actions, any caller is allowed, so we don't use the caller param.",
        "params": {
          "_actionId": "An ID representing the desired action",
          "_callArgs": "Encoded arguments specific to the _actionId"
        }
      },
      "registerFees(address[])": {
        "details": "Stores the hooks that a fee implements and whether each implementation uses GAV, which fronts the gas for calls to check if a hook is implemented, and guarantees that these hook implementation return values do not change post-registration.",
        "params": {
          "_fees": "Addresses of fees to be registered"
        }
      },
      "setConfigForFund(bytes)": {
        "details": "Caller is expected to be a valid ComptrollerProxy, but there isn't a need to validate. The order of `fees` determines the order in which fees of the same FeeHook will be applied. It is recommended to run ManagementFee before PerformanceFee in order to achieve precise PerformanceFee calcs.",
        "params": {
          "_configData": "Encoded config data"
        }
      }
    },
    "title": "FeeManager Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "activateForFund(bool)": {
        "notice": "Activate already-configured fees for use in the calling fund"
      },
      "deactivateForFund()": {
        "notice": "Deactivate fees for a fund"
      },
      "deregisterFees(address[])": {
        "notice": "Remove fees from the list of registered fees"
      },
      "feeSettlesOnHook(address,uint8)": {
        "notice": "Checks if a fee implements settle() on a particular hook"
      },
      "feeUpdatesOnHook(address,uint8)": {
        "notice": "Checks if a fee implements update() on a particular hook"
      },
      "feeUsesGavOnSettle(address)": {
        "notice": "Checks if a fee uses GAV in its settle() implementation"
      },
      "feeUsesGavOnUpdate(address)": {
        "notice": "Checks if a fee uses GAV in its update() implementation"
      },
      "getEnabledFeesForFund(address)": {
        "notice": "Get a list of enabled fees for a given fund"
      },
      "getFeeSharesOutstandingForFund(address,address)": {
        "notice": "Get the amount of shares outstanding for a particular fee for a fund"
      },
      "getFundDeployer()": {
        "notice": "Gets the `FUND_DEPLOYER` variable"
      },
      "getOwner()": {
        "notice": "Gets the owner of this contract"
      },
      "getRegisteredFees()": {
        "notice": "Get all registered fees"
      },
      "getVaultProxyForFund(address)": {
        "notice": "Gets the verified VaultProxy for a given ComptrollerProxy"
      },
      "invokeHook(uint8,bytes,uint256)": {
        "notice": "Allows all fees for a particular FeeHook to implement settle() and update() logic"
      },
      "isRegisteredFee(address)": {
        "notice": "Check whether a fee is registered"
      },
      "receiveCallFromComptroller(address,uint256,bytes)": {
        "notice": "Receives a dispatched `callOnExtension` from a fund's ComptrollerProxy"
      },
      "registerFees(address[])": {
        "notice": "Add fees to the list of registered fees"
      },
      "setConfigForFund(bytes)": {
        "notice": "Enable and configure fees for use in the calling fund"
      }
    },
    "notice": "Manages fees for funds",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 37618,
        "contract": "contracts/release/extensions/fee-manager/FeeManager.sol:FeeManager",
        "label": "comptrollerProxyToVaultProxy",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 13259,
        "contract": "contracts/release/extensions/fee-manager/FeeManager.sol:FeeManager",
        "label": "registeredFees",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(AddressSet)2091_storage"
      },
      {
        "astId": 13263,
        "contract": "contracts/release/extensions/fee-manager/FeeManager.sol:FeeManager",
        "label": "feeToUsesGavOnSettle",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 13267,
        "contract": "contracts/release/extensions/fee-manager/FeeManager.sol:FeeManager",
        "label": "feeToUsesGavOnUpdate",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 13273,
        "contract": "contracts/release/extensions/fee-manager/FeeManager.sol:FeeManager",
        "label": "feeToHookToImplementsSettle",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_enum(FeeHook)14626,t_bool))"
      },
      {
        "astId": 13279,
        "contract": "contracts/release/extensions/fee-manager/FeeManager.sol:FeeManager",
        "label": "feeToHookToImplementsUpdate",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_enum(FeeHook)14626,t_bool))"
      },
      {
        "astId": 13284,
        "contract": "contracts/release/extensions/fee-manager/FeeManager.sol:FeeManager",
        "label": "comptrollerProxyToFees",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 13290,
        "contract": "contracts/release/extensions/fee-manager/FeeManager.sol:FeeManager",
        "label": "comptrollerProxyToFeeToSharesOutstanding",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(FeeHook)14626": {
        "encoding": "inplace",
        "label": "enum IFeeManager.FeeHook",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_enum(FeeHook)14626,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(enum IFeeManager.FeeHook => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_enum(FeeHook)14626,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_enum(FeeHook)14626,t_bool)": {
        "encoding": "mapping",
        "key": "t_enum(FeeHook)14626",
        "label": "mapping(enum IFeeManager.FeeHook => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_struct(AddressSet)2091_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 2090,
            "contract": "contracts/release/extensions/fee-manager/FeeManager.sol:FeeManager",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1826_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)1826_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1821,
            "contract": "contracts/release/extensions/fee-manager/FeeManager.sol:FeeManager",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1825,
            "contract": "contracts/release/extensions/fee-manager/FeeManager.sol:FeeManager",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}