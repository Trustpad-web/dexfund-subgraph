{
  "address": "0xCAceC2732784751A46925ad63AA362e85603EAeE",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "comptrollerProxy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "highWaterMark",
          "type": "uint256"
        }
      ],
      "name": "ActivatedForFund",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "comptrollerProxy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "period",
          "type": "uint256"
        }
      ],
      "name": "FundSettingsAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "comptrollerProxy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prevSharePrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nextSharePrice",
          "type": "uint256"
        }
      ],
      "name": "LastSharePriceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "comptrollerProxy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prevHighWaterMark",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nextHighWaterMark",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "aggregateValueDue",
          "type": "uint256"
        }
      ],
      "name": "PaidOut",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "comptrollerProxy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prevAggregateValueDue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nextAggregateValueDue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "sharesOutstandingDiff",
          "type": "int256"
        }
      ],
      "name": "PerformanceUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_comptrollerProxy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "activateForFund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_comptrollerProxy",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_settingsData",
          "type": "bytes"
        }
      ],
      "name": "addFundSettings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_comptrollerProxy",
          "type": "address"
        }
      ],
      "name": "getFeeInfoForFund",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "rate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "period",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "activated",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastPaid",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "highWaterMark",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastSharePrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "aggregateValueDue",
              "type": "uint256"
            }
          ],
          "internalType": "struct PerformanceFee.FeeInfo",
          "name": "feeInfo_",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFeeManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "feeManager_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "identifier",
      "outputs": [
        {
          "internalType": "string",
          "name": "identifier_",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "implementedHooks",
      "outputs": [
        {
          "internalType": "enum IFeeManager.FeeHook[]",
          "name": "implementedHooksForSettle_",
          "type": "uint8[]"
        },
        {
          "internalType": "enum IFeeManager.FeeHook[]",
          "name": "implementedHooksForUpdate_",
          "type": "uint8[]"
        },
        {
          "internalType": "bool",
          "name": "usesGavOnSettle_",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "usesGavOnUpdate_",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_comptrollerProxy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "payout",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isPayable_",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_comptrollerProxy",
          "type": "address"
        }
      ],
      "name": "payoutAllowed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "payoutAllowed_",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_comptrollerProxy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vaultProxy",
          "type": "address"
        },
        {
          "internalType": "enum IFeeManager.FeeHook",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_gav",
          "type": "uint256"
        }
      ],
      "name": "settle",
      "outputs": [
        {
          "internalType": "enum IFeeManager.SettlementType",
          "name": "settlementType_",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "sharesDue_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_comptrollerProxy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vaultProxy",
          "type": "address"
        },
        {
          "internalType": "enum IFeeManager.FeeHook",
          "name": "_hook",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "_settlementData",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_gav",
          "type": "uint256"
        }
      ],
      "name": "update",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc574952d32b431a9fc1d84a7f19d6bb0573f4d449f06d9b4a7348d2727c88218",
  "receipt": {
    "to": null,
    "from": "0x5DB342FB039C1c85bec5fE89Af6734621f421D84",
    "contractAddress": "0xCAceC2732784751A46925ad63AA362e85603EAeE",
    "transactionIndex": 226,
    "gasUsed": "1668557",
    "logsBloom": "0x
    "blockHash": "0x1e0bcbd46fcd2af8fca0b23cebd1839699e58381391368eca3c634e82b1017ed",
    "transactionHash": "0xc574952d32b431a9fc1d84a7f19d6bb0573f4d449f06d9b4a7348d2727c88218",
    "logs": [],
    "blockNumber": 13430436,
    "cumulativeGasUsed": "37944557",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x654D14511f12cEB9252b8F0BdDDE98968f80EfF2"
  ],
  "linkedData": {
    "type": "FEE"
  },
  "solcInputHash": "d9ca3c6c6b3274b287f1d69a6e9ab10d",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"comptrollerProxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"highWaterMark\",\"type\":\"uint256\"}],\"name\":\"ActivatedForFund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"comptrollerProxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"FundSettingsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"comptrollerProxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevSharePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextSharePrice\",\"type\":\"uint256\"}],\"name\":\"LastSharePriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"comptrollerProxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevHighWaterMark\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextHighWaterMark\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"aggregateValueDue\",\"type\":\"uint256\"}],\"name\":\"PaidOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"comptrollerProxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevAggregateValueDue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextAggregateValueDue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"sharesOutstandingDiff\",\"type\":\"int256\"}],\"name\":\"PerformanceUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_comptrollerProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"activateForFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_comptrollerProxy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_settingsData\",\"type\":\"bytes\"}],\"name\":\"addFundSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_comptrollerProxy\",\"type\":\"address\"}],\"name\":\"getFeeInfoForFund\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastPaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"highWaterMark\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastSharePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aggregateValueDue\",\"type\":\"uint256\"}],\"internalType\":\"struct PerformanceFee.FeeInfo\",\"name\":\"feeInfo_\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"feeManager_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"identifier\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"identifier_\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementedHooks\",\"outputs\":[{\"internalType\":\"enum IFeeManager.FeeHook[]\",\"name\":\"implementedHooksForSettle_\",\"type\":\"uint8[]\"},{\"internalType\":\"enum IFeeManager.FeeHook[]\",\"name\":\"implementedHooksForUpdate_\",\"type\":\"uint8[]\"},{\"internalType\":\"bool\",\"name\":\"usesGavOnSettle_\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"usesGavOnUpdate_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_comptrollerProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"payout\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isPayable_\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_comptrollerProxy\",\"type\":\"address\"}],\"name\":\"payoutAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"payoutAllowed_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_comptrollerProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"},{\"internalType\":\"enum IFeeManager.FeeHook\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_gav\",\"type\":\"uint256\"}],\"name\":\"settle\",\"outputs\":[{\"internalType\":\"enum IFeeManager.SettlementType\",\"name\":\"settlementType_\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sharesDue_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_comptrollerProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"},{\"internalType\":\"enum IFeeManager.FeeHook\",\"name\":\"_hook\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_settlementData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_gav\",\"type\":\"uint256\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Enzyme Council <security@enzyme.finance>\",\"details\":\"This contract assumes that all shares in the VaultProxy are shares outstanding, which is fine for this release. Even if they are not, they are still shares that are only claimable by the fund owner.\",\"kind\":\"dev\",\"methods\":{\"activateForFund(address,address)\":{\"params\":{\"_comptrollerProxy\":\"The ComptrollerProxy of the fund\"}},\"addFundSettings(address,bytes)\":{\"details\":\"`highWaterMark`, `lastSharePrice`, and `activated` are set during activation\",\"params\":{\"_comptrollerProxy\":\"The ComptrollerProxy of the fund\",\"_settingsData\":\"Encoded settings to apply to the policy for the fund\"}},\"getFeeInfoForFund(address)\":{\"params\":{\"_comptrollerProxy\":\"The ComptrollerProxy contract of the fund\"},\"returns\":{\"feeInfo_\":\"The feeInfo\"}},\"getFeeManager()\":{\"returns\":{\"feeManager_\":\"The `FEE_MANAGER` variable value\"}},\"identifier()\":{\"returns\":{\"identifier_\":\"The identifier string\"}},\"implementedHooks()\":{\"details\":\"Used only during fee registration\",\"returns\":{\"implementedHooksForSettle_\":\"The hooks during which settle() is implemented\",\"implementedHooksForUpdate_\":\"The hooks during which update() is implemented\",\"usesGavOnSettle_\":\"True if GAV is used during the settle() implementation\",\"usesGavOnUpdate_\":\"True if GAV is used during the update() implementation\"}},\"payout(address,address)\":{\"params\":{\"_comptrollerProxy\":\"The ComptrollerProxy of the fund\"},\"returns\":{\"isPayable_\":\"True if shares outstanding can be paid out\"}},\"payoutAllowed(address)\":{\"details\":\"Payout is allowed if fees have not yet been settled in a crystallization period, and at least 1 crystallization period has passed since activation\",\"params\":{\"_comptrollerProxy\":\"The ComptrollerProxy of the fund\"},\"returns\":{\"payoutAllowed_\":\"True if the fee payment is due\"}},\"settle(address,address,uint8,bytes,uint256)\":{\"params\":{\"_comptrollerProxy\":\"The ComptrollerProxy of the fund\",\"_gav\":\"The GAV of the fund\",\"_vaultProxy\":\"The VaultProxy of the fund\"},\"returns\":{\"_1\":\"(unused) The payer of shares due\",\"settlementType_\":\"The type of settlement\",\"sharesDue_\":\"The amount of shares due\"}},\"update(address,address,uint8,bytes,uint256)\":{\"params\":{\"_comptrollerProxy\":\"The ComptrollerProxy of the fund\",\"_gav\":\"The GAV of the fund\",\"_hook\":\"The FeeHook being executed\",\"_settlementData\":\"Encoded args to use in calculating the settlement\",\"_vaultProxy\":\"The VaultProxy of the fund\"}}},\"title\":\"PerformanceFee Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"activateForFund(address,address)\":{\"notice\":\"Activates the fee for a fund\"},\"addFundSettings(address,bytes)\":{\"notice\":\"Add the initial fee settings for a fund\"},\"getFeeInfoForFund(address)\":{\"notice\":\"Gets the feeInfo for a given fund\"},\"getFeeManager()\":{\"notice\":\"Gets the `FEE_MANAGER` variable\"},\"identifier()\":{\"notice\":\"Provides a constant string identifier for a fee\"},\"implementedHooks()\":{\"notice\":\"Gets the hooks that are implemented by the fee\"},\"payout(address,address)\":{\"notice\":\"Checks whether the shares outstanding for the fee can be paid out, and updates the info for the fee's last payout\"},\"payoutAllowed(address)\":{\"notice\":\"Checks whether the shares outstanding can be paid out\"},\"settle(address,address,uint8,bytes,uint256)\":{\"notice\":\"Settles the fee and calculates shares due\"},\"update(address,address,uint8,bytes,uint256)\":{\"notice\":\"Updates the fee state after all fees have finished settle()\"}},\"notice\":\"A performance-based fee with configurable rate and crystallization period, using a high watermark\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/release/extensions/fee-manager/fees/PerformanceFee.sol\":\"PerformanceFee\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SignedSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @title SignedSafeMath\\n * @dev Signed math operations with safety checks that revert on error.\\n */\\nlibrary SignedSafeMath {\\n    int256 constant private _INT256_MIN = -2**255;\\n\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        int256 c = a * b;\\n        require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n        require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0xd17ac7e1d8f83d20d80e652adfed83da122f3a3c7b69fefa2985d85aebf0a3e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x1562cd9922fbf739edfb979f506809e2743789cbde3177515542161c3d04b164\",\"license\":\"MIT\"},\"contracts/persistent/dispatcher/IDispatcher.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title IDispatcher Interface\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\ninterface IDispatcher {\\r\\n    function cancelMigration(address _vaultProxy, bool _bypassFailure) external;\\r\\n\\r\\n    function claimOwnership() external;\\r\\n\\r\\n    function deployVaultProxy(\\r\\n        address _vaultLib,\\r\\n        address _owner,\\r\\n        address _vaultAccessor,\\r\\n        string calldata _fundName\\r\\n    ) external returns (address vaultProxy_);\\r\\n\\r\\n    function executeMigration(address _vaultProxy, bool _bypassFailure) external;\\r\\n\\r\\n    function getCurrentFundDeployer() external view returns (address currentFundDeployer_);\\r\\n\\r\\n    function getFundDeployerForVaultProxy(address _vaultProxy)\\r\\n        external\\r\\n        view\\r\\n        returns (address fundDeployer_);\\r\\n\\r\\n    function getMigrationRequestDetailsForVaultProxy(address _vaultProxy)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            address nextFundDeployer_,\\r\\n            address nextVaultAccessor_,\\r\\n            address nextVaultLib_,\\r\\n            uint256 executableTimestamp_\\r\\n        );\\r\\n\\r\\n    function getMigrationTimelock() external view returns (uint256 migrationTimelock_);\\r\\n\\r\\n    function getNominatedOwner() external view returns (address nominatedOwner_);\\r\\n\\r\\n    function getOwner() external view returns (address owner_);\\r\\n\\r\\n    function getSharesTokenSymbol() external view returns (string memory sharesTokenSymbol_);\\r\\n\\r\\n    function getTimelockRemainingForMigrationRequest(address _vaultProxy)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 secondsRemaining_);\\r\\n\\r\\n    function hasExecutableMigrationRequest(address _vaultProxy)\\r\\n        external\\r\\n        view\\r\\n        returns (bool hasExecutableRequest_);\\r\\n\\r\\n    function hasMigrationRequest(address _vaultProxy)\\r\\n        external\\r\\n        view\\r\\n        returns (bool hasMigrationRequest_);\\r\\n\\r\\n    function removeNominatedOwner() external;\\r\\n\\r\\n    function setCurrentFundDeployer(address _nextFundDeployer) external;\\r\\n\\r\\n    function setMigrationTimelock(uint256 _nextTimelock) external;\\r\\n\\r\\n    function setNominatedOwner(address _nextNominatedOwner) external;\\r\\n\\r\\n    function setSharesTokenSymbol(string calldata _nextSymbol) external;\\r\\n\\r\\n    function signalMigration(\\r\\n        address _vaultProxy,\\r\\n        address _nextVaultAccessor,\\r\\n        address _nextVaultLib,\\r\\n        bool _bypassFailure\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x9485f21d0ea8923cb76981b13eeb5aca0d0b44b209c352038d09ca99780df438\",\"license\":\"GPL-3.0\"},\"contracts/persistent/utils/IMigratableVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title IMigratableVault Interface\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\n/// @dev DO NOT EDIT CONTRACT\\r\\ninterface IMigratableVault {\\r\\n    function canMigrate(address _who) external view returns (bool canMigrate_);\\r\\n\\r\\n    function init(\\r\\n        address _owner,\\r\\n        address _accessor,\\r\\n        string calldata _fundName\\r\\n    ) external;\\r\\n\\r\\n    function setAccessor(address _nextAccessor) external;\\r\\n\\r\\n    function setVaultLib(address _nextVaultLib) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xe57f17e0b9eaaf0090fb0f9039e0dc60d184a05b1a6b02491787c506b7a4a9db\",\"license\":\"GPL-3.0\"},\"contracts/release/core/fund-deployer/IFundDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title IFundDeployer Interface\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\ninterface IFundDeployer {\\r\\n    enum ReleaseStatus {PreLaunch, Live, Paused}\\r\\n\\r\\n    function getOwner() external view returns (address);\\r\\n\\r\\n    function getReleaseStatus() external view returns (ReleaseStatus);\\r\\n\\r\\n    function isRegisteredVaultCall(address, bytes4) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x3c8c95a5d0e03da6a5f0278e5fbe40bf4f2d274afc2d52815fefaba847931bf9\",\"license\":\"GPL-3.0\"},\"contracts/release/core/fund/comptroller/ComptrollerLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\nimport \\\"../../../../persistent/dispatcher/IDispatcher.sol\\\";\\r\\nimport \\\"../../../extensions/IExtension.sol\\\";\\r\\nimport \\\"../../../extensions/fee-manager/IFeeManager.sol\\\";\\r\\nimport \\\"../../../extensions/policy-manager/IPolicyManager.sol\\\";\\r\\nimport \\\"../../../infrastructure/price-feeds/primitives/IPrimitivePriceFeed.sol\\\";\\r\\nimport \\\"../../../infrastructure/value-interpreter/IValueInterpreter.sol\\\";\\r\\nimport \\\"../../../utils/AddressArrayLib.sol\\\";\\r\\nimport \\\"../../../utils/AssetFinalityResolver.sol\\\";\\r\\nimport \\\"../../fund-deployer/IFundDeployer.sol\\\";\\r\\nimport \\\"../vault/IVault.sol\\\";\\r\\nimport \\\"./IComptroller.sol\\\";\\r\\n\\r\\n/// @title ComptrollerLib Contract\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\n/// @notice The core logic library shared by all funds\\r\\ncontract ComptrollerLib is IComptroller, AssetFinalityResolver {\\r\\n    using AddressArrayLib for address[];\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for ERC20;\\r\\n\\r\\n    event MigratedSharesDuePaid(uint256 sharesDue);\\r\\n\\r\\n    event OverridePauseSet(bool indexed overridePause);\\r\\n\\r\\n    event PreRedeemSharesHookFailed(\\r\\n        bytes failureReturnData,\\r\\n        address redeemer,\\r\\n        uint256 sharesQuantity\\r\\n    );\\r\\n\\r\\n    event SharesBought(\\r\\n        address indexed caller,\\r\\n        address indexed buyer,\\r\\n        uint256 investmentAmount,\\r\\n        uint256 sharesIssued,\\r\\n        uint256 sharesReceived\\r\\n    );\\r\\n\\r\\n    event SharesRedeemed(\\r\\n        address indexed redeemer,\\r\\n        uint256 sharesQuantity,\\r\\n        address[] receivedAssets,\\r\\n        uint256[] receivedAssetQuantities\\r\\n    );\\r\\n\\r\\n    event VaultProxySet(address vaultProxy);\\r\\n\\r\\n    // Constants and immutables - shared by all proxies\\r\\n    uint256 private constant SHARES_UNIT = 10**18;\\r\\n    address private immutable DISPATCHER;\\r\\n    address private immutable FUND_DEPLOYER;\\r\\n    address private immutable FEE_MANAGER;\\r\\n    address private immutable INTEGRATION_MANAGER;\\r\\n    address private immutable PRIMITIVE_PRICE_FEED;\\r\\n    address private immutable POLICY_MANAGER;\\r\\n    address private immutable VALUE_INTERPRETER;\\r\\n\\r\\n    // Pseudo-constants (can only be set once)\\r\\n\\r\\n    address internal denominationAsset;\\r\\n    address internal vaultProxy;\\r\\n    // True only for the one non-proxy\\r\\n    bool internal isLib;\\r\\n\\r\\n    // Storage\\r\\n\\r\\n    // Allows a fund owner to override a release-level pause\\r\\n    bool internal overridePause;\\r\\n    // A reverse-mutex, granting atomic permission for particular contracts to make vault calls\\r\\n    bool internal permissionedVaultActionAllowed;\\r\\n    // A mutex to protect against reentrancy\\r\\n    bool internal reentranceLocked;\\r\\n    // A timelock between any \\\"shares actions\\\" (i.e., buy and redeem shares), per-account\\r\\n    uint256 internal sharesActionTimelock;\\r\\n    mapping(address => uint256) internal acctToLastSharesAction;\\r\\n\\r\\n    ///////////////\\r\\n    // MODIFIERS //\\r\\n    ///////////////\\r\\n\\r\\n    modifier allowsPermissionedVaultAction() {\\r\\n        __assertPermissionedVaultActionNotAllowed();\\r\\n        permissionedVaultActionAllowed = true;\\r\\n        _;\\r\\n        permissionedVaultActionAllowed = false;\\r\\n    }\\r\\n\\r\\n    modifier locksReentrance() {\\r\\n        __assertNotReentranceLocked();\\r\\n        reentranceLocked = true;\\r\\n        _;\\r\\n        reentranceLocked = false;\\r\\n    }\\r\\n\\r\\n    modifier onlyActive() {\\r\\n        __assertIsActive(vaultProxy);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyNotPaused() {\\r\\n        __assertNotPaused();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyFundDeployer() {\\r\\n        __assertIsFundDeployer(msg.sender);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        __assertIsOwner(msg.sender);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier timelockedSharesAction(address _account) {\\r\\n        __assertSharesActionNotTimelocked(_account);\\r\\n        _;\\r\\n        acctToLastSharesAction[_account] = block.timestamp;\\r\\n    }\\r\\n\\r\\n    // ASSERTION HELPERS\\r\\n\\r\\n    // Modifiers are inefficient in terms of contract size,\\r\\n    // so we use helper functions to prevent repetitive inlining of expensive string values.\\r\\n\\r\\n    /// @dev Since vaultProxy is set during activate(),\\r\\n    /// we can check that var rather than storing additional state\\r\\n    function __assertIsActive(address _vaultProxy) private pure {\\r\\n        require(_vaultProxy != address(0), \\\"Fund not active\\\");\\r\\n    }\\r\\n\\r\\n    function __assertIsFundDeployer(address _who) private view {\\r\\n        require(_who == FUND_DEPLOYER, \\\"Only FundDeployer callable\\\");\\r\\n    }\\r\\n\\r\\n    function __assertIsOwner(address _who) private view {\\r\\n        require(_who == IVault(vaultProxy).getOwner(), \\\"Only fund owner callable\\\");\\r\\n    }\\r\\n\\r\\n    function __assertLowLevelCall(bool _success, bytes memory _returnData) private pure {\\r\\n        require(_success, string(_returnData));\\r\\n    }\\r\\n\\r\\n    function __assertNotPaused() private view {\\r\\n        require(!__fundIsPaused(), \\\"Fund is paused\\\");\\r\\n    }\\r\\n\\r\\n    function __assertNotReentranceLocked() private view {\\r\\n        require(!reentranceLocked, \\\"Re-entrance\\\");\\r\\n    }\\r\\n\\r\\n    function __assertPermissionedVaultActionNotAllowed() private view {\\r\\n        require(!permissionedVaultActionAllowed, \\\"Vault action re-entrance\\\");\\r\\n    }\\r\\n\\r\\n    function __assertSharesActionNotTimelocked(address _account) private view {\\r\\n        require(\\r\\n            block.timestamp.sub(acctToLastSharesAction[_account]) >= sharesActionTimelock,\\r\\n            \\\"Shares action timelocked\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        address _dispatcher,\\r\\n        address _fundDeployer,\\r\\n        address _valueInterpreter,\\r\\n        address _feeManager,\\r\\n        address _integrationManager,\\r\\n        address _policyManager,\\r\\n        address _primitivePriceFeed,\\r\\n        address _synthetixPriceFeed,\\r\\n        address _synthetixAddressResolver\\r\\n    ) public AssetFinalityResolver(_synthetixPriceFeed, _synthetixAddressResolver) {\\r\\n        DISPATCHER = _dispatcher;\\r\\n        FEE_MANAGER = _feeManager;\\r\\n        FUND_DEPLOYER = _fundDeployer;\\r\\n        INTEGRATION_MANAGER = _integrationManager;\\r\\n        PRIMITIVE_PRICE_FEED = _primitivePriceFeed;\\r\\n        POLICY_MANAGER = _policyManager;\\r\\n        VALUE_INTERPRETER = _valueInterpreter;\\r\\n        isLib = true;\\r\\n    }\\r\\n\\r\\n    /////////////\\r\\n    // GENERAL //\\r\\n    /////////////\\r\\n\\r\\n    /// @notice Calls a specified action on an Extension\\r\\n    /// @param _extension The Extension contract to call (e.g., FeeManager)\\r\\n    /// @param _actionId An ID representing the action to take on the extension (see extension)\\r\\n    /// @param _callArgs The encoded data for the call\\r\\n    /// @dev Used to route arbitrary calls, so that msg.sender is the ComptrollerProxy\\r\\n    /// (for access control). Uses a mutex of sorts that allows \\\"permissioned vault actions\\\"\\r\\n    /// during calls originating from this function.\\r\\n    function callOnExtension(\\r\\n        address _extension,\\r\\n        uint256 _actionId,\\r\\n        bytes calldata _callArgs\\r\\n    ) external override onlyNotPaused onlyActive locksReentrance allowsPermissionedVaultAction {\\r\\n        require(\\r\\n            _extension == FEE_MANAGER || _extension == INTEGRATION_MANAGER,\\r\\n            \\\"callOnExtension: _extension invalid\\\"\\r\\n        );\\r\\n\\r\\n        IExtension(_extension).receiveCallFromComptroller(msg.sender, _actionId, _callArgs);\\r\\n    }\\r\\n\\r\\n    /// @notice Sets or unsets an override on a release-wide pause\\r\\n    /// @param _nextOverridePause True if the pause should be overrode\\r\\n    function setOverridePause(bool _nextOverridePause) external onlyOwner {\\r\\n        require(_nextOverridePause != overridePause, \\\"setOverridePause: Value already set\\\");\\r\\n\\r\\n        overridePause = _nextOverridePause;\\r\\n\\r\\n        emit OverridePauseSet(_nextOverridePause);\\r\\n    }\\r\\n\\r\\n    /// @notice Makes an arbitrary call with the VaultProxy contract as the sender\\r\\n    /// @param _contract The contract to call\\r\\n    /// @param _selector The selector to call\\r\\n    /// @param _encodedArgs The encoded arguments for the call\\r\\n    function vaultCallOnContract(\\r\\n        address _contract,\\r\\n        bytes4 _selector,\\r\\n        bytes calldata _encodedArgs\\r\\n    ) external onlyNotPaused onlyActive onlyOwner {\\r\\n        require(\\r\\n            IFundDeployer(FUND_DEPLOYER).isRegisteredVaultCall(_contract, _selector),\\r\\n            \\\"vaultCallOnContract: Unregistered\\\"\\r\\n        );\\r\\n\\r\\n        IVault(vaultProxy).callOnContract(_contract, abi.encodePacked(_selector, _encodedArgs));\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to check whether the release is paused, and that there is no local override\\r\\n    function __fundIsPaused() private view returns (bool) {\\r\\n        return\\r\\n            IFundDeployer(FUND_DEPLOYER).getReleaseStatus() ==\\r\\n            IFundDeployer.ReleaseStatus.Paused &&\\r\\n            !overridePause;\\r\\n    }\\r\\n\\r\\n    ////////////////////////////////\\r\\n    // PERMISSIONED VAULT ACTIONS //\\r\\n    ////////////////////////////////\\r\\n\\r\\n    /// @notice Makes a permissioned, state-changing call on the VaultProxy contract\\r\\n    /// @param _action The enum representing the VaultAction to perform on the VaultProxy\\r\\n    /// @param _actionData The call data for the action to perform\\r\\n    function permissionedVaultAction(VaultAction _action, bytes calldata _actionData)\\r\\n        external\\r\\n        override\\r\\n        onlyNotPaused\\r\\n        onlyActive\\r\\n    {\\r\\n        __assertPermissionedVaultAction(msg.sender, _action);\\r\\n\\r\\n        if (_action == VaultAction.AddTrackedAsset) {\\r\\n            __vaultActionAddTrackedAsset(_actionData);\\r\\n        } else if (_action == VaultAction.ApproveAssetSpender) {\\r\\n            __vaultActionApproveAssetSpender(_actionData);\\r\\n        } else if (_action == VaultAction.BurnShares) {\\r\\n            __vaultActionBurnShares(_actionData);\\r\\n        } else if (_action == VaultAction.MintShares) {\\r\\n            __vaultActionMintShares(_actionData);\\r\\n        } else if (_action == VaultAction.RemoveTrackedAsset) {\\r\\n            __vaultActionRemoveTrackedAsset(_actionData);\\r\\n        } else if (_action == VaultAction.TransferShares) {\\r\\n            __vaultActionTransferShares(_actionData);\\r\\n        } else if (_action == VaultAction.WithdrawAssetTo) {\\r\\n            __vaultActionWithdrawAssetTo(_actionData);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to assert that a caller is allowed to perform a particular VaultAction\\r\\n    function __assertPermissionedVaultAction(address _caller, VaultAction _action) private view {\\r\\n        require(\\r\\n            permissionedVaultActionAllowed,\\r\\n            \\\"__assertPermissionedVaultAction: No action allowed\\\"\\r\\n        );\\r\\n\\r\\n        if (_caller == INTEGRATION_MANAGER) {\\r\\n            require(\\r\\n                _action == VaultAction.ApproveAssetSpender ||\\r\\n                    _action == VaultAction.AddTrackedAsset ||\\r\\n                    _action == VaultAction.RemoveTrackedAsset ||\\r\\n                    _action == VaultAction.WithdrawAssetTo,\\r\\n                \\\"__assertPermissionedVaultAction: Not valid for IntegrationManager\\\"\\r\\n            );\\r\\n        } else if (_caller == FEE_MANAGER) {\\r\\n            require(\\r\\n                _action == VaultAction.BurnShares ||\\r\\n                    _action == VaultAction.MintShares ||\\r\\n                    _action == VaultAction.TransferShares,\\r\\n                \\\"__assertPermissionedVaultAction: Not valid for FeeManager\\\"\\r\\n            );\\r\\n        } else {\\r\\n            revert(\\\"__assertPermissionedVaultAction: Not a valid actor\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to add a tracked asset to the fund\\r\\n    function __vaultActionAddTrackedAsset(bytes memory _actionData) private {\\r\\n        address asset = abi.decode(_actionData, (address));\\r\\n        IVault(vaultProxy).addTrackedAsset(asset);\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to grant a spender an allowance for a fund's asset\\r\\n    function __vaultActionApproveAssetSpender(bytes memory _actionData) private {\\r\\n        (address asset, address target, uint256 amount) = abi.decode(\\r\\n            _actionData,\\r\\n            (address, address, uint256)\\r\\n        );\\r\\n        IVault(vaultProxy).approveAssetSpender(asset, target, amount);\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to burn fund shares for a particular account\\r\\n    function __vaultActionBurnShares(bytes memory _actionData) private {\\r\\n        (address target, uint256 amount) = abi.decode(_actionData, (address, uint256));\\r\\n        IVault(vaultProxy).burnShares(target, amount);\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to mint fund shares to a particular account\\r\\n    function __vaultActionMintShares(bytes memory _actionData) private {\\r\\n        (address target, uint256 amount) = abi.decode(_actionData, (address, uint256));\\r\\n        IVault(vaultProxy).mintShares(target, amount);\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to remove a tracked asset from the fund\\r\\n    function __vaultActionRemoveTrackedAsset(bytes memory _actionData) private {\\r\\n        address asset = abi.decode(_actionData, (address));\\r\\n\\r\\n        // Allowing this to fail silently makes it cheaper and simpler\\r\\n        // for Extensions to not query for the denomination asset\\r\\n        if (asset != denominationAsset) {\\r\\n            IVault(vaultProxy).removeTrackedAsset(asset);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to transfer fund shares from one account to another\\r\\n    function __vaultActionTransferShares(bytes memory _actionData) private {\\r\\n        (address from, address to, uint256 amount) = abi.decode(\\r\\n            _actionData,\\r\\n            (address, address, uint256)\\r\\n        );\\r\\n        IVault(vaultProxy).transferShares(from, to, amount);\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to withdraw an asset from the VaultProxy to a given account\\r\\n    function __vaultActionWithdrawAssetTo(bytes memory _actionData) private {\\r\\n        (address asset, address target, uint256 amount) = abi.decode(\\r\\n            _actionData,\\r\\n            (address, address, uint256)\\r\\n        );\\r\\n        IVault(vaultProxy).withdrawAssetTo(asset, target, amount);\\r\\n    }\\r\\n\\r\\n    ///////////////\\r\\n    // LIFECYCLE //\\r\\n    ///////////////\\r\\n\\r\\n    /// @notice Initializes a fund with its core config\\r\\n    /// @param _denominationAsset The asset in which the fund's value should be denominated\\r\\n    /// @param _sharesActionTimelock The minimum number of seconds between any two \\\"shares actions\\\"\\r\\n    /// (buying or selling shares) by the same user\\r\\n    /// @dev Pseudo-constructor per proxy.\\r\\n    /// No need to assert access because this is called atomically on deployment,\\r\\n    /// and once it's called, it cannot be called again.\\r\\n    function init(address _denominationAsset, uint256 _sharesActionTimelock) external override {\\r\\n        require(denominationAsset == address(0), \\\"init: Already initialized\\\");\\r\\n        require(\\r\\n            IPrimitivePriceFeed(PRIMITIVE_PRICE_FEED).isSupportedAsset(_denominationAsset),\\r\\n            \\\"init: Bad denomination asset\\\"\\r\\n        );\\r\\n\\r\\n        denominationAsset = _denominationAsset;\\r\\n        sharesActionTimelock = _sharesActionTimelock;\\r\\n    }\\r\\n\\r\\n    /// @notice Configure the extensions of a fund\\r\\n    /// @param _feeManagerConfigData Encoded config for fees to enable\\r\\n    /// @param _policyManagerConfigData Encoded config for policies to enable\\r\\n    /// @dev No need to assert anything beyond FundDeployer access.\\r\\n    /// Called atomically with init(), but after ComptrollerLib has been deployed,\\r\\n    /// giving access to its state and interface\\r\\n    function configureExtensions(\\r\\n        bytes calldata _feeManagerConfigData,\\r\\n        bytes calldata _policyManagerConfigData\\r\\n    ) external override onlyFundDeployer {\\r\\n        if (_feeManagerConfigData.length > 0) {\\r\\n            IExtension(FEE_MANAGER).setConfigForFund(_feeManagerConfigData);\\r\\n        }\\r\\n        if (_policyManagerConfigData.length > 0) {\\r\\n            IExtension(POLICY_MANAGER).setConfigForFund(_policyManagerConfigData);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Activates the fund by attaching a VaultProxy and activating all Extensions\\r\\n    /// @param _vaultProxy The VaultProxy to attach to the fund\\r\\n    /// @param _isMigration True if a migrated fund is being activated\\r\\n    /// @dev No need to assert anything beyond FundDeployer access.\\r\\n    function activate(address _vaultProxy, bool _isMigration) external override onlyFundDeployer {\\r\\n        vaultProxy = _vaultProxy;\\r\\n\\r\\n        emit VaultProxySet(_vaultProxy);\\r\\n\\r\\n        if (_isMigration) {\\r\\n            // Distribute any shares in the VaultProxy to the fund owner.\\r\\n            // This is a mechanism to ensure that even in the edge case of a fund being unable\\r\\n            // to payout fee shares owed during migration, these shares are not lost.\\r\\n            uint256 sharesDue = ERC20(_vaultProxy).balanceOf(_vaultProxy);\\r\\n            if (sharesDue > 0) {\\r\\n                IVault(_vaultProxy).transferShares(\\r\\n                    _vaultProxy,\\r\\n                    IVault(_vaultProxy).getOwner(),\\r\\n                    sharesDue\\r\\n                );\\r\\n\\r\\n                emit MigratedSharesDuePaid(sharesDue);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Note: a future release could consider forcing the adding of a tracked asset here,\\r\\n        // just in case a fund is migrating from an old configuration where they are not able\\r\\n        // to remove an asset to get under the tracked assets limit\\r\\n        IVault(_vaultProxy).addTrackedAsset(denominationAsset);\\r\\n\\r\\n        // Activate extensions\\r\\n        IExtension(FEE_MANAGER).activateForFund(_isMigration);\\r\\n        IExtension(INTEGRATION_MANAGER).activateForFund(_isMigration);\\r\\n        IExtension(POLICY_MANAGER).activateForFund(_isMigration);\\r\\n    }\\r\\n\\r\\n    /// @notice Remove the config for a fund\\r\\n    /// @dev No need to assert anything beyond FundDeployer access.\\r\\n    /// Calling onlyNotPaused here rather than in the FundDeployer allows\\r\\n    /// the owner to potentially override the pause and rescue unpaid fees.\\r\\n    function destruct()\\r\\n        external\\r\\n        override\\r\\n        onlyFundDeployer\\r\\n        onlyNotPaused\\r\\n        allowsPermissionedVaultAction\\r\\n    {\\r\\n        // Failsafe to protect the libs against selfdestruct\\r\\n        require(!isLib, \\\"destruct: Only delegate callable\\\");\\r\\n\\r\\n        // Deactivate the extensions\\r\\n        IExtension(FEE_MANAGER).deactivateForFund();\\r\\n        IExtension(INTEGRATION_MANAGER).deactivateForFund();\\r\\n        IExtension(POLICY_MANAGER).deactivateForFund();\\r\\n\\r\\n        // Delete storage of ComptrollerProxy\\r\\n        // There should never be ETH in the ComptrollerLib, so no need to waste gas\\r\\n        // to get the fund owner\\r\\n        selfdestruct(address(0));\\r\\n    }\\r\\n\\r\\n    ////////////////\\r\\n    // ACCOUNTING //\\r\\n    ////////////////\\r\\n\\r\\n    /// @notice Calculates the gross asset value (GAV) of the fund\\r\\n    /// @param _requireFinality True if all assets must have exact final balances settled\\r\\n    /// @return gav_ The fund GAV\\r\\n    /// @return isValid_ True if the conversion rates used to derive the GAV are all valid\\r\\n    function calcGav(bool _requireFinality) public override returns (uint256 gav_, bool isValid_) {\\r\\n        address vaultProxyAddress = vaultProxy;\\r\\n        address[] memory assets = IVault(vaultProxyAddress).getTrackedAssets();\\r\\n        if (assets.length == 0) {\\r\\n            return (0, true);\\r\\n        }\\r\\n\\r\\n        uint256[] memory balances = new uint256[](assets.length);\\r\\n        for (uint256 i; i < assets.length; i++) {\\r\\n            balances[i] = __finalizeIfSynthAndGetAssetBalance(\\r\\n                vaultProxyAddress,\\r\\n                assets[i],\\r\\n                _requireFinality\\r\\n            );\\r\\n        }\\r\\n\\r\\n        (gav_, isValid_) = IValueInterpreter(VALUE_INTERPRETER).calcCanonicalAssetsTotalValue(\\r\\n            assets,\\r\\n            balances,\\r\\n            denominationAsset\\r\\n        );\\r\\n\\r\\n        return (gav_, isValid_);\\r\\n    }\\r\\n\\r\\n    /// @notice Calculates the gross value of 1 unit of shares in the fund's denomination asset\\r\\n    /// @param _requireFinality True if all assets must have exact final balances settled\\r\\n    /// @return grossShareValue_ The amount of the denomination asset per share\\r\\n    /// @return isValid_ True if the conversion rates to derive the value are all valid\\r\\n    /// @dev Does not account for any fees outstanding.\\r\\n    function calcGrossShareValue(bool _requireFinality)\\r\\n        external\\r\\n        override\\r\\n        returns (uint256 grossShareValue_, bool isValid_)\\r\\n    {\\r\\n        uint256 gav;\\r\\n        (gav, isValid_) = calcGav(_requireFinality);\\r\\n\\r\\n        grossShareValue_ = __calcGrossShareValue(\\r\\n            gav,\\r\\n            ERC20(vaultProxy).totalSupply(),\\r\\n            10**uint256(ERC20(denominationAsset).decimals())\\r\\n        );\\r\\n\\r\\n        return (grossShareValue_, isValid_);\\r\\n    }\\r\\n\\r\\n    /// @dev Helper for calculating the gross share value\\r\\n    function __calcGrossShareValue(\\r\\n        uint256 _gav,\\r\\n        uint256 _sharesSupply,\\r\\n        uint256 _denominationAssetUnit\\r\\n    ) private pure returns (uint256 grossShareValue_) {\\r\\n        if (_sharesSupply == 0) {\\r\\n            return _denominationAssetUnit;\\r\\n        }\\r\\n\\r\\n        return _gav.mul(SHARES_UNIT).div(_sharesSupply);\\r\\n    }\\r\\n\\r\\n    ///////////////////\\r\\n    // PARTICIPATION //\\r\\n    ///////////////////\\r\\n\\r\\n    // BUY SHARES\\r\\n\\r\\n    /// @notice Buys shares in the fund for multiple sets of criteria\\r\\n    /// @param _buyers The accounts for which to buy shares\\r\\n    /// @param _investmentAmounts The amounts of the fund's denomination asset\\r\\n    /// with which to buy shares for the corresponding _buyers\\r\\n    /// @param _minSharesQuantities The minimum quantities of shares to buy\\r\\n    /// with the corresponding _investmentAmounts\\r\\n    /// @return sharesReceivedAmounts_ The actual amounts of shares received\\r\\n    /// by the corresponding _buyers\\r\\n    /// @dev Param arrays have indexes corresponding to individual __buyShares() orders.\\r\\n    function buyShares(\\r\\n        address[] calldata _buyers,\\r\\n        uint256[] calldata _investmentAmounts,\\r\\n        uint256[] calldata _minSharesQuantities\\r\\n    )\\r\\n        external\\r\\n        onlyNotPaused\\r\\n        locksReentrance\\r\\n        allowsPermissionedVaultAction\\r\\n        returns (uint256[] memory sharesReceivedAmounts_)\\r\\n    {\\r\\n        require(_buyers.length > 0, \\\"buyShares: Empty _buyers\\\");\\r\\n        require(\\r\\n            _buyers.length == _investmentAmounts.length &&\\r\\n                _buyers.length == _minSharesQuantities.length,\\r\\n            \\\"buyShares: Unequal arrays\\\"\\r\\n        );\\r\\n\\r\\n        address vaultProxyCopy = vaultProxy;\\r\\n        __assertIsActive(vaultProxyCopy);\\r\\n        require(\\r\\n            !IDispatcher(DISPATCHER).hasMigrationRequest(vaultProxyCopy),\\r\\n            \\\"buyShares: Pending migration\\\"\\r\\n        );\\r\\n\\r\\n        (uint256 gav, bool gavIsValid) = calcGav(true);\\r\\n        require(gavIsValid, \\\"buyShares: Invalid GAV\\\");\\r\\n\\r\\n        __buySharesSetupHook(msg.sender, _investmentAmounts, gav);\\r\\n\\r\\n        address denominationAssetCopy = denominationAsset;\\r\\n        uint256 sharePrice = __calcGrossShareValue(\\r\\n            gav,\\r\\n            ERC20(vaultProxyCopy).totalSupply(),\\r\\n            10**uint256(ERC20(denominationAssetCopy).decimals())\\r\\n        );\\r\\n\\r\\n        sharesReceivedAmounts_ = new uint256[](_buyers.length);\\r\\n        for (uint256 i; i < _buyers.length; i++) {\\r\\n            sharesReceivedAmounts_[i] = __buyShares(\\r\\n                _buyers[i],\\r\\n                _investmentAmounts[i],\\r\\n                _minSharesQuantities[i],\\r\\n                vaultProxyCopy,\\r\\n                sharePrice,\\r\\n                gav,\\r\\n                denominationAssetCopy\\r\\n            );\\r\\n\\r\\n            gav = gav.add(_investmentAmounts[i]);\\r\\n        }\\r\\n\\r\\n        __buySharesCompletedHook(msg.sender, sharesReceivedAmounts_, gav);\\r\\n\\r\\n        return sharesReceivedAmounts_;\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to buy shares\\r\\n    function __buyShares(\\r\\n        address _buyer,\\r\\n        uint256 _investmentAmount,\\r\\n        uint256 _minSharesQuantity,\\r\\n        address _vaultProxy,\\r\\n        uint256 _sharePrice,\\r\\n        uint256 _preBuySharesGav,\\r\\n        address _denominationAsset\\r\\n    ) private timelockedSharesAction(_buyer) returns (uint256 sharesReceived_) {\\r\\n        require(_investmentAmount > 0, \\\"__buyShares: Empty _investmentAmount\\\");\\r\\n\\r\\n        // Gives Extensions a chance to run logic prior to the minting of bought shares\\r\\n        __preBuySharesHook(_buyer, _investmentAmount, _minSharesQuantity, _preBuySharesGav);\\r\\n\\r\\n        // Calculate the amount of shares to issue with the investment amount\\r\\n        uint256 sharesIssued = _investmentAmount.mul(SHARES_UNIT).div(_sharePrice);\\r\\n\\r\\n        // Mint shares to the buyer\\r\\n        uint256 prevBuyerShares = ERC20(_vaultProxy).balanceOf(_buyer);\\r\\n        IVault(_vaultProxy).mintShares(_buyer, sharesIssued);\\r\\n\\r\\n        // Transfer the investment asset to the fund.\\r\\n        // Does not follow the checks-effects-interactions pattern, but it is preferred\\r\\n        // to have the final state of the VaultProxy prior to running __postBuySharesHook().\\r\\n        ERC20(_denominationAsset).safeTransferFrom(msg.sender, _vaultProxy, _investmentAmount);\\r\\n\\r\\n        // Gives Extensions a chance to run logic after shares are issued\\r\\n        __postBuySharesHook(_buyer, _investmentAmount, sharesIssued, _preBuySharesGav);\\r\\n\\r\\n        // The number of actual shares received may differ from shares issued due to\\r\\n        // how the PostBuyShares hooks are invoked by Extensions (i.e., fees)\\r\\n        sharesReceived_ = ERC20(_vaultProxy).balanceOf(_buyer).sub(prevBuyerShares);\\r\\n        require(\\r\\n            sharesReceived_ >= _minSharesQuantity,\\r\\n            \\\"__buyShares: Shares received < _minSharesQuantity\\\"\\r\\n        );\\r\\n\\r\\n        emit SharesBought(msg.sender, _buyer, _investmentAmount, sharesIssued, sharesReceived_);\\r\\n\\r\\n        return sharesReceived_;\\r\\n    }\\r\\n\\r\\n    /// @dev Helper for Extension actions after all __buyShares() calls are made\\r\\n    function __buySharesCompletedHook(\\r\\n        address _caller,\\r\\n        uint256[] memory _sharesReceivedAmounts,\\r\\n        uint256 _gav\\r\\n    ) private {\\r\\n        IPolicyManager(POLICY_MANAGER).validatePolicies(\\r\\n            address(this),\\r\\n            IPolicyManager.PolicyHook.BuySharesCompleted,\\r\\n            abi.encode(_caller, _sharesReceivedAmounts, _gav)\\r\\n        );\\r\\n\\r\\n        IFeeManager(FEE_MANAGER).invokeHook(\\r\\n            IFeeManager.FeeHook.BuySharesCompleted,\\r\\n            abi.encode(_caller, _sharesReceivedAmounts),\\r\\n            _gav\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @dev Helper for Extension actions before any __buyShares() calls are made\\r\\n    function __buySharesSetupHook(\\r\\n        address _caller,\\r\\n        uint256[] memory _investmentAmounts,\\r\\n        uint256 _gav\\r\\n    ) private {\\r\\n        IPolicyManager(POLICY_MANAGER).validatePolicies(\\r\\n            address(this),\\r\\n            IPolicyManager.PolicyHook.BuySharesSetup,\\r\\n            abi.encode(_caller, _investmentAmounts, _gav)\\r\\n        );\\r\\n\\r\\n        IFeeManager(FEE_MANAGER).invokeHook(\\r\\n            IFeeManager.FeeHook.BuySharesSetup,\\r\\n            abi.encode(_caller, _investmentAmounts),\\r\\n            _gav\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @dev Helper for Extension actions immediately prior to issuing shares.\\r\\n    /// This could be cleaned up so both Extensions take the same encoded args and handle GAV\\r\\n    /// in the same way, but there is not the obvious need for gas savings of recycling\\r\\n    /// the GAV value for the current policies as there is for the fees.\\r\\n    function __preBuySharesHook(\\r\\n        address _buyer,\\r\\n        uint256 _investmentAmount,\\r\\n        uint256 _minSharesQuantity,\\r\\n        uint256 _gav\\r\\n    ) private {\\r\\n        IFeeManager(FEE_MANAGER).invokeHook(\\r\\n            IFeeManager.FeeHook.PreBuyShares,\\r\\n            abi.encode(_buyer, _investmentAmount, _minSharesQuantity),\\r\\n            _gav\\r\\n        );\\r\\n\\r\\n        IPolicyManager(POLICY_MANAGER).validatePolicies(\\r\\n            address(this),\\r\\n            IPolicyManager.PolicyHook.PreBuyShares,\\r\\n            abi.encode(_buyer, _investmentAmount, _minSharesQuantity, _gav)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @dev Helper for Extension actions immediately after issuing shares.\\r\\n    /// Same comment applies from __preBuySharesHook() above.\\r\\n    function __postBuySharesHook(\\r\\n        address _buyer,\\r\\n        uint256 _investmentAmount,\\r\\n        uint256 _sharesIssued,\\r\\n        uint256 _preBuySharesGav\\r\\n    ) private {\\r\\n        uint256 gav = _preBuySharesGav.add(_investmentAmount);\\r\\n        IFeeManager(FEE_MANAGER).invokeHook(\\r\\n            IFeeManager.FeeHook.PostBuyShares,\\r\\n            abi.encode(_buyer, _investmentAmount, _sharesIssued),\\r\\n            gav\\r\\n        );\\r\\n\\r\\n        IPolicyManager(POLICY_MANAGER).validatePolicies(\\r\\n            address(this),\\r\\n            IPolicyManager.PolicyHook.PostBuyShares,\\r\\n            abi.encode(_buyer, _investmentAmount, _sharesIssued, gav)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // REDEEM SHARES\\r\\n\\r\\n    /// @notice Redeem all of the sender's shares for a proportionate slice of the fund's assets\\r\\n    /// @return payoutAssets_ The assets paid out to the redeemer\\r\\n    /// @return payoutAmounts_ The amount of each asset paid out to the redeemer\\r\\n    /// @dev See __redeemShares() for further detail\\r\\n    function redeemShares()\\r\\n        external\\r\\n        returns (address[] memory payoutAssets_, uint256[] memory payoutAmounts_)\\r\\n    {\\r\\n        return\\r\\n            __redeemShares(\\r\\n                msg.sender,\\r\\n                ERC20(vaultProxy).balanceOf(msg.sender),\\r\\n                new address[](0),\\r\\n                new address[](0)\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /// @notice Redeem a specified quantity of the sender's shares for a proportionate slice of\\r\\n    /// the fund's assets, optionally specifying additional assets and assets to skip.\\r\\n    /// @param _sharesQuantity The quantity of shares to redeem\\r\\n    /// @param _additionalAssets Additional (non-tracked) assets to claim\\r\\n    /// @param _assetsToSkip Tracked assets to forfeit\\r\\n    /// @return payoutAssets_ The assets paid out to the redeemer\\r\\n    /// @return payoutAmounts_ The amount of each asset paid out to the redeemer\\r\\n    /// @dev Any claim to passed _assetsToSkip will be forfeited entirely. This should generally\\r\\n    /// only be exercised if a bad asset is causing redemption to fail.\\r\\n    function redeemSharesDetailed(\\r\\n        uint256 _sharesQuantity,\\r\\n        address[] calldata _additionalAssets,\\r\\n        address[] calldata _assetsToSkip\\r\\n    ) external returns (address[] memory payoutAssets_, uint256[] memory payoutAmounts_) {\\r\\n        return __redeemShares(msg.sender, _sharesQuantity, _additionalAssets, _assetsToSkip);\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to parse an array of payout assets during redemption, taking into account\\r\\n    /// additional assets and assets to skip. _assetsToSkip ignores _additionalAssets.\\r\\n    /// All input arrays are assumed to be unique.\\r\\n    function __parseRedemptionPayoutAssets(\\r\\n        address[] memory _trackedAssets,\\r\\n        address[] memory _additionalAssets,\\r\\n        address[] memory _assetsToSkip\\r\\n    ) private pure returns (address[] memory payoutAssets_) {\\r\\n        address[] memory trackedAssetsToPayout = _trackedAssets.removeItems(_assetsToSkip);\\r\\n        if (_additionalAssets.length == 0) {\\r\\n            return trackedAssetsToPayout;\\r\\n        }\\r\\n\\r\\n        // Add additional assets. Duplicates of trackedAssets are ignored.\\r\\n        bool[] memory indexesToAdd = new bool[](_additionalAssets.length);\\r\\n        uint256 additionalItemsCount;\\r\\n        for (uint256 i; i < _additionalAssets.length; i++) {\\r\\n            if (!trackedAssetsToPayout.contains(_additionalAssets[i])) {\\r\\n                indexesToAdd[i] = true;\\r\\n                additionalItemsCount++;\\r\\n            }\\r\\n        }\\r\\n        if (additionalItemsCount == 0) {\\r\\n            return trackedAssetsToPayout;\\r\\n        }\\r\\n\\r\\n        payoutAssets_ = new address[](trackedAssetsToPayout.length.add(additionalItemsCount));\\r\\n        for (uint256 i; i < trackedAssetsToPayout.length; i++) {\\r\\n            payoutAssets_[i] = trackedAssetsToPayout[i];\\r\\n        }\\r\\n        uint256 payoutAssetsIndex = trackedAssetsToPayout.length;\\r\\n        for (uint256 i; i < _additionalAssets.length; i++) {\\r\\n            if (indexesToAdd[i]) {\\r\\n                payoutAssets_[payoutAssetsIndex] = _additionalAssets[i];\\r\\n                payoutAssetsIndex++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return payoutAssets_;\\r\\n    }\\r\\n\\r\\n    /// @dev Helper for system actions immediately prior to redeeming shares.\\r\\n    /// Policy validation is not currently allowed on redemption, to ensure continuous redeemability.\\r\\n    function __preRedeemSharesHook(address _redeemer, uint256 _sharesQuantity)\\r\\n        private\\r\\n        allowsPermissionedVaultAction\\r\\n    {\\r\\n        try\\r\\n            IFeeManager(FEE_MANAGER).invokeHook(\\r\\n                IFeeManager.FeeHook.PreRedeemShares,\\r\\n                abi.encode(_redeemer, _sharesQuantity),\\r\\n                0\\r\\n            )\\r\\n         {} catch (bytes memory reason) {\\r\\n            emit PreRedeemSharesHookFailed(reason, _redeemer, _sharesQuantity);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to redeem shares.\\r\\n    /// This function should never fail without a way to bypass the failure, which is assured\\r\\n    /// through two mechanisms:\\r\\n    /// 1. The FeeManager is called with the try/catch pattern to assure that calls to it\\r\\n    /// can never block redemption.\\r\\n    /// 2. If a token fails upon transfer(), that token can be skipped (and its balance forfeited)\\r\\n    /// by explicitly specifying _assetsToSkip.\\r\\n    /// Because of these assurances, shares should always be redeemable, with the exception\\r\\n    /// of the timelock period on shares actions that must be respected.\\r\\n    function __redeemShares(\\r\\n        address _redeemer,\\r\\n        uint256 _sharesQuantity,\\r\\n        address[] memory _additionalAssets,\\r\\n        address[] memory _assetsToSkip\\r\\n    )\\r\\n        private\\r\\n        locksReentrance\\r\\n        returns (address[] memory payoutAssets_, uint256[] memory payoutAmounts_)\\r\\n    {\\r\\n        require(_sharesQuantity > 0, \\\"__redeemShares: _sharesQuantity must be >0\\\");\\r\\n        require(\\r\\n            _additionalAssets.isUniqueSet(),\\r\\n            \\\"__redeemShares: _additionalAssets contains duplicates\\\"\\r\\n        );\\r\\n        require(_assetsToSkip.isUniqueSet(), \\\"__redeemShares: _assetsToSkip contains duplicates\\\");\\r\\n\\r\\n        IVault vaultProxyContract = IVault(vaultProxy);\\r\\n\\r\\n        // Only apply the sharesActionTimelock when a migration is not pending\\r\\n        if (!IDispatcher(DISPATCHER).hasMigrationRequest(address(vaultProxyContract))) {\\r\\n            __assertSharesActionNotTimelocked(_redeemer);\\r\\n            acctToLastSharesAction[_redeemer] = block.timestamp;\\r\\n        }\\r\\n\\r\\n        // When a fund is paused, settling fees will be skipped\\r\\n        if (!__fundIsPaused()) {\\r\\n            // Note that if a fee with `SettlementType.Direct` is charged here (i.e., not `Mint`),\\r\\n            // then those fee shares will be transferred from the user's balance rather\\r\\n            // than reallocated from the sharesQuantity being redeemed.\\r\\n            __preRedeemSharesHook(_redeemer, _sharesQuantity);\\r\\n        }\\r\\n\\r\\n        // Check the shares quantity against the user's balance after settling fees\\r\\n        ERC20 sharesContract = ERC20(address(vaultProxyContract));\\r\\n        require(\\r\\n            _sharesQuantity <= sharesContract.balanceOf(_redeemer),\\r\\n            \\\"__redeemShares: Insufficient shares\\\"\\r\\n        );\\r\\n\\r\\n        // Parse the payout assets given optional params to add or skip assets.\\r\\n        // Note that there is no validation that the _additionalAssets are known assets to\\r\\n        // the protocol. This means that the redeemer could specify a malicious asset,\\r\\n        // but since all state-changing, user-callable functions on this contract share the\\r\\n        // non-reentrant modifier, there is nowhere to perform a reentrancy attack.\\r\\n        payoutAssets_ = __parseRedemptionPayoutAssets(\\r\\n            vaultProxyContract.getTrackedAssets(),\\r\\n            _additionalAssets,\\r\\n            _assetsToSkip\\r\\n        );\\r\\n        require(payoutAssets_.length > 0, \\\"__redeemShares: No payout assets\\\");\\r\\n\\r\\n        // Destroy the shares.\\r\\n        // Must get the shares supply before doing so.\\r\\n        uint256 sharesSupply = sharesContract.totalSupply();\\r\\n        vaultProxyContract.burnShares(_redeemer, _sharesQuantity);\\r\\n\\r\\n        // Calculate and transfer payout asset amounts due to redeemer\\r\\n        payoutAmounts_ = new uint256[](payoutAssets_.length);\\r\\n        address denominationAssetCopy = denominationAsset;\\r\\n        for (uint256 i; i < payoutAssets_.length; i++) {\\r\\n            uint256 assetBalance = __finalizeIfSynthAndGetAssetBalance(\\r\\n                address(vaultProxyContract),\\r\\n                payoutAssets_[i],\\r\\n                true\\r\\n            );\\r\\n\\r\\n            // If all remaining shares are being redeemed, the logic changes slightly\\r\\n            if (_sharesQuantity == sharesSupply) {\\r\\n                payoutAmounts_[i] = assetBalance;\\r\\n                // Remove every tracked asset, except the denomination asset\\r\\n                if (payoutAssets_[i] != denominationAssetCopy) {\\r\\n                    vaultProxyContract.removeTrackedAsset(payoutAssets_[i]);\\r\\n                }\\r\\n            } else {\\r\\n                payoutAmounts_[i] = assetBalance.mul(_sharesQuantity).div(sharesSupply);\\r\\n            }\\r\\n\\r\\n            // Transfer payout asset to redeemer\\r\\n            if (payoutAmounts_[i] > 0) {\\r\\n                vaultProxyContract.withdrawAssetTo(payoutAssets_[i], _redeemer, payoutAmounts_[i]);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit SharesRedeemed(_redeemer, _sharesQuantity, payoutAssets_, payoutAmounts_);\\r\\n\\r\\n        return (payoutAssets_, payoutAmounts_);\\r\\n    }\\r\\n\\r\\n    ///////////////////\\r\\n    // STATE GETTERS //\\r\\n    ///////////////////\\r\\n\\r\\n    /// @notice Gets the `denominationAsset` variable\\r\\n    /// @return denominationAsset_ The `denominationAsset` variable value\\r\\n    function getDenominationAsset() external view override returns (address denominationAsset_) {\\r\\n        return denominationAsset;\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the routes for the various contracts used by all funds\\r\\n    /// @return dispatcher_ The `DISPATCHER` variable value\\r\\n    /// @return feeManager_ The `FEE_MANAGER` variable value\\r\\n    /// @return fundDeployer_ The `FUND_DEPLOYER` variable value\\r\\n    /// @return integrationManager_ The `INTEGRATION_MANAGER` variable value\\r\\n    /// @return policyManager_ The `POLICY_MANAGER` variable value\\r\\n    /// @return primitivePriceFeed_ The `PRIMITIVE_PRICE_FEED` variable value\\r\\n    /// @return valueInterpreter_ The `VALUE_INTERPRETER` variable value\\r\\n    function getLibRoutes()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            address dispatcher_,\\r\\n            address feeManager_,\\r\\n            address fundDeployer_,\\r\\n            address integrationManager_,\\r\\n            address policyManager_,\\r\\n            address primitivePriceFeed_,\\r\\n            address valueInterpreter_\\r\\n        )\\r\\n    {\\r\\n        return (\\r\\n            DISPATCHER,\\r\\n            FEE_MANAGER,\\r\\n            FUND_DEPLOYER,\\r\\n            INTEGRATION_MANAGER,\\r\\n            POLICY_MANAGER,\\r\\n            PRIMITIVE_PRICE_FEED,\\r\\n            VALUE_INTERPRETER\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the `overridePause` variable\\r\\n    /// @return overridePause_ The `overridePause` variable value\\r\\n    function getOverridePause() external view returns (bool overridePause_) {\\r\\n        return overridePause;\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the `sharesActionTimelock` variable\\r\\n    /// @return sharesActionTimelock_ The `sharesActionTimelock` variable value\\r\\n    function getSharesActionTimelock() external view returns (uint256 sharesActionTimelock_) {\\r\\n        return sharesActionTimelock;\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the `vaultProxy` variable\\r\\n    /// @return vaultProxy_ The `vaultProxy` variable value\\r\\n    function getVaultProxy() external view override returns (address vaultProxy_) {\\r\\n        return vaultProxy;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x3fbd449a29535a99834b434ef73f423fd48416c6067c363fc071cb4a03280a69\",\"license\":\"GPL-3.0\"},\"contracts/release/core/fund/comptroller/IComptroller.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title IComptroller Interface\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\ninterface IComptroller {\\r\\n    enum VaultAction {\\r\\n        None,\\r\\n        BurnShares,\\r\\n        MintShares,\\r\\n        TransferShares,\\r\\n        ApproveAssetSpender,\\r\\n        WithdrawAssetTo,\\r\\n        AddTrackedAsset,\\r\\n        RemoveTrackedAsset\\r\\n    }\\r\\n\\r\\n    function activate(address, bool) external;\\r\\n\\r\\n    function calcGav(bool) external returns (uint256, bool);\\r\\n\\r\\n    function calcGrossShareValue(bool) external returns (uint256, bool);\\r\\n\\r\\n    function callOnExtension(\\r\\n        address,\\r\\n        uint256,\\r\\n        bytes calldata\\r\\n    ) external;\\r\\n\\r\\n    function configureExtensions(bytes calldata, bytes calldata) external;\\r\\n\\r\\n    function destruct() external;\\r\\n\\r\\n    function getDenominationAsset() external view returns (address);\\r\\n\\r\\n    function getVaultProxy() external view returns (address);\\r\\n\\r\\n    function init(address, uint256) external;\\r\\n\\r\\n    function permissionedVaultAction(VaultAction, bytes calldata) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x642e5667ce4ca04063ceb1aff4137b3c6347b2efefdbff961c42c9c7b061f3aa\",\"license\":\"GPL-3.0\"},\"contracts/release/core/fund/vault/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"../../../../persistent/utils/IMigratableVault.sol\\\";\\r\\n\\r\\n/// @title IVault Interface\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\ninterface IVault is IMigratableVault {\\r\\n    function addTrackedAsset(address) external;\\r\\n\\r\\n    function approveAssetSpender(\\r\\n        address,\\r\\n        address,\\r\\n        uint256\\r\\n    ) external;\\r\\n\\r\\n    function burnShares(address, uint256) external;\\r\\n\\r\\n    function callOnContract(address, bytes calldata) external;\\r\\n\\r\\n    function getAccessor() external view returns (address);\\r\\n\\r\\n    function getOwner() external view returns (address);\\r\\n\\r\\n    function getTrackedAssets() external view returns (address[] memory);\\r\\n\\r\\n    function isTrackedAsset(address) external view returns (bool);\\r\\n\\r\\n    function mintShares(address, uint256) external;\\r\\n\\r\\n    function removeTrackedAsset(address) external;\\r\\n\\r\\n    function transferShares(\\r\\n        address,\\r\\n        address,\\r\\n        uint256\\r\\n    ) external;\\r\\n\\r\\n    function withdrawAssetTo(\\r\\n        address,\\r\\n        address,\\r\\n        uint256\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xd3e432ce41dbb0fc8ae5aa16ab0e053f889caaf803b01743f829e31f644dfb9b\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/IExtension.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title IExtension Interface\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\n/// @notice Interface for all extensions\\r\\ninterface IExtension {\\r\\n    function activateForFund(bool _isMigration) external;\\r\\n\\r\\n    function deactivateForFund() external;\\r\\n\\r\\n    function receiveCallFromComptroller(\\r\\n        address _comptrollerProxy,\\r\\n        uint256 _actionId,\\r\\n        bytes calldata _callArgs\\r\\n    ) external;\\r\\n\\r\\n    function setConfigForFund(bytes calldata _configData) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xadd1b5eaadff01af66e998c5df743c8489b0a944d8d9de861600e68541bab0d7\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/fee-manager/FeeManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\r\\nimport \\\"../../core/fund/comptroller/IComptroller.sol\\\";\\r\\nimport \\\"../../core/fund/vault/IVault.sol\\\";\\r\\nimport \\\"../../utils/AddressArrayLib.sol\\\";\\r\\nimport \\\"../utils/ExtensionBase.sol\\\";\\r\\nimport \\\"../utils/FundDeployerOwnerMixin.sol\\\";\\r\\nimport \\\"../utils/PermissionedVaultActionMixin.sol\\\";\\r\\nimport \\\"./IFee.sol\\\";\\r\\nimport \\\"./IFeeManager.sol\\\";\\r\\n\\r\\n/// @title FeeManager Contract\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\n/// @notice Manages fees for funds\\r\\ncontract FeeManager is\\r\\n    IFeeManager,\\r\\n    ExtensionBase,\\r\\n    FundDeployerOwnerMixin,\\r\\n    PermissionedVaultActionMixin\\r\\n{\\r\\n    using AddressArrayLib for address[];\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    event AllSharesOutstandingForcePaidForFund(\\r\\n        address indexed comptrollerProxy,\\r\\n        address payee,\\r\\n        uint256 sharesDue\\r\\n    );\\r\\n\\r\\n    event FeeDeregistered(address indexed fee, string indexed identifier);\\r\\n\\r\\n    event FeeEnabledForFund(\\r\\n        address indexed comptrollerProxy,\\r\\n        address indexed fee,\\r\\n        bytes settingsData\\r\\n    );\\r\\n\\r\\n    event FeeRegistered(\\r\\n        address indexed fee,\\r\\n        string indexed identifier,\\r\\n        FeeHook[] implementedHooksForSettle,\\r\\n        FeeHook[] implementedHooksForUpdate,\\r\\n        bool usesGavOnSettle,\\r\\n        bool usesGavOnUpdate\\r\\n    );\\r\\n\\r\\n    event FeeSettledForFund(\\r\\n        address indexed comptrollerProxy,\\r\\n        address indexed fee,\\r\\n        SettlementType indexed settlementType,\\r\\n        address payer,\\r\\n        address payee,\\r\\n        uint256 sharesDue\\r\\n    );\\r\\n\\r\\n    event SharesOutstandingPaidForFund(\\r\\n        address indexed comptrollerProxy,\\r\\n        address indexed fee,\\r\\n        uint256 sharesDue\\r\\n    );\\r\\n\\r\\n    event FeesRecipientSetForFund(\\r\\n        address indexed comptrollerProxy,\\r\\n        address prevFeesRecipient,\\r\\n        address nextFeesRecipient\\r\\n    );\\r\\n\\r\\n    EnumerableSet.AddressSet private registeredFees;\\r\\n    mapping(address => bool) private feeToUsesGavOnSettle;\\r\\n    mapping(address => bool) private feeToUsesGavOnUpdate;\\r\\n    mapping(address => mapping(FeeHook => bool)) private feeToHookToImplementsSettle;\\r\\n    mapping(address => mapping(FeeHook => bool)) private feeToHookToImplementsUpdate;\\r\\n\\r\\n    mapping(address => address[]) private comptrollerProxyToFees;\\r\\n    mapping(address => mapping(address => uint256))\\r\\n        private comptrollerProxyToFeeToSharesOutstanding;\\r\\n\\r\\n    constructor(address _fundDeployer) public FundDeployerOwnerMixin(_fundDeployer) {}\\r\\n\\r\\n    // EXTERNAL FUNCTIONS\\r\\n\\r\\n    /// @notice Activate already-configured fees for use in the calling fund\\r\\n    function activateForFund(bool) external override {\\r\\n        address vaultProxy = __setValidatedVaultProxy(msg.sender);\\r\\n\\r\\n        address[] memory enabledFees = comptrollerProxyToFees[msg.sender];\\r\\n        for (uint256 i; i < enabledFees.length; i++) {\\r\\n            IFee(enabledFees[i]).activateForFund(msg.sender, vaultProxy);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Deactivate fees for a fund\\r\\n    /// @dev msg.sender is validated during __invokeHook()\\r\\n    function deactivateForFund() external override {\\r\\n        // Settle continuous fees one last time, but without calling Fee.update()\\r\\n        __invokeHook(msg.sender, IFeeManager.FeeHook.Continuous, \\\"\\\", 0, false);\\r\\n\\r\\n        // Force payout of remaining shares outstanding\\r\\n        __forcePayoutAllSharesOutstanding(msg.sender);\\r\\n\\r\\n        // Clean up storage\\r\\n        __deleteFundStorage(msg.sender);\\r\\n    }\\r\\n\\r\\n    /// @notice Receives a dispatched `callOnExtension` from a fund's ComptrollerProxy\\r\\n    /// @param _actionId An ID representing the desired action\\r\\n    /// @param _callArgs Encoded arguments specific to the _actionId\\r\\n    /// @dev This is the only way to call a function on this contract that updates VaultProxy state.\\r\\n    /// For both of these actions, any caller is allowed, so we don't use the caller param.\\r\\n    function receiveCallFromComptroller(\\r\\n        address,\\r\\n        uint256 _actionId,\\r\\n        bytes calldata _callArgs\\r\\n    ) external override {\\r\\n        if (_actionId == 0) {\\r\\n            // Settle and update all continuous fees\\r\\n            __invokeHook(msg.sender, IFeeManager.FeeHook.Continuous, \\\"\\\", 0, true);\\r\\n        } else if (_actionId == 1) {\\r\\n            __payoutSharesOutstandingForFees(msg.sender, _callArgs);\\r\\n        } else {\\r\\n            revert(\\\"receiveCallFromComptroller: Invalid _actionId\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Enable and configure fees for use in the calling fund\\r\\n    /// @param _configData Encoded config data\\r\\n    /// @dev Caller is expected to be a valid ComptrollerProxy, but there isn't a need to validate.\\r\\n    /// The order of `fees` determines the order in which fees of the same FeeHook will be applied.\\r\\n    /// It is recommended to run ManagementFee before PerformanceFee in order to achieve precise\\r\\n    /// PerformanceFee calcs.\\r\\n    function setConfigForFund(bytes calldata _configData) external override {\\r\\n        (address[] memory fees, bytes[] memory settingsData) = abi.decode(\\r\\n            _configData,\\r\\n            (address[], bytes[])\\r\\n        );\\r\\n\\r\\n        // Sanity checks\\r\\n        require(\\r\\n            fees.length == settingsData.length,\\r\\n            \\\"setConfigForFund: fees and settingsData array lengths unequal\\\"\\r\\n        );\\r\\n        require(fees.isUniqueSet(), \\\"setConfigForFund: fees cannot include duplicates\\\");\\r\\n\\r\\n        // Enable each fee with settings\\r\\n        for (uint256 i; i < fees.length; i++) {\\r\\n            require(isRegisteredFee(fees[i]), \\\"setConfigForFund: Fee is not registered\\\");\\r\\n\\r\\n            // Set fund config on fee\\r\\n            IFee(fees[i]).addFundSettings(msg.sender, settingsData[i]);\\r\\n\\r\\n            // Enable fee for fund\\r\\n            comptrollerProxyToFees[msg.sender].push(fees[i]);\\r\\n\\r\\n            emit FeeEnabledForFund(msg.sender, fees[i], settingsData[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Allows all fees for a particular FeeHook to implement settle() and update() logic\\r\\n    /// @param _hook The FeeHook to invoke\\r\\n    /// @param _settlementData The encoded settlement parameters specific to the FeeHook\\r\\n    /// @param _gav The GAV for a fund if known in the invocating code, otherwise 0\\r\\n    function invokeHook(\\r\\n        FeeHook _hook,\\r\\n        bytes calldata _settlementData,\\r\\n        uint256 _gav\\r\\n    ) external override {\\r\\n        __invokeHook(msg.sender, _hook, _settlementData, _gav, true);\\r\\n    }\\r\\n\\r\\n    // PRIVATE FUNCTIONS\\r\\n\\r\\n    /// @dev Helper to destroy local storage to get gas refund,\\r\\n    /// and to prevent further calls to fee manager\\r\\n    function __deleteFundStorage(address _comptrollerProxy) private {\\r\\n        delete comptrollerProxyToFees[_comptrollerProxy];\\r\\n        delete comptrollerProxyToVaultProxy[_comptrollerProxy];\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to force the payout of shares outstanding across all fees.\\r\\n    /// For the current release, all shares in the VaultProxy are assumed to be\\r\\n    /// shares outstanding from fees. If not, then they were sent there by mistake\\r\\n    /// and are otherwise unrecoverable. We can therefore take the VaultProxy's\\r\\n    /// shares balance as the totalSharesOutstanding to payout to the fund owner.\\r\\n    function __forcePayoutAllSharesOutstanding(address _comptrollerProxy) private {\\r\\n        address vaultProxy = getVaultProxyForFund(_comptrollerProxy);\\r\\n\\r\\n        uint256 totalSharesOutstanding = ERC20(vaultProxy).balanceOf(vaultProxy);\\r\\n        if (totalSharesOutstanding == 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        // Destroy any shares outstanding storage\\r\\n        address[] memory fees = comptrollerProxyToFees[_comptrollerProxy];\\r\\n        for (uint256 i; i < fees.length; i++) {\\r\\n            delete comptrollerProxyToFeeToSharesOutstanding[_comptrollerProxy][fees[i]];\\r\\n        }\\r\\n\\r\\n        // Distribute all shares outstanding to the fees recipient\\r\\n        address payee = IVault(vaultProxy).getOwner();\\r\\n        __transferShares(_comptrollerProxy, vaultProxy, payee, totalSharesOutstanding);\\r\\n\\r\\n        emit AllSharesOutstandingForcePaidForFund(\\r\\n            _comptrollerProxy,\\r\\n            payee,\\r\\n            totalSharesOutstanding\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to get the canonical value of GAV if not yet set and required by fee\\r\\n    function __getGavAsNecessary(\\r\\n        address _comptrollerProxy,\\r\\n        address _fee,\\r\\n        uint256 _gavOrZero\\r\\n    ) private returns (uint256 gav_) {\\r\\n        if (_gavOrZero == 0 && feeUsesGavOnUpdate(_fee)) {\\r\\n            // Assumes that any fee that requires GAV would need to revert if invalid or not final\\r\\n            bool gavIsValid;\\r\\n            (gav_, gavIsValid) = IComptroller(_comptrollerProxy).calcGav(true);\\r\\n            require(gavIsValid, \\\"__getGavAsNecessary: Invalid GAV\\\");\\r\\n        } else {\\r\\n            gav_ = _gavOrZero;\\r\\n        }\\r\\n\\r\\n        return gav_;\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to run settle() on all enabled fees for a fund that implement a given hook, and then to\\r\\n    /// optionally run update() on the same fees. This order allows fees an opportunity to update\\r\\n    /// their local state after all VaultProxy state transitions (i.e., minting, burning,\\r\\n    /// transferring shares) have finished. To optimize for the expensive operation of calculating\\r\\n    /// GAV, once one fee requires GAV, we recycle that `gav` value for subsequent fees.\\r\\n    /// Assumes that _gav is either 0 or has already been validated.\\r\\n    function __invokeHook(\\r\\n        address _comptrollerProxy,\\r\\n        FeeHook _hook,\\r\\n        bytes memory _settlementData,\\r\\n        uint256 _gavOrZero,\\r\\n        bool _updateFees\\r\\n    ) private {\\r\\n        address[] memory fees = comptrollerProxyToFees[_comptrollerProxy];\\r\\n        if (fees.length == 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        address vaultProxy = getVaultProxyForFund(_comptrollerProxy);\\r\\n\\r\\n        // This check isn't strictly necessary, but its cost is insignificant,\\r\\n        // and helps to preserve data integrity.\\r\\n        require(vaultProxy != address(0), \\\"__invokeHook: Fund is not active\\\");\\r\\n\\r\\n        // First, allow all fees to implement settle()\\r\\n        uint256 gav = __settleFees(\\r\\n            _comptrollerProxy,\\r\\n            vaultProxy,\\r\\n            fees,\\r\\n            _hook,\\r\\n            _settlementData,\\r\\n            _gavOrZero\\r\\n        );\\r\\n\\r\\n        // Second, allow fees to implement update()\\r\\n        // This function does not allow any further altering of VaultProxy state\\r\\n        // (i.e., burning, minting, or transferring shares)\\r\\n        if (_updateFees) {\\r\\n            __updateFees(_comptrollerProxy, vaultProxy, fees, _hook, _settlementData, gav);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to payout the shares outstanding for the specified fees.\\r\\n    /// Does not call settle() on fees.\\r\\n    /// Only callable via ComptrollerProxy.callOnExtension().\\r\\n    function __payoutSharesOutstandingForFees(address _comptrollerProxy, bytes memory _callArgs)\\r\\n        private\\r\\n    {\\r\\n        address[] memory fees = abi.decode(_callArgs, (address[]));\\r\\n        address vaultProxy = getVaultProxyForFund(msg.sender);\\r\\n\\r\\n        uint256 sharesOutstandingDue;\\r\\n        for (uint256 i; i < fees.length; i++) {\\r\\n            if (!IFee(fees[i]).payout(_comptrollerProxy, vaultProxy)) {\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n\\r\\n                uint256 sharesOutstandingForFee\\r\\n             = comptrollerProxyToFeeToSharesOutstanding[_comptrollerProxy][fees[i]];\\r\\n            if (sharesOutstandingForFee == 0) {\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            sharesOutstandingDue = sharesOutstandingDue.add(sharesOutstandingForFee);\\r\\n\\r\\n            // Delete shares outstanding and distribute from VaultProxy to the fees recipient\\r\\n            comptrollerProxyToFeeToSharesOutstanding[_comptrollerProxy][fees[i]] = 0;\\r\\n\\r\\n            emit SharesOutstandingPaidForFund(_comptrollerProxy, fees[i], sharesOutstandingForFee);\\r\\n        }\\r\\n\\r\\n        if (sharesOutstandingDue > 0) {\\r\\n            __transferShares(\\r\\n                _comptrollerProxy,\\r\\n                vaultProxy,\\r\\n                IVault(vaultProxy).getOwner(),\\r\\n                sharesOutstandingDue\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to settle a fee\\r\\n    function __settleFee(\\r\\n        address _comptrollerProxy,\\r\\n        address _vaultProxy,\\r\\n        address _fee,\\r\\n        FeeHook _hook,\\r\\n        bytes memory _settlementData,\\r\\n        uint256 _gav\\r\\n    ) private {\\r\\n        (SettlementType settlementType, address payer, uint256 sharesDue) = IFee(_fee).settle(\\r\\n            _comptrollerProxy,\\r\\n            _vaultProxy,\\r\\n            _hook,\\r\\n            _settlementData,\\r\\n            _gav\\r\\n        );\\r\\n        if (settlementType == SettlementType.None) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        address payee;\\r\\n        if (settlementType == SettlementType.Direct) {\\r\\n            payee = IVault(_vaultProxy).getOwner();\\r\\n            __transferShares(_comptrollerProxy, payer, payee, sharesDue);\\r\\n        } else if (settlementType == SettlementType.Mint) {\\r\\n            payee = IVault(_vaultProxy).getOwner();\\r\\n            __mintShares(_comptrollerProxy, payee, sharesDue);\\r\\n        } else if (settlementType == SettlementType.Burn) {\\r\\n            __burnShares(_comptrollerProxy, payer, sharesDue);\\r\\n        } else if (settlementType == SettlementType.MintSharesOutstanding) {\\r\\n            comptrollerProxyToFeeToSharesOutstanding[_comptrollerProxy][_fee] = comptrollerProxyToFeeToSharesOutstanding[_comptrollerProxy][_fee]\\r\\n                .add(sharesDue);\\r\\n\\r\\n            payee = _vaultProxy;\\r\\n            __mintShares(_comptrollerProxy, payee, sharesDue);\\r\\n        } else if (settlementType == SettlementType.BurnSharesOutstanding) {\\r\\n            comptrollerProxyToFeeToSharesOutstanding[_comptrollerProxy][_fee] = comptrollerProxyToFeeToSharesOutstanding[_comptrollerProxy][_fee]\\r\\n                .sub(sharesDue);\\r\\n\\r\\n            payer = _vaultProxy;\\r\\n            __burnShares(_comptrollerProxy, payer, sharesDue);\\r\\n        } else {\\r\\n            revert(\\\"__settleFee: Invalid SettlementType\\\");\\r\\n        }\\r\\n\\r\\n        emit FeeSettledForFund(_comptrollerProxy, _fee, settlementType, payer, payee, sharesDue);\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to settle fees that implement a given fee hook\\r\\n    function __settleFees(\\r\\n        address _comptrollerProxy,\\r\\n        address _vaultProxy,\\r\\n        address[] memory _fees,\\r\\n        FeeHook _hook,\\r\\n        bytes memory _settlementData,\\r\\n        uint256 _gavOrZero\\r\\n    ) private returns (uint256 gav_) {\\r\\n        gav_ = _gavOrZero;\\r\\n\\r\\n        for (uint256 i; i < _fees.length; i++) {\\r\\n            if (!feeSettlesOnHook(_fees[i], _hook)) {\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            gav_ = __getGavAsNecessary(_comptrollerProxy, _fees[i], gav_);\\r\\n\\r\\n            __settleFee(_comptrollerProxy, _vaultProxy, _fees[i], _hook, _settlementData, gav_);\\r\\n        }\\r\\n\\r\\n        return gav_;\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to update fees that implement a given fee hook\\r\\n    function __updateFees(\\r\\n        address _comptrollerProxy,\\r\\n        address _vaultProxy,\\r\\n        address[] memory _fees,\\r\\n        FeeHook _hook,\\r\\n        bytes memory _settlementData,\\r\\n        uint256 _gavOrZero\\r\\n    ) private {\\r\\n        uint256 gav = _gavOrZero;\\r\\n\\r\\n        for (uint256 i; i < _fees.length; i++) {\\r\\n            if (!feeUpdatesOnHook(_fees[i], _hook)) {\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            gav = __getGavAsNecessary(_comptrollerProxy, _fees[i], gav);\\r\\n\\r\\n            IFee(_fees[i]).update(_comptrollerProxy, _vaultProxy, _hook, _settlementData, gav);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    ///////////////////\\r\\n    // FEES REGISTRY //\\r\\n    ///////////////////\\r\\n\\r\\n    /// @notice Remove fees from the list of registered fees\\r\\n    /// @param _fees Addresses of fees to be deregistered\\r\\n    function deregisterFees(address[] calldata _fees) external onlyFundDeployerOwner {\\r\\n        require(_fees.length > 0, \\\"deregisterFees: _fees cannot be empty\\\");\\r\\n\\r\\n        for (uint256 i; i < _fees.length; i++) {\\r\\n            require(isRegisteredFee(_fees[i]), \\\"deregisterFees: fee is not registered\\\");\\r\\n\\r\\n            registeredFees.remove(_fees[i]);\\r\\n\\r\\n            emit FeeDeregistered(_fees[i], IFee(_fees[i]).identifier());\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Add fees to the list of registered fees\\r\\n    /// @param _fees Addresses of fees to be registered\\r\\n    /// @dev Stores the hooks that a fee implements and whether each implementation uses GAV,\\r\\n    /// which fronts the gas for calls to check if a hook is implemented, and guarantees\\r\\n    /// that these hook implementation return values do not change post-registration.\\r\\n    function registerFees(address[] calldata _fees) external onlyFundDeployerOwner {\\r\\n        require(_fees.length > 0, \\\"registerFees: _fees cannot be empty\\\");\\r\\n\\r\\n        for (uint256 i; i < _fees.length; i++) {\\r\\n            require(!isRegisteredFee(_fees[i]), \\\"registerFees: fee already registered\\\");\\r\\n\\r\\n            registeredFees.add(_fees[i]);\\r\\n\\r\\n            IFee feeContract = IFee(_fees[i]);\\r\\n            (\\r\\n                FeeHook[] memory implementedHooksForSettle,\\r\\n                FeeHook[] memory implementedHooksForUpdate,\\r\\n                bool usesGavOnSettle,\\r\\n                bool usesGavOnUpdate\\r\\n            ) = feeContract.implementedHooks();\\r\\n\\r\\n            // Stores the hooks for which each fee implements settle() and update()\\r\\n            for (uint256 j; j < implementedHooksForSettle.length; j++) {\\r\\n                feeToHookToImplementsSettle[_fees[i]][implementedHooksForSettle[j]] = true;\\r\\n            }\\r\\n            for (uint256 j; j < implementedHooksForUpdate.length; j++) {\\r\\n                feeToHookToImplementsUpdate[_fees[i]][implementedHooksForUpdate[j]] = true;\\r\\n            }\\r\\n\\r\\n            // Stores whether each fee requires GAV during its implementations for settle() and update()\\r\\n            if (usesGavOnSettle) {\\r\\n                feeToUsesGavOnSettle[_fees[i]] = true;\\r\\n            }\\r\\n            if (usesGavOnUpdate) {\\r\\n                feeToUsesGavOnUpdate[_fees[i]] = true;\\r\\n            }\\r\\n\\r\\n            emit FeeRegistered(\\r\\n                _fees[i],\\r\\n                feeContract.identifier(),\\r\\n                implementedHooksForSettle,\\r\\n                implementedHooksForUpdate,\\r\\n                usesGavOnSettle,\\r\\n                usesGavOnUpdate\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    ///////////////////\\r\\n    // STATE GETTERS //\\r\\n    ///////////////////\\r\\n\\r\\n    /// @notice Get a list of enabled fees for a given fund\\r\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\r\\n    /// @return enabledFees_ An array of enabled fee addresses\\r\\n    function getEnabledFeesForFund(address _comptrollerProxy)\\r\\n        external\\r\\n        view\\r\\n        returns (address[] memory enabledFees_)\\r\\n    {\\r\\n        return comptrollerProxyToFees[_comptrollerProxy];\\r\\n    }\\r\\n\\r\\n    /// @notice Get the amount of shares outstanding for a particular fee for a fund\\r\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\r\\n    /// @param _fee The fee address\\r\\n    /// @return sharesOutstanding_ The amount of shares outstanding\\r\\n    function getFeeSharesOutstandingForFund(address _comptrollerProxy, address _fee)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 sharesOutstanding_)\\r\\n    {\\r\\n        return comptrollerProxyToFeeToSharesOutstanding[_comptrollerProxy][_fee];\\r\\n    }\\r\\n\\r\\n    /// @notice Get all registered fees\\r\\n    /// @return registeredFees_ A list of all registered fee addresses\\r\\n    function getRegisteredFees() external view returns (address[] memory registeredFees_) {\\r\\n        registeredFees_ = new address[](registeredFees.length());\\r\\n        for (uint256 i; i < registeredFees_.length; i++) {\\r\\n            registeredFees_[i] = registeredFees.at(i);\\r\\n        }\\r\\n\\r\\n        return registeredFees_;\\r\\n    }\\r\\n\\r\\n    /// @notice Checks if a fee implements settle() on a particular hook\\r\\n    /// @param _fee The address of the fee to check\\r\\n    /// @param _hook The FeeHook to check\\r\\n    /// @return settlesOnHook_ True if the fee settles on the given hook\\r\\n    function feeSettlesOnHook(address _fee, FeeHook _hook)\\r\\n        public\\r\\n        view\\r\\n        returns (bool settlesOnHook_)\\r\\n    {\\r\\n        return feeToHookToImplementsSettle[_fee][_hook];\\r\\n    }\\r\\n\\r\\n    /// @notice Checks if a fee implements update() on a particular hook\\r\\n    /// @param _fee The address of the fee to check\\r\\n    /// @param _hook The FeeHook to check\\r\\n    /// @return updatesOnHook_ True if the fee updates on the given hook\\r\\n    function feeUpdatesOnHook(address _fee, FeeHook _hook)\\r\\n        public\\r\\n        view\\r\\n        returns (bool updatesOnHook_)\\r\\n    {\\r\\n        return feeToHookToImplementsUpdate[_fee][_hook];\\r\\n    }\\r\\n\\r\\n    /// @notice Checks if a fee uses GAV in its settle() implementation\\r\\n    /// @param _fee The address of the fee to check\\r\\n    /// @return usesGav_ True if the fee uses GAV during settle() implementation\\r\\n    function feeUsesGavOnSettle(address _fee) public view returns (bool usesGav_) {\\r\\n        return feeToUsesGavOnSettle[_fee];\\r\\n    }\\r\\n\\r\\n    /// @notice Checks if a fee uses GAV in its update() implementation\\r\\n    /// @param _fee The address of the fee to check\\r\\n    /// @return usesGav_ True if the fee uses GAV during update() implementation\\r\\n    function feeUsesGavOnUpdate(address _fee) public view returns (bool usesGav_) {\\r\\n        return feeToUsesGavOnUpdate[_fee];\\r\\n    }\\r\\n\\r\\n    /// @notice Check whether a fee is registered\\r\\n    /// @param _fee The address of the fee to check\\r\\n    /// @return isRegisteredFee_ True if the fee is registered\\r\\n    function isRegisteredFee(address _fee) public view returns (bool isRegisteredFee_) {\\r\\n        return registeredFees.contains(_fee);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xcafcf49ddfd3845470083ed2b2ae660263d269e090807bfa9c1a86d8ec35b481\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/fee-manager/IFee.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"./IFeeManager.sol\\\";\\r\\n\\r\\n/// @title Fee Interface\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\n/// @notice Interface for all fees\\r\\ninterface IFee {\\r\\n    function activateForFund(address _comptrollerProxy, address _vaultProxy) external;\\r\\n\\r\\n    function addFundSettings(address _comptrollerProxy, bytes calldata _settingsData) external;\\r\\n\\r\\n    function identifier() external pure returns (string memory identifier_);\\r\\n\\r\\n    function implementedHooks()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            IFeeManager.FeeHook[] memory implementedHooksForSettle_,\\r\\n            IFeeManager.FeeHook[] memory implementedHooksForUpdate_,\\r\\n            bool usesGavOnSettle_,\\r\\n            bool usesGavOnUpdate_\\r\\n        );\\r\\n\\r\\n    function payout(address _comptrollerProxy, address _vaultProxy)\\r\\n        external\\r\\n        returns (bool isPayable_);\\r\\n\\r\\n    function settle(\\r\\n        address _comptrollerProxy,\\r\\n        address _vaultProxy,\\r\\n        IFeeManager.FeeHook _hook,\\r\\n        bytes calldata _settlementData,\\r\\n        uint256 _gav\\r\\n    )\\r\\n        external\\r\\n        returns (\\r\\n            IFeeManager.SettlementType settlementType_,\\r\\n            address payer_,\\r\\n            uint256 sharesDue_\\r\\n        );\\r\\n\\r\\n    function update(\\r\\n        address _comptrollerProxy,\\r\\n        address _vaultProxy,\\r\\n        IFeeManager.FeeHook _hook,\\r\\n        bytes calldata _settlementData,\\r\\n        uint256 _gav\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xf8277e5914e538326d65367cb1aaf2b72c14d6457c22796d085e604256dfc24f\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/fee-manager/IFeeManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n/// @title FeeManager Interface\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\n/// @notice Interface for the FeeManager\\r\\ninterface IFeeManager {\\r\\n    // No fees for the current release are implemented post-redeemShares\\r\\n    enum FeeHook {\\r\\n        Continuous,\\r\\n        BuySharesSetup,\\r\\n        PreBuyShares,\\r\\n        PostBuyShares,\\r\\n        BuySharesCompleted,\\r\\n        PreRedeemShares\\r\\n    }\\r\\n    enum SettlementType {None, Direct, Mint, Burn, MintSharesOutstanding, BurnSharesOutstanding}\\r\\n\\r\\n    function invokeHook(\\r\\n        FeeHook,\\r\\n        bytes calldata,\\r\\n        uint256\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x9b36e64b16a92ee93fb07686033a002573bf687019414e8d6e8bd3b5ddfc4dd4\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/fee-manager/fees/PerformanceFee.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/math/SignedSafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"../../../core/fund/comptroller/ComptrollerLib.sol\\\";\\r\\nimport \\\"../FeeManager.sol\\\";\\r\\nimport \\\"./utils/FeeBase.sol\\\";\\r\\n\\r\\n/// @title PerformanceFee Contract\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\n/// @notice A performance-based fee with configurable rate and crystallization period, using\\r\\n/// a high watermark\\r\\n/// @dev This contract assumes that all shares in the VaultProxy are shares outstanding,\\r\\n/// which is fine for this release. Even if they are not, they are still shares that\\r\\n/// are only claimable by the fund owner.\\r\\ncontract PerformanceFee is FeeBase {\\r\\n    using SafeMath for uint256;\\r\\n    using SignedSafeMath for int256;\\r\\n\\r\\n    event ActivatedForFund(address indexed comptrollerProxy, uint256 highWaterMark);\\r\\n\\r\\n    event FundSettingsAdded(address indexed comptrollerProxy, uint256 rate, uint256 period);\\r\\n\\r\\n    event LastSharePriceUpdated(\\r\\n        address indexed comptrollerProxy,\\r\\n        uint256 prevSharePrice,\\r\\n        uint256 nextSharePrice\\r\\n    );\\r\\n\\r\\n    event PaidOut(\\r\\n        address indexed comptrollerProxy,\\r\\n        uint256 prevHighWaterMark,\\r\\n        uint256 nextHighWaterMark,\\r\\n        uint256 aggregateValueDue\\r\\n    );\\r\\n\\r\\n    event PerformanceUpdated(\\r\\n        address indexed comptrollerProxy,\\r\\n        uint256 prevAggregateValueDue,\\r\\n        uint256 nextAggregateValueDue,\\r\\n        int256 sharesOutstandingDiff\\r\\n    );\\r\\n\\r\\n    struct FeeInfo {\\r\\n        uint256 rate;\\r\\n        uint256 period;\\r\\n        uint256 activated;\\r\\n        uint256 lastPaid;\\r\\n        uint256 highWaterMark;\\r\\n        uint256 lastSharePrice;\\r\\n        uint256 aggregateValueDue;\\r\\n    }\\r\\n\\r\\n    uint256 private constant RATE_DIVISOR = 10**18;\\r\\n    uint256 private constant SHARE_UNIT = 10**18;\\r\\n\\r\\n    mapping(address => FeeInfo) private comptrollerProxyToFeeInfo;\\r\\n\\r\\n    constructor(address _feeManager) public FeeBase(_feeManager) {}\\r\\n\\r\\n    // EXTERNAL FUNCTIONS\\r\\n\\r\\n    /// @notice Activates the fee for a fund\\r\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\r\\n    function activateForFund(address _comptrollerProxy, address) external override onlyFeeManager {\\r\\n        FeeInfo storage feeInfo = comptrollerProxyToFeeInfo[_comptrollerProxy];\\r\\n\\r\\n        // We must not force asset finality, otherwise funds that have Synths as tracked assets\\r\\n        // would be susceptible to a DoS attack when attempting to migrate to a release that uses\\r\\n        // this fee: an attacker trades a negligible amount of a tracked Synth with the VaultProxy\\r\\n        // as the recipient, thus causing `calcGrossShareValue(true)` to fail.\\r\\n        (uint256 grossSharePrice, bool sharePriceIsValid) = ComptrollerLib(_comptrollerProxy)\\r\\n            .calcGrossShareValue(false);\\r\\n        require(sharePriceIsValid, \\\"activateForFund: Invalid share price\\\");\\r\\n\\r\\n        feeInfo.highWaterMark = grossSharePrice;\\r\\n        feeInfo.lastSharePrice = grossSharePrice;\\r\\n        feeInfo.activated = block.timestamp;\\r\\n\\r\\n        emit ActivatedForFund(_comptrollerProxy, grossSharePrice);\\r\\n    }\\r\\n\\r\\n    /// @notice Add the initial fee settings for a fund\\r\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\r\\n    /// @param _settingsData Encoded settings to apply to the policy for the fund\\r\\n    /// @dev `highWaterMark`, `lastSharePrice`, and `activated` are set during activation\\r\\n    function addFundSettings(address _comptrollerProxy, bytes calldata _settingsData)\\r\\n        external\\r\\n        override\\r\\n        onlyFeeManager\\r\\n    {\\r\\n        (uint256 feeRate, uint256 feePeriod) = abi.decode(_settingsData, (uint256, uint256));\\r\\n        require(feeRate > 0, \\\"addFundSettings: feeRate must be greater than 0\\\");\\r\\n        require(feePeriod > 0, \\\"addFundSettings: feePeriod must be greater than 0\\\");\\r\\n\\r\\n        comptrollerProxyToFeeInfo[_comptrollerProxy] = FeeInfo({\\r\\n            rate: feeRate,\\r\\n            period: feePeriod,\\r\\n            activated: 0,\\r\\n            lastPaid: 0,\\r\\n            highWaterMark: 0,\\r\\n            lastSharePrice: 0,\\r\\n            aggregateValueDue: 0\\r\\n        });\\r\\n\\r\\n        emit FundSettingsAdded(_comptrollerProxy, feeRate, feePeriod);\\r\\n    }\\r\\n\\r\\n    /// @notice Provides a constant string identifier for a fee\\r\\n    /// @return identifier_ The identifier string\\r\\n    function identifier() external pure override returns (string memory identifier_) {\\r\\n        return \\\"PERFORMANCE\\\";\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the hooks that are implemented by the fee\\r\\n    /// @return implementedHooksForSettle_ The hooks during which settle() is implemented\\r\\n    /// @return implementedHooksForUpdate_ The hooks during which update() is implemented\\r\\n    /// @return usesGavOnSettle_ True if GAV is used during the settle() implementation\\r\\n    /// @return usesGavOnUpdate_ True if GAV is used during the update() implementation\\r\\n    /// @dev Used only during fee registration\\r\\n    function implementedHooks()\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (\\r\\n            IFeeManager.FeeHook[] memory implementedHooksForSettle_,\\r\\n            IFeeManager.FeeHook[] memory implementedHooksForUpdate_,\\r\\n            bool usesGavOnSettle_,\\r\\n            bool usesGavOnUpdate_\\r\\n        )\\r\\n    {\\r\\n        implementedHooksForSettle_ = new IFeeManager.FeeHook[](3);\\r\\n        implementedHooksForSettle_[0] = IFeeManager.FeeHook.Continuous;\\r\\n        implementedHooksForSettle_[1] = IFeeManager.FeeHook.BuySharesSetup;\\r\\n        implementedHooksForSettle_[2] = IFeeManager.FeeHook.PreRedeemShares;\\r\\n\\r\\n        implementedHooksForUpdate_ = new IFeeManager.FeeHook[](3);\\r\\n        implementedHooksForUpdate_[0] = IFeeManager.FeeHook.Continuous;\\r\\n        implementedHooksForUpdate_[1] = IFeeManager.FeeHook.BuySharesCompleted;\\r\\n        implementedHooksForUpdate_[2] = IFeeManager.FeeHook.PreRedeemShares;\\r\\n\\r\\n        return (implementedHooksForSettle_, implementedHooksForUpdate_, true, true);\\r\\n    }\\r\\n\\r\\n    /// @notice Checks whether the shares outstanding for the fee can be paid out, and updates\\r\\n    /// the info for the fee's last payout\\r\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\r\\n    /// @return isPayable_ True if shares outstanding can be paid out\\r\\n    function payout(address _comptrollerProxy, address)\\r\\n        external\\r\\n        override\\r\\n        onlyFeeManager\\r\\n        returns (bool isPayable_)\\r\\n    {\\r\\n        if (!payoutAllowed(_comptrollerProxy)) {\\r\\n            return false;\\r\\n        }\\r\\n\\r\\n        FeeInfo storage feeInfo = comptrollerProxyToFeeInfo[_comptrollerProxy];\\r\\n        feeInfo.lastPaid = block.timestamp;\\r\\n\\r\\n        uint256 prevHighWaterMark = feeInfo.highWaterMark;\\r\\n        uint256 nextHighWaterMark = __calcUint256Max(feeInfo.lastSharePrice, prevHighWaterMark);\\r\\n        uint256 prevAggregateValueDue = feeInfo.aggregateValueDue;\\r\\n\\r\\n        // Update state as necessary\\r\\n        if (prevAggregateValueDue > 0) {\\r\\n            feeInfo.aggregateValueDue = 0;\\r\\n        }\\r\\n        if (nextHighWaterMark > prevHighWaterMark) {\\r\\n            feeInfo.highWaterMark = nextHighWaterMark;\\r\\n        }\\r\\n\\r\\n        emit PaidOut(\\r\\n            _comptrollerProxy,\\r\\n            prevHighWaterMark,\\r\\n            nextHighWaterMark,\\r\\n            prevAggregateValueDue\\r\\n        );\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /// @notice Settles the fee and calculates shares due\\r\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\r\\n    /// @param _vaultProxy The VaultProxy of the fund\\r\\n    /// @param _gav The GAV of the fund\\r\\n    /// @return settlementType_ The type of settlement\\r\\n    /// @return (unused) The payer of shares due\\r\\n    /// @return sharesDue_ The amount of shares due\\r\\n    function settle(\\r\\n        address _comptrollerProxy,\\r\\n        address _vaultProxy,\\r\\n        IFeeManager.FeeHook,\\r\\n        bytes calldata,\\r\\n        uint256 _gav\\r\\n    )\\r\\n        external\\r\\n        override\\r\\n        onlyFeeManager\\r\\n        returns (\\r\\n            IFeeManager.SettlementType settlementType_,\\r\\n            address,\\r\\n            uint256 sharesDue_\\r\\n        )\\r\\n    {\\r\\n        if (_gav == 0) {\\r\\n            return (IFeeManager.SettlementType.None, address(0), 0);\\r\\n        }\\r\\n\\r\\n        int256 settlementSharesDue = __settleAndUpdatePerformance(\\r\\n            _comptrollerProxy,\\r\\n            _vaultProxy,\\r\\n            _gav\\r\\n        );\\r\\n        if (settlementSharesDue == 0) {\\r\\n            return (IFeeManager.SettlementType.None, address(0), 0);\\r\\n        } else if (settlementSharesDue > 0) {\\r\\n            // Settle by minting shares outstanding for custody\\r\\n            return (\\r\\n                IFeeManager.SettlementType.MintSharesOutstanding,\\r\\n                address(0),\\r\\n                uint256(settlementSharesDue)\\r\\n            );\\r\\n        } else {\\r\\n            // Settle by burning from shares outstanding\\r\\n            return (\\r\\n                IFeeManager.SettlementType.BurnSharesOutstanding,\\r\\n                address(0),\\r\\n                uint256(-settlementSharesDue)\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Updates the fee state after all fees have finished settle()\\r\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\r\\n    /// @param _vaultProxy The VaultProxy of the fund\\r\\n    /// @param _hook The FeeHook being executed\\r\\n    /// @param _settlementData Encoded args to use in calculating the settlement\\r\\n    /// @param _gav The GAV of the fund\\r\\n    function update(\\r\\n        address _comptrollerProxy,\\r\\n        address _vaultProxy,\\r\\n        IFeeManager.FeeHook _hook,\\r\\n        bytes calldata _settlementData,\\r\\n        uint256 _gav\\r\\n    ) external override onlyFeeManager {\\r\\n        uint256 prevSharePrice = comptrollerProxyToFeeInfo[_comptrollerProxy].lastSharePrice;\\r\\n        uint256 nextSharePrice = __calcNextSharePrice(\\r\\n            _comptrollerProxy,\\r\\n            _vaultProxy,\\r\\n            _hook,\\r\\n            _settlementData,\\r\\n            _gav\\r\\n        );\\r\\n\\r\\n        if (nextSharePrice == prevSharePrice) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        comptrollerProxyToFeeInfo[_comptrollerProxy].lastSharePrice = nextSharePrice;\\r\\n\\r\\n        emit LastSharePriceUpdated(_comptrollerProxy, prevSharePrice, nextSharePrice);\\r\\n    }\\r\\n\\r\\n    // PUBLIC FUNCTIONS\\r\\n\\r\\n    /// @notice Checks whether the shares outstanding can be paid out\\r\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\r\\n    /// @return payoutAllowed_ True if the fee payment is due\\r\\n    /// @dev Payout is allowed if fees have not yet been settled in a crystallization period,\\r\\n    /// and at least 1 crystallization period has passed since activation\\r\\n    function payoutAllowed(address _comptrollerProxy) public view returns (bool payoutAllowed_) {\\r\\n        FeeInfo memory feeInfo = comptrollerProxyToFeeInfo[_comptrollerProxy];\\r\\n        uint256 period = feeInfo.period;\\r\\n\\r\\n        uint256 timeSinceActivated = block.timestamp.sub(feeInfo.activated);\\r\\n\\r\\n        // Check if at least 1 crystallization period has passed since activation\\r\\n        if (timeSinceActivated < period) {\\r\\n            return false;\\r\\n        }\\r\\n\\r\\n        // Check that a full crystallization period has passed since the last payout\\r\\n        uint256 timeSincePeriodStart = timeSinceActivated % period;\\r\\n        uint256 periodStart = block.timestamp.sub(timeSincePeriodStart);\\r\\n        return feeInfo.lastPaid < periodStart;\\r\\n    }\\r\\n\\r\\n    // PRIVATE FUNCTIONS\\r\\n\\r\\n    /// @dev Helper to calculate the aggregated value accumulated to a fund since the last\\r\\n    /// settlement (happening at investment/redemption)\\r\\n    /// Validated:\\r\\n    /// _netSharesSupply > 0\\r\\n    /// _sharePriceWithoutPerformance != _prevSharePrice\\r\\n    function __calcAggregateValueDue(\\r\\n        uint256 _netSharesSupply,\\r\\n        uint256 _sharePriceWithoutPerformance,\\r\\n        uint256 _prevSharePrice,\\r\\n        uint256 _prevAggregateValueDue,\\r\\n        uint256 _feeRate,\\r\\n        uint256 _highWaterMark\\r\\n    ) private pure returns (uint256) {\\r\\n        int256 superHWMValueSinceLastSettled = (\\r\\n            int256(__calcUint256Max(_highWaterMark, _sharePriceWithoutPerformance)).sub(\\r\\n                int256(__calcUint256Max(_highWaterMark, _prevSharePrice))\\r\\n            )\\r\\n        )\\r\\n            .mul(int256(_netSharesSupply))\\r\\n            .div(int256(SHARE_UNIT));\\r\\n\\r\\n        int256 valueDueSinceLastSettled = superHWMValueSinceLastSettled.mul(int256(_feeRate)).div(\\r\\n            int256(RATE_DIVISOR)\\r\\n        );\\r\\n\\r\\n        return\\r\\n            uint256(\\r\\n                __calcInt256Max(0, int256(_prevAggregateValueDue).add(valueDueSinceLastSettled))\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to calculate the max of two int values\\r\\n    function __calcInt256Max(int256 _a, int256 _b) private pure returns (int256) {\\r\\n        if (_a >= _b) {\\r\\n            return _a;\\r\\n        }\\r\\n\\r\\n        return _b;\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to calculate the next `lastSharePrice` value\\r\\n    function __calcNextSharePrice(\\r\\n        address _comptrollerProxy,\\r\\n        address _vaultProxy,\\r\\n        IFeeManager.FeeHook _hook,\\r\\n        bytes memory _settlementData,\\r\\n        uint256 _gav\\r\\n    ) private view returns (uint256 nextSharePrice_) {\\r\\n        uint256 denominationAssetUnit = 10 **\\r\\n            uint256(ERC20(ComptrollerLib(_comptrollerProxy).getDenominationAsset()).decimals());\\r\\n        if (_gav == 0) {\\r\\n            return denominationAssetUnit;\\r\\n        }\\r\\n\\r\\n        // Get shares outstanding via VaultProxy balance and calc shares supply to get net shares supply\\r\\n        ERC20 vaultProxyContract = ERC20(_vaultProxy);\\r\\n        uint256 totalSharesSupply = vaultProxyContract.totalSupply();\\r\\n        uint256 nextNetSharesSupply = totalSharesSupply.sub(\\r\\n            vaultProxyContract.balanceOf(_vaultProxy)\\r\\n        );\\r\\n        if (nextNetSharesSupply == 0) {\\r\\n            return denominationAssetUnit;\\r\\n        }\\r\\n\\r\\n        uint256 nextGav = _gav;\\r\\n\\r\\n        // For both Continuous and BuySharesCompleted hooks, _gav and shares supply will not change,\\r\\n        // we only need additional calculations for PreRedeemShares\\r\\n        if (_hook == IFeeManager.FeeHook.PreRedeemShares) {\\r\\n            (, uint256 sharesDecrease) = __decodePreRedeemSharesSettlementData(_settlementData);\\r\\n\\r\\n            // Shares have not yet been burned\\r\\n            nextNetSharesSupply = nextNetSharesSupply.sub(sharesDecrease);\\r\\n            if (nextNetSharesSupply == 0) {\\r\\n                return denominationAssetUnit;\\r\\n            }\\r\\n\\r\\n            // Assets have not yet been withdrawn\\r\\n            uint256 gavDecrease = _gav.mul(sharesDecrease).div(totalSharesSupply);\\r\\n\\r\\n            nextGav = nextGav.sub(gavDecrease);\\r\\n            if (nextGav == 0) {\\r\\n                return denominationAssetUnit;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return nextGav.mul(SHARE_UNIT).div(nextNetSharesSupply);\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to calculate the performance metrics for a fund.\\r\\n    /// Validated:\\r\\n    /// _totalSharesSupply > 0\\r\\n    /// _gav > 0\\r\\n    /// _totalSharesSupply != _totalSharesOutstanding\\r\\n    function __calcPerformance(\\r\\n        address _comptrollerProxy,\\r\\n        uint256 _totalSharesSupply,\\r\\n        uint256 _totalSharesOutstanding,\\r\\n        uint256 _prevAggregateValueDue,\\r\\n        FeeInfo memory feeInfo,\\r\\n        uint256 _gav\\r\\n    ) private view returns (uint256 nextAggregateValueDue_, int256 sharesDue_) {\\r\\n        // Use the 'shares supply net shares outstanding' for performance calcs.\\r\\n        // Cannot be 0, as _totalSharesSupply != _totalSharesOutstanding\\r\\n        uint256 netSharesSupply = _totalSharesSupply.sub(_totalSharesOutstanding);\\r\\n        uint256 sharePriceWithoutPerformance = _gav.mul(SHARE_UNIT).div(netSharesSupply);\\r\\n\\r\\n        // If gross share price has not changed, can exit early\\r\\n        uint256 prevSharePrice = feeInfo.lastSharePrice;\\r\\n        if (sharePriceWithoutPerformance == prevSharePrice) {\\r\\n            return (_prevAggregateValueDue, 0);\\r\\n        }\\r\\n\\r\\n        nextAggregateValueDue_ = __calcAggregateValueDue(\\r\\n            netSharesSupply,\\r\\n            sharePriceWithoutPerformance,\\r\\n            prevSharePrice,\\r\\n            _prevAggregateValueDue,\\r\\n            feeInfo.rate,\\r\\n            feeInfo.highWaterMark\\r\\n        );\\r\\n\\r\\n        sharesDue_ = __calcSharesDue(\\r\\n            _comptrollerProxy,\\r\\n            netSharesSupply,\\r\\n            _gav,\\r\\n            nextAggregateValueDue_\\r\\n        );\\r\\n\\r\\n        return (nextAggregateValueDue_, sharesDue_);\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to calculate sharesDue during settlement.\\r\\n    /// Validated:\\r\\n    /// _netSharesSupply > 0\\r\\n    /// _gav > 0\\r\\n    function __calcSharesDue(\\r\\n        address _comptrollerProxy,\\r\\n        uint256 _netSharesSupply,\\r\\n        uint256 _gav,\\r\\n        uint256 _nextAggregateValueDue\\r\\n    ) private view returns (int256 sharesDue_) {\\r\\n        // If _nextAggregateValueDue > _gav, then no shares can be created.\\r\\n        // This is a known limitation of the model, which is only reached for unrealistically\\r\\n        // high performance fee rates (> 100%). A revert is allowed in such a case.\\r\\n        uint256 sharesDueForAggregateValueDue = _nextAggregateValueDue.mul(_netSharesSupply).div(\\r\\n            _gav.sub(_nextAggregateValueDue)\\r\\n        );\\r\\n\\r\\n        // Shares due is the +/- diff or the total shares outstanding already minted\\r\\n        return\\r\\n            int256(sharesDueForAggregateValueDue).sub(\\r\\n                int256(\\r\\n                    FeeManager(FEE_MANAGER).getFeeSharesOutstandingForFund(\\r\\n                        _comptrollerProxy,\\r\\n                        address(this)\\r\\n                    )\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to calculate the max of two uint values\\r\\n    function __calcUint256Max(uint256 _a, uint256 _b) private pure returns (uint256) {\\r\\n        if (_a >= _b) {\\r\\n            return _a;\\r\\n        }\\r\\n\\r\\n        return _b;\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to settle the fee and update performance state.\\r\\n    /// Validated:\\r\\n    /// _gav > 0\\r\\n    function __settleAndUpdatePerformance(\\r\\n        address _comptrollerProxy,\\r\\n        address _vaultProxy,\\r\\n        uint256 _gav\\r\\n    ) private returns (int256 sharesDue_) {\\r\\n        ERC20 sharesTokenContract = ERC20(_vaultProxy);\\r\\n\\r\\n        uint256 totalSharesSupply = sharesTokenContract.totalSupply();\\r\\n        if (totalSharesSupply == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 totalSharesOutstanding = sharesTokenContract.balanceOf(_vaultProxy);\\r\\n        if (totalSharesOutstanding == totalSharesSupply) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        FeeInfo storage feeInfo = comptrollerProxyToFeeInfo[_comptrollerProxy];\\r\\n        uint256 prevAggregateValueDue = feeInfo.aggregateValueDue;\\r\\n\\r\\n        uint256 nextAggregateValueDue;\\r\\n        (nextAggregateValueDue, sharesDue_) = __calcPerformance(\\r\\n            _comptrollerProxy,\\r\\n            totalSharesSupply,\\r\\n            totalSharesOutstanding,\\r\\n            prevAggregateValueDue,\\r\\n            feeInfo,\\r\\n            _gav\\r\\n        );\\r\\n        if (nextAggregateValueDue == prevAggregateValueDue) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        // Update fee state\\r\\n        feeInfo.aggregateValueDue = nextAggregateValueDue;\\r\\n\\r\\n        emit PerformanceUpdated(\\r\\n            _comptrollerProxy,\\r\\n            prevAggregateValueDue,\\r\\n            nextAggregateValueDue,\\r\\n            sharesDue_\\r\\n        );\\r\\n\\r\\n        return sharesDue_;\\r\\n    }\\r\\n\\r\\n    ///////////////////\\r\\n    // STATE GETTERS //\\r\\n    ///////////////////\\r\\n\\r\\n    /// @notice Gets the feeInfo for a given fund\\r\\n    /// @param _comptrollerProxy The ComptrollerProxy contract of the fund\\r\\n    /// @return feeInfo_ The feeInfo\\r\\n    function getFeeInfoForFund(address _comptrollerProxy)\\r\\n        external\\r\\n        view\\r\\n        returns (FeeInfo memory feeInfo_)\\r\\n    {\\r\\n        return comptrollerProxyToFeeInfo[_comptrollerProxy];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xc49b565ecc4b2de651f587f51add7eeed643435162e2694578ce5b07ae3d93eb\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/fee-manager/fees/utils/FeeBase.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"../../IFee.sol\\\";\\r\\n\\r\\n/// @title FeeBase Contract\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\n/// @notice Abstract base contract for all fees\\r\\nabstract contract FeeBase is IFee {\\r\\n    address internal immutable FEE_MANAGER;\\r\\n\\r\\n    modifier onlyFeeManager() {\\r\\n        require(msg.sender == FEE_MANAGER, \\\"Only the FeeManger can make this call\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(address _feeManager) public {\\r\\n        FEE_MANAGER = _feeManager;\\r\\n    }\\r\\n\\r\\n    /// @notice Allows Fee to run logic during fund activation\\r\\n    /// @dev Unimplemented by default, may be overrode.\\r\\n    function activateForFund(address, address) external virtual override {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    /// @notice Runs payout logic for a fee that utilizes shares outstanding as its settlement type\\r\\n    /// @dev Returns false by default, can be overridden by fee\\r\\n    function payout(address, address) external virtual override returns (bool) {\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    /// @notice Update fee state after all settlement has occurred during a given fee hook\\r\\n    /// @dev Unimplemented by default, can be overridden by fee\\r\\n    function update(\\r\\n        address,\\r\\n        address,\\r\\n        IFeeManager.FeeHook,\\r\\n        bytes calldata,\\r\\n        uint256\\r\\n    ) external virtual override {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    /// @notice Helper to parse settlement arguments from encoded data for PreBuyShares fee hook\\r\\n    function __decodePreBuySharesSettlementData(bytes memory _settlementData)\\r\\n        internal\\r\\n        pure\\r\\n        returns (\\r\\n            address buyer_,\\r\\n            uint256 investmentAmount_,\\r\\n            uint256 minSharesQuantity_\\r\\n        )\\r\\n    {\\r\\n        return abi.decode(_settlementData, (address, uint256, uint256));\\r\\n    }\\r\\n\\r\\n    /// @notice Helper to parse settlement arguments from encoded data for PreRedeemShares fee hook\\r\\n    function __decodePreRedeemSharesSettlementData(bytes memory _settlementData)\\r\\n        internal\\r\\n        pure\\r\\n        returns (address redeemer_, uint256 sharesQuantity_)\\r\\n    {\\r\\n        return abi.decode(_settlementData, (address, uint256));\\r\\n    }\\r\\n\\r\\n    /// @notice Helper to parse settlement arguments from encoded data for PostBuyShares fee hook\\r\\n    function __decodePostBuySharesSettlementData(bytes memory _settlementData)\\r\\n        internal\\r\\n        pure\\r\\n        returns (\\r\\n            address buyer_,\\r\\n            uint256 investmentAmount_,\\r\\n            uint256 sharesBought_\\r\\n        )\\r\\n    {\\r\\n        return abi.decode(_settlementData, (address, uint256, uint256));\\r\\n    }\\r\\n\\r\\n    ///////////////////\\r\\n    // STATE GETTERS //\\r\\n    ///////////////////\\r\\n\\r\\n    /// @notice Gets the `FEE_MANAGER` variable\\r\\n    /// @return feeManager_ The `FEE_MANAGER` variable value\\r\\n    function getFeeManager() external view returns (address feeManager_) {\\r\\n        return FEE_MANAGER;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x313cdae61e1c015e94a222353a99759404019166fded63b73406d7ca06d0124b\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/policy-manager/IPolicyManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n/// @title PolicyManager Interface\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\n/// @notice Interface for the PolicyManager\\r\\ninterface IPolicyManager {\\r\\n    enum PolicyHook {\\r\\n        BuySharesSetup,\\r\\n        PreBuyShares,\\r\\n        PostBuyShares,\\r\\n        BuySharesCompleted,\\r\\n        PreCallOnIntegration,\\r\\n        PostCallOnIntegration\\r\\n    }\\r\\n\\r\\n    function validatePolicies(\\r\\n        address,\\r\\n        PolicyHook,\\r\\n        bytes calldata\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xe23b2f4c3c4434d315af2a885db1ae986120afb7dda1db3eb2e4559cf503ea13\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/utils/ExtensionBase.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"../../core/fund/comptroller/IComptroller.sol\\\";\\r\\nimport \\\"../../core/fund/vault/IVault.sol\\\";\\r\\nimport \\\"../IExtension.sol\\\";\\r\\n\\r\\n/// @title ExtensionBase Contract\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\n/// @notice Base class for an extension\\r\\nabstract contract ExtensionBase is IExtension {\\r\\n    mapping(address => address) internal comptrollerProxyToVaultProxy;\\r\\n\\r\\n    /// @notice Allows extension to run logic during fund activation\\r\\n    /// @dev Unimplemented by default, may be overridden.\\r\\n    function activateForFund(bool) external virtual override {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    /// @notice Allows extension to run logic during fund deactivation (destruct)\\r\\n    /// @dev Unimplemented by default, may be overridden.\\r\\n    function deactivateForFund() external virtual override {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    /// @notice Receives calls from ComptrollerLib.callOnExtension()\\r\\n    /// and dispatches the appropriate action\\r\\n    /// @dev Unimplemented by default, may be overridden.\\r\\n    function receiveCallFromComptroller(\\r\\n        address,\\r\\n        uint256,\\r\\n        bytes calldata\\r\\n    ) external virtual override {\\r\\n        revert(\\\"receiveCallFromComptroller: Unimplemented for Extension\\\");\\r\\n    }\\r\\n\\r\\n    /// @notice Allows extension to run logic during fund configuration\\r\\n    /// @dev Unimplemented by default, may be overridden.\\r\\n    function setConfigForFund(bytes calldata) external virtual override {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to validate a ComptrollerProxy-VaultProxy relation, which we store for both\\r\\n    /// gas savings and to guarantee a spoofed ComptrollerProxy does not change getVaultProxy().\\r\\n    /// Will revert without reason if the expected interfaces do not exist.\\r\\n    function __setValidatedVaultProxy(address _comptrollerProxy)\\r\\n        internal\\r\\n        returns (address vaultProxy_)\\r\\n    {\\r\\n        require(\\r\\n            comptrollerProxyToVaultProxy[_comptrollerProxy] == address(0),\\r\\n            \\\"__setValidatedVaultProxy: Already set\\\"\\r\\n        );\\r\\n\\r\\n        vaultProxy_ = IComptroller(_comptrollerProxy).getVaultProxy();\\r\\n        require(vaultProxy_ != address(0), \\\"__setValidatedVaultProxy: Missing vaultProxy\\\");\\r\\n\\r\\n        require(\\r\\n            _comptrollerProxy == IVault(vaultProxy_).getAccessor(),\\r\\n            \\\"__setValidatedVaultProxy: Not the VaultProxy accessor\\\"\\r\\n        );\\r\\n\\r\\n        comptrollerProxyToVaultProxy[_comptrollerProxy] = vaultProxy_;\\r\\n\\r\\n        return vaultProxy_;\\r\\n    }\\r\\n\\r\\n    ///////////////////\\r\\n    // STATE GETTERS //\\r\\n    ///////////////////\\r\\n\\r\\n    /// @notice Gets the verified VaultProxy for a given ComptrollerProxy\\r\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\r\\n    /// @return vaultProxy_ The VaultProxy of the fund\\r\\n    function getVaultProxyForFund(address _comptrollerProxy)\\r\\n        public\\r\\n        view\\r\\n        returns (address vaultProxy_)\\r\\n    {\\r\\n        return comptrollerProxyToVaultProxy[_comptrollerProxy];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd80f9d8580dc66799c55da1eb67322c93e2bd514f704c31fa15bdfaebc915e2b\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/utils/FundDeployerOwnerMixin.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"../../core/fund-deployer/IFundDeployer.sol\\\";\\r\\n\\r\\n/// @title FundDeployerOwnerMixin Contract\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\n/// @notice A mixin contract that defers ownership to the owner of FundDeployer\\r\\nabstract contract FundDeployerOwnerMixin {\\r\\n    address internal immutable FUND_DEPLOYER;\\r\\n\\r\\n    modifier onlyFundDeployerOwner() {\\r\\n        require(\\r\\n            msg.sender == getOwner(),\\r\\n            \\\"onlyFundDeployerOwner: Only the FundDeployer owner can call this function\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(address _fundDeployer) public {\\r\\n        FUND_DEPLOYER = _fundDeployer;\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the owner of this contract\\r\\n    /// @return owner_ The owner\\r\\n    /// @dev Ownership is deferred to the owner of the FundDeployer contract\\r\\n    function getOwner() public view returns (address owner_) {\\r\\n        return IFundDeployer(FUND_DEPLOYER).getOwner();\\r\\n    }\\r\\n\\r\\n    ///////////////////\\r\\n    // STATE GETTERS //\\r\\n    ///////////////////\\r\\n\\r\\n    /// @notice Gets the `FUND_DEPLOYER` variable\\r\\n    /// @return fundDeployer_ The `FUND_DEPLOYER` variable value\\r\\n    function getFundDeployer() external view returns (address fundDeployer_) {\\r\\n        return FUND_DEPLOYER;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf6af8390b7e3ac7579250ce5aebe0faafeeb58e60ead667e002b9286dfd160e5\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/utils/PermissionedVaultActionMixin.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"../../core/fund/comptroller/IComptroller.sol\\\";\\r\\n\\r\\n/// @title PermissionedVaultActionMixin Contract\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\n/// @notice A mixin contract for extensions that can make permissioned vault calls\\r\\nabstract contract PermissionedVaultActionMixin {\\r\\n    /// @notice Adds a tracked asset to the fund\\r\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\r\\n    /// @param _asset The asset to add\\r\\n    function __addTrackedAsset(address _comptrollerProxy, address _asset) internal {\\r\\n        IComptroller(_comptrollerProxy).permissionedVaultAction(\\r\\n            IComptroller.VaultAction.AddTrackedAsset,\\r\\n            abi.encode(_asset)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Grants an allowance to a spender to use a fund's asset\\r\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\r\\n    /// @param _asset The asset for which to grant an allowance\\r\\n    /// @param _target The spender of the allowance\\r\\n    /// @param _amount The amount of the allowance\\r\\n    function __approveAssetSpender(\\r\\n        address _comptrollerProxy,\\r\\n        address _asset,\\r\\n        address _target,\\r\\n        uint256 _amount\\r\\n    ) internal {\\r\\n        IComptroller(_comptrollerProxy).permissionedVaultAction(\\r\\n            IComptroller.VaultAction.ApproveAssetSpender,\\r\\n            abi.encode(_asset, _target, _amount)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Burns fund shares for a particular account\\r\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\r\\n    /// @param _target The account for which to burn shares\\r\\n    /// @param _amount The amount of shares to burn\\r\\n    function __burnShares(\\r\\n        address _comptrollerProxy,\\r\\n        address _target,\\r\\n        uint256 _amount\\r\\n    ) internal {\\r\\n        IComptroller(_comptrollerProxy).permissionedVaultAction(\\r\\n            IComptroller.VaultAction.BurnShares,\\r\\n            abi.encode(_target, _amount)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Mints fund shares to a particular account\\r\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\r\\n    /// @param _target The account to which to mint shares\\r\\n    /// @param _amount The amount of shares to mint\\r\\n    function __mintShares(\\r\\n        address _comptrollerProxy,\\r\\n        address _target,\\r\\n        uint256 _amount\\r\\n    ) internal {\\r\\n        IComptroller(_comptrollerProxy).permissionedVaultAction(\\r\\n            IComptroller.VaultAction.MintShares,\\r\\n            abi.encode(_target, _amount)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Removes a tracked asset from the fund\\r\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\r\\n    /// @param _asset The asset to remove\\r\\n    function __removeTrackedAsset(address _comptrollerProxy, address _asset) internal {\\r\\n        IComptroller(_comptrollerProxy).permissionedVaultAction(\\r\\n            IComptroller.VaultAction.RemoveTrackedAsset,\\r\\n            abi.encode(_asset)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Transfers fund shares from one account to another\\r\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\r\\n    /// @param _from The account from which to transfer shares\\r\\n    /// @param _to The account to which to transfer shares\\r\\n    /// @param _amount The amount of shares to transfer\\r\\n    function __transferShares(\\r\\n        address _comptrollerProxy,\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256 _amount\\r\\n    ) internal {\\r\\n        IComptroller(_comptrollerProxy).permissionedVaultAction(\\r\\n            IComptroller.VaultAction.TransferShares,\\r\\n            abi.encode(_from, _to, _amount)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Withdraws an asset from the VaultProxy to a given account\\r\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\r\\n    /// @param _asset The asset to withdraw\\r\\n    /// @param _target The account to which to withdraw the asset\\r\\n    /// @param _amount The amount of asset to withdraw\\r\\n    function __withdrawAssetTo(\\r\\n        address _comptrollerProxy,\\r\\n        address _asset,\\r\\n        address _target,\\r\\n        uint256 _amount\\r\\n    ) internal {\\r\\n        IComptroller(_comptrollerProxy).permissionedVaultAction(\\r\\n            IComptroller.VaultAction.WithdrawAssetTo,\\r\\n            abi.encode(_asset, _target, _amount)\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb0175feab46ba56e749a2a5c23225c3508db9402a2f8964fcde6dcc6b8d226a6\",\"license\":\"GPL-3.0\"},\"contracts/release/infrastructure/price-feeds/derivatives/IDerivativePriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title IDerivativePriceFeed Interface\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\n/// @notice Simple interface for derivative price source oracle implementations\\r\\ninterface IDerivativePriceFeed {\\r\\n    function calcUnderlyingValues(address, uint256)\\r\\n        external\\r\\n        returns (address[] memory, uint256[] memory);\\r\\n\\r\\n    function isSupportedAsset(address) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x577c4605a159c1083ef8d823d3b18896c321fd712071360ae235e22bf207cad0\",\"license\":\"GPL-3.0\"},\"contracts/release/infrastructure/price-feeds/derivatives/feeds/SynthetixPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"../../../../extensions/utils/FundDeployerOwnerMixin.sol\\\";\\r\\nimport \\\"../../../../interfaces/ISynthetix.sol\\\";\\r\\nimport \\\"../../../../interfaces/ISynthetixAddressResolver.sol\\\";\\r\\nimport \\\"../../../../interfaces/ISynthetixExchangeRates.sol\\\";\\r\\nimport \\\"../../../../interfaces/ISynthetixProxyERC20.sol\\\";\\r\\nimport \\\"../../../../interfaces/ISynthetixSynth.sol\\\";\\r\\nimport \\\"../IDerivativePriceFeed.sol\\\";\\r\\n\\r\\n/// @title SynthetixPriceFeed Contract\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\n/// @notice A price feed that uses Synthetix oracles as price sources\\r\\ncontract SynthetixPriceFeed is IDerivativePriceFeed, FundDeployerOwnerMixin {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    event SynthAdded(address indexed synth, bytes32 currencyKey);\\r\\n\\r\\n    event SynthCurrencyKeyUpdated(\\r\\n        address indexed synth,\\r\\n        bytes32 prevCurrencyKey,\\r\\n        bytes32 nextCurrencyKey\\r\\n    );\\r\\n\\r\\n    uint256 private constant SYNTH_UNIT = 10**18;\\r\\n    address private immutable ADDRESS_RESOLVER;\\r\\n    address private immutable SUSD;\\r\\n\\r\\n    mapping(address => bytes32) private synthToCurrencyKey;\\r\\n\\r\\n    constructor(\\r\\n        address _fundDeployer,\\r\\n        address _addressResolver,\\r\\n        address _sUSD,\\r\\n        address[] memory _synths\\r\\n    ) public FundDeployerOwnerMixin(_fundDeployer) {\\r\\n        ADDRESS_RESOLVER = _addressResolver;\\r\\n        SUSD = _sUSD;\\r\\n\\r\\n        if (_sUSD != address(0)) {\\r\\n            address[] memory sUSDSynths = new address[](1);\\r\\n            sUSDSynths[0] = _sUSD;\\r\\n            __addSynths(sUSDSynths);\\r\\n        }\\r\\n        __addSynths(_synths);\\r\\n    }\\r\\n\\r\\n    /// @notice Converts a given amount of a derivative to its underlying asset values\\r\\n    /// @param _derivative The derivative to convert\\r\\n    /// @param _derivativeAmount The amount of the derivative to convert\\r\\n    /// @return underlyings_ The underlying assets for the _derivative\\r\\n    /// @return underlyingAmounts_ The amount of each underlying asset for the equivalent derivative amount\\r\\n    function calcUnderlyingValues(address _derivative, uint256 _derivativeAmount)\\r\\n        external\\r\\n        override\\r\\n        returns (address[] memory underlyings_, uint256[] memory underlyingAmounts_)\\r\\n    {\\r\\n        underlyings_ = new address[](1);\\r\\n        underlyings_[0] = SUSD;\\r\\n        underlyingAmounts_ = new uint256[](1);\\r\\n\\r\\n        bytes32 currencyKey = getCurrencyKeyForSynth(_derivative);\\r\\n        require(currencyKey != 0, \\\"calcUnderlyingValues: _derivative is not supported\\\");\\r\\n\\r\\n        address exchangeRates = ISynthetixAddressResolver(ADDRESS_RESOLVER).requireAndGetAddress(\\r\\n            \\\"ExchangeRates\\\",\\r\\n            \\\"calcUnderlyingValues: Missing ExchangeRates\\\"\\r\\n        );\\r\\n\\r\\n        (uint256 rate, bool isInvalid) = ISynthetixExchangeRates(exchangeRates).rateAndInvalid(\\r\\n            currencyKey\\r\\n        );\\r\\n        require(!isInvalid, \\\"calcUnderlyingValues: _derivative rate is not valid\\\");\\r\\n\\r\\n        underlyingAmounts_[0] = _derivativeAmount.mul(rate).div(SYNTH_UNIT);\\r\\n\\r\\n        return (underlyings_, underlyingAmounts_);\\r\\n    }\\r\\n\\r\\n    /// @notice Checks whether an asset is a supported primitive of the price feed\\r\\n    /// @param _asset The asset to check\\r\\n    /// @return isSupported_ True if the asset is a supported primitive\\r\\n    function isSupportedAsset(address _asset) public view override returns (bool isSupported_) {\\r\\n        return getCurrencyKeyForSynth(_asset) != 0;\\r\\n    }\\r\\n\\r\\n    /////////////////////\\r\\n    // SYNTHS REGISTRY //\\r\\n    /////////////////////\\r\\n\\r\\n    /// @notice Adds Synths to the price feed\\r\\n    /// @param _synths Synths to add\\r\\n    function addSynths(address[] calldata _synths) external onlyFundDeployerOwner {\\r\\n        require(_synths.length > 0, \\\"addSynths: Empty _synths\\\");\\r\\n\\r\\n        __addSynths(_synths);\\r\\n    }\\r\\n\\r\\n    /// @notice Updates the cached currencyKey value for specified Synths\\r\\n    /// @param _synths Synths to update\\r\\n    /// @dev Anybody can call this function\\r\\n    function updateSynthCurrencyKeys(address[] calldata _synths) external {\\r\\n        require(_synths.length > 0, \\\"updateSynthCurrencyKeys: Empty _synths\\\");\\r\\n\\r\\n        for (uint256 i; i < _synths.length; i++) {\\r\\n            bytes32 prevCurrencyKey = synthToCurrencyKey[_synths[i]];\\r\\n            require(prevCurrencyKey != 0, \\\"updateSynthCurrencyKeys: Synth not set\\\");\\r\\n\\r\\n            bytes32 nextCurrencyKey = __getCurrencyKey(_synths[i]);\\r\\n            require(\\r\\n                nextCurrencyKey != prevCurrencyKey,\\r\\n                \\\"updateSynthCurrencyKeys: Synth has correct currencyKey\\\"\\r\\n            );\\r\\n\\r\\n            synthToCurrencyKey[_synths[i]] = nextCurrencyKey;\\r\\n\\r\\n            emit SynthCurrencyKeyUpdated(_synths[i], prevCurrencyKey, nextCurrencyKey);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to add Synths\\r\\n    function __addSynths(address[] memory _synths) private {\\r\\n        for (uint256 i; i < _synths.length; i++) {\\r\\n            require(synthToCurrencyKey[_synths[i]] == 0, \\\"__addSynths: Value already set\\\");\\r\\n\\r\\n            bytes32 currencyKey = __getCurrencyKey(_synths[i]);\\r\\n            require(currencyKey != 0, \\\"__addSynths: No currencyKey\\\");\\r\\n\\r\\n            synthToCurrencyKey[_synths[i]] = currencyKey;\\r\\n\\r\\n            emit SynthAdded(_synths[i], currencyKey);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to query a currencyKey from Synthetix\\r\\n    function __getCurrencyKey(address _synthProxy) private view returns (bytes32 currencyKey_) {\\r\\n        return ISynthetixSynth(ISynthetixProxyERC20(_synthProxy).target()).currencyKey();\\r\\n    }\\r\\n\\r\\n    ///////////////////\\r\\n    // STATE GETTERS //\\r\\n    ///////////////////\\r\\n\\r\\n    /// @notice Gets the `ADDRESS_RESOLVER` variable\\r\\n    /// @return addressResolver_ The `ADDRESS_RESOLVER` variable value\\r\\n    function getAddressResolver() external view returns (address) {\\r\\n        return ADDRESS_RESOLVER;\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the currencyKey for multiple given Synths\\r\\n    /// @return currencyKeys_ The currencyKey values\\r\\n    function getCurrencyKeysForSynths(address[] calldata _synths)\\r\\n        external\\r\\n        view\\r\\n        returns (bytes32[] memory currencyKeys_)\\r\\n    {\\r\\n        currencyKeys_ = new bytes32[](_synths.length);\\r\\n        for (uint256 i; i < _synths.length; i++) {\\r\\n            currencyKeys_[i] = synthToCurrencyKey[_synths[i]];\\r\\n        }\\r\\n\\r\\n        return currencyKeys_;\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the `SUSD` variable\\r\\n    /// @return susd_ The `SUSD` variable value\\r\\n    function getSUSD() external view returns (address susd_) {\\r\\n        return SUSD;\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the currencyKey for a given Synth\\r\\n    /// @return currencyKey_ The currencyKey value\\r\\n    function getCurrencyKeyForSynth(address _synth) public view returns (bytes32 currencyKey_) {\\r\\n        return synthToCurrencyKey[_synth];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf1e28f0f953ee69883261ceddbeb298de89d1a2363e1aff89939fe0b1d23c343\",\"license\":\"GPL-3.0\"},\"contracts/release/infrastructure/price-feeds/primitives/IPrimitivePriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title IPrimitivePriceFeed Interface\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\n/// @notice Interface for primitive price feeds\\r\\ninterface IPrimitivePriceFeed {\\r\\n    function calcCanonicalValue(\\r\\n        address,\\r\\n        uint256,\\r\\n        address\\r\\n    ) external view returns (uint256, bool);\\r\\n\\r\\n    function calcLiveValue(\\r\\n        address,\\r\\n        uint256,\\r\\n        address\\r\\n    ) external view returns (uint256, bool);\\r\\n\\r\\n    function isSupportedAsset(address) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x4ec94b8620d068e9e520d87e7e0eda9828ab465de5b5aefe3880dc619782e02a\",\"license\":\"GPL-3.0\"},\"contracts/release/infrastructure/value-interpreter/IValueInterpreter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title IValueInterpreter interface\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\n/// @notice Interface for ValueInterpreter\\r\\ninterface IValueInterpreter {\\r\\n    function calcCanonicalAssetValue(\\r\\n        address,\\r\\n        uint256,\\r\\n        address\\r\\n    ) external returns (uint256, bool);\\r\\n\\r\\n    function calcCanonicalAssetsTotalValue(\\r\\n        address[] calldata,\\r\\n        uint256[] calldata,\\r\\n        address\\r\\n    ) external returns (uint256, bool);\\r\\n\\r\\n    function calcLiveAssetValue(\\r\\n        address,\\r\\n        uint256,\\r\\n        address\\r\\n    ) external returns (uint256, bool);\\r\\n\\r\\n    function calcLiveAssetsTotalValue(\\r\\n        address[] calldata,\\r\\n        uint256[] calldata,\\r\\n        address\\r\\n    ) external returns (uint256, bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x2c7f3469683dd6a179268808a6e4045fd0e1fb8893151e7cbdab93db4f0aba7e\",\"license\":\"GPL-3.0\"},\"contracts/release/interfaces/ISynthetix.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title ISynthetix Interface\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\ninterface ISynthetix {\\r\\n    function exchangeOnBehalfWithTracking(\\r\\n        address,\\r\\n        bytes32,\\r\\n        uint256,\\r\\n        bytes32,\\r\\n        address,\\r\\n        bytes32\\r\\n    ) external returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xde69a616cd0326439e08d99c9f5d1e6f014082493d2a780be2ed8599d601eda3\",\"license\":\"GPL-3.0\"},\"contracts/release/interfaces/ISynthetixAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title ISynthetixAddressResolver Interface\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\ninterface ISynthetixAddressResolver {\\r\\n    function requireAndGetAddress(bytes32, string calldata) external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0x10232ee937df88ecdfda8c600fd2f689542c41616f3177e88e224d01921bdebd\",\"license\":\"GPL-3.0\"},\"contracts/release/interfaces/ISynthetixExchangeRates.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title ISynthetixExchangeRates Interface\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\ninterface ISynthetixExchangeRates {\\r\\n    function rateAndInvalid(bytes32) external view returns (uint256, bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x8436c9a0ac5931f3ef10501f78ce85a41505a34ae5f9af02730ccb1aa054a76c\",\"license\":\"GPL-3.0\"},\"contracts/release/interfaces/ISynthetixExchanger.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title ISynthetixExchanger Interface\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\ninterface ISynthetixExchanger {\\r\\n    function getAmountsForExchange(\\r\\n        uint256,\\r\\n        bytes32,\\r\\n        bytes32\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        );\\r\\n\\r\\n    function settle(address, bytes32)\\r\\n        external\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        );\\r\\n}\\r\\n\",\"keccak256\":\"0x6016af448e7db60305bd4e4cc42ff10fc52a271615836c1249fadbf99fff89a0\",\"license\":\"GPL-3.0\"},\"contracts/release/interfaces/ISynthetixProxyERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title ISynthetixProxyERC20 Interface\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\ninterface ISynthetixProxyERC20 {\\r\\n    function target() external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0x2bc57c08164d8f706bf6b336990d5b307062c15e09830ecbac326d3274d00d0c\",\"license\":\"GPL-3.0\"},\"contracts/release/interfaces/ISynthetixSynth.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title ISynthetixSynth Interface\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\ninterface ISynthetixSynth {\\r\\n    function currencyKey() external view returns (bytes32);\\r\\n}\\r\\n\",\"keccak256\":\"0xb377be595624fbf242e48c1e2e7efde4acd7c363a673598eb30da93326defa56\",\"license\":\"GPL-3.0\"},\"contracts/release/utils/AddressArrayLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title AddressArray Library\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\n/// @notice A library to extend the address array data type\\r\\nlibrary AddressArrayLib {\\r\\n    /// @dev Helper to add an item to an array. Does not assert uniqueness of the new item.\\r\\n    function addItem(address[] memory _self, address _itemToAdd)\\r\\n        internal\\r\\n        pure\\r\\n        returns (address[] memory nextArray_)\\r\\n    {\\r\\n        nextArray_ = new address[](_self.length + 1);\\r\\n        for (uint256 i; i < _self.length; i++) {\\r\\n            nextArray_[i] = _self[i];\\r\\n        }\\r\\n        nextArray_[_self.length] = _itemToAdd;\\r\\n\\r\\n        return nextArray_;\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to add an item to an array, only if it is not already in the array.\\r\\n    function addUniqueItem(address[] memory _self, address _itemToAdd)\\r\\n        internal\\r\\n        pure\\r\\n        returns (address[] memory nextArray_)\\r\\n    {\\r\\n        if (contains(_self, _itemToAdd)) {\\r\\n            return _self;\\r\\n        }\\r\\n\\r\\n        return addItem(_self, _itemToAdd);\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to verify if an array contains a particular value\\r\\n    function contains(address[] memory _self, address _target)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bool doesContain_)\\r\\n    {\\r\\n        for (uint256 i; i < _self.length; i++) {\\r\\n            if (_target == _self[i]) {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to reassign all items in an array with a specified value\\r\\n    function fill(address[] memory _self, address _value)\\r\\n        internal\\r\\n        pure\\r\\n        returns (address[] memory nextArray_)\\r\\n    {\\r\\n        nextArray_ = new address[](_self.length);\\r\\n        for (uint256 i; i < nextArray_.length; i++) {\\r\\n            nextArray_[i] = _value;\\r\\n        }\\r\\n\\r\\n        return nextArray_;\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to verify if array is a set of unique values.\\r\\n    /// Does not assert length > 0.\\r\\n    function isUniqueSet(address[] memory _self) internal pure returns (bool isUnique_) {\\r\\n        if (_self.length <= 1) {\\r\\n            return true;\\r\\n        }\\r\\n\\r\\n        uint256 arrayLength = _self.length;\\r\\n        for (uint256 i; i < arrayLength; i++) {\\r\\n            for (uint256 j = i + 1; j < arrayLength; j++) {\\r\\n                if (_self[i] == _self[j]) {\\r\\n                    return false;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to remove items from an array. Removes all matching occurrences of each item.\\r\\n    /// Does not assert uniqueness of either array.\\r\\n    function removeItems(address[] memory _self, address[] memory _itemsToRemove)\\r\\n        internal\\r\\n        pure\\r\\n        returns (address[] memory nextArray_)\\r\\n    {\\r\\n        if (_itemsToRemove.length == 0) {\\r\\n            return _self;\\r\\n        }\\r\\n\\r\\n        bool[] memory indexesToRemove = new bool[](_self.length);\\r\\n        uint256 remainingItemsCount = _self.length;\\r\\n        for (uint256 i; i < _self.length; i++) {\\r\\n            if (contains(_itemsToRemove, _self[i])) {\\r\\n                indexesToRemove[i] = true;\\r\\n                remainingItemsCount--;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (remainingItemsCount == _self.length) {\\r\\n            nextArray_ = _self;\\r\\n        } else if (remainingItemsCount > 0) {\\r\\n            nextArray_ = new address[](remainingItemsCount);\\r\\n            uint256 nextArrayIndex;\\r\\n            for (uint256 i; i < _self.length; i++) {\\r\\n                if (!indexesToRemove[i]) {\\r\\n                    nextArray_[nextArrayIndex] = _self[i];\\r\\n                    nextArrayIndex++;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return nextArray_;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9cf10bc53b106758cfd6d754567a98ce1774639d03b9a430ba5ffa0298c160de\",\"license\":\"GPL-3.0\"},\"contracts/release/utils/AssetFinalityResolver.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"../infrastructure/price-feeds/derivatives/feeds/SynthetixPriceFeed.sol\\\";\\r\\nimport \\\"../interfaces/ISynthetixAddressResolver.sol\\\";\\r\\nimport \\\"../interfaces/ISynthetixExchanger.sol\\\";\\r\\n\\r\\n/// @title AssetFinalityResolver Contract\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\n/// @notice A contract that helps achieve asset finality\\r\\nabstract contract AssetFinalityResolver {\\r\\n    address internal immutable SYNTHETIX_ADDRESS_RESOLVER;\\r\\n    address internal immutable SYNTHETIX_PRICE_FEED;\\r\\n\\r\\n    constructor(address _synthetixPriceFeed, address _synthetixAddressResolver) public {\\r\\n        SYNTHETIX_ADDRESS_RESOLVER = _synthetixAddressResolver;\\r\\n        SYNTHETIX_PRICE_FEED = _synthetixPriceFeed;\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to finalize a Synth balance at a given target address and return its balance\\r\\n    function __finalizeIfSynthAndGetAssetBalance(\\r\\n        address _target,\\r\\n        address _asset,\\r\\n        bool _requireFinality\\r\\n    ) internal returns (uint256 assetBalance_) {\\r\\n        bytes32 currencyKey = SynthetixPriceFeed(SYNTHETIX_PRICE_FEED).getCurrencyKeyForSynth(\\r\\n            _asset\\r\\n        );\\r\\n        if (currencyKey != 0) {\\r\\n            address synthetixExchanger = ISynthetixAddressResolver(SYNTHETIX_ADDRESS_RESOLVER)\\r\\n                .requireAndGetAddress(\\r\\n                \\\"Exchanger\\\",\\r\\n                \\\"finalizeAndGetAssetBalance: Missing Exchanger\\\"\\r\\n            );\\r\\n            try ISynthetixExchanger(synthetixExchanger).settle(_target, currencyKey)  {} catch {\\r\\n                require(!_requireFinality, \\\"finalizeAndGetAssetBalance: Cannot settle Synth\\\");\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return ERC20(_asset).balanceOf(_target);\\r\\n    }\\r\\n\\r\\n    ///////////////////\\r\\n    // STATE GETTERS //\\r\\n    ///////////////////\\r\\n\\r\\n    /// @notice Gets the `SYNTHETIX_ADDRESS_RESOLVER` variable\\r\\n    /// @return synthetixAddressResolver_ The `SYNTHETIX_ADDRESS_RESOLVER` variable value\\r\\n    function getSynthetixAddressResolver()\\r\\n        external\\r\\n        view\\r\\n        returns (address synthetixAddressResolver_)\\r\\n    {\\r\\n        return SYNTHETIX_ADDRESS_RESOLVER;\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the `SYNTHETIX_PRICE_FEED` variable\\r\\n    /// @return synthetixPriceFeed_ The `SYNTHETIX_PRICE_FEED` variable value\\r\\n    function getSynthetixPriceFeed() external view returns (address synthetixPriceFeed_) {\\r\\n        return SYNTHETIX_PRICE_FEED;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8f5a0864a876aec6d7685d56af179a4bfcd0243705d817091f8ce66949a237a4\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162001e2338038062001e2383398101604081905262000034916200005d565b60601b6001600160601b031916608052620000b2565b8051620000578162000098565b92915050565b6000602082840312156200007057600080fd5b60006200007e84846200004a565b949350505050565b60006001600160a01b03821662000057565b620000a38162000086565b8114620000af57600080fd5b50565b60805160601c611d35620000ee6000398061026b52806103cc52806104e85280610632528061077c5280610a0852806110cf5250611d356000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80637998a1c4116100665780637998a1c414610129578063877fd4731461013e578063b78b48131461015e578063cbf54bb214610171578063f2d63826146101895761009e565b806305be5783146100a35780630f5f6b4f146100cc578063233faf5f146100e15780633146d058146100f457806341892d7e14610107575b600080fd5b6100b66100b13660046113bc565b61019e565b6040516100c39190611ada565b60405180910390f35b6100df6100da3660046114f2565b610260565b005b6100df6100ef366004611462565b6103c1565b6100df610102366004611432565b6104dd565b61011a610115366004611462565b610623565b6040516100c393929190611ae8565b6101316106d8565b6040516100c39190611b10565b61015161014c3660046113bc565b6106fd565b6040516100c39190611be1565b6100b661016c366004611432565b61076f565b61017961087e565b6040516100c39493929190611a99565b610191610a06565b6040516100c39190611a70565b60006101a86112e9565b506001600160a01b038216600090815260208181526040808320815160e08101835281548152600182015493810184905260028201549281018390526003820154606082015260048201546080820152600582015460a082015260069091015460c0820152929061021a904290610a2a565b905081811015610230576000935050505061025b565b600082828161023b57fe5b069050600061024a4283610a2a565b905080856060015110955050505050505b919050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146102b15760405162461bcd60e51b81526004016102a890611b61565b60405180910390fd5b6000806102c083850185611596565b91509150600082116102e45760405162461bcd60e51b81526004016102a890611ba1565b600081116103045760405162461bcd60e51b81526004016102a890611b21565b6040805160e08101825283815260208082018481526000838501818152606085018281526080860183815260a0870184815260c088018581526001600160a01b038f168087529786905294899020975188559451600188015591516002870155516003860155516004850155905160058401555160069092019190915590517f9f856f74192181b265e61298e386477299c53e0cb24be55a84416f2af4ba4a61906103b29085908590611bfd565b60405180910390a25050505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146104095760405162461bcd60e51b81526004016102a890611b61565b6001600160a01b038616600090815260208181526040808320600501548151601f87018490048402810184019092528582529291610469918a918a918a918a908a90819084018382808284376000920191909152508a9250610a52915050565b90508181141561047a5750506104d5565b6001600160a01b03881660008181526020819052604090819020600501839055517f040fdaa9ed9dd9e4588f1f96145d5517471e7b518fb5d56d8504eb839f50b653906104ca9085908590611bfd565b60405180910390a250505b505050505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146105255760405162461bcd60e51b81526004016102a890611b61565b6001600160a01b0382166000818152602081905260408082209051635a0b830960e11b81529092829163b417061290610562908490600401611ada565b6040805180830381600087803b15801561057b57600080fd5b505af115801561058f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b39190611566565b91509150806105d45760405162461bcd60e51b81526004016102a890611b71565b60048301829055600583018290554260028401556040516001600160a01b038616907f67286096839b70891eb51e1532e51d6a709d69c808d1b7e24abcb24a39167d05906103b2908590611bef565b60008080336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461066f5760405162461bcd60e51b81526004016102a890611b61565b83610682575060009150819050806106cc565b600061068f8a8a87610d04565b9050806106a7576000806000935093509350506106cc565b60008113156106bf57600493506000925090506106cc565b6005935060009250820390505b96509650969350505050565b60408051808201909152600b81526a504552464f524d414e434560a81b602082015290565b6107056112e9565b506001600160a01b031660009081526020818152604091829020825160e081018452815481526001820154928101929092526002810154928201929092526003820154606082015260048201546080820152600582015460a082015260069091015460c082015290565b6000336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146107b95760405162461bcd60e51b81526004016102a890611b61565b6107c28361019e565b6107ce57506000610878565b6001600160a01b038316600090815260208190526040812042600382015560048101546005820154919290916108049083610f17565b6006840154909150801561081a57600060068501555b8282111561082a57600484018290555b866001600160a01b03167f807c2c73192f2d30961a7d01ec8dc57115a4cd9f9bd0434331beacb916c6a8cc84848460405161086793929190611c18565b60405180910390a260019450505050505b92915050565b6040805160038082526080820190925260609182916000918291906020820185803683370190505093506000846000815181106108b757fe5b602002602001019060058111156108ca57fe5b908160058111156108d757fe5b815250506001846001815181106108ea57fe5b602002602001019060058111156108fd57fe5b9081600581111561090a57fe5b8152505060058460028151811061091d57fe5b6020026020010190600581111561093057fe5b9081600581111561093d57fe5b90525060408051600380825260808201909252906020820160608036833701905050925060008360008151811061097057fe5b6020026020010190600581111561098357fe5b9081600581111561099057fe5b815250506004836001815181106109a357fe5b602002602001019060058111156109b657fe5b908160058111156109c357fe5b815250506005836002815181106109d657fe5b602002602001019060058111156109e957fe5b908160058111156109f657fe5b9052506001915081905090919293565b7f000000000000000000000000000000000000000000000000000000000000000090565b600082821115610a4c5760405162461bcd60e51b81526004016102a890611b41565b50900390565b600080866001600160a01b031663e269c3d66040518163ffffffff1660e01b815260040160206040518083038186803b158015610a8e57600080fd5b505afa158015610aa2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac691906113da565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610afe57600080fd5b505afa158015610b12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3691906115c6565b60ff16600a0a905082610b4a579050610cfb565b60008690506000816001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b8a57600080fd5b505afa158015610b9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc29190611548565b90506000610c4c836001600160a01b03166370a082318b6040518263ffffffff1660e01b8152600401610bf59190611a70565b60206040518083038186803b158015610c0d57600080fd5b505afa158015610c21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c459190611548565b8390610a2a565b905080610c5f5783945050505050610cfb565b856005896005811115610c6e57fe5b1415610cdd576000610c7f89610f2d565b9150610c8d90508382610a2a565b925082610ca257859650505050505050610cfb565b6000610cb885610cb28b85610f4d565b90610f87565b9050610cc48382610a2a565b925082610cda5786975050505050505050610cfb565b50505b610cf382610cb283670de0b6b3a7640000610f4d565b955050505050505b95945050505050565b6000808390506000816001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d4557600080fd5b505afa158015610d59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7d9190611548565b905080610d8f57600092505050610f10565b6040516370a0823160e01b81526000906001600160a01b038416906370a0823190610dbe908990600401611a70565b60206040518083038186803b158015610dd657600080fd5b505afa158015610dea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0e9190611548565b905081811415610e245760009350505050610f10565b6001600160a01b0387166000908152602081815260408083206006810154825160e081018452825481526001830154948101949094526002820154928401929092526003810154606084015260048101546080840152600581015460a084015260c08301829052929091610ea0908b908790879086908d610fb9565b9750905081811415610ebb5760009650505050505050610f10565b808360060181905550896001600160a01b03167f74a80d6cce2a8c3a25bdba0cd5533d238d76eb996790fb2d4544372cc7f4e35683838a604051610f0193929190611c18565b60405180910390a25050505050505b9392505050565b6000818310610f27575081610878565b50919050565b60008082806020019051810190610f4491906113f8565b91509150915091565b600082610f5c57506000610878565b82820282848281610f6957fe5b0414610f105760405162461bcd60e51b81526004016102a890611b91565b6000808211610fa85760405162461bcd60e51b81526004016102a890611b51565b818381610fb157fe5b049392505050565b60008080610fc78888610a2a565b90506000610fe182610cb287670de0b6b3a7640000610f4d565b60a087015190915080821415611000578760009450945050505061102a565b6110168383838b8b600001518c60800151611035565b94506110248b8488886110ae565b93505050505b965096945050505050565b600080611071670de0b6b3a764000061106b8a611065611055888c610f17565b61105f898e610f17565b9061117e565b906111c4565b9061122f565b9050600061108b670de0b6b3a764000061106b84886111c4565b90506110a1600061109c8884611293565b6112d9565b9998505050505050505050565b6000806110c86110be8585610a2a565b610cb28588610f4d565b90506111727f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663aa051c2c88306040518363ffffffff1660e01b815260040161111b929190611a7e565b60206040518083038186803b15801561113357600080fd5b505afa158015611147573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061116b9190611548565b829061117e565b9150505b949350505050565b60008183038183128015906111935750838113155b806111a857506000831280156111a857508381135b610f105760405162461bcd60e51b81526004016102a890611bc1565b6000826111d357506000610878565b826000191480156111e75750600160ff1b82145b156112045760405162461bcd60e51b81526004016102a890611bb1565b8282028284828161121157fe5b0514610f105760405162461bcd60e51b81526004016102a890611bb1565b60008161124e5760405162461bcd60e51b81526004016102a890611bd1565b816000191480156112625750600160ff1b83145b1561127f5760405162461bcd60e51b81526004016102a890611b81565b600082848161128a57fe5b05949350505050565b60008282018183128015906112a85750838112155b806112bd57506000831280156112bd57508381125b610f105760405162461bcd60e51b81526004016102a890611b31565b6000818312610f27575081610878565b6040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b803561087881611cc3565b805161087881611cc3565b805161087881611cd7565b60008083601f84011261135957600080fd5b50813567ffffffffffffffff81111561137157600080fd5b60208301915083600182028301111561138957600080fd5b9250929050565b803561087881611ce0565b803561087881611ced565b805161087881611ced565b805161087881611cf6565b6000602082840312156113ce57600080fd5b60006111768484611326565b6000602082840312156113ec57600080fd5b60006111768484611331565b6000806040838503121561140b57600080fd5b60006114178585611331565b9250506020611428858286016113a6565b9150509250929050565b6000806040838503121561144557600080fd5b60006114518585611326565b925050602061142885828601611326565b60008060008060008060a0878903121561147b57600080fd5b60006114878989611326565b965050602061149889828a01611326565b95505060406114a989828a01611390565b945050606087013567ffffffffffffffff8111156114c657600080fd5b6114d289828a01611347565b935093505060806114e589828a0161139b565b9150509295509295509295565b60008060006040848603121561150757600080fd5b60006115138686611326565b935050602084013567ffffffffffffffff81111561153057600080fd5b61153c86828701611347565b92509250509250925092565b60006020828403121561155a57600080fd5b600061117684846113a6565b6000806040838503121561157957600080fd5b600061158585856113a6565b92505060206114288582860161133c565b600080604083850312156115a957600080fd5b60006115b5858561139b565b92505060206114288582860161139b565b6000602082840312156115d857600080fd5b600061117684846113b1565b60006115f08383611669565b505060200190565b61160181611c46565b82525050565b600061161282611c39565b61161c8185611c3d565b935061162783611c33565b8060005b8381101561165557815161163f88826115e4565b975061164a83611c33565b92505060010161162b565b509495945050505050565b61160181611c51565b61160181611c75565b61160181611c60565b600061168682611c39565b6116908185611c3d565b93506116a0818560208601611c80565b6116a981611cac565b9093019392505050565b60006116c0603183611c3d565b7f61646446756e6453657474696e67733a20666565506572696f64206d75737420815270062652067726561746572207468616e203607c1b602082015260400192915050565b6000611713602183611c3d565b7f5369676e6564536166654d6174683a206164646974696f6e206f766572666c6f8152607760f81b602082015260400192915050565b6000611756601e83611c3d565b7f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815260200192915050565b600061178f601a83611c3d565b7f536166654d6174683a206469766973696f6e206279207a65726f000000000000815260200192915050565b60006117c8602583611c3d565b7f4f6e6c7920746865204665654d616e6765722063616e206d616b6520746869738152640818d85b1b60da1b602082015260400192915050565b600061180f602483611c3d565b7f6163746976617465466f7246756e643a20496e76616c696420736861726520708152637269636560e01b602082015260400192915050565b6000611855602183611c3d565b7f5369676e6564536166654d6174683a206469766973696f6e206f766572666c6f8152607760f81b602082015260400192915050565b6000611898602183611c3d565b7f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f8152607760f81b602082015260400192915050565b60006118db602f83611c3d565b7f61646446756e6453657474696e67733a2066656552617465206d75737420626581526e02067726561746572207468616e203608c1b602082015260400192915050565b600061192c602783611c3d565b7f5369676e6564536166654d6174683a206d756c7469706c69636174696f6e206f815266766572666c6f7760c81b602082015260400192915050565b6000611975602483611c3d565b7f5369676e6564536166654d6174683a207375627472616374696f6e206f766572815263666c6f7760e01b602082015260400192915050565b60006119bb602083611c3d565b7f5369676e6564536166654d6174683a206469766973696f6e206279207a65726f815260200192915050565b805160e08301906119f88482611672565b506020820151611a0b6020850182611672565b506040820151611a1e6040850182611672565b506060820151611a316060850182611672565b506080820151611a446080850182611672565b5060a0820151611a5760a0850182611672565b5060c0820151611a6a60c0850182611672565b50505050565b6020810161087882846115f8565b60408101611a8c82856115f8565b610f1060208301846115f8565b60808082528101611aaa8187611607565b90508181036020830152611abe8186611607565b9050611acd6040830185611660565b610cfb6060830184611660565b602081016108788284611660565b60608101611af68286611669565b611b0360208301856115f8565b6111766040830184611672565b60208082528101610f10818461167b565b60208082528101610878816116b3565b6020808252810161087881611706565b6020808252810161087881611749565b6020808252810161087881611782565b60208082528101610878816117bb565b6020808252810161087881611802565b6020808252810161087881611848565b602080825281016108788161188b565b60208082528101610878816118ce565b602080825281016108788161191f565b6020808252810161087881611968565b60208082528101610878816119ae565b60e0810161087882846119e7565b602081016108788284611672565b60408101611c0b8285611672565b610f106020830184611672565b60608101611c268286611672565b611b036020830185611672565b60200190565b5190565b90815260200190565b600061087882611c63565b151590565b8061025b81611cb6565b90565b6001600160a01b031690565b60ff1690565b600061087882611c56565b60005b83811015611c9b578181015183820152602001611c83565b83811115611a6a5750506000910152565b601f01601f191690565b60068110611cc057fe5b50565b611ccc81611c46565b8114611cc057600080fd5b611ccc81611c51565b60068110611cc057600080fd5b611ccc81611c60565b611ccc81611c6f56fea26469706673582212201c2ea9fcc4cf660279f436dd6c6211d1bccfbe01a481ffdf56d364528a8d2e3164736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c80637998a1c4116100665780637998a1c414610129578063877fd4731461013e578063b78b48131461015e578063cbf54bb214610171578063f2d63826146101895761009e565b806305be5783146100a35780630f5f6b4f146100cc578063233faf5f146100e15780633146d058146100f457806341892d7e14610107575b600080fd5b6100b66100b13660046113bc565b61019e565b6040516100c39190611ada565b60405180910390f35b6100df6100da3660046114f2565b610260565b005b6100df6100ef366004611462565b6103c1565b6100df610102366004611432565b6104dd565b61011a610115366004611462565b610623565b6040516100c393929190611ae8565b6101316106d8565b6040516100c39190611b10565b61015161014c3660046113bc565b6106fd565b6040516100c39190611be1565b6100b661016c366004611432565b61076f565b61017961087e565b6040516100c39493929190611a99565b610191610a06565b6040516100c39190611a70565b60006101a86112e9565b506001600160a01b038216600090815260208181526040808320815160e08101835281548152600182015493810184905260028201549281018390526003820154606082015260048201546080820152600582015460a082015260069091015460c0820152929061021a904290610a2a565b905081811015610230576000935050505061025b565b600082828161023b57fe5b069050600061024a4283610a2a565b905080856060015110955050505050505b919050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146102b15760405162461bcd60e51b81526004016102a890611b61565b60405180910390fd5b6000806102c083850185611596565b91509150600082116102e45760405162461bcd60e51b81526004016102a890611ba1565b600081116103045760405162461bcd60e51b81526004016102a890611b21565b6040805160e08101825283815260208082018481526000838501818152606085018281526080860183815260a0870184815260c088018581526001600160a01b038f168087529786905294899020975188559451600188015591516002870155516003860155516004850155905160058401555160069092019190915590517f9f856f74192181b265e61298e386477299c53e0cb24be55a84416f2af4ba4a61906103b29085908590611bfd565b60405180910390a25050505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146104095760405162461bcd60e51b81526004016102a890611b61565b6001600160a01b038616600090815260208181526040808320600501548151601f87018490048402810184019092528582529291610469918a918a918a918a908a90819084018382808284376000920191909152508a9250610a52915050565b90508181141561047a5750506104d5565b6001600160a01b03881660008181526020819052604090819020600501839055517f040fdaa9ed9dd9e4588f1f96145d5517471e7b518fb5d56d8504eb839f50b653906104ca9085908590611bfd565b60405180910390a250505b505050505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146105255760405162461bcd60e51b81526004016102a890611b61565b6001600160a01b0382166000818152602081905260408082209051635a0b830960e11b81529092829163b417061290610562908490600401611ada565b6040805180830381600087803b15801561057b57600080fd5b505af115801561058f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b39190611566565b91509150806105d45760405162461bcd60e51b81526004016102a890611b71565b60048301829055600583018290554260028401556040516001600160a01b038616907f67286096839b70891eb51e1532e51d6a709d69c808d1b7e24abcb24a39167d05906103b2908590611bef565b60008080336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461066f5760405162461bcd60e51b81526004016102a890611b61565b83610682575060009150819050806106cc565b600061068f8a8a87610d04565b9050806106a7576000806000935093509350506106cc565b60008113156106bf57600493506000925090506106cc565b6005935060009250820390505b96509650969350505050565b60408051808201909152600b81526a504552464f524d414e434560a81b602082015290565b6107056112e9565b506001600160a01b031660009081526020818152604091829020825160e081018452815481526001820154928101929092526002810154928201929092526003820154606082015260048201546080820152600582015460a082015260069091015460c082015290565b6000336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146107b95760405162461bcd60e51b81526004016102a890611b61565b6107c28361019e565b6107ce57506000610878565b6001600160a01b038316600090815260208190526040812042600382015560048101546005820154919290916108049083610f17565b6006840154909150801561081a57600060068501555b8282111561082a57600484018290555b866001600160a01b03167f807c2c73192f2d30961a7d01ec8dc57115a4cd9f9bd0434331beacb916c6a8cc84848460405161086793929190611c18565b60405180910390a260019450505050505b92915050565b6040805160038082526080820190925260609182916000918291906020820185803683370190505093506000846000815181106108b757fe5b602002602001019060058111156108ca57fe5b908160058111156108d757fe5b815250506001846001815181106108ea57fe5b602002602001019060058111156108fd57fe5b9081600581111561090a57fe5b8152505060058460028151811061091d57fe5b6020026020010190600581111561093057fe5b9081600581111561093d57fe5b90525060408051600380825260808201909252906020820160608036833701905050925060008360008151811061097057fe5b6020026020010190600581111561098357fe5b9081600581111561099057fe5b815250506004836001815181106109a357fe5b602002602001019060058111156109b657fe5b908160058111156109c357fe5b815250506005836002815181106109d657fe5b602002602001019060058111156109e957fe5b908160058111156109f657fe5b9052506001915081905090919293565b7f000000000000000000000000000000000000000000000000000000000000000090565b600082821115610a4c5760405162461bcd60e51b81526004016102a890611b41565b50900390565b600080866001600160a01b031663e269c3d66040518163ffffffff1660e01b815260040160206040518083038186803b158015610a8e57600080fd5b505afa158015610aa2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac691906113da565b6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610afe57600080fd5b505afa158015610b12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3691906115c6565b60ff16600a0a905082610b4a579050610cfb565b60008690506000816001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b8a57600080fd5b505afa158015610b9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc29190611548565b90506000610c4c836001600160a01b03166370a082318b6040518263ffffffff1660e01b8152600401610bf59190611a70565b60206040518083038186803b158015610c0d57600080fd5b505afa158015610c21573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c459190611548565b8390610a2a565b905080610c5f5783945050505050610cfb565b856005896005811115610c6e57fe5b1415610cdd576000610c7f89610f2d565b9150610c8d90508382610a2a565b925082610ca257859650505050505050610cfb565b6000610cb885610cb28b85610f4d565b90610f87565b9050610cc48382610a2a565b925082610cda5786975050505050505050610cfb565b50505b610cf382610cb283670de0b6b3a7640000610f4d565b955050505050505b95945050505050565b6000808390506000816001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d4557600080fd5b505afa158015610d59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7d9190611548565b905080610d8f57600092505050610f10565b6040516370a0823160e01b81526000906001600160a01b038416906370a0823190610dbe908990600401611a70565b60206040518083038186803b158015610dd657600080fd5b505afa158015610dea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0e9190611548565b905081811415610e245760009350505050610f10565b6001600160a01b0387166000908152602081815260408083206006810154825160e081018452825481526001830154948101949094526002820154928401929092526003810154606084015260048101546080840152600581015460a084015260c08301829052929091610ea0908b908790879086908d610fb9565b9750905081811415610ebb5760009650505050505050610f10565b808360060181905550896001600160a01b03167f74a80d6cce2a8c3a25bdba0cd5533d238d76eb996790fb2d4544372cc7f4e35683838a604051610f0193929190611c18565b60405180910390a25050505050505b9392505050565b6000818310610f27575081610878565b50919050565b60008082806020019051810190610f4491906113f8565b91509150915091565b600082610f5c57506000610878565b82820282848281610f6957fe5b0414610f105760405162461bcd60e51b81526004016102a890611b91565b6000808211610fa85760405162461bcd60e51b81526004016102a890611b51565b818381610fb157fe5b049392505050565b60008080610fc78888610a2a565b90506000610fe182610cb287670de0b6b3a7640000610f4d565b60a087015190915080821415611000578760009450945050505061102a565b6110168383838b8b600001518c60800151611035565b94506110248b8488886110ae565b93505050505b965096945050505050565b600080611071670de0b6b3a764000061106b8a611065611055888c610f17565b61105f898e610f17565b9061117e565b906111c4565b9061122f565b9050600061108b670de0b6b3a764000061106b84886111c4565b90506110a1600061109c8884611293565b6112d9565b9998505050505050505050565b6000806110c86110be8585610a2a565b610cb28588610f4d565b90506111727f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663aa051c2c88306040518363ffffffff1660e01b815260040161111b929190611a7e565b60206040518083038186803b15801561113357600080fd5b505afa158015611147573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061116b9190611548565b829061117e565b9150505b949350505050565b60008183038183128015906111935750838113155b806111a857506000831280156111a857508381135b610f105760405162461bcd60e51b81526004016102a890611bc1565b6000826111d357506000610878565b826000191480156111e75750600160ff1b82145b156112045760405162461bcd60e51b81526004016102a890611bb1565b8282028284828161121157fe5b0514610f105760405162461bcd60e51b81526004016102a890611bb1565b60008161124e5760405162461bcd60e51b81526004016102a890611bd1565b816000191480156112625750600160ff1b83145b1561127f5760405162461bcd60e51b81526004016102a890611b81565b600082848161128a57fe5b05949350505050565b60008282018183128015906112a85750838112155b806112bd57506000831280156112bd57508381125b610f105760405162461bcd60e51b81526004016102a890611b31565b6000818312610f27575081610878565b6040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b803561087881611cc3565b805161087881611cc3565b805161087881611cd7565b60008083601f84011261135957600080fd5b50813567ffffffffffffffff81111561137157600080fd5b60208301915083600182028301111561138957600080fd5b9250929050565b803561087881611ce0565b803561087881611ced565b805161087881611ced565b805161087881611cf6565b6000602082840312156113ce57600080fd5b60006111768484611326565b6000602082840312156113ec57600080fd5b60006111768484611331565b6000806040838503121561140b57600080fd5b60006114178585611331565b9250506020611428858286016113a6565b9150509250929050565b6000806040838503121561144557600080fd5b60006114518585611326565b925050602061142885828601611326565b60008060008060008060a0878903121561147b57600080fd5b60006114878989611326565b965050602061149889828a01611326565b95505060406114a989828a01611390565b945050606087013567ffffffffffffffff8111156114c657600080fd5b6114d289828a01611347565b935093505060806114e589828a0161139b565b9150509295509295509295565b60008060006040848603121561150757600080fd5b60006115138686611326565b935050602084013567ffffffffffffffff81111561153057600080fd5b61153c86828701611347565b92509250509250925092565b60006020828403121561155a57600080fd5b600061117684846113a6565b6000806040838503121561157957600080fd5b600061158585856113a6565b92505060206114288582860161133c565b600080604083850312156115a957600080fd5b60006115b5858561139b565b92505060206114288582860161139b565b6000602082840312156115d857600080fd5b600061117684846113b1565b60006115f08383611669565b505060200190565b61160181611c46565b82525050565b600061161282611c39565b61161c8185611c3d565b935061162783611c33565b8060005b8381101561165557815161163f88826115e4565b975061164a83611c33565b92505060010161162b565b509495945050505050565b61160181611c51565b61160181611c75565b61160181611c60565b600061168682611c39565b6116908185611c3d565b93506116a0818560208601611c80565b6116a981611cac565b9093019392505050565b60006116c0603183611c3d565b7f61646446756e6453657474696e67733a20666565506572696f64206d75737420815270062652067726561746572207468616e203607c1b602082015260400192915050565b6000611713602183611c3d565b7f5369676e6564536166654d6174683a206164646974696f6e206f766572666c6f8152607760f81b602082015260400192915050565b6000611756601e83611c3d565b7f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815260200192915050565b600061178f601a83611c3d565b7f536166654d6174683a206469766973696f6e206279207a65726f000000000000815260200192915050565b60006117c8602583611c3d565b7f4f6e6c7920746865204665654d616e6765722063616e206d616b6520746869738152640818d85b1b60da1b602082015260400192915050565b600061180f602483611c3d565b7f6163746976617465466f7246756e643a20496e76616c696420736861726520708152637269636560e01b602082015260400192915050565b6000611855602183611c3d565b7f5369676e6564536166654d6174683a206469766973696f6e206f766572666c6f8152607760f81b602082015260400192915050565b6000611898602183611c3d565b7f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f8152607760f81b602082015260400192915050565b60006118db602f83611c3d565b7f61646446756e6453657474696e67733a2066656552617465206d75737420626581526e02067726561746572207468616e203608c1b602082015260400192915050565b600061192c602783611c3d565b7f5369676e6564536166654d6174683a206d756c7469706c69636174696f6e206f815266766572666c6f7760c81b602082015260400192915050565b6000611975602483611c3d565b7f5369676e6564536166654d6174683a207375627472616374696f6e206f766572815263666c6f7760e01b602082015260400192915050565b60006119bb602083611c3d565b7f5369676e6564536166654d6174683a206469766973696f6e206279207a65726f815260200192915050565b805160e08301906119f88482611672565b506020820151611a0b6020850182611672565b506040820151611a1e6040850182611672565b506060820151611a316060850182611672565b506080820151611a446080850182611672565b5060a0820151611a5760a0850182611672565b5060c0820151611a6a60c0850182611672565b50505050565b6020810161087882846115f8565b60408101611a8c82856115f8565b610f1060208301846115f8565b60808082528101611aaa8187611607565b90508181036020830152611abe8186611607565b9050611acd6040830185611660565b610cfb6060830184611660565b602081016108788284611660565b60608101611af68286611669565b611b0360208301856115f8565b6111766040830184611672565b60208082528101610f10818461167b565b60208082528101610878816116b3565b6020808252810161087881611706565b6020808252810161087881611749565b6020808252810161087881611782565b60208082528101610878816117bb565b6020808252810161087881611802565b6020808252810161087881611848565b602080825281016108788161188b565b60208082528101610878816118ce565b602080825281016108788161191f565b6020808252810161087881611968565b60208082528101610878816119ae565b60e0810161087882846119e7565b602081016108788284611672565b60408101611c0b8285611672565b610f106020830184611672565b60608101611c268286611672565b611b036020830185611672565b60200190565b5190565b90815260200190565b600061087882611c63565b151590565b8061025b81611cb6565b90565b6001600160a01b031690565b60ff1690565b600061087882611c56565b60005b83811015611c9b578181015183820152602001611c83565b83811115611a6a5750506000910152565b601f01601f191690565b60068110611cc057fe5b50565b611ccc81611c46565b8114611cc057600080fd5b611ccc81611c51565b60068110611cc057600080fd5b611ccc81611c60565b611ccc81611c6f56fea26469706673582212201c2ea9fcc4cf660279f436dd6c6211d1bccfbe01a481ffdf56d364528a8d2e3164736f6c634300060c0033",
  "devdoc": {
    "author": "Enzyme Council <security@enzyme.finance>",
    "details": "This contract assumes that all shares in the VaultProxy are shares outstanding, which is fine for this release. Even if they are not, they are still shares that are only claimable by the fund owner.",
    "kind": "dev",
    "methods": {
      "activateForFund(address,address)": {
        "params": {
          "_comptrollerProxy": "The ComptrollerProxy of the fund"
        }
      },
      "addFundSettings(address,bytes)": {
        "details": "`highWaterMark`, `lastSharePrice`, and `activated` are set during activation",
        "params": {
          "_comptrollerProxy": "The ComptrollerProxy of the fund",
          "_settingsData": "Encoded settings to apply to the policy for the fund"
        }
      },
      "getFeeInfoForFund(address)": {
        "params": {
          "_comptrollerProxy": "The ComptrollerProxy contract of the fund"
        },
        "returns": {
          "feeInfo_": "The feeInfo"
        }
      },
      "getFeeManager()": {
        "returns": {
          "feeManager_": "The `FEE_MANAGER` variable value"
        }
      },
      "identifier()": {
        "returns": {
          "identifier_": "The identifier string"
        }
      },
      "implementedHooks()": {
        "details": "Used only during fee registration",
        "returns": {
          "implementedHooksForSettle_": "The hooks during which settle() is implemented",
          "implementedHooksForUpdate_": "The hooks during which update() is implemented",
          "usesGavOnSettle_": "True if GAV is used during the settle() implementation",
          "usesGavOnUpdate_": "True if GAV is used during the update() implementation"
        }
      },
      "payout(address,address)": {
        "params": {
          "_comptrollerProxy": "The ComptrollerProxy of the fund"
        },
        "returns": {
          "isPayable_": "True if shares outstanding can be paid out"
        }
      },
      "payoutAllowed(address)": {
        "details": "Payout is allowed if fees have not yet been settled in a crystallization period, and at least 1 crystallization period has passed since activation",
        "params": {
          "_comptrollerProxy": "The ComptrollerProxy of the fund"
        },
        "returns": {
          "payoutAllowed_": "True if the fee payment is due"
        }
      },
      "settle(address,address,uint8,bytes,uint256)": {
        "params": {
          "_comptrollerProxy": "The ComptrollerProxy of the fund",
          "_gav": "The GAV of the fund",
          "_vaultProxy": "The VaultProxy of the fund"
        },
        "returns": {
          "_1": "(unused) The payer of shares due",
          "settlementType_": "The type of settlement",
          "sharesDue_": "The amount of shares due"
        }
      },
      "update(address,address,uint8,bytes,uint256)": {
        "params": {
          "_comptrollerProxy": "The ComptrollerProxy of the fund",
          "_gav": "The GAV of the fund",
          "_hook": "The FeeHook being executed",
          "_settlementData": "Encoded args to use in calculating the settlement",
          "_vaultProxy": "The VaultProxy of the fund"
        }
      }
    },
    "title": "PerformanceFee Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "activateForFund(address,address)": {
        "notice": "Activates the fee for a fund"
      },
      "addFundSettings(address,bytes)": {
        "notice": "Add the initial fee settings for a fund"
      },
      "getFeeInfoForFund(address)": {
        "notice": "Gets the feeInfo for a given fund"
      },
      "getFeeManager()": {
        "notice": "Gets the `FEE_MANAGER` variable"
      },
      "identifier()": {
        "notice": "Provides a constant string identifier for a fee"
      },
      "implementedHooks()": {
        "notice": "Gets the hooks that are implemented by the fee"
      },
      "payout(address,address)": {
        "notice": "Checks whether the shares outstanding for the fee can be paid out, and updates the info for the fee's last payout"
      },
      "payoutAllowed(address)": {
        "notice": "Checks whether the shares outstanding can be paid out"
      },
      "settle(address,address,uint8,bytes,uint256)": {
        "notice": "Settles the fee and calculates shares due"
      },
      "update(address,address,uint8,bytes,uint256)": {
        "notice": "Updates the fee state after all fees have finished settle()"
      }
    },
    "notice": "A performance-based fee with configurable rate and crystallization period, using a high watermark",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 15147,
        "contract": "contracts/release/extensions/fee-manager/fees/PerformanceFee.sol:PerformanceFee",
        "label": "comptrollerProxyToFeeInfo",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_struct(FeeInfo)15133_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(FeeInfo)15133_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct PerformanceFee.FeeInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(FeeInfo)15133_storage"
      },
      "t_struct(FeeInfo)15133_storage": {
        "encoding": "inplace",
        "label": "struct PerformanceFee.FeeInfo",
        "members": [
          {
            "astId": 15120,
            "contract": "contracts/release/extensions/fee-manager/fees/PerformanceFee.sol:PerformanceFee",
            "label": "rate",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 15122,
            "contract": "contracts/release/extensions/fee-manager/fees/PerformanceFee.sol:PerformanceFee",
            "label": "period",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 15124,
            "contract": "contracts/release/extensions/fee-manager/fees/PerformanceFee.sol:PerformanceFee",
            "label": "activated",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 15126,
            "contract": "contracts/release/extensions/fee-manager/fees/PerformanceFee.sol:PerformanceFee",
            "label": "lastPaid",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 15128,
            "contract": "contracts/release/extensions/fee-manager/fees/PerformanceFee.sol:PerformanceFee",
            "label": "highWaterMark",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 15130,
            "contract": "contracts/release/extensions/fee-manager/fees/PerformanceFee.sol:PerformanceFee",
            "label": "lastSharePrice",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 15132,
            "contract": "contracts/release/extensions/fee-manager/fees/PerformanceFee.sol:PerformanceFee",
            "label": "aggregateValueDue",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}