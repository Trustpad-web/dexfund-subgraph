{
  "address": "0x41D43b9cbbf39740842513d43A30B38c5885615b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fundDeployer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_yearnVaultV2Registry",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "derivative",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "underlying",
          "type": "address"
        }
      ],
      "name": "DerivativeAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "derivative",
          "type": "address"
        }
      ],
      "name": "DerivativeRemoved",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_derivatives",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_underlyings",
          "type": "address[]"
        }
      ],
      "name": "addDerivatives",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_derivative",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_derivativeAmount",
          "type": "uint256"
        }
      ],
      "name": "calcUnderlyingValues",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "underlyings_",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "underlyingAmounts_",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFundDeployer",
      "outputs": [
        {
          "internalType": "address",
          "name": "fundDeployer_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_derivative",
          "type": "address"
        }
      ],
      "name": "getUnderlyingForDerivative",
      "outputs": [
        {
          "internalType": "address",
          "name": "underlying_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getYearnVaultV2Registry",
      "outputs": [
        {
          "internalType": "address",
          "name": "yearnVaultV2Registry_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "isSupportedAsset",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isSupported_",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_derivatives",
          "type": "address[]"
        }
      ],
      "name": "removeDerivatives",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc892b2c602d3a8cd83f098401d6873c832702d2ddf34cbe4604fc1b322b827c2",
  "receipt": {
    "to": null,
    "from": "0x5DB342FB039C1c85bec5fE89Af6734621f421D84",
    "contractAddress": "0x41D43b9cbbf39740842513d43A30B38c5885615b",
    "transactionIndex": 395,
    "gasUsed": "981716",
    "logsBloom": "0x
    "blockHash": "0xd0ee2daf5cc41916f85e85bb970cc76f0ba65963c47d4bb6ac0b6518ec8ae6ea",
    "transactionHash": "0xc892b2c602d3a8cd83f098401d6873c832702d2ddf34cbe4604fc1b322b827c2",
    "logs": [],
    "blockNumber": 13359802,
    "cumulativeGasUsed": "50746310",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2242500548Cb2818c242C87FE956106d5Ebb6874",
    "0x0000000000000000000000000000000000000000"
  ],
  "solcInputHash": "d9ca3c6c6b3274b287f1d69a6e9ab10d",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fundDeployer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_yearnVaultV2Registry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"derivative\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"DerivativeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"derivative\",\"type\":\"address\"}],\"name\":\"DerivativeRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_derivatives\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_underlyings\",\"type\":\"address[]\"}],\"name\":\"addDerivatives\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_derivative\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_derivativeAmount\",\"type\":\"uint256\"}],\"name\":\"calcUnderlyingValues\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"underlyings_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"underlyingAmounts_\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFundDeployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"fundDeployer_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_derivative\",\"type\":\"address\"}],\"name\":\"getUnderlyingForDerivative\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"underlying_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getYearnVaultV2Registry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"yearnVaultV2Registry_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"isSupportedAsset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isSupported_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_derivatives\",\"type\":\"address[]\"}],\"name\":\"removeDerivatives\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Enzyme Council <security@enzyme.finance>\",\"kind\":\"dev\",\"methods\":{\"addDerivatives(address[],address[])\":{\"params\":{\"_derivatives\":\"The derivatives to add\",\"_underlyings\":\"The corresponding underlyings to add\"}},\"calcUnderlyingValues(address,uint256)\":{\"params\":{\"_derivative\":\"The derivative to convert\",\"_derivativeAmount\":\"The amount of the derivative to convert\"},\"returns\":{\"underlyingAmounts_\":\"The amount of each underlying asset for the equivalent derivative amount\",\"underlyings_\":\"The underlying assets for the _derivative\"}},\"getFundDeployer()\":{\"returns\":{\"fundDeployer_\":\"The `FUND_DEPLOYER` variable value\"}},\"getOwner()\":{\"details\":\"Ownership is deferred to the owner of the FundDeployer contract\",\"returns\":{\"owner_\":\"The owner\"}},\"getUnderlyingForDerivative(address)\":{\"params\":{\"_derivative\":\"The derivative for which to get the underlying asset\"},\"returns\":{\"underlying_\":\"The underlying asset\"}},\"getYearnVaultV2Registry()\":{\"returns\":{\"yearnVaultV2Registry_\":\"The `YEARN_VAULT_V2_REGISTRY` variable value\"}},\"isSupportedAsset(address)\":{\"params\":{\"_asset\":\"The asset to check\"},\"returns\":{\"isSupported_\":\"True if the asset is supported\"}},\"removeDerivatives(address[])\":{\"params\":{\"_derivatives\":\"The derivatives to remove\"}}},\"title\":\"YearnVaultV2PriceFeed Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addDerivatives(address[],address[])\":{\"notice\":\"Adds derivatives with corresponding underlyings to the price feed\"},\"calcUnderlyingValues(address,uint256)\":{\"notice\":\"Converts a given amount of a derivative to its underlying asset values\"},\"getFundDeployer()\":{\"notice\":\"Gets the `FUND_DEPLOYER` variable\"},\"getOwner()\":{\"notice\":\"Gets the owner of this contract\"},\"getUnderlyingForDerivative(address)\":{\"notice\":\"Gets the underlying asset for a given derivative\"},\"getYearnVaultV2Registry()\":{\"notice\":\"Gets the `YEARN_VAULT_V2_REGISTRY` variable\"},\"isSupportedAsset(address)\":{\"notice\":\"Checks if an asset is supported by the price feed\"},\"removeDerivatives(address[])\":{\"notice\":\"Removes derivatives from the price feed\"}},\"notice\":\"Price source oracle for Yearn Vault V2 shares\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/release/infrastructure/price-feeds/derivatives/feeds/YearnVaultV2PriceFeed.sol\":\"YearnVaultV2PriceFeed\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/release/core/fund-deployer/IFundDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title IFundDeployer Interface\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\ninterface IFundDeployer {\\r\\n    enum ReleaseStatus {PreLaunch, Live, Paused}\\r\\n\\r\\n    function getOwner() external view returns (address);\\r\\n\\r\\n    function getReleaseStatus() external view returns (ReleaseStatus);\\r\\n\\r\\n    function isRegisteredVaultCall(address, bytes4) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x3c8c95a5d0e03da6a5f0278e5fbe40bf4f2d274afc2d52815fefaba847931bf9\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/utils/FundDeployerOwnerMixin.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"../../core/fund-deployer/IFundDeployer.sol\\\";\\r\\n\\r\\n/// @title FundDeployerOwnerMixin Contract\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\n/// @notice A mixin contract that defers ownership to the owner of FundDeployer\\r\\nabstract contract FundDeployerOwnerMixin {\\r\\n    address internal immutable FUND_DEPLOYER;\\r\\n\\r\\n    modifier onlyFundDeployerOwner() {\\r\\n        require(\\r\\n            msg.sender == getOwner(),\\r\\n            \\\"onlyFundDeployerOwner: Only the FundDeployer owner can call this function\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(address _fundDeployer) public {\\r\\n        FUND_DEPLOYER = _fundDeployer;\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the owner of this contract\\r\\n    /// @return owner_ The owner\\r\\n    /// @dev Ownership is deferred to the owner of the FundDeployer contract\\r\\n    function getOwner() public view returns (address owner_) {\\r\\n        return IFundDeployer(FUND_DEPLOYER).getOwner();\\r\\n    }\\r\\n\\r\\n    ///////////////////\\r\\n    // STATE GETTERS //\\r\\n    ///////////////////\\r\\n\\r\\n    /// @notice Gets the `FUND_DEPLOYER` variable\\r\\n    /// @return fundDeployer_ The `FUND_DEPLOYER` variable value\\r\\n    function getFundDeployer() external view returns (address fundDeployer_) {\\r\\n        return FUND_DEPLOYER;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf6af8390b7e3ac7579250ce5aebe0faafeeb58e60ead667e002b9286dfd160e5\",\"license\":\"GPL-3.0\"},\"contracts/release/infrastructure/price-feeds/derivatives/IDerivativePriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title IDerivativePriceFeed Interface\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\n/// @notice Simple interface for derivative price source oracle implementations\\r\\ninterface IDerivativePriceFeed {\\r\\n    function calcUnderlyingValues(address, uint256)\\r\\n        external\\r\\n        returns (address[] memory, uint256[] memory);\\r\\n\\r\\n    function isSupportedAsset(address) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x577c4605a159c1083ef8d823d3b18896c321fd712071360ae235e22bf207cad0\",\"license\":\"GPL-3.0\"},\"contracts/release/infrastructure/price-feeds/derivatives/feeds/YearnVaultV2PriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"../../../../interfaces/IYearnVaultV2.sol\\\";\\r\\nimport \\\"../../../../interfaces/IYearnVaultV2Registry.sol\\\";\\r\\nimport \\\"../IDerivativePriceFeed.sol\\\";\\r\\nimport \\\"./utils/SingleUnderlyingDerivativeRegistryMixin.sol\\\";\\r\\n\\r\\n/// @title YearnVaultV2PriceFeed Contract\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\n/// @notice Price source oracle for Yearn Vault V2 shares\\r\\ncontract YearnVaultV2PriceFeed is IDerivativePriceFeed, SingleUnderlyingDerivativeRegistryMixin {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    address private immutable YEARN_VAULT_V2_REGISTRY;\\r\\n\\r\\n    constructor(address _fundDeployer, address _yearnVaultV2Registry)\\r\\n        public\\r\\n        SingleUnderlyingDerivativeRegistryMixin(_fundDeployer)\\r\\n    {\\r\\n        YEARN_VAULT_V2_REGISTRY = _yearnVaultV2Registry;\\r\\n    }\\r\\n\\r\\n    /// @notice Converts a given amount of a derivative to its underlying asset values\\r\\n    /// @param _derivative The derivative to convert\\r\\n    /// @param _derivativeAmount The amount of the derivative to convert\\r\\n    /// @return underlyings_ The underlying assets for the _derivative\\r\\n    /// @return underlyingAmounts_ The amount of each underlying asset for the equivalent derivative amount\\r\\n    function calcUnderlyingValues(address _derivative, uint256 _derivativeAmount)\\r\\n        external\\r\\n        override\\r\\n        returns (address[] memory underlyings_, uint256[] memory underlyingAmounts_)\\r\\n    {\\r\\n        underlyings_ = new address[](1);\\r\\n        underlyings_[0] = getUnderlyingForDerivative(_derivative);\\r\\n        require(underlyings_[0] != address(0), \\\"calcUnderlyingValues: Unsupported derivative\\\");\\r\\n\\r\\n        underlyingAmounts_ = new uint256[](1);\\r\\n        underlyingAmounts_[0] = _derivativeAmount\\r\\n            .mul(IYearnVaultV2(_derivative).pricePerShare())\\r\\n            .div(10**uint256(ERC20(_derivative).decimals()));\\r\\n    }\\r\\n\\r\\n    /// @notice Checks if an asset is supported by the price feed\\r\\n    /// @param _asset The asset to check\\r\\n    /// @return isSupported_ True if the asset is supported\\r\\n    function isSupportedAsset(address _asset) external view override returns (bool isSupported_) {\\r\\n        return getUnderlyingForDerivative(_asset) != address(0);\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to validate the derivative-underlying pair.\\r\\n    /// Inherited from SingleUnderlyingDerivativeRegistryMixin.\\r\\n    function __validateDerivative(address _derivative, address _underlying) internal override {\\r\\n        // Only validate that the _derivative is a valid yVault using the V2 contract,\\r\\n        // not that it is the latest vault for a particular _underlying\\r\\n        bool isValidYearnVaultV2;\\r\\n        IYearnVaultV2Registry yearnRegistryContract = IYearnVaultV2Registry(\\r\\n            getYearnVaultV2Registry()\\r\\n        );\\r\\n        for (uint256 i; i < yearnRegistryContract.numVaults(_underlying); i++) {\\r\\n            if (yearnRegistryContract.vaults(_underlying, i) == _derivative) {\\r\\n                isValidYearnVaultV2 = true;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        require(isValidYearnVaultV2, \\\"__validateDerivative: Invalid yVault for underlying\\\");\\r\\n\\r\\n        // Validates our assumption that yVaults and underlyings will have the same decimals\\r\\n        require(\\r\\n            ERC20(_derivative).decimals() == ERC20(_underlying).decimals(),\\r\\n            \\\"__validateDerivative: Incongruent decimals\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    ///////////////////\\r\\n    // STATE GETTERS //\\r\\n    ///////////////////\\r\\n\\r\\n    /// @notice Gets the `YEARN_VAULT_V2_REGISTRY` variable\\r\\n    /// @return yearnVaultV2Registry_ The `YEARN_VAULT_V2_REGISTRY` variable value\\r\\n    function getYearnVaultV2Registry() public view returns (address yearnVaultV2Registry_) {\\r\\n        return YEARN_VAULT_V2_REGISTRY;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x90cbcd2436b64df8f1ac2d824c529f61713c59024b4876882667ff3430832127\",\"license\":\"GPL-3.0\"},\"contracts/release/infrastructure/price-feeds/derivatives/feeds/utils/SingleUnderlyingDerivativeRegistryMixin.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"../../../../../extensions/utils/FundDeployerOwnerMixin.sol\\\";\\r\\n\\r\\n/// @title SingleUnderlyingDerivativeRegistryMixin Contract\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\n/// @notice Mixin for derivative price feeds that handle multiple derivatives\\r\\n/// that each have a single underlying asset\\r\\nabstract contract SingleUnderlyingDerivativeRegistryMixin is FundDeployerOwnerMixin {\\r\\n    event DerivativeAdded(address indexed derivative, address indexed underlying);\\r\\n\\r\\n    event DerivativeRemoved(address indexed derivative);\\r\\n\\r\\n    mapping(address => address) private derivativeToUnderlying;\\r\\n\\r\\n    constructor(address _fundDeployer) public FundDeployerOwnerMixin(_fundDeployer) {}\\r\\n\\r\\n    /// @notice Adds derivatives with corresponding underlyings to the price feed\\r\\n    /// @param _derivatives The derivatives to add\\r\\n    /// @param _underlyings The corresponding underlyings to add\\r\\n    function addDerivatives(address[] memory _derivatives, address[] memory _underlyings)\\r\\n        external\\r\\n        virtual\\r\\n        onlyFundDeployerOwner\\r\\n    {\\r\\n        require(_derivatives.length > 0, \\\"addDerivatives: Empty _derivatives\\\");\\r\\n        require(_derivatives.length == _underlyings.length, \\\"addDerivatives: Unequal arrays\\\");\\r\\n\\r\\n        for (uint256 i; i < _derivatives.length; i++) {\\r\\n            require(_derivatives[i] != address(0), \\\"addDerivatives: Empty derivative\\\");\\r\\n            require(_underlyings[i] != address(0), \\\"addDerivatives: Empty underlying\\\");\\r\\n            require(\\r\\n                getUnderlyingForDerivative(_derivatives[i]) == address(0),\\r\\n                \\\"addDerivatives: Value already set\\\"\\r\\n            );\\r\\n\\r\\n            __validateDerivative(_derivatives[i], _underlyings[i]);\\r\\n\\r\\n            derivativeToUnderlying[_derivatives[i]] = _underlyings[i];\\r\\n\\r\\n            emit DerivativeAdded(_derivatives[i], _underlyings[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Removes derivatives from the price feed\\r\\n    /// @param _derivatives The derivatives to remove\\r\\n    function removeDerivatives(address[] memory _derivatives) external onlyFundDeployerOwner {\\r\\n        require(_derivatives.length > 0, \\\"removeDerivatives: Empty _derivatives\\\");\\r\\n\\r\\n        for (uint256 i; i < _derivatives.length; i++) {\\r\\n            require(\\r\\n                getUnderlyingForDerivative(_derivatives[i]) != address(0),\\r\\n                \\\"removeDerivatives: Value not set\\\"\\r\\n            );\\r\\n\\r\\n            delete derivativeToUnderlying[_derivatives[i]];\\r\\n\\r\\n            emit DerivativeRemoved(_derivatives[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Optionally allow the inheriting price feed to validate the derivative-underlying pair\\r\\n    function __validateDerivative(address, address) internal virtual {\\r\\n        // UNIMPLEMENTED\\r\\n    }\\r\\n\\r\\n    ///////////////////\\r\\n    // STATE GETTERS //\\r\\n    ///////////////////\\r\\n\\r\\n    /// @notice Gets the underlying asset for a given derivative\\r\\n    /// @param _derivative The derivative for which to get the underlying asset\\r\\n    /// @return underlying_ The underlying asset\\r\\n    function getUnderlyingForDerivative(address _derivative)\\r\\n        public\\r\\n        view\\r\\n        returns (address underlying_)\\r\\n    {\\r\\n        return derivativeToUnderlying[_derivative];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x13887a9f82cbdb5506e927b496c0dce047f44fa62b729973fbfc73bd18d6e977\",\"license\":\"GPL-3.0\"},\"contracts/release/interfaces/IYearnVaultV2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title IYearnVaultV2 Interface\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\n/// @notice Minimal interface for our interactions with Yearn Vault V2 contracts\\r\\ninterface IYearnVaultV2 {\\r\\n    function deposit(uint256, address) external returns (uint256);\\r\\n\\r\\n    function pricePerShare() external view returns (uint256);\\r\\n\\r\\n    function token() external view returns (address);\\r\\n\\r\\n    function withdraw(\\r\\n        uint256,\\r\\n        address,\\r\\n        uint256\\r\\n    ) external returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xc90a109c89234aea92967291b07ee12362ddb4b56517b3b2dcb4724f22ef372d\",\"license\":\"GPL-3.0\"},\"contracts/release/interfaces/IYearnVaultV2Registry.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title IYearnVaultV2Registry Interface\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\n/// @notice Minimal interface for our interactions with the Yearn Vault V2 registry\\r\\ninterface IYearnVaultV2Registry {\\r\\n    function numVaults(address) external view returns (uint256);\\r\\n\\r\\n    function vaults(address, uint256) external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0x68dd0651a068161db244c243358eca9163503796638e0dec5ce128240bc7336d\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b5060405161114a38038061114a8339818101604052604081101561003357600080fd5b5080516020909101516001600160601b0319606092831b8116608052911b1660a05260805160601c60a05160601c6110c761008360003980610b9a5250806109315280610b7652506110c76000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80638f72b1361161005b5780638f72b136146102c557806397c0ac8714610368578063981dc8e4146103705780639be918e61461037857610088565b806339cbb63c1461008d57806366adb867146101b6578063727212f6146101f8578063893d20e8146102bd575b600080fd5b6101b4600480360360408110156100a357600080fd5b8101906020810181356401000000008111156100be57600080fd5b8201836020820111156100d057600080fd5b803590602001918460208302840111640100000000831117156100f257600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929594936020810193503591505064010000000081111561014257600080fd5b82018360208201111561015457600080fd5b8035906020019184602083028401116401000000008311171561017657600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506103b2945050505050565b005b6101dc600480360360208110156101cc57600080fd5b50356001600160a01b031661071f565b604080516001600160a01b039092168252519081900360200190f35b6102246004803603604081101561020e57600080fd5b506001600160a01b03813516906020013561073d565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b83811015610268578181015183820152602001610250565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156102a757818101518382015260200161028f565b5050505090500194505050505060405180910390f35b6101dc61092d565b6101b4600480360360208110156102db57600080fd5b8101906020810181356401000000008111156102f657600080fd5b82018360208201111561030857600080fd5b8035906020019184602083028401116401000000008311171561032a57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506109b9945050505050565b6101dc610b74565b6101dc610b98565b61039e6004803603602081101561038e57600080fd5b50356001600160a01b0316610bbc565b604080519115158252519081900360200190f35b6103ba61092d565b6001600160a01b0316336001600160a01b0316146104095760405162461bcd60e51b8152600401808060200182810382526049815260200180610fb96049913960600191505060405180910390fd5b60008251116104495760405162461bcd60e51b81526004018080602001828103825260228152602001806110446022913960400191505060405180910390fd5b805182511461049f576040805162461bcd60e51b815260206004820152601e60248201527f61646444657269766174697665733a20556e657175616c206172726179730000604482015290519081900360640190fd5b60005b825181101561071a5760006001600160a01b03168382815181106104c257fe5b60200260200101516001600160a01b03161415610526576040805162461bcd60e51b815260206004820181905260248201527f61646444657269766174697665733a20456d7074792064657269766174697665604482015290519081900360640190fd5b60006001600160a01b031682828151811061053d57fe5b60200260200101516001600160a01b031614156105a1576040805162461bcd60e51b815260206004820181905260248201527f61646444657269766174697665733a20456d70747920756e6465726c79696e67604482015290519081900360640190fd5b60006001600160a01b03166105c88483815181106105bb57fe5b602002602001015161071f565b6001600160a01b03161461060d5760405162461bcd60e51b81526004018080602001828103825260218152602001806110026021913960400191505060405180910390fd5b61063d83828151811061061c57fe5b602002602001015183838151811061063057fe5b6020026020010151610bd9565b81818151811061064957fe5b602002602001015160008085848151811061066057fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055508181815181106106b857fe5b60200260200101516001600160a01b03168382815181106106d557fe5b60200260200101516001600160a01b03167faa4ae250fb435bb4b31ed0b95822bc179fc6c5dd0c727c3ffe08d444025efd9860405160405180910390a36001016104a2565b505050565b6001600160a01b039081166000908152602081905260409020541690565b6040805160018082528183019092526060918291906020808301908036833701905050915061076b8461071f565b8260008151811061077857fe5b60200260200101906001600160a01b031690816001600160a01b03168152505060006001600160a01b0316826000815181106107b057fe5b60200260200101516001600160a01b031614156107fe5760405162461bcd60e51b815260040180806020018281038252602c815260200180611066602c913960400191505060405180910390fd5b604080516001808252818301909252906020808301908036833701905050905061090d846001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561085a57600080fd5b505afa15801561086e573d6000803e3d6000fd5b505050506040513d602081101561088457600080fd5b505160408051634ca9858360e11b8152905160ff909216600a0a91610907916001600160a01b038916916399530b0691600480820192602092909190829003018186803b1580156108d457600080fd5b505afa1580156108e8573d6000803e3d6000fd5b505050506040513d60208110156108fe57600080fd5b50518690610e6d565b90610ecf565b8160008151811061091a57fe5b6020026020010181815250509250929050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663893d20e86040518163ffffffff1660e01b815260040160206040518083038186803b15801561098857600080fd5b505afa15801561099c573d6000803e3d6000fd5b505050506040513d60208110156109b257600080fd5b5051905090565b6109c161092d565b6001600160a01b0316336001600160a01b031614610a105760405162461bcd60e51b8152600401808060200182810382526049815260200180610fb96049913960600191505060405180910390fd5b6000815111610a505760405162461bcd60e51b8152600401808060200182810382526025815260200180610f946025913960400191505060405180910390fd5b60005b8151811015610b705760006001600160a01b0316610a768383815181106105bb57fe5b6001600160a01b03161415610ad2576040805162461bcd60e51b815260206004820181905260248201527f72656d6f766544657269766174697665733a2056616c7565206e6f7420736574604482015290519081900360640190fd5b600080838381518110610ae157fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154906001600160a01b030219169055818181518110610b2b57fe5b60200260200101516001600160a01b03167fc15eb25d807b570f4567baf6e97c7b26d58a7d0512dc85e8db15375a056b860460405160405180910390a2600101610a53565b5050565b7f000000000000000000000000000000000000000000000000000000000000000090565b7f000000000000000000000000000000000000000000000000000000000000000090565b600080610bc88361071f565b6001600160a01b0316141592915050565b600080610be4610b98565b905060005b816001600160a01b031663f9c7bba5856040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610c3657600080fd5b505afa158015610c4a573d6000803e3d6000fd5b505050506040513d6020811015610c6057600080fd5b5051811015610d1457846001600160a01b0316826001600160a01b0316637bbfc69e86846040518363ffffffff1660e01b815260040180836001600160a01b031681526020018281526020019250505060206040518083038186803b158015610cc857600080fd5b505afa158015610cdc573d6000803e3d6000fd5b505050506040513d6020811015610cf257600080fd5b50516001600160a01b03161415610d0c5760019250610d14565b600101610be9565b5081610d515760405162461bcd60e51b8152600401808060200182810382526033815260200180610f616033913960400191505060405180910390fd5b826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610d8a57600080fd5b505afa158015610d9e573d6000803e3d6000fd5b505050506040513d6020811015610db457600080fd5b50516040805163313ce56760e01b8152905160ff909216916001600160a01b0387169163313ce567916004808301926020929190829003018186803b158015610dfc57600080fd5b505afa158015610e10573d6000803e3d6000fd5b505050506040513d6020811015610e2657600080fd5b505160ff1614610e675760405162461bcd60e51b815260040180806020018281038252602a815260200180610f37602a913960400191505060405180910390fd5b50505050565b600082610e7c57506000610ec9565b82820282848281610e8957fe5b0414610ec65760405162461bcd60e51b81526004018080602001828103825260218152602001806110236021913960400191505060405180910390fd5b90505b92915050565b6000808211610f25576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381610f2e57fe5b04939250505056fe5f5f76616c6964617465446572697661746976653a20496e636f6e677275656e7420646563696d616c735f5f76616c6964617465446572697661746976653a20496e76616c696420795661756c7420666f7220756e6465726c79696e6772656d6f766544657269766174697665733a20456d707479205f64657269766174697665736f6e6c7946756e644465706c6f7965724f776e65723a204f6e6c79207468652046756e644465706c6f796572206f776e65722063616e2063616c6c20746869732066756e6374696f6e61646444657269766174697665733a2056616c756520616c726561647920736574536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7761646444657269766174697665733a20456d707479205f646572697661746976657363616c63556e6465726c79696e6756616c7565733a20556e737570706f727465642064657269766174697665a26469706673582212202503caa3213d8bb70955725345925f77b4f8e9335ed3b4d1dcebd3a6527b104664736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c80638f72b1361161005b5780638f72b136146102c557806397c0ac8714610368578063981dc8e4146103705780639be918e61461037857610088565b806339cbb63c1461008d57806366adb867146101b6578063727212f6146101f8578063893d20e8146102bd575b600080fd5b6101b4600480360360408110156100a357600080fd5b8101906020810181356401000000008111156100be57600080fd5b8201836020820111156100d057600080fd5b803590602001918460208302840111640100000000831117156100f257600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929594936020810193503591505064010000000081111561014257600080fd5b82018360208201111561015457600080fd5b8035906020019184602083028401116401000000008311171561017657600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506103b2945050505050565b005b6101dc600480360360208110156101cc57600080fd5b50356001600160a01b031661071f565b604080516001600160a01b039092168252519081900360200190f35b6102246004803603604081101561020e57600080fd5b506001600160a01b03813516906020013561073d565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b83811015610268578181015183820152602001610250565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156102a757818101518382015260200161028f565b5050505090500194505050505060405180910390f35b6101dc61092d565b6101b4600480360360208110156102db57600080fd5b8101906020810181356401000000008111156102f657600080fd5b82018360208201111561030857600080fd5b8035906020019184602083028401116401000000008311171561032a57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506109b9945050505050565b6101dc610b74565b6101dc610b98565b61039e6004803603602081101561038e57600080fd5b50356001600160a01b0316610bbc565b604080519115158252519081900360200190f35b6103ba61092d565b6001600160a01b0316336001600160a01b0316146104095760405162461bcd60e51b8152600401808060200182810382526049815260200180610fb96049913960600191505060405180910390fd5b60008251116104495760405162461bcd60e51b81526004018080602001828103825260228152602001806110446022913960400191505060405180910390fd5b805182511461049f576040805162461bcd60e51b815260206004820152601e60248201527f61646444657269766174697665733a20556e657175616c206172726179730000604482015290519081900360640190fd5b60005b825181101561071a5760006001600160a01b03168382815181106104c257fe5b60200260200101516001600160a01b03161415610526576040805162461bcd60e51b815260206004820181905260248201527f61646444657269766174697665733a20456d7074792064657269766174697665604482015290519081900360640190fd5b60006001600160a01b031682828151811061053d57fe5b60200260200101516001600160a01b031614156105a1576040805162461bcd60e51b815260206004820181905260248201527f61646444657269766174697665733a20456d70747920756e6465726c79696e67604482015290519081900360640190fd5b60006001600160a01b03166105c88483815181106105bb57fe5b602002602001015161071f565b6001600160a01b03161461060d5760405162461bcd60e51b81526004018080602001828103825260218152602001806110026021913960400191505060405180910390fd5b61063d83828151811061061c57fe5b602002602001015183838151811061063057fe5b6020026020010151610bd9565b81818151811061064957fe5b602002602001015160008085848151811061066057fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055508181815181106106b857fe5b60200260200101516001600160a01b03168382815181106106d557fe5b60200260200101516001600160a01b03167faa4ae250fb435bb4b31ed0b95822bc179fc6c5dd0c727c3ffe08d444025efd9860405160405180910390a36001016104a2565b505050565b6001600160a01b039081166000908152602081905260409020541690565b6040805160018082528183019092526060918291906020808301908036833701905050915061076b8461071f565b8260008151811061077857fe5b60200260200101906001600160a01b031690816001600160a01b03168152505060006001600160a01b0316826000815181106107b057fe5b60200260200101516001600160a01b031614156107fe5760405162461bcd60e51b815260040180806020018281038252602c815260200180611066602c913960400191505060405180910390fd5b604080516001808252818301909252906020808301908036833701905050905061090d846001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561085a57600080fd5b505afa15801561086e573d6000803e3d6000fd5b505050506040513d602081101561088457600080fd5b505160408051634ca9858360e11b8152905160ff909216600a0a91610907916001600160a01b038916916399530b0691600480820192602092909190829003018186803b1580156108d457600080fd5b505afa1580156108e8573d6000803e3d6000fd5b505050506040513d60208110156108fe57600080fd5b50518690610e6d565b90610ecf565b8160008151811061091a57fe5b6020026020010181815250509250929050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663893d20e86040518163ffffffff1660e01b815260040160206040518083038186803b15801561098857600080fd5b505afa15801561099c573d6000803e3d6000fd5b505050506040513d60208110156109b257600080fd5b5051905090565b6109c161092d565b6001600160a01b0316336001600160a01b031614610a105760405162461bcd60e51b8152600401808060200182810382526049815260200180610fb96049913960600191505060405180910390fd5b6000815111610a505760405162461bcd60e51b8152600401808060200182810382526025815260200180610f946025913960400191505060405180910390fd5b60005b8151811015610b705760006001600160a01b0316610a768383815181106105bb57fe5b6001600160a01b03161415610ad2576040805162461bcd60e51b815260206004820181905260248201527f72656d6f766544657269766174697665733a2056616c7565206e6f7420736574604482015290519081900360640190fd5b600080838381518110610ae157fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154906001600160a01b030219169055818181518110610b2b57fe5b60200260200101516001600160a01b03167fc15eb25d807b570f4567baf6e97c7b26d58a7d0512dc85e8db15375a056b860460405160405180910390a2600101610a53565b5050565b7f000000000000000000000000000000000000000000000000000000000000000090565b7f000000000000000000000000000000000000000000000000000000000000000090565b600080610bc88361071f565b6001600160a01b0316141592915050565b600080610be4610b98565b905060005b816001600160a01b031663f9c7bba5856040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610c3657600080fd5b505afa158015610c4a573d6000803e3d6000fd5b505050506040513d6020811015610c6057600080fd5b5051811015610d1457846001600160a01b0316826001600160a01b0316637bbfc69e86846040518363ffffffff1660e01b815260040180836001600160a01b031681526020018281526020019250505060206040518083038186803b158015610cc857600080fd5b505afa158015610cdc573d6000803e3d6000fd5b505050506040513d6020811015610cf257600080fd5b50516001600160a01b03161415610d0c5760019250610d14565b600101610be9565b5081610d515760405162461bcd60e51b8152600401808060200182810382526033815260200180610f616033913960400191505060405180910390fd5b826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610d8a57600080fd5b505afa158015610d9e573d6000803e3d6000fd5b505050506040513d6020811015610db457600080fd5b50516040805163313ce56760e01b8152905160ff909216916001600160a01b0387169163313ce567916004808301926020929190829003018186803b158015610dfc57600080fd5b505afa158015610e10573d6000803e3d6000fd5b505050506040513d6020811015610e2657600080fd5b505160ff1614610e675760405162461bcd60e51b815260040180806020018281038252602a815260200180610f37602a913960400191505060405180910390fd5b50505050565b600082610e7c57506000610ec9565b82820282848281610e8957fe5b0414610ec65760405162461bcd60e51b81526004018080602001828103825260218152602001806110236021913960400191505060405180910390fd5b90505b92915050565b6000808211610f25576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381610f2e57fe5b04939250505056fe5f5f76616c6964617465446572697661746976653a20496e636f6e677275656e7420646563696d616c735f5f76616c6964617465446572697661746976653a20496e76616c696420795661756c7420666f7220756e6465726c79696e6772656d6f766544657269766174697665733a20456d707479205f64657269766174697665736f6e6c7946756e644465706c6f7965724f776e65723a204f6e6c79207468652046756e644465706c6f796572206f776e65722063616e2063616c6c20746869732066756e6374696f6e61646444657269766174697665733a2056616c756520616c726561647920736574536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7761646444657269766174697665733a20456d707479205f646572697661746976657363616c63556e6465726c79696e6756616c7565733a20556e737570706f727465642064657269766174697665a26469706673582212202503caa3213d8bb70955725345925f77b4f8e9335ed3b4d1dcebd3a6527b104664736f6c634300060c0033",
  "devdoc": {
    "author": "Enzyme Council <security@enzyme.finance>",
    "kind": "dev",
    "methods": {
      "addDerivatives(address[],address[])": {
        "params": {
          "_derivatives": "The derivatives to add",
          "_underlyings": "The corresponding underlyings to add"
        }
      },
      "calcUnderlyingValues(address,uint256)": {
        "params": {
          "_derivative": "The derivative to convert",
          "_derivativeAmount": "The amount of the derivative to convert"
        },
        "returns": {
          "underlyingAmounts_": "The amount of each underlying asset for the equivalent derivative amount",
          "underlyings_": "The underlying assets for the _derivative"
        }
      },
      "getFundDeployer()": {
        "returns": {
          "fundDeployer_": "The `FUND_DEPLOYER` variable value"
        }
      },
      "getOwner()": {
        "details": "Ownership is deferred to the owner of the FundDeployer contract",
        "returns": {
          "owner_": "The owner"
        }
      },
      "getUnderlyingForDerivative(address)": {
        "params": {
          "_derivative": "The derivative for which to get the underlying asset"
        },
        "returns": {
          "underlying_": "The underlying asset"
        }
      },
      "getYearnVaultV2Registry()": {
        "returns": {
          "yearnVaultV2Registry_": "The `YEARN_VAULT_V2_REGISTRY` variable value"
        }
      },
      "isSupportedAsset(address)": {
        "params": {
          "_asset": "The asset to check"
        },
        "returns": {
          "isSupported_": "True if the asset is supported"
        }
      },
      "removeDerivatives(address[])": {
        "params": {
          "_derivatives": "The derivatives to remove"
        }
      }
    },
    "title": "YearnVaultV2PriceFeed Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addDerivatives(address[],address[])": {
        "notice": "Adds derivatives with corresponding underlyings to the price feed"
      },
      "calcUnderlyingValues(address,uint256)": {
        "notice": "Converts a given amount of a derivative to its underlying asset values"
      },
      "getFundDeployer()": {
        "notice": "Gets the `FUND_DEPLOYER` variable"
      },
      "getOwner()": {
        "notice": "Gets the owner of this contract"
      },
      "getUnderlyingForDerivative(address)": {
        "notice": "Gets the underlying asset for a given derivative"
      },
      "getYearnVaultV2Registry()": {
        "notice": "Gets the `YEARN_VAULT_V2_REGISTRY` variable"
      },
      "isSupportedAsset(address)": {
        "notice": "Checks if an asset is supported by the price feed"
      },
      "removeDerivatives(address[])": {
        "notice": "Removes derivatives from the price feed"
      }
    },
    "notice": "Price source oracle for Yearn Vault V2 shares",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 41321,
        "contract": "contracts/release/infrastructure/price-feeds/derivatives/feeds/YearnVaultV2PriceFeed.sol:YearnVaultV2PriceFeed",
        "label": "derivativeToUnderlying",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      }
    }
  }
}