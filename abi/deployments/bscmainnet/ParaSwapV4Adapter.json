{
  "address": "0xD1f8B3FD73Ef3E6e328C2c14Cd4241f066d876e5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_integrationManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_augustusSwapper",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenTransferProxy",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ADD_TRACKED_ASSETS_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "APPROVE_ASSETS_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CLAIM_REWARDS_AND_REINVEST_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CLAIM_REWARDS_AND_SWAP_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CLAIM_REWARDS_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LEND_AND_STAKE_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LEND_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REDEEM_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REMOVE_TRACKED_ASSETS_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STAKE_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TAKE_ORDER_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UNSTAKE_AND_REDEEM_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UNSTAKE_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getIntegrationManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "integrationManager_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getParaSwapV4AugustusSwapper",
      "outputs": [
        {
          "internalType": "address",
          "name": "augustusSwapper_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getParaSwapV4TokenTransferProxy",
      "outputs": [
        {
          "internalType": "address",
          "name": "tokenTransferProxy_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "identifier",
      "outputs": [
        {
          "internalType": "string",
          "name": "identifier_",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_selector",
          "type": "bytes4"
        },
        {
          "internalType": "bytes",
          "name": "_encodedCallArgs",
          "type": "bytes"
        }
      ],
      "name": "parseAssetsForMethod",
      "outputs": [
        {
          "internalType": "enum IIntegrationManager.SpendAssetsHandleType",
          "name": "spendAssetsHandleType_",
          "type": "uint8"
        },
        {
          "internalType": "address[]",
          "name": "spendAssets_",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "spendAssetAmounts_",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "incomingAssets_",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "minIncomingAssetAmounts_",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultProxy",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_encodedCallArgs",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "takeOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xef1c15d82ed2d9bc1ce75e56aec6bbe7122bfd964bef5b0f30d2c72c9d7565ae",
  "receipt": {
    "to": null,
    "from": "0x5DB342FB039C1c85bec5fE89Af6734621f421D84",
    "contractAddress": "0xD1f8B3FD73Ef3E6e328C2c14Cd4241f066d876e5",
    "transactionIndex": 519,
    "gasUsed": "1414725",
    "logsBloom": "0x
    "blockHash": "0x0a61a9dc1648996b90c4d8626e7849746437ed39bc1fe1078d0751bd5d168f06",
    "transactionHash": "0xef1c15d82ed2d9bc1ce75e56aec6bbe7122bfd964bef5b0f30d2c72c9d7565ae",
    "logs": [],
    "blockNumber": 13359884,
    "cumulativeGasUsed": "64118944",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1aF5A3385FD2b673A70E773aa0B1034df33e890E",
    "0xDEF171Fe48CF0115B1d80b88dc8eAB59176FEe57",
    "0x216b4b4ba9f3e719726886d34a177484278bfcae"
  ],
  "linkedData": {
    "type": "ADAPTER"
  },
  "solcInputHash": "d9ca3c6c6b3274b287f1d69a6e9ab10d",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_integrationManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_augustusSwapper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenTransferProxy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ADD_TRACKED_ASSETS_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"APPROVE_ASSETS_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CLAIM_REWARDS_AND_REINVEST_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CLAIM_REWARDS_AND_SWAP_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CLAIM_REWARDS_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LEND_AND_STAKE_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LEND_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REDEEM_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REMOVE_TRACKED_ASSETS_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKE_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TAKE_ORDER_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNSTAKE_AND_REDEEM_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNSTAKE_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIntegrationManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"integrationManager_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getParaSwapV4AugustusSwapper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"augustusSwapper_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getParaSwapV4TokenTransferProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenTransferProxy_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"identifier\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"identifier_\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_selector\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"_encodedCallArgs\",\"type\":\"bytes\"}],\"name\":\"parseAssetsForMethod\",\"outputs\":[{\"internalType\":\"enum IIntegrationManager.SpendAssetsHandleType\",\"name\":\"spendAssetsHandleType_\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"spendAssets_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"spendAssetAmounts_\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"incomingAssets_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minIncomingAssetAmounts_\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_encodedCallArgs\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"takeOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Enzyme Council <security@enzyme.finance>\",\"details\":\"Does not allow any protocol that collects protocol fees in ETH, e.g., 0x v3\",\"kind\":\"dev\",\"methods\":{\"getIntegrationManager()\":{\"returns\":{\"integrationManager_\":\"The `INTEGRATION_MANAGER` variable value\"}},\"getParaSwapV4AugustusSwapper()\":{\"returns\":{\"augustusSwapper_\":\"The `PARA_SWAP_V4_AUGUSTUS_SWAPPER` variable value\"}},\"getParaSwapV4TokenTransferProxy()\":{\"returns\":{\"tokenTransferProxy_\":\"The `PARA_SWAP_V4_TOKEN_TRANSFER_PROXY` variable value\"}},\"identifier()\":{\"returns\":{\"identifier_\":\"An identifier string\"}},\"parseAssetsForMethod(bytes4,bytes)\":{\"params\":{\"_encodedCallArgs\":\"The encoded parameters for the callOnIntegration\",\"_selector\":\"The function selector for the callOnIntegration\"},\"returns\":{\"incomingAssets_\":\"The assets to receive in the call\",\"minIncomingAssetAmounts_\":\"The min asset amounts to receive in the call\",\"spendAssetAmounts_\":\"The max asset amounts to spend in the call\",\"spendAssetsHandleType_\":\"A type that dictates how to handle granting the adapter access to spend assets (`None` by default)\",\"spendAssets_\":\"The assets to spend in the call\"}},\"takeOrder(address,bytes,bytes)\":{\"details\":\"ParaSwap v4 completely uses entire outgoing asset balance and incoming asset is sent directly to the beneficiary (the _vaultProxy)\",\"params\":{\"_encodedCallArgs\":\"Encoded order parameters\",\"_vaultProxy\":\"The VaultProxy of the calling fund\"}}},\"title\":\"ParaSwapV4Adapter Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getIntegrationManager()\":{\"notice\":\"Gets the `INTEGRATION_MANAGER` variable\"},\"getParaSwapV4AugustusSwapper()\":{\"notice\":\"Gets the `PARA_SWAP_V4_AUGUSTUS_SWAPPER` variable\"},\"getParaSwapV4TokenTransferProxy()\":{\"notice\":\"Gets the `PARA_SWAP_V4_TOKEN_TRANSFER_PROXY` variable\"},\"identifier()\":{\"notice\":\"Provides a constant string identifier for an adapter\"},\"parseAssetsForMethod(bytes4,bytes)\":{\"notice\":\"Parses the expected assets to receive from a call on integration\"},\"takeOrder(address,bytes,bytes)\":{\"notice\":\"Trades assets on ParaSwap\"}},\"notice\":\"Adapter for interacting with ParaSwap (v4)\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/release/extensions/integration-manager/integrations/adapters/ParaSwapV4Adapter.sol\":\"ParaSwapV4Adapter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/release/extensions/integration-manager/IIntegrationManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title IIntegrationManager interface\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\n/// @notice Interface for the IntegrationManager\\r\\ninterface IIntegrationManager {\\r\\n    enum SpendAssetsHandleType {None, Approve, Transfer, Remove}\\r\\n}\\r\\n\",\"keccak256\":\"0xdcfcaaebcf2d3309e29391e0e2f6bdff09527787d4312dd6713a96f5e51b8262\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/integration-manager/integrations/IIntegrationAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"../IIntegrationManager.sol\\\";\\r\\n\\r\\n/// @title Integration Adapter interface\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\n/// @notice Interface for all integration adapters\\r\\ninterface IIntegrationAdapter {\\r\\n    function identifier() external pure returns (string memory identifier_);\\r\\n\\r\\n    function parseAssetsForMethod(bytes4 _selector, bytes calldata _encodedCallArgs)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType_,\\r\\n            address[] memory spendAssets_,\\r\\n            uint256[] memory spendAssetAmounts_,\\r\\n            address[] memory incomingAssets_,\\r\\n            uint256[] memory minIncomingAssetAmounts_\\r\\n        );\\r\\n}\\r\\n\",\"keccak256\":\"0xd3635cf4bf3d4a9b2926a691e45acf69492585ee6e1e7e0fad18703e272ad273\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/integration-manager/integrations/adapters/ParaSwapV4Adapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"../utils/actions/ParaSwapV4ActionsMixin.sol\\\";\\r\\nimport \\\"../utils/AdapterBase2.sol\\\";\\r\\n\\r\\n/// @title ParaSwapV4Adapter Contract\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\n/// @notice Adapter for interacting with ParaSwap (v4)\\r\\n/// @dev Does not allow any protocol that collects protocol fees in ETH, e.g., 0x v3\\r\\ncontract ParaSwapV4Adapter is AdapterBase2, ParaSwapV4ActionsMixin {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    constructor(\\r\\n        address _integrationManager,\\r\\n        address _augustusSwapper,\\r\\n        address _tokenTransferProxy\\r\\n    )\\r\\n        public\\r\\n        AdapterBase2(_integrationManager)\\r\\n        ParaSwapV4ActionsMixin(_augustusSwapper, _tokenTransferProxy)\\r\\n    {}\\r\\n\\r\\n    // EXTERNAL FUNCTIONS\\r\\n\\r\\n    /// @notice Provides a constant string identifier for an adapter\\r\\n    /// @return identifier_ An identifier string\\r\\n    function identifier() external pure override returns (string memory identifier_) {\\r\\n        return \\\"PARA_SWAP_V4\\\";\\r\\n    }\\r\\n\\r\\n    /// @notice Parses the expected assets to receive from a call on integration\\r\\n    /// @param _selector The function selector for the callOnIntegration\\r\\n    /// @param _encodedCallArgs The encoded parameters for the callOnIntegration\\r\\n    /// @return spendAssetsHandleType_ A type that dictates how to handle granting\\r\\n    /// the adapter access to spend assets (`None` by default)\\r\\n    /// @return spendAssets_ The assets to spend in the call\\r\\n    /// @return spendAssetAmounts_ The max asset amounts to spend in the call\\r\\n    /// @return incomingAssets_ The assets to receive in the call\\r\\n    /// @return minIncomingAssetAmounts_ The min asset amounts to receive in the call\\r\\n    function parseAssetsForMethod(bytes4 _selector, bytes calldata _encodedCallArgs)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (\\r\\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType_,\\r\\n            address[] memory spendAssets_,\\r\\n            uint256[] memory spendAssetAmounts_,\\r\\n            address[] memory incomingAssets_,\\r\\n            uint256[] memory minIncomingAssetAmounts_\\r\\n        )\\r\\n    {\\r\\n        require(_selector == TAKE_ORDER_SELECTOR, \\\"parseAssetsForMethod: _selector invalid\\\");\\r\\n\\r\\n        (\\r\\n            uint256 minIncomingAssetAmount,\\r\\n            ,\\r\\n            address outgoingAsset,\\r\\n            uint256 outgoingAssetAmount,\\r\\n            IParaSwapV4AugustusSwapper.Path[] memory paths\\r\\n        ) = __decodeCallArgs(_encodedCallArgs);\\r\\n\\r\\n        spendAssets_ = new address[](1);\\r\\n        spendAssets_[0] = outgoingAsset;\\r\\n\\r\\n        spendAssetAmounts_ = new uint256[](1);\\r\\n        spendAssetAmounts_[0] = outgoingAssetAmount;\\r\\n\\r\\n        incomingAssets_ = new address[](1);\\r\\n        incomingAssets_[0] = paths[paths.length - 1].to;\\r\\n\\r\\n        minIncomingAssetAmounts_ = new uint256[](1);\\r\\n        minIncomingAssetAmounts_[0] = minIncomingAssetAmount;\\r\\n\\r\\n        return (\\r\\n            IIntegrationManager.SpendAssetsHandleType.Transfer,\\r\\n            spendAssets_,\\r\\n            spendAssetAmounts_,\\r\\n            incomingAssets_,\\r\\n            minIncomingAssetAmounts_\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Trades assets on ParaSwap\\r\\n    /// @param _vaultProxy The VaultProxy of the calling fund\\r\\n    /// @param _encodedCallArgs Encoded order parameters\\r\\n    /// @dev ParaSwap v4 completely uses entire outgoing asset balance and incoming asset\\r\\n    /// is sent directly to the beneficiary (the _vaultProxy)\\r\\n    function takeOrder(\\r\\n        address _vaultProxy,\\r\\n        bytes calldata _encodedCallArgs,\\r\\n        bytes calldata\\r\\n    ) external onlyIntegrationManager {\\r\\n        (\\r\\n            uint256 minIncomingAssetAmount,\\r\\n            uint256 expectedIncomingAssetAmount,\\r\\n            address outgoingAsset,\\r\\n            uint256 outgoingAssetAmount,\\r\\n            IParaSwapV4AugustusSwapper.Path[] memory paths\\r\\n        ) = __decodeCallArgs(_encodedCallArgs);\\r\\n\\r\\n        __paraSwapV4MultiSwap(\\r\\n            outgoingAsset,\\r\\n            outgoingAssetAmount,\\r\\n            minIncomingAssetAmount,\\r\\n            expectedIncomingAssetAmount,\\r\\n            payable(_vaultProxy),\\r\\n            paths\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to decode the encoded callOnIntegration call arguments\\r\\n    function __decodeCallArgs(bytes memory _encodedCallArgs)\\r\\n        private\\r\\n        pure\\r\\n        returns (\\r\\n            uint256 minIncomingAssetAmount_,\\r\\n            uint256 expectedIncomingAssetAmount_, // Passed as a courtesy to ParaSwap for analytics\\r\\n            address outgoingAsset_,\\r\\n            uint256 outgoingAssetAmount_,\\r\\n            IParaSwapV4AugustusSwapper.Path[] memory paths_\\r\\n        )\\r\\n    {\\r\\n        return\\r\\n            abi.decode(\\r\\n                _encodedCallArgs,\\r\\n                (uint256, uint256, address, uint256, IParaSwapV4AugustusSwapper.Path[])\\r\\n            );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa6a703a12f4131dfa6d8ed43d00af7946250d8e0e17a63de2e53e2547be8a449\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/integration-manager/integrations/utils/AdapterBase.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"../IIntegrationAdapter.sol\\\";\\r\\nimport \\\"./IntegrationSelectors.sol\\\";\\r\\n\\r\\n/// @title AdapterBase Contract\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\n/// @notice A base contract for integration adapters\\r\\nabstract contract AdapterBase is IIntegrationAdapter, IntegrationSelectors {\\r\\n    using SafeERC20 for ERC20;\\r\\n\\r\\n    address internal immutable INTEGRATION_MANAGER;\\r\\n\\r\\n    /// @dev Provides a standard implementation for transferring assets between\\r\\n    /// the fund's VaultProxy and the adapter, by wrapping the adapter action.\\r\\n    /// This modifier should be implemented in almost all adapter actions, unless they\\r\\n    /// do not move assets or can spend and receive assets directly with the VaultProxy\\r\\n    modifier fundAssetsTransferHandler(\\r\\n        address _vaultProxy,\\r\\n        bytes memory _encodedAssetTransferArgs\\r\\n    ) {\\r\\n        (\\r\\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType,\\r\\n            address[] memory spendAssets,\\r\\n            uint256[] memory spendAssetAmounts,\\r\\n            address[] memory incomingAssets\\r\\n        ) = __decodeEncodedAssetTransferArgs(_encodedAssetTransferArgs);\\r\\n\\r\\n        // Take custody of spend assets (if necessary)\\r\\n        if (spendAssetsHandleType == IIntegrationManager.SpendAssetsHandleType.Approve) {\\r\\n            for (uint256 i = 0; i < spendAssets.length; i++) {\\r\\n                ERC20(spendAssets[i]).safeTransferFrom(\\r\\n                    _vaultProxy,\\r\\n                    address(this),\\r\\n                    spendAssetAmounts[i]\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Execute call\\r\\n        _;\\r\\n\\r\\n        // Transfer remaining assets back to the fund's VaultProxy\\r\\n        __transferContractAssetBalancesToFund(_vaultProxy, incomingAssets);\\r\\n        __transferContractAssetBalancesToFund(_vaultProxy, spendAssets);\\r\\n    }\\r\\n\\r\\n    modifier onlyIntegrationManager() {\\r\\n        require(\\r\\n            msg.sender == INTEGRATION_MANAGER,\\r\\n            \\\"Only the IntegrationManager can call this function\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(address _integrationManager) public {\\r\\n        INTEGRATION_MANAGER = _integrationManager;\\r\\n    }\\r\\n\\r\\n    // INTERNAL FUNCTIONS\\r\\n\\r\\n    /// @dev Helper for adapters to approve their integratees with the max amount of an asset.\\r\\n    /// Since everything is done atomically, and only the balances to-be-used are sent to adapters,\\r\\n    /// there is no need to approve exact amounts on every call.\\r\\n    function __approveMaxAsNeeded(\\r\\n        address _asset,\\r\\n        address _target,\\r\\n        uint256 _neededAmount\\r\\n    ) internal {\\r\\n        if (ERC20(_asset).allowance(address(this), _target) < _neededAmount) {\\r\\n            ERC20(_asset).safeApprove(_target, type(uint256).max);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to decode the _encodedAssetTransferArgs param passed to adapter call\\r\\n    function __decodeEncodedAssetTransferArgs(bytes memory _encodedAssetTransferArgs)\\r\\n        internal\\r\\n        pure\\r\\n        returns (\\r\\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType_,\\r\\n            address[] memory spendAssets_,\\r\\n            uint256[] memory spendAssetAmounts_,\\r\\n            address[] memory incomingAssets_\\r\\n        )\\r\\n    {\\r\\n        return\\r\\n            abi.decode(\\r\\n                _encodedAssetTransferArgs,\\r\\n                (IIntegrationManager.SpendAssetsHandleType, address[], uint256[], address[])\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to transfer full contract balances of assets to the specified VaultProxy\\r\\n    function __transferContractAssetBalancesToFund(address _vaultProxy, address[] memory _assets)\\r\\n        private\\r\\n    {\\r\\n        for (uint256 i = 0; i < _assets.length; i++) {\\r\\n            uint256 postCallAmount = ERC20(_assets[i]).balanceOf(address(this));\\r\\n            if (postCallAmount > 0) {\\r\\n                ERC20(_assets[i]).safeTransfer(_vaultProxy, postCallAmount);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    ///////////////////\\r\\n    // STATE GETTERS //\\r\\n    ///////////////////\\r\\n\\r\\n    /// @notice Gets the `INTEGRATION_MANAGER` variable\\r\\n    /// @return integrationManager_ The `INTEGRATION_MANAGER` variable value\\r\\n    function getIntegrationManager() external view returns (address integrationManager_) {\\r\\n        return INTEGRATION_MANAGER;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x599794e4474eb906a0e1ae6c5051aa6289047e548bb9f605171c248e7758a783\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/integration-manager/integrations/utils/AdapterBase2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"./AdapterBase.sol\\\";\\r\\n\\r\\n/// @title AdapterBase2 Contract\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\n/// @notice A base contract for integration adapters that extends AdapterBase\\r\\n/// @dev This is a temporary contract that will be merged into AdapterBase with the next release\\r\\nabstract contract AdapterBase2 is AdapterBase {\\r\\n    /// @dev Provides a standard implementation for transferring incoming assets and\\r\\n    /// unspent spend assets from an adapter to a VaultProxy at the end of an adapter action\\r\\n    modifier postActionAssetsTransferHandler(\\r\\n        address _vaultProxy,\\r\\n        bytes memory _encodedAssetTransferArgs\\r\\n    ) {\\r\\n        _;\\r\\n\\r\\n        (\\r\\n            ,\\r\\n            address[] memory spendAssets,\\r\\n            ,\\r\\n            address[] memory incomingAssets\\r\\n        ) = __decodeEncodedAssetTransferArgs(_encodedAssetTransferArgs);\\r\\n\\r\\n        __transferFullAssetBalances(_vaultProxy, incomingAssets);\\r\\n        __transferFullAssetBalances(_vaultProxy, spendAssets);\\r\\n    }\\r\\n\\r\\n    /// @dev Provides a standard implementation for transferring incoming assets\\r\\n    /// from an adapter to a VaultProxy at the end of an adapter action\\r\\n    modifier postActionIncomingAssetsTransferHandler(\\r\\n        address _vaultProxy,\\r\\n        bytes memory _encodedAssetTransferArgs\\r\\n    ) {\\r\\n        _;\\r\\n\\r\\n        (, , , address[] memory incomingAssets) = __decodeEncodedAssetTransferArgs(\\r\\n            _encodedAssetTransferArgs\\r\\n        );\\r\\n\\r\\n        __transferFullAssetBalances(_vaultProxy, incomingAssets);\\r\\n    }\\r\\n\\r\\n    /// @dev Provides a standard implementation for transferring unspent spend assets\\r\\n    /// from an adapter to a VaultProxy at the end of an adapter action\\r\\n    modifier postActionSpendAssetsTransferHandler(\\r\\n        address _vaultProxy,\\r\\n        bytes memory _encodedAssetTransferArgs\\r\\n    ) {\\r\\n        _;\\r\\n\\r\\n        (, address[] memory spendAssets, , ) = __decodeEncodedAssetTransferArgs(\\r\\n            _encodedAssetTransferArgs\\r\\n        );\\r\\n\\r\\n        __transferFullAssetBalances(_vaultProxy, spendAssets);\\r\\n    }\\r\\n\\r\\n    constructor(address _integrationManager) public AdapterBase(_integrationManager) {}\\r\\n\\r\\n    /// @dev Helper to transfer full asset balances of current contract to the specified target\\r\\n    function __transferFullAssetBalances(address _target, address[] memory _assets) internal {\\r\\n        for (uint256 i = 0; i < _assets.length; i++) {\\r\\n            uint256 balance = ERC20(_assets[i]).balanceOf(address(this));\\r\\n            if (balance > 0) {\\r\\n                ERC20(_assets[i]).safeTransfer(_target, balance);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x5b9dac3ff1fb25775ffb43e43613c6c6176aa6b4ff4ddc40452ebb62e28cd128\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/integration-manager/integrations/utils/IntegrationSelectors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title IntegrationSelectors Contract\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\n/// @notice Selectors for integration actions\\r\\n/// @dev Selectors are created from their signatures rather than hardcoded for easy verification\\r\\nabstract contract IntegrationSelectors {\\r\\n    // Tracked assets\\r\\n    bytes4 public constant ADD_TRACKED_ASSETS_SELECTOR = bytes4(\\r\\n        keccak256(\\\"addTrackedAssets(address,bytes,bytes)\\\")\\r\\n    );\\r\\n    bytes4 public constant REMOVE_TRACKED_ASSETS_SELECTOR = bytes4(\\r\\n        keccak256(\\\"removeTrackedAssets(address,bytes,bytes)\\\")\\r\\n    );\\r\\n\\r\\n    // Asset approval\\r\\n    bytes4 public constant APPROVE_ASSETS_SELECTOR = bytes4(\\r\\n        keccak256(\\\"approveAssets(address,bytes,bytes)\\\")\\r\\n    );\\r\\n\\r\\n    // Trading\\r\\n    bytes4 public constant TAKE_ORDER_SELECTOR = bytes4(\\r\\n        keccak256(\\\"takeOrder(address,bytes,bytes)\\\")\\r\\n    );\\r\\n\\r\\n    // Lending\\r\\n    bytes4 public constant LEND_SELECTOR = bytes4(keccak256(\\\"lend(address,bytes,bytes)\\\"));\\r\\n    bytes4 public constant REDEEM_SELECTOR = bytes4(keccak256(\\\"redeem(address,bytes,bytes)\\\"));\\r\\n\\r\\n    // Staking\\r\\n    bytes4 public constant STAKE_SELECTOR = bytes4(keccak256(\\\"stake(address,bytes,bytes)\\\"));\\r\\n    bytes4 public constant UNSTAKE_SELECTOR = bytes4(keccak256(\\\"unstake(address,bytes,bytes)\\\"));\\r\\n\\r\\n    // Rewards\\r\\n    bytes4 public constant CLAIM_REWARDS_SELECTOR = bytes4(\\r\\n        keccak256(\\\"claimRewards(address,bytes,bytes)\\\")\\r\\n    );\\r\\n\\r\\n    // Combined\\r\\n    bytes4 public constant CLAIM_REWARDS_AND_REINVEST_SELECTOR = bytes4(\\r\\n        keccak256(\\\"claimRewardsAndReinvest(address,bytes,bytes)\\\")\\r\\n    );\\r\\n    bytes4 public constant CLAIM_REWARDS_AND_SWAP_SELECTOR = bytes4(\\r\\n        keccak256(\\\"claimRewardsAndSwap(address,bytes,bytes)\\\")\\r\\n    );\\r\\n    bytes4 public constant LEND_AND_STAKE_SELECTOR = bytes4(\\r\\n        keccak256(\\\"lendAndStake(address,bytes,bytes)\\\")\\r\\n    );\\r\\n    bytes4 public constant UNSTAKE_AND_REDEEM_SELECTOR = bytes4(\\r\\n        keccak256(\\\"unstakeAndRedeem(address,bytes,bytes)\\\")\\r\\n    );\\r\\n}\\r\\n\",\"keccak256\":\"0x95effa25980655a5ce2e211ecc466bbed3509da2f88708287c372faa5b93030e\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/integration-manager/integrations/utils/actions/ParaSwapV4ActionsMixin.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"../../../../../interfaces/IParaSwapV4AugustusSwapper.sol\\\";\\r\\nimport \\\"../../../../../utils/AssetHelpers.sol\\\";\\r\\n\\r\\n/// @title ParaSwapV4ActionsMixin Contract\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\n/// @notice Mixin contract for interacting with ParaSwap (v4)\\r\\nabstract contract ParaSwapV4ActionsMixin is AssetHelpers {\\r\\n    string private constant REFERRER = \\\"enzyme\\\";\\r\\n\\r\\n    address private immutable PARA_SWAP_V4_AUGUSTUS_SWAPPER;\\r\\n    address private immutable PARA_SWAP_V4_TOKEN_TRANSFER_PROXY;\\r\\n\\r\\n    constructor(address _augustusSwapper, address _tokenTransferProxy) public {\\r\\n        PARA_SWAP_V4_AUGUSTUS_SWAPPER = _augustusSwapper;\\r\\n        PARA_SWAP_V4_TOKEN_TRANSFER_PROXY = _tokenTransferProxy;\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to execute a multiSwap() order\\r\\n    function __paraSwapV4MultiSwap(\\r\\n        address _fromToken,\\r\\n        uint256 _fromAmount,\\r\\n        uint256 _toAmount,\\r\\n        uint256 _expectedAmount,\\r\\n        address payable _beneficiary,\\r\\n        IParaSwapV4AugustusSwapper.Path[] memory _path\\r\\n    ) internal {\\r\\n        __approveAssetMaxAsNeeded(_fromToken, PARA_SWAP_V4_TOKEN_TRANSFER_PROXY, _fromAmount);\\r\\n\\r\\n        IParaSwapV4AugustusSwapper.SellData memory sellData = IParaSwapV4AugustusSwapper.SellData({\\r\\n            fromToken: _fromToken,\\r\\n            fromAmount: _fromAmount,\\r\\n            toAmount: _toAmount,\\r\\n            expectedAmount: _expectedAmount,\\r\\n            beneficiary: _beneficiary,\\r\\n            referrer: REFERRER,\\r\\n            useReduxToken: false,\\r\\n            path: _path\\r\\n        });\\r\\n\\r\\n        IParaSwapV4AugustusSwapper(PARA_SWAP_V4_AUGUSTUS_SWAPPER).multiSwap(sellData);\\r\\n    }\\r\\n\\r\\n    ///////////////////\\r\\n    // STATE GETTERS //\\r\\n    ///////////////////\\r\\n\\r\\n    /// @notice Gets the `PARA_SWAP_V4_AUGUSTUS_SWAPPER` variable\\r\\n    /// @return augustusSwapper_ The `PARA_SWAP_V4_AUGUSTUS_SWAPPER` variable value\\r\\n    function getParaSwapV4AugustusSwapper() public view returns (address augustusSwapper_) {\\r\\n        return PARA_SWAP_V4_AUGUSTUS_SWAPPER;\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the `PARA_SWAP_V4_TOKEN_TRANSFER_PROXY` variable\\r\\n    /// @return tokenTransferProxy_ The `PARA_SWAP_V4_TOKEN_TRANSFER_PROXY` variable value\\r\\n    function getParaSwapV4TokenTransferProxy() public view returns (address tokenTransferProxy_) {\\r\\n        return PARA_SWAP_V4_TOKEN_TRANSFER_PROXY;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x4cf6cf1926ca0d921d8898a630f684d161e3cf99e91a1d31b709ad72c16e0dcc\",\"license\":\"GPL-3.0\"},\"contracts/release/interfaces/IParaSwapV4AugustusSwapper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n/// @title ParaSwap V4 IAugustusSwapper interface\\r\\ninterface IParaSwapV4AugustusSwapper {\\r\\n    struct Route {\\r\\n        address payable exchange;\\r\\n        address targetExchange;\\r\\n        uint256 percent;\\r\\n        bytes payload;\\r\\n        uint256 networkFee;\\r\\n    }\\r\\n\\r\\n    struct Path {\\r\\n        address to;\\r\\n        uint256 totalNetworkFee;\\r\\n        Route[] routes;\\r\\n    }\\r\\n\\r\\n    struct SellData {\\r\\n        address fromToken;\\r\\n        uint256 fromAmount;\\r\\n        uint256 toAmount;\\r\\n        uint256 expectedAmount;\\r\\n        address payable beneficiary;\\r\\n        string referrer;\\r\\n        bool useReduxToken;\\r\\n        Path[] path;\\r\\n    }\\r\\n\\r\\n    function multiSwap(SellData calldata) external payable returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x97689427dad50e80b5d988115aa78e8cdcbd2ba51d21c14cf7a511b9aa7762e2\",\"license\":\"GPL-3.0\"},\"contracts/release/utils/AssetHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\n\\r\\n/// @title AssetHelpers Contract\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\n/// @notice A util contract for common token actions\\r\\nabstract contract AssetHelpers {\\r\\n    using SafeERC20 for ERC20;\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    /// @dev Helper to approve a target account with the max amount of an asset.\\r\\n    /// This is helpful for fully trusted contracts, such as adapters that\\r\\n    /// interact with external protocol like Uniswap, Compound, etc.\\r\\n    function __approveAssetMaxAsNeeded(\\r\\n        address _asset,\\r\\n        address _target,\\r\\n        uint256 _neededAmount\\r\\n    ) internal {\\r\\n        if (ERC20(_asset).allowance(address(this), _target) < _neededAmount) {\\r\\n            ERC20(_asset).safeApprove(_target, type(uint256).max);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to get the balances of specified assets for a target\\r\\n    function __getAssetBalances(address _target, address[] memory _assets)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256[] memory balances_)\\r\\n    {\\r\\n        balances_ = new uint256[](_assets.length);\\r\\n        for (uint256 i; i < _assets.length; i++) {\\r\\n            balances_[i] = ERC20(_assets[i]).balanceOf(_target);\\r\\n        }\\r\\n\\r\\n        return balances_;\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to transfer full asset balances from a target to the current contract.\\r\\n    /// Requires an adequate allowance for each asset granted to the current contract for the target.\\r\\n    function __pullFullAssetBalances(address _target, address[] memory _assets)\\r\\n        internal\\r\\n        returns (uint256[] memory amountsTransferred_)\\r\\n    {\\r\\n        amountsTransferred_ = new uint256[](_assets.length);\\r\\n        for (uint256 i; i < _assets.length; i++) {\\r\\n            ERC20 assetContract = ERC20(_assets[i]);\\r\\n            amountsTransferred_[i] = assetContract.balanceOf(_target);\\r\\n            if (amountsTransferred_[i] > 0) {\\r\\n                assetContract.safeTransferFrom(_target, address(this), amountsTransferred_[i]);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return amountsTransferred_;\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to transfer partial asset balances from a target to the current contract.\\r\\n    /// Requires an adequate allowance for each asset granted to the current contract for the target.\\r\\n    function __pullPartialAssetBalances(\\r\\n        address _target,\\r\\n        address[] memory _assets,\\r\\n        uint256[] memory _amountsToExclude\\r\\n    ) internal returns (uint256[] memory amountsTransferred_) {\\r\\n        amountsTransferred_ = new uint256[](_assets.length);\\r\\n        for (uint256 i; i < _assets.length; i++) {\\r\\n            ERC20 assetContract = ERC20(_assets[i]);\\r\\n            amountsTransferred_[i] = assetContract.balanceOf(_target).sub(_amountsToExclude[i]);\\r\\n            if (amountsTransferred_[i] > 0) {\\r\\n                assetContract.safeTransferFrom(_target, address(this), amountsTransferred_[i]);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return amountsTransferred_;\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to transfer full asset balances from the current contract to a target\\r\\n    function __pushFullAssetBalances(address _target, address[] memory _assets)\\r\\n        internal\\r\\n        returns (uint256[] memory amountsTransferred_)\\r\\n    {\\r\\n        amountsTransferred_ = new uint256[](_assets.length);\\r\\n        for (uint256 i; i < _assets.length; i++) {\\r\\n            ERC20 assetContract = ERC20(_assets[i]);\\r\\n            amountsTransferred_[i] = assetContract.balanceOf(address(this));\\r\\n            if (amountsTransferred_[i] > 0) {\\r\\n                assetContract.safeTransfer(_target, amountsTransferred_[i]);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return amountsTransferred_;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x22ee084fb51c8c354fc14352f8d6251cff9892aa8e95f739d5c7e21f1574dc2a\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b50604051620019c3380380620019c383398101604081905262000034916200006f565b6001600160601b0319606093841b811660805291831b821660a05290911b1660c052620000ef565b80516200006981620000d5565b92915050565b6000806000606084860312156200008557600080fd5b60006200009386866200005c565b9350506020620000a6868287016200005c565b9250506040620000b9868287016200005c565b9150509250925092565b60006001600160a01b03821662000069565b620000e081620000c3565b8114620000ec57600080fd5b50565b60805160601c60a05160601c60c05160601c61188f620001346000398061063952806107435250806103d152806107e152508061022252806106a5525061188f6000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c806376cc7ac6116100ad578063e27a06b511610071578063e27a06b5146101ef578063e4d90478146101f7578063e7c45690146101ff578063f075399414610207578063f7d882b51461020f57610121565b806376cc7ac61461019e5780637998a1c4146101c2578063863e5ad0146101d7578063b23228cf146101df578063c7308c03146101e757610121565b80633ffc1591116100f45780633ffc15911461016957806340da225d1461017157806340f8cfcf146101795780635ca62b3c146101815780635e21197a1461018957610121565b806303e38a2b14610126578063080456c11461013b578063131461c014610159578063257cb1a314610161575b600080fd5b610139610134366004610ece565b610217565b005b6101436102d3565b6040516101509190611633565b60405180910390f35b6101436102f7565b61014361031b565b61014361033f565b610143610363565b610143610387565b6101436103ab565b6101916103cf565b60405161015091906115ef565b6101b16101ac366004610f7b565b6103f3565b604051610150959493929190611641565b6101ca6105c9565b604051610150919061169d565b6101436105ef565b610143610613565b610191610637565b61014361065b565b61014361067f565b6101916106a3565b6101436106c7565b6101436106eb565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146102685760405162461bcd60e51b815260040161025f906116ce565b60405180910390fd5b60008060008060606102af89898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061070f92505050565b945094509450945094506102c7838387878e8661073d565b50505050505050505050565b7f8334eb99be0145865eba9889fca2ee920288090caefff4cc776038e20ad9259a81565b7f29fa046e79524c3c5ac4c01df692c35e217802b2b13b21121b76cf0ef02b138c81565b7f099f75155f0e997bf83a7993a71d5e7e7540bd386fe1e84643a09ce6b412521981565b7ffa7dd04da627f433da73c4355ead9c75682a67a8fc84d3f6170ef0922f402d2481565b7fb9dfbaccbe5cd2a84fdcf1d15f23ef25d23086f5afbaa99516065ed4a5bbc7a381565b7ff658eb804cc1da8af5599b584aaf3d55407a3c721c42641a6a5270e963d782c381565b7fdfd5ee0f6067928bf85a7c4430811282840bc99332dda3dab462c02bf95b67cc81565b7f000000000000000000000000000000000000000000000000000000000000000090565b600060608080806001600160e01b031988166303e38a2b60e01b1461042a5760405162461bcd60e51b815260040161025f906116ae565b600080600060606104708b8b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061070f92505050565b945094509450509350600167ffffffffffffffff8111801561049157600080fd5b506040519080825280602002602001820160405280156104bb578160200160208202803683370190505b50975082886000815181106104cc57fe5b6001600160a01b0392909216602092830291909101820152604080516001808252818301909252918281019080368337019050509650818760008151811061051057fe5b6020908102919091010152604080516001808252818301909252908160200160208202803683370190505095508060018251038151811061054d57fe5b6020026020010151600001518660008151811061056657fe5b6001600160a01b039290921660209283029190910182015260408051600180825281830190925291828101908036833701905050945083856000815181106105aa57fe5b6020026020010181815250506002985050505050939792965093509350565b60408051808201909152600c81526b1410549057d4d5d05417d58d60a21b602082015290565b7f03e38a2bd7063d45c897edeafc330e71657502dd86434d3c37a489caf116af6981565b7f68e30677f607df46e87da13e15b637784cfa62374b653f35ab43d10361a2f83081565b7f000000000000000000000000000000000000000000000000000000000000000090565b7f848f3a590fb2f9795d1a275009c54c26c53833277c96b90e0ddd01753a1d590681565b7f3377e18acf9e83665eacd6af109261424fca32a298e2fc2e6095ba563fb8390e81565b7f000000000000000000000000000000000000000000000000000000000000000090565b7f1d51f49b5273d9ddbb643dc349fab8d36dbb470209c2ea71033bea49dd311c2781565b7fc29fa9dde84204c2908778afd0613d802d31cf046179b88f6d2b4a4e507ea2d581565b60008060008060608580602001905181019061072b9190610fef565b939a9299509097509550909350915050565b610768867f000000000000000000000000000000000000000000000000000000000000000087610887565b610770610bc9565b604051806101000160405280886001600160a01b03168152602001878152602001868152602001858152602001846001600160a01b0316815260200160405180604001604052806006815260200165656e7a796d6560d01b81525081526020016000151581526020018381525090507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638f00eccb826040518263ffffffff1660e01b815260040161082b919061170e565b602060405180830381600087803b15801561084557600080fd5b505af1158015610859573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087d9190610fd1565b5050505050505050565b604051636eb1769f60e11b815281906001600160a01b0385169063dd62ed3e906108b790309087906004016115fd565b60206040518083038186803b1580156108cf57600080fd5b505afa1580156108e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109079190610fd1565b1015610923576109236001600160a01b03841683600019610928565b505050565b8015806109b05750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e9061095e90309086906004016115fd565b60206040518083038186803b15801561097657600080fd5b505afa15801561098a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ae9190610fd1565b155b6109cc5760405162461bcd60e51b815260040161025f906116fe565b6109238363095ea7b360e01b84846040516024016109eb929190611618565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526060610a72826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610aac9092919063ffffffff16565b8051909150156109235780806020019051810190610a909190610f55565b6109235760405162461bcd60e51b815260040161025f906116ee565b6060610abb8484600085610ac5565b90505b9392505050565b606082471015610ae75760405162461bcd60e51b815260040161025f906116be565b610af085610b86565b610b0c5760405162461bcd60e51b815260040161025f906116de565b60006060866001600160a01b03168587604051610b2991906115e3565b60006040518083038185875af1925050503d8060008114610b66576040519150601f19603f3d011682016040523d82523d6000602084013e610b6b565b606091505b5091509150610b7b828286610b90565b979650505050505050565b803b15155b919050565b60608315610b9f575081610abe565b825115610baf5782518084602001fd5b8160405162461bcd60e51b815260040161025f919061169d565b60405180610100016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160608152602001600015158152602001606081525090565b8035610c2d8161182a565b92915050565b8051610c2d8161182a565b600082601f830112610c4f57600080fd5b8151610c62610c5d82611746565b61171f565b81815260209384019390925082018360005b83811015610ca05781518601610c8a8882610db5565b8452506020928301929190910190600101610c74565b5050505092915050565b600082601f830112610cbb57600080fd5b8151610cc9610c5d82611746565b81815260209384019390925082018360005b83811015610ca05781518601610cf18882610e28565b8452506020928301929190910190600101610cdb565b8051610c2d8161183e565b8035610c2d81611847565b60008083601f840112610d2f57600080fd5b50813567ffffffffffffffff811115610d4757600080fd5b602083019150836001820283011115610d5f57600080fd5b9250929050565b600082601f830112610d7757600080fd5b8151610d85610c5d82611767565b91508082526020830160208301858383011115610da157600080fd5b610dac8382846117e3565b50505092915050565b600060608284031215610dc757600080fd5b610dd1606061171f565b90506000610ddf8484610c33565b8252506020610df084848301610ec3565b602083015250604082015167ffffffffffffffff811115610e1057600080fd5b610e1c84828501610caa565b60408301525092915050565b600060a08284031215610e3a57600080fd5b610e4460a061171f565b90506000610e528484610c33565b8252506020610e6384848301610c33565b6020830152506040610e7784828501610ec3565b604083015250606082015167ffffffffffffffff811115610e9757600080fd5b610ea384828501610d66565b6060830152506080610eb784828501610ec3565b60808301525092915050565b8051610c2d81611850565b600080600080600060608688031215610ee657600080fd5b6000610ef28888610c22565b955050602086013567ffffffffffffffff811115610f0f57600080fd5b610f1b88828901610d1d565b9450945050604086013567ffffffffffffffff811115610f3a57600080fd5b610f4688828901610d1d565b92509250509295509295909350565b600060208284031215610f6757600080fd5b6000610f738484610d07565b949350505050565b600080600060408486031215610f9057600080fd5b6000610f9c8686610d12565b935050602084013567ffffffffffffffff811115610fb957600080fd5b610fc586828701610d1d565b92509250509250925092565b600060208284031215610fe357600080fd5b6000610f738484610ec3565b600080600080600060a0868803121561100757600080fd5b60006110138888610ec3565b955050602061102488828901610ec3565b945050604061103588828901610c33565b935050606061104688828901610ec3565b925050608086015167ffffffffffffffff81111561106357600080fd5b61106f88828901610c3e565b9150509295509295909350565b600061108883836110b4565b505060200190565b6000610abe838361147d565b6000610abe83836114c5565b600061108883836115da565b6110bd816117a2565b82525050565b60006110ce82611795565b6110d88185611799565b93506110e38361178f565b8060005b838110156111115781516110fb888261107c565b97506111068361178f565b9250506001016110e7565b509495945050505050565b600061112782611795565b6111318185611799565b9350836020820285016111438561178f565b8060005b8581101561117d57848403895281516111608582611090565b945061116b8361178f565b60209a909a0199925050600101611147565b5091979650505050505050565b600061119582611795565b61119f8185611799565b9350836020820285016111b18561178f565b8060005b8581101561117d57848403895281516111ce858261109c565b94506111d98361178f565b60209a909a01999250506001016111b5565b60006111f682611795565b6112008185611799565b935061120b8361178f565b8060005b8381101561111157815161122388826110a8565b975061122e8361178f565b92505060010161120f565b6110bd816117ad565b6110bd816117b2565b600061125682611795565b6112608185611799565b93506112708185602086016117e3565b61127981611813565b9093019392505050565b600061128e82611795565b6112988185610b8b565b93506112a88185602086016117e3565b9290920192915050565b6110bd816117d8565b60006112c8602783611799565b7f7061727365417373657473466f724d6574686f643a205f73656c6563746f72208152661a5b9d985b1a5960ca1b602082015260400192915050565b6000611311602683611799565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f8152651c8818d85b1b60d21b602082015260400192915050565b6000611359603283611799565b7f4f6e6c792074686520496e746567726174696f6e4d616e616765722063616e2081527131b0b636103a3434b990333ab731ba34b7b760711b602082015260400192915050565b60006113ad601d83611799565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000815260200192915050565b60006113e6602a83611799565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e8152691bdd081cdd58d8d9595960b21b602082015260400192915050565b6000611432603683611799565b7f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f81527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b602082015260400192915050565b8051600090606084019061149185826110b4565b5060208301516114a460208601826115da565b50604083015184820360408601526114bc828261118a565b95945050505050565b805160009060a08401906114d985826110b4565b5060208301516114ec60208601826110b4565b5060408301516114ff60408601826115da565b5060608301518482036060860152611517828261124b565b915050608083015161152c60808601826115da565b509392505050565b805160009061010084019061154985826110b4565b50602083015161155c60208601826115da565b50604083015161156f60408601826115da565b50606083015161158260608601826115da565b50608083015161159560808601826110b4565b5060a083015184820360a08601526115ad828261124b565b91505060c08301516115c260c0860182611239565b5060e083015184820360e08601526114bc828261111c565b6110bd816117d5565b6000610abe8284611283565b60208101610c2d82846110b4565b6040810161160b82856110b4565b610abe60208301846110b4565b6040810161162682856110b4565b610abe60208301846115da565b60208101610c2d8284611242565b60a0810161164f82886112b2565b818103602083015261166181876110c3565b9050818103604083015261167581866111eb565b9050818103606083015261168981856110c3565b90508181036080830152610b7b81846111eb565b60208082528101610abe818461124b565b60208082528101610c2d816112bb565b60208082528101610c2d81611304565b60208082528101610c2d8161134c565b60208082528101610c2d816113a0565b60208082528101610c2d816113d9565b60208082528101610c2d81611425565b60208082528101610abe8184611534565b60405181810167ffffffffffffffff8111828210171561173e57600080fd5b604052919050565b600067ffffffffffffffff82111561175d57600080fd5b5060209081020190565b600067ffffffffffffffff82111561177e57600080fd5b506020601f91909101601f19160190565b60200190565b5190565b90815260200190565b6000610c2d826117c9565b151590565b6001600160e01b03191690565b80610b8b8161181d565b6001600160a01b031690565b90565b6000610c2d826117bf565b60005b838110156117fe5781810151838201526020016117e6565b8381111561180d576000848401525b50505050565b601f01601f191690565b6004811061182757fe5b50565b611833816117a2565b811461182757600080fd5b611833816117ad565b611833816117b2565b611833816117d556fea2646970667358221220274057b3aec56d0ca741ec99800c44077e6b38ee0df125a3f02872a695443c5364736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101215760003560e01c806376cc7ac6116100ad578063e27a06b511610071578063e27a06b5146101ef578063e4d90478146101f7578063e7c45690146101ff578063f075399414610207578063f7d882b51461020f57610121565b806376cc7ac61461019e5780637998a1c4146101c2578063863e5ad0146101d7578063b23228cf146101df578063c7308c03146101e757610121565b80633ffc1591116100f45780633ffc15911461016957806340da225d1461017157806340f8cfcf146101795780635ca62b3c146101815780635e21197a1461018957610121565b806303e38a2b14610126578063080456c11461013b578063131461c014610159578063257cb1a314610161575b600080fd5b610139610134366004610ece565b610217565b005b6101436102d3565b6040516101509190611633565b60405180910390f35b6101436102f7565b61014361031b565b61014361033f565b610143610363565b610143610387565b6101436103ab565b6101916103cf565b60405161015091906115ef565b6101b16101ac366004610f7b565b6103f3565b604051610150959493929190611641565b6101ca6105c9565b604051610150919061169d565b6101436105ef565b610143610613565b610191610637565b61014361065b565b61014361067f565b6101916106a3565b6101436106c7565b6101436106eb565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146102685760405162461bcd60e51b815260040161025f906116ce565b60405180910390fd5b60008060008060606102af89898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061070f92505050565b945094509450945094506102c7838387878e8661073d565b50505050505050505050565b7f8334eb99be0145865eba9889fca2ee920288090caefff4cc776038e20ad9259a81565b7f29fa046e79524c3c5ac4c01df692c35e217802b2b13b21121b76cf0ef02b138c81565b7f099f75155f0e997bf83a7993a71d5e7e7540bd386fe1e84643a09ce6b412521981565b7ffa7dd04da627f433da73c4355ead9c75682a67a8fc84d3f6170ef0922f402d2481565b7fb9dfbaccbe5cd2a84fdcf1d15f23ef25d23086f5afbaa99516065ed4a5bbc7a381565b7ff658eb804cc1da8af5599b584aaf3d55407a3c721c42641a6a5270e963d782c381565b7fdfd5ee0f6067928bf85a7c4430811282840bc99332dda3dab462c02bf95b67cc81565b7f000000000000000000000000000000000000000000000000000000000000000090565b600060608080806001600160e01b031988166303e38a2b60e01b1461042a5760405162461bcd60e51b815260040161025f906116ae565b600080600060606104708b8b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061070f92505050565b945094509450509350600167ffffffffffffffff8111801561049157600080fd5b506040519080825280602002602001820160405280156104bb578160200160208202803683370190505b50975082886000815181106104cc57fe5b6001600160a01b0392909216602092830291909101820152604080516001808252818301909252918281019080368337019050509650818760008151811061051057fe5b6020908102919091010152604080516001808252818301909252908160200160208202803683370190505095508060018251038151811061054d57fe5b6020026020010151600001518660008151811061056657fe5b6001600160a01b039290921660209283029190910182015260408051600180825281830190925291828101908036833701905050945083856000815181106105aa57fe5b6020026020010181815250506002985050505050939792965093509350565b60408051808201909152600c81526b1410549057d4d5d05417d58d60a21b602082015290565b7f03e38a2bd7063d45c897edeafc330e71657502dd86434d3c37a489caf116af6981565b7f68e30677f607df46e87da13e15b637784cfa62374b653f35ab43d10361a2f83081565b7f000000000000000000000000000000000000000000000000000000000000000090565b7f848f3a590fb2f9795d1a275009c54c26c53833277c96b90e0ddd01753a1d590681565b7f3377e18acf9e83665eacd6af109261424fca32a298e2fc2e6095ba563fb8390e81565b7f000000000000000000000000000000000000000000000000000000000000000090565b7f1d51f49b5273d9ddbb643dc349fab8d36dbb470209c2ea71033bea49dd311c2781565b7fc29fa9dde84204c2908778afd0613d802d31cf046179b88f6d2b4a4e507ea2d581565b60008060008060608580602001905181019061072b9190610fef565b939a9299509097509550909350915050565b610768867f000000000000000000000000000000000000000000000000000000000000000087610887565b610770610bc9565b604051806101000160405280886001600160a01b03168152602001878152602001868152602001858152602001846001600160a01b0316815260200160405180604001604052806006815260200165656e7a796d6560d01b81525081526020016000151581526020018381525090507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638f00eccb826040518263ffffffff1660e01b815260040161082b919061170e565b602060405180830381600087803b15801561084557600080fd5b505af1158015610859573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087d9190610fd1565b5050505050505050565b604051636eb1769f60e11b815281906001600160a01b0385169063dd62ed3e906108b790309087906004016115fd565b60206040518083038186803b1580156108cf57600080fd5b505afa1580156108e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109079190610fd1565b1015610923576109236001600160a01b03841683600019610928565b505050565b8015806109b05750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e9061095e90309086906004016115fd565b60206040518083038186803b15801561097657600080fd5b505afa15801561098a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ae9190610fd1565b155b6109cc5760405162461bcd60e51b815260040161025f906116fe565b6109238363095ea7b360e01b84846040516024016109eb929190611618565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526060610a72826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610aac9092919063ffffffff16565b8051909150156109235780806020019051810190610a909190610f55565b6109235760405162461bcd60e51b815260040161025f906116ee565b6060610abb8484600085610ac5565b90505b9392505050565b606082471015610ae75760405162461bcd60e51b815260040161025f906116be565b610af085610b86565b610b0c5760405162461bcd60e51b815260040161025f906116de565b60006060866001600160a01b03168587604051610b2991906115e3565b60006040518083038185875af1925050503d8060008114610b66576040519150601f19603f3d011682016040523d82523d6000602084013e610b6b565b606091505b5091509150610b7b828286610b90565b979650505050505050565b803b15155b919050565b60608315610b9f575081610abe565b825115610baf5782518084602001fd5b8160405162461bcd60e51b815260040161025f919061169d565b60405180610100016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160608152602001600015158152602001606081525090565b8035610c2d8161182a565b92915050565b8051610c2d8161182a565b600082601f830112610c4f57600080fd5b8151610c62610c5d82611746565b61171f565b81815260209384019390925082018360005b83811015610ca05781518601610c8a8882610db5565b8452506020928301929190910190600101610c74565b5050505092915050565b600082601f830112610cbb57600080fd5b8151610cc9610c5d82611746565b81815260209384019390925082018360005b83811015610ca05781518601610cf18882610e28565b8452506020928301929190910190600101610cdb565b8051610c2d8161183e565b8035610c2d81611847565b60008083601f840112610d2f57600080fd5b50813567ffffffffffffffff811115610d4757600080fd5b602083019150836001820283011115610d5f57600080fd5b9250929050565b600082601f830112610d7757600080fd5b8151610d85610c5d82611767565b91508082526020830160208301858383011115610da157600080fd5b610dac8382846117e3565b50505092915050565b600060608284031215610dc757600080fd5b610dd1606061171f565b90506000610ddf8484610c33565b8252506020610df084848301610ec3565b602083015250604082015167ffffffffffffffff811115610e1057600080fd5b610e1c84828501610caa565b60408301525092915050565b600060a08284031215610e3a57600080fd5b610e4460a061171f565b90506000610e528484610c33565b8252506020610e6384848301610c33565b6020830152506040610e7784828501610ec3565b604083015250606082015167ffffffffffffffff811115610e9757600080fd5b610ea384828501610d66565b6060830152506080610eb784828501610ec3565b60808301525092915050565b8051610c2d81611850565b600080600080600060608688031215610ee657600080fd5b6000610ef28888610c22565b955050602086013567ffffffffffffffff811115610f0f57600080fd5b610f1b88828901610d1d565b9450945050604086013567ffffffffffffffff811115610f3a57600080fd5b610f4688828901610d1d565b92509250509295509295909350565b600060208284031215610f6757600080fd5b6000610f738484610d07565b949350505050565b600080600060408486031215610f9057600080fd5b6000610f9c8686610d12565b935050602084013567ffffffffffffffff811115610fb957600080fd5b610fc586828701610d1d565b92509250509250925092565b600060208284031215610fe357600080fd5b6000610f738484610ec3565b600080600080600060a0868803121561100757600080fd5b60006110138888610ec3565b955050602061102488828901610ec3565b945050604061103588828901610c33565b935050606061104688828901610ec3565b925050608086015167ffffffffffffffff81111561106357600080fd5b61106f88828901610c3e565b9150509295509295909350565b600061108883836110b4565b505060200190565b6000610abe838361147d565b6000610abe83836114c5565b600061108883836115da565b6110bd816117a2565b82525050565b60006110ce82611795565b6110d88185611799565b93506110e38361178f565b8060005b838110156111115781516110fb888261107c565b97506111068361178f565b9250506001016110e7565b509495945050505050565b600061112782611795565b6111318185611799565b9350836020820285016111438561178f565b8060005b8581101561117d57848403895281516111608582611090565b945061116b8361178f565b60209a909a0199925050600101611147565b5091979650505050505050565b600061119582611795565b61119f8185611799565b9350836020820285016111b18561178f565b8060005b8581101561117d57848403895281516111ce858261109c565b94506111d98361178f565b60209a909a01999250506001016111b5565b60006111f682611795565b6112008185611799565b935061120b8361178f565b8060005b8381101561111157815161122388826110a8565b975061122e8361178f565b92505060010161120f565b6110bd816117ad565b6110bd816117b2565b600061125682611795565b6112608185611799565b93506112708185602086016117e3565b61127981611813565b9093019392505050565b600061128e82611795565b6112988185610b8b565b93506112a88185602086016117e3565b9290920192915050565b6110bd816117d8565b60006112c8602783611799565b7f7061727365417373657473466f724d6574686f643a205f73656c6563746f72208152661a5b9d985b1a5960ca1b602082015260400192915050565b6000611311602683611799565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f8152651c8818d85b1b60d21b602082015260400192915050565b6000611359603283611799565b7f4f6e6c792074686520496e746567726174696f6e4d616e616765722063616e2081527131b0b636103a3434b990333ab731ba34b7b760711b602082015260400192915050565b60006113ad601d83611799565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000815260200192915050565b60006113e6602a83611799565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e8152691bdd081cdd58d8d9595960b21b602082015260400192915050565b6000611432603683611799565b7f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f81527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b602082015260400192915050565b8051600090606084019061149185826110b4565b5060208301516114a460208601826115da565b50604083015184820360408601526114bc828261118a565b95945050505050565b805160009060a08401906114d985826110b4565b5060208301516114ec60208601826110b4565b5060408301516114ff60408601826115da565b5060608301518482036060860152611517828261124b565b915050608083015161152c60808601826115da565b509392505050565b805160009061010084019061154985826110b4565b50602083015161155c60208601826115da565b50604083015161156f60408601826115da565b50606083015161158260608601826115da565b50608083015161159560808601826110b4565b5060a083015184820360a08601526115ad828261124b565b91505060c08301516115c260c0860182611239565b5060e083015184820360e08601526114bc828261111c565b6110bd816117d5565b6000610abe8284611283565b60208101610c2d82846110b4565b6040810161160b82856110b4565b610abe60208301846110b4565b6040810161162682856110b4565b610abe60208301846115da565b60208101610c2d8284611242565b60a0810161164f82886112b2565b818103602083015261166181876110c3565b9050818103604083015261167581866111eb565b9050818103606083015261168981856110c3565b90508181036080830152610b7b81846111eb565b60208082528101610abe818461124b565b60208082528101610c2d816112bb565b60208082528101610c2d81611304565b60208082528101610c2d8161134c565b60208082528101610c2d816113a0565b60208082528101610c2d816113d9565b60208082528101610c2d81611425565b60208082528101610abe8184611534565b60405181810167ffffffffffffffff8111828210171561173e57600080fd5b604052919050565b600067ffffffffffffffff82111561175d57600080fd5b5060209081020190565b600067ffffffffffffffff82111561177e57600080fd5b506020601f91909101601f19160190565b60200190565b5190565b90815260200190565b6000610c2d826117c9565b151590565b6001600160e01b03191690565b80610b8b8161181d565b6001600160a01b031690565b90565b6000610c2d826117bf565b60005b838110156117fe5781810151838201526020016117e6565b8381111561180d576000848401525b50505050565b601f01601f191690565b6004811061182757fe5b50565b611833816117a2565b811461182757600080fd5b611833816117ad565b611833816117b2565b611833816117d556fea2646970667358221220274057b3aec56d0ca741ec99800c44077e6b38ee0df125a3f02872a695443c5364736f6c634300060c0033",
  "devdoc": {
    "author": "Enzyme Council <security@enzyme.finance>",
    "details": "Does not allow any protocol that collects protocol fees in ETH, e.g., 0x v3",
    "kind": "dev",
    "methods": {
      "getIntegrationManager()": {
        "returns": {
          "integrationManager_": "The `INTEGRATION_MANAGER` variable value"
        }
      },
      "getParaSwapV4AugustusSwapper()": {
        "returns": {
          "augustusSwapper_": "The `PARA_SWAP_V4_AUGUSTUS_SWAPPER` variable value"
        }
      },
      "getParaSwapV4TokenTransferProxy()": {
        "returns": {
          "tokenTransferProxy_": "The `PARA_SWAP_V4_TOKEN_TRANSFER_PROXY` variable value"
        }
      },
      "identifier()": {
        "returns": {
          "identifier_": "An identifier string"
        }
      },
      "parseAssetsForMethod(bytes4,bytes)": {
        "params": {
          "_encodedCallArgs": "The encoded parameters for the callOnIntegration",
          "_selector": "The function selector for the callOnIntegration"
        },
        "returns": {
          "incomingAssets_": "The assets to receive in the call",
          "minIncomingAssetAmounts_": "The min asset amounts to receive in the call",
          "spendAssetAmounts_": "The max asset amounts to spend in the call",
          "spendAssetsHandleType_": "A type that dictates how to handle granting the adapter access to spend assets (`None` by default)",
          "spendAssets_": "The assets to spend in the call"
        }
      },
      "takeOrder(address,bytes,bytes)": {
        "details": "ParaSwap v4 completely uses entire outgoing asset balance and incoming asset is sent directly to the beneficiary (the _vaultProxy)",
        "params": {
          "_encodedCallArgs": "Encoded order parameters",
          "_vaultProxy": "The VaultProxy of the calling fund"
        }
      }
    },
    "title": "ParaSwapV4Adapter Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getIntegrationManager()": {
        "notice": "Gets the `INTEGRATION_MANAGER` variable"
      },
      "getParaSwapV4AugustusSwapper()": {
        "notice": "Gets the `PARA_SWAP_V4_AUGUSTUS_SWAPPER` variable"
      },
      "getParaSwapV4TokenTransferProxy()": {
        "notice": "Gets the `PARA_SWAP_V4_TOKEN_TRANSFER_PROXY` variable"
      },
      "identifier()": {
        "notice": "Provides a constant string identifier for an adapter"
      },
      "parseAssetsForMethod(bytes4,bytes)": {
        "notice": "Parses the expected assets to receive from a call on integration"
      },
      "takeOrder(address,bytes,bytes)": {
        "notice": "Trades assets on ParaSwap"
      }
    },
    "notice": "Adapter for interacting with ParaSwap (v4)",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}