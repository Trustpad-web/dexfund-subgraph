{
  "address": "0x62cbf359492fDc1F4d851c8854212E706B3E36E2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dispatcher",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_authUserExecutedSharesRequestorLib",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "comptrollerProxy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sharesRequestorProxy",
          "type": "address"
        }
      ],
      "name": "SharesRequestorProxyDeployed",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_comptrollerProxy",
          "type": "address"
        }
      ],
      "name": "deploySharesRequestorProxy",
      "outputs": [
        {
          "internalType": "address",
          "name": "sharesRequestorProxy_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAuthUserExecutedSharesRequestorLib",
      "outputs": [
        {
          "internalType": "address",
          "name": "authUserExecutedSharesRequestorLib_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDispatcher",
      "outputs": [
        {
          "internalType": "address",
          "name": "dispatcher_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_comptrollerProxy",
          "type": "address"
        }
      ],
      "name": "getSharesRequestorProxyForComptrollerProxy",
      "outputs": [
        {
          "internalType": "address",
          "name": "sharesRequestorProxy_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x61c306757a17be4fd42b774281e0cf0dce63c35191ea04d1f5b5c77893fccaa0",
  "receipt": {
    "to": null,
    "from": "0x5DB342FB039C1c85bec5fE89Af6734621f421D84",
    "contractAddress": "0x62cbf359492fDc1F4d851c8854212E706B3E36E2",
    "transactionIndex": 219,
    "gasUsed": "588626",
    "logsBloom": "0x
    "blockHash": "0x2221fd52e22bb24a944c203aee287a998542296f0b1b9d61e9dac26a7b84233c",
    "transactionHash": "0x61c306757a17be4fd42b774281e0cf0dce63c35191ea04d1f5b5c77893fccaa0",
    "logs": [],
    "blockNumber": 13360119,
    "cumulativeGasUsed": "24631999",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9BD80A5f7C927d6E5086eC08a3866c7C40079F8B",
    "0xb580e8a1cD79046858db7808a0D1d1acfb4C234c"
  ],
  "solcInputHash": "d9ca3c6c6b3274b287f1d69a6e9ab10d",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dispatcher\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_authUserExecutedSharesRequestorLib\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"comptrollerProxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sharesRequestorProxy\",\"type\":\"address\"}],\"name\":\"SharesRequestorProxyDeployed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_comptrollerProxy\",\"type\":\"address\"}],\"name\":\"deploySharesRequestorProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"sharesRequestorProxy_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuthUserExecutedSharesRequestorLib\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"authUserExecutedSharesRequestorLib_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDispatcher\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"dispatcher_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_comptrollerProxy\",\"type\":\"address\"}],\"name\":\"getSharesRequestorProxyForComptrollerProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"sharesRequestorProxy_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Enzyme Council <security@enzyme.finance>\",\"kind\":\"dev\",\"methods\":{\"deploySharesRequestorProxy(address)\":{\"params\":{\"_comptrollerProxy\":\"The ComptrollerProxy for which to deploy the shares requestor proxy\"},\"returns\":{\"sharesRequestorProxy_\":\"The address of the newly-deployed shares requestor proxy\"}},\"getAuthUserExecutedSharesRequestorLib()\":{\"returns\":{\"authUserExecutedSharesRequestorLib_\":\"The `AUTH_USER_EXECUTED_SHARES_REQUESTOR_LIB` variable value\"}},\"getDispatcher()\":{\"returns\":{\"dispatcher_\":\"The `DISPATCHER` variable value\"}},\"getSharesRequestorProxyForComptrollerProxy(address)\":{\"params\":{\"_comptrollerProxy\":\"The ComptrollerProxy for which to get the associated AuthUserExecutedSharesRequestorProxy\"},\"returns\":{\"sharesRequestorProxy_\":\"The associated AuthUserExecutedSharesRequestorProxy address\"}}},\"title\":\"AuthUserExecutedSharesRequestorFactory Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deploySharesRequestorProxy(address)\":{\"notice\":\"Deploys a shares requestor proxy instance for a given ComptrollerProxy instance\"},\"getAuthUserExecutedSharesRequestorLib()\":{\"notice\":\"Gets the value of the `AUTH_USER_EXECUTED_SHARES_REQUESTOR_LIB` variable\"},\"getDispatcher()\":{\"notice\":\"Gets the value of the `DISPATCHER` variable\"},\"getSharesRequestorProxyForComptrollerProxy(address)\":{\"notice\":\"Gets the AuthUserExecutedSharesRequestorProxy associated with the given ComptrollerProxy\"}},\"notice\":\"Deploys and maintains a record of AuthUserExecutedSharesRequestorProxy instances\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/release/peripheral/shares-requestors/AuthUserExecutedSharesRequestorFactory.sol\":\"AuthUserExecutedSharesRequestorFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/persistent/dispatcher/IDispatcher.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title IDispatcher Interface\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\ninterface IDispatcher {\\r\\n    function cancelMigration(address _vaultProxy, bool _bypassFailure) external;\\r\\n\\r\\n    function claimOwnership() external;\\r\\n\\r\\n    function deployVaultProxy(\\r\\n        address _vaultLib,\\r\\n        address _owner,\\r\\n        address _vaultAccessor,\\r\\n        string calldata _fundName\\r\\n    ) external returns (address vaultProxy_);\\r\\n\\r\\n    function executeMigration(address _vaultProxy, bool _bypassFailure) external;\\r\\n\\r\\n    function getCurrentFundDeployer() external view returns (address currentFundDeployer_);\\r\\n\\r\\n    function getFundDeployerForVaultProxy(address _vaultProxy)\\r\\n        external\\r\\n        view\\r\\n        returns (address fundDeployer_);\\r\\n\\r\\n    function getMigrationRequestDetailsForVaultProxy(address _vaultProxy)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            address nextFundDeployer_,\\r\\n            address nextVaultAccessor_,\\r\\n            address nextVaultLib_,\\r\\n            uint256 executableTimestamp_\\r\\n        );\\r\\n\\r\\n    function getMigrationTimelock() external view returns (uint256 migrationTimelock_);\\r\\n\\r\\n    function getNominatedOwner() external view returns (address nominatedOwner_);\\r\\n\\r\\n    function getOwner() external view returns (address owner_);\\r\\n\\r\\n    function getSharesTokenSymbol() external view returns (string memory sharesTokenSymbol_);\\r\\n\\r\\n    function getTimelockRemainingForMigrationRequest(address _vaultProxy)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 secondsRemaining_);\\r\\n\\r\\n    function hasExecutableMigrationRequest(address _vaultProxy)\\r\\n        external\\r\\n        view\\r\\n        returns (bool hasExecutableRequest_);\\r\\n\\r\\n    function hasMigrationRequest(address _vaultProxy)\\r\\n        external\\r\\n        view\\r\\n        returns (bool hasMigrationRequest_);\\r\\n\\r\\n    function removeNominatedOwner() external;\\r\\n\\r\\n    function setCurrentFundDeployer(address _nextFundDeployer) external;\\r\\n\\r\\n    function setMigrationTimelock(uint256 _nextTimelock) external;\\r\\n\\r\\n    function setNominatedOwner(address _nextNominatedOwner) external;\\r\\n\\r\\n    function setSharesTokenSymbol(string calldata _nextSymbol) external;\\r\\n\\r\\n    function signalMigration(\\r\\n        address _vaultProxy,\\r\\n        address _nextVaultAccessor,\\r\\n        address _nextVaultLib,\\r\\n        bool _bypassFailure\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x9485f21d0ea8923cb76981b13eeb5aca0d0b44b209c352038d09ca99780df438\",\"license\":\"GPL-3.0\"},\"contracts/persistent/utils/IMigratableVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title IMigratableVault Interface\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\n/// @dev DO NOT EDIT CONTRACT\\r\\ninterface IMigratableVault {\\r\\n    function canMigrate(address _who) external view returns (bool canMigrate_);\\r\\n\\r\\n    function init(\\r\\n        address _owner,\\r\\n        address _accessor,\\r\\n        string calldata _fundName\\r\\n    ) external;\\r\\n\\r\\n    function setAccessor(address _nextAccessor) external;\\r\\n\\r\\n    function setVaultLib(address _nextVaultLib) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xe57f17e0b9eaaf0090fb0f9039e0dc60d184a05b1a6b02491787c506b7a4a9db\",\"license\":\"GPL-3.0\"},\"contracts/persistent/vault/VaultLibBase1.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"./VaultLibBaseCore.sol\\\";\\r\\n\\r\\n/// @title VaultLibBase1 Contract\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\n/// @notice The first implementation of VaultLibBaseCore, with additional events and storage\\r\\n/// @dev All subsequent implementations should inherit the previous implementation,\\r\\n/// e.g., `VaultLibBase2 is VaultLibBase1`\\r\\n/// DO NOT EDIT CONTRACT.\\r\\nabstract contract VaultLibBase1 is VaultLibBaseCore {\\r\\n    event AssetWithdrawn(address indexed asset, address indexed target, uint256 amount);\\r\\n\\r\\n    event TrackedAssetAdded(address asset);\\r\\n\\r\\n    event TrackedAssetRemoved(address asset);\\r\\n\\r\\n    address[] internal trackedAssets;\\r\\n    mapping(address => bool) internal assetToIsTracked;\\r\\n}\\r\\n\",\"keccak256\":\"0xbb9e83c8427fb207c0cb2899fc80767be62f0a76c87dd383f465c15f7e0c4693\",\"license\":\"GPL-3.0\"},\"contracts/persistent/vault/VaultLibBaseCore.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"../utils/IMigratableVault.sol\\\";\\r\\nimport \\\"./utils/ProxiableVaultLib.sol\\\";\\r\\nimport \\\"./utils/SharesTokenBase.sol\\\";\\r\\n\\r\\n/// @title VaultLibBaseCore Contract\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\n/// @notice A persistent contract containing all required storage variables and\\r\\n/// required functions for a VaultLib implementation\\r\\n/// @dev DO NOT EDIT CONTRACT. If new events or storage are necessary, they should be added to\\r\\n/// a numbered VaultLibBaseXXX that inherits the previous base. See VaultLibBase1.\\r\\nabstract contract VaultLibBaseCore is IMigratableVault, ProxiableVaultLib, SharesTokenBase {\\r\\n    event AccessorSet(address prevAccessor, address nextAccessor);\\r\\n\\r\\n    event MigratorSet(address prevMigrator, address nextMigrator);\\r\\n\\r\\n    event OwnerSet(address prevOwner, address nextOwner);\\r\\n\\r\\n    event VaultLibSet(address prevVaultLib, address nextVaultLib);\\r\\n\\r\\n    address internal accessor;\\r\\n    address internal creator;\\r\\n    address internal migrator;\\r\\n    address internal owner;\\r\\n\\r\\n    // EXTERNAL FUNCTIONS\\r\\n\\r\\n    /// @notice Initializes the VaultProxy with core configuration\\r\\n    /// @param _owner The address to set as the fund owner\\r\\n    /// @param _accessor The address to set as the permissioned accessor of the VaultLib\\r\\n    /// @param _fundName The name of the fund\\r\\n    /// @dev Serves as a per-proxy pseudo-constructor\\r\\n    function init(\\r\\n        address _owner,\\r\\n        address _accessor,\\r\\n        string calldata _fundName\\r\\n    ) external override {\\r\\n        require(creator == address(0), \\\"init: Proxy already initialized\\\");\\r\\n        creator = msg.sender;\\r\\n        sharesName = _fundName;\\r\\n\\r\\n        __setAccessor(_accessor);\\r\\n        __setOwner(_owner);\\r\\n\\r\\n        emit VaultLibSet(address(0), getVaultLib());\\r\\n    }\\r\\n\\r\\n    /// @notice Sets the permissioned accessor of the VaultLib\\r\\n    /// @param _nextAccessor The address to set as the permissioned accessor of the VaultLib\\r\\n    function setAccessor(address _nextAccessor) external override {\\r\\n        require(msg.sender == creator, \\\"setAccessor: Only callable by the contract creator\\\");\\r\\n\\r\\n        __setAccessor(_nextAccessor);\\r\\n    }\\r\\n\\r\\n    /// @notice Sets the VaultLib target for the VaultProxy\\r\\n    /// @param _nextVaultLib The address to set as the VaultLib\\r\\n    /// @dev This function is absolutely critical. __updateCodeAddress() validates that the\\r\\n    /// target is a valid Proxiable contract instance.\\r\\n    /// Does not block _nextVaultLib from being the same as the current VaultLib\\r\\n    function setVaultLib(address _nextVaultLib) external override {\\r\\n        require(msg.sender == creator, \\\"setVaultLib: Only callable by the contract creator\\\");\\r\\n\\r\\n        address prevVaultLib = getVaultLib();\\r\\n\\r\\n        __updateCodeAddress(_nextVaultLib);\\r\\n\\r\\n        emit VaultLibSet(prevVaultLib, _nextVaultLib);\\r\\n    }\\r\\n\\r\\n    // PUBLIC FUNCTIONS\\r\\n\\r\\n    /// @notice Checks whether an account is allowed to migrate the VaultProxy\\r\\n    /// @param _who The account to check\\r\\n    /// @return canMigrate_ True if the account is allowed to migrate the VaultProxy\\r\\n    function canMigrate(address _who) public view virtual override returns (bool canMigrate_) {\\r\\n        return _who == owner || _who == migrator;\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the VaultLib target for the VaultProxy\\r\\n    /// @return vaultLib_ The address of the VaultLib target\\r\\n    function getVaultLib() public view returns (address vaultLib_) {\\r\\n        assembly {\\r\\n            // solium-disable-line\\r\\n            vaultLib_ := sload(0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc)\\r\\n        }\\r\\n        return vaultLib_;\\r\\n    }\\r\\n\\r\\n    // INTERNAL FUNCTIONS\\r\\n\\r\\n    /// @dev Helper to set the permissioned accessor of the VaultProxy.\\r\\n    /// Does not prevent the prevAccessor from being the _nextAccessor.\\r\\n    function __setAccessor(address _nextAccessor) internal {\\r\\n        require(_nextAccessor != address(0), \\\"__setAccessor: _nextAccessor cannot be empty\\\");\\r\\n        address prevAccessor = accessor;\\r\\n\\r\\n        accessor = _nextAccessor;\\r\\n\\r\\n        emit AccessorSet(prevAccessor, _nextAccessor);\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to set the owner of the VaultProxy\\r\\n    function __setOwner(address _nextOwner) internal {\\r\\n        require(_nextOwner != address(0), \\\"__setOwner: _nextOwner cannot be empty\\\");\\r\\n        address prevOwner = owner;\\r\\n        require(_nextOwner != prevOwner, \\\"__setOwner: _nextOwner is the current owner\\\");\\r\\n\\r\\n        owner = _nextOwner;\\r\\n\\r\\n        emit OwnerSet(prevOwner, _nextOwner);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x206486607b270a1a45fda093d0f7c92a7b371780a58b54fe1c84263864c59d24\",\"license\":\"GPL-3.0\"},\"contracts/persistent/vault/utils/ProxiableVaultLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title ProxiableVaultLib Contract\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\n/// @notice A contract that defines the upgrade behavior for VaultLib instances\\r\\n/// @dev The recommended implementation of the target of a proxy according to EIP-1822 and EIP-1967\\r\\n/// Code position in storage is `bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1)`,\\r\\n/// which is \\\"0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc\\\".\\r\\nabstract contract ProxiableVaultLib {\\r\\n    /// @dev Updates the target of the proxy to be the contract at _nextVaultLib\\r\\n    function __updateCodeAddress(address _nextVaultLib) internal {\\r\\n        require(\\r\\n            bytes32(0x027b9570e9fedc1a80b937ae9a06861e5faef3992491af30b684a64b3fbec7a5) ==\\r\\n                ProxiableVaultLib(_nextVaultLib).proxiableUUID(),\\r\\n            \\\"__updateCodeAddress: _nextVaultLib not compatible\\\"\\r\\n        );\\r\\n        assembly {\\r\\n            // solium-disable-line\\r\\n            sstore(\\r\\n                0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc,\\r\\n                _nextVaultLib\\r\\n            )\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Returns a unique bytes32 hash for VaultLib instances\\r\\n    /// @return uuid_ The bytes32 hash representing the UUID\\r\\n    /// @dev The UUID is `bytes32(keccak256('mln.proxiable.vaultlib'))`\\r\\n    function proxiableUUID() public pure returns (bytes32 uuid_) {\\r\\n        return 0x027b9570e9fedc1a80b937ae9a06861e5faef3992491af30b684a64b3fbec7a5;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x6ec3a808ec9b166760fbf0f17bfff252eef0a540ed61aff631bf1dcaecee57c8\",\"license\":\"GPL-3.0\"},\"contracts/persistent/vault/utils/SharesTokenBase.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"./VaultLibSafeMath.sol\\\";\\r\\n\\r\\n/// @title StandardERC20 Contract\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\n/// @notice Contains the storage, events, and default logic of an ERC20-compliant contract.\\r\\n/// @dev The logic can be overridden by VaultLib implementations.\\r\\n/// Adapted from OpenZeppelin 3.2.0.\\r\\n/// DO NOT EDIT THIS CONTRACT.\\r\\nabstract contract SharesTokenBase {\\r\\n    using VaultLibSafeMath for uint256;\\r\\n\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    string internal sharesName;\\r\\n    string internal sharesSymbol;\\r\\n    uint256 internal sharesTotalSupply;\\r\\n    mapping(address => uint256) internal sharesBalances;\\r\\n    mapping(address => mapping(address => uint256)) internal sharesAllowances;\\r\\n\\r\\n    // EXTERNAL FUNCTIONS\\r\\n\\r\\n    /// @dev Standard implementation of ERC20's approve(). Can be overridden.\\r\\n    function approve(address _spender, uint256 _amount) public virtual returns (bool) {\\r\\n        __approve(msg.sender, _spender, _amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /// @dev Standard implementation of ERC20's transfer(). Can be overridden.\\r\\n    function transfer(address _recipient, uint256 _amount) public virtual returns (bool) {\\r\\n        __transfer(msg.sender, _recipient, _amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /// @dev Standard implementation of ERC20's transferFrom(). Can be overridden.\\r\\n    function transferFrom(\\r\\n        address _sender,\\r\\n        address _recipient,\\r\\n        uint256 _amount\\r\\n    ) public virtual returns (bool) {\\r\\n        __transfer(_sender, _recipient, _amount);\\r\\n        __approve(\\r\\n            _sender,\\r\\n            msg.sender,\\r\\n            sharesAllowances[_sender][msg.sender].sub(\\r\\n                _amount,\\r\\n                \\\"ERC20: transfer amount exceeds allowance\\\"\\r\\n            )\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    // EXTERNAL FUNCTIONS - VIEW\\r\\n\\r\\n    /// @dev Standard implementation of ERC20's allowance(). Can be overridden.\\r\\n    function allowance(address _owner, address _spender) public view virtual returns (uint256) {\\r\\n        return sharesAllowances[_owner][_spender];\\r\\n    }\\r\\n\\r\\n    /// @dev Standard implementation of ERC20's balanceOf(). Can be overridden.\\r\\n    function balanceOf(address _account) public view virtual returns (uint256) {\\r\\n        return sharesBalances[_account];\\r\\n    }\\r\\n\\r\\n    /// @dev Standard implementation of ERC20's decimals(). Can not be overridden.\\r\\n    function decimals() public pure returns (uint8) {\\r\\n        return 18;\\r\\n    }\\r\\n\\r\\n    /// @dev Standard implementation of ERC20's name(). Can be overridden.\\r\\n    function name() public view virtual returns (string memory) {\\r\\n        return sharesName;\\r\\n    }\\r\\n\\r\\n    /// @dev Standard implementation of ERC20's symbol(). Can be overridden.\\r\\n    function symbol() public view virtual returns (string memory) {\\r\\n        return sharesSymbol;\\r\\n    }\\r\\n\\r\\n    /// @dev Standard implementation of ERC20's totalSupply(). Can be overridden.\\r\\n    function totalSupply() public view virtual returns (uint256) {\\r\\n        return sharesTotalSupply;\\r\\n    }\\r\\n\\r\\n    // INTERNAL FUNCTIONS\\r\\n\\r\\n    /// @dev Helper for approve(). Can be overridden.\\r\\n    function __approve(\\r\\n        address _owner,\\r\\n        address _spender,\\r\\n        uint256 _amount\\r\\n    ) internal virtual {\\r\\n        require(_owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(_spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        sharesAllowances[_owner][_spender] = _amount;\\r\\n        emit Approval(_owner, _spender, _amount);\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to burn tokens from an account. Can be overridden.\\r\\n    function __burn(address _account, uint256 _amount) internal virtual {\\r\\n        require(_account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n        sharesBalances[_account] = sharesBalances[_account].sub(\\r\\n            _amount,\\r\\n            \\\"ERC20: burn amount exceeds balance\\\"\\r\\n        );\\r\\n        sharesTotalSupply = sharesTotalSupply.sub(_amount);\\r\\n        emit Transfer(_account, address(0), _amount);\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to mint tokens to an account. Can be overridden.\\r\\n    function __mint(address _account, uint256 _amount) internal virtual {\\r\\n        require(_account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n        sharesTotalSupply = sharesTotalSupply.add(_amount);\\r\\n        sharesBalances[_account] = sharesBalances[_account].add(_amount);\\r\\n        emit Transfer(address(0), _account, _amount);\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to transfer tokens between accounts. Can be overridden.\\r\\n    function __transfer(\\r\\n        address _sender,\\r\\n        address _recipient,\\r\\n        uint256 _amount\\r\\n    ) internal virtual {\\r\\n        require(_sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(_recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        sharesBalances[_sender] = sharesBalances[_sender].sub(\\r\\n            _amount,\\r\\n            \\\"ERC20: transfer amount exceeds balance\\\"\\r\\n        );\\r\\n        sharesBalances[_recipient] = sharesBalances[_recipient].add(_amount);\\r\\n        emit Transfer(_sender, _recipient, _amount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x1cb3f134df44efec1207191009ab521496e0346634720d114b7b0f49e46c0965\",\"license\":\"GPL-3.0\"},\"contracts/persistent/vault/utils/VaultLibSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title VaultLibSafeMath library\\r\\n/// @notice A narrowed, verbatim implementation of OpenZeppelin 3.2.0 SafeMath\\r\\n/// for use with VaultLib\\r\\n/// @dev Preferred to importing from npm to guarantee consistent logic and revert reasons\\r\\n/// between VaultLib implementations\\r\\n/// DO NOT EDIT THIS CONTRACT\\r\\nlibrary VaultLibSafeMath {\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"VaultLibSafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"VaultLibSafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b <= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"VaultLibSafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"VaultLibSafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b > 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"VaultLibSafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x70596b88aab394afcda5ff7c6e539dbd8d72e1740ef324bd9dcf7d9e217810d1\",\"license\":\"GPL-3.0\"},\"contracts/release/core/fund-deployer/IFundDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title IFundDeployer Interface\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\ninterface IFundDeployer {\\r\\n    enum ReleaseStatus {PreLaunch, Live, Paused}\\r\\n\\r\\n    function getOwner() external view returns (address);\\r\\n\\r\\n    function getReleaseStatus() external view returns (ReleaseStatus);\\r\\n\\r\\n    function isRegisteredVaultCall(address, bytes4) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x3c8c95a5d0e03da6a5f0278e5fbe40bf4f2d274afc2d52815fefaba847931bf9\",\"license\":\"GPL-3.0\"},\"contracts/release/core/fund/comptroller/ComptrollerLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\nimport \\\"../../../../persistent/dispatcher/IDispatcher.sol\\\";\\r\\nimport \\\"../../../extensions/IExtension.sol\\\";\\r\\nimport \\\"../../../extensions/fee-manager/IFeeManager.sol\\\";\\r\\nimport \\\"../../../extensions/policy-manager/IPolicyManager.sol\\\";\\r\\nimport \\\"../../../infrastructure/price-feeds/primitives/IPrimitivePriceFeed.sol\\\";\\r\\nimport \\\"../../../infrastructure/value-interpreter/IValueInterpreter.sol\\\";\\r\\nimport \\\"../../../utils/AddressArrayLib.sol\\\";\\r\\nimport \\\"../../../utils/AssetFinalityResolver.sol\\\";\\r\\nimport \\\"../../fund-deployer/IFundDeployer.sol\\\";\\r\\nimport \\\"../vault/IVault.sol\\\";\\r\\nimport \\\"./IComptroller.sol\\\";\\r\\n\\r\\n/// @title ComptrollerLib Contract\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\n/// @notice The core logic library shared by all funds\\r\\ncontract ComptrollerLib is IComptroller, AssetFinalityResolver {\\r\\n    using AddressArrayLib for address[];\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for ERC20;\\r\\n\\r\\n    event MigratedSharesDuePaid(uint256 sharesDue);\\r\\n\\r\\n    event OverridePauseSet(bool indexed overridePause);\\r\\n\\r\\n    event PreRedeemSharesHookFailed(\\r\\n        bytes failureReturnData,\\r\\n        address redeemer,\\r\\n        uint256 sharesQuantity\\r\\n    );\\r\\n\\r\\n    event SharesBought(\\r\\n        address indexed caller,\\r\\n        address indexed buyer,\\r\\n        uint256 investmentAmount,\\r\\n        uint256 sharesIssued,\\r\\n        uint256 sharesReceived\\r\\n    );\\r\\n\\r\\n    event SharesRedeemed(\\r\\n        address indexed redeemer,\\r\\n        uint256 sharesQuantity,\\r\\n        address[] receivedAssets,\\r\\n        uint256[] receivedAssetQuantities\\r\\n    );\\r\\n\\r\\n    event VaultProxySet(address vaultProxy);\\r\\n\\r\\n    // Constants and immutables - shared by all proxies\\r\\n    uint256 private constant SHARES_UNIT = 10**18;\\r\\n    address private immutable DISPATCHER;\\r\\n    address private immutable FUND_DEPLOYER;\\r\\n    address private immutable FEE_MANAGER;\\r\\n    address private immutable INTEGRATION_MANAGER;\\r\\n    address private immutable PRIMITIVE_PRICE_FEED;\\r\\n    address private immutable POLICY_MANAGER;\\r\\n    address private immutable VALUE_INTERPRETER;\\r\\n\\r\\n    // Pseudo-constants (can only be set once)\\r\\n\\r\\n    address internal denominationAsset;\\r\\n    address internal vaultProxy;\\r\\n    // True only for the one non-proxy\\r\\n    bool internal isLib;\\r\\n\\r\\n    // Storage\\r\\n\\r\\n    // Allows a fund owner to override a release-level pause\\r\\n    bool internal overridePause;\\r\\n    // A reverse-mutex, granting atomic permission for particular contracts to make vault calls\\r\\n    bool internal permissionedVaultActionAllowed;\\r\\n    // A mutex to protect against reentrancy\\r\\n    bool internal reentranceLocked;\\r\\n    // A timelock between any \\\"shares actions\\\" (i.e., buy and redeem shares), per-account\\r\\n    uint256 internal sharesActionTimelock;\\r\\n    mapping(address => uint256) internal acctToLastSharesAction;\\r\\n\\r\\n    ///////////////\\r\\n    // MODIFIERS //\\r\\n    ///////////////\\r\\n\\r\\n    modifier allowsPermissionedVaultAction() {\\r\\n        __assertPermissionedVaultActionNotAllowed();\\r\\n        permissionedVaultActionAllowed = true;\\r\\n        _;\\r\\n        permissionedVaultActionAllowed = false;\\r\\n    }\\r\\n\\r\\n    modifier locksReentrance() {\\r\\n        __assertNotReentranceLocked();\\r\\n        reentranceLocked = true;\\r\\n        _;\\r\\n        reentranceLocked = false;\\r\\n    }\\r\\n\\r\\n    modifier onlyActive() {\\r\\n        __assertIsActive(vaultProxy);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyNotPaused() {\\r\\n        __assertNotPaused();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyFundDeployer() {\\r\\n        __assertIsFundDeployer(msg.sender);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        __assertIsOwner(msg.sender);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier timelockedSharesAction(address _account) {\\r\\n        __assertSharesActionNotTimelocked(_account);\\r\\n        _;\\r\\n        acctToLastSharesAction[_account] = block.timestamp;\\r\\n    }\\r\\n\\r\\n    // ASSERTION HELPERS\\r\\n\\r\\n    // Modifiers are inefficient in terms of contract size,\\r\\n    // so we use helper functions to prevent repetitive inlining of expensive string values.\\r\\n\\r\\n    /// @dev Since vaultProxy is set during activate(),\\r\\n    /// we can check that var rather than storing additional state\\r\\n    function __assertIsActive(address _vaultProxy) private pure {\\r\\n        require(_vaultProxy != address(0), \\\"Fund not active\\\");\\r\\n    }\\r\\n\\r\\n    function __assertIsFundDeployer(address _who) private view {\\r\\n        require(_who == FUND_DEPLOYER, \\\"Only FundDeployer callable\\\");\\r\\n    }\\r\\n\\r\\n    function __assertIsOwner(address _who) private view {\\r\\n        require(_who == IVault(vaultProxy).getOwner(), \\\"Only fund owner callable\\\");\\r\\n    }\\r\\n\\r\\n    function __assertLowLevelCall(bool _success, bytes memory _returnData) private pure {\\r\\n        require(_success, string(_returnData));\\r\\n    }\\r\\n\\r\\n    function __assertNotPaused() private view {\\r\\n        require(!__fundIsPaused(), \\\"Fund is paused\\\");\\r\\n    }\\r\\n\\r\\n    function __assertNotReentranceLocked() private view {\\r\\n        require(!reentranceLocked, \\\"Re-entrance\\\");\\r\\n    }\\r\\n\\r\\n    function __assertPermissionedVaultActionNotAllowed() private view {\\r\\n        require(!permissionedVaultActionAllowed, \\\"Vault action re-entrance\\\");\\r\\n    }\\r\\n\\r\\n    function __assertSharesActionNotTimelocked(address _account) private view {\\r\\n        require(\\r\\n            block.timestamp.sub(acctToLastSharesAction[_account]) >= sharesActionTimelock,\\r\\n            \\\"Shares action timelocked\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        address _dispatcher,\\r\\n        address _fundDeployer,\\r\\n        address _valueInterpreter,\\r\\n        address _feeManager,\\r\\n        address _integrationManager,\\r\\n        address _policyManager,\\r\\n        address _primitivePriceFeed,\\r\\n        address _synthetixPriceFeed,\\r\\n        address _synthetixAddressResolver\\r\\n    ) public AssetFinalityResolver(_synthetixPriceFeed, _synthetixAddressResolver) {\\r\\n        DISPATCHER = _dispatcher;\\r\\n        FEE_MANAGER = _feeManager;\\r\\n        FUND_DEPLOYER = _fundDeployer;\\r\\n        INTEGRATION_MANAGER = _integrationManager;\\r\\n        PRIMITIVE_PRICE_FEED = _primitivePriceFeed;\\r\\n        POLICY_MANAGER = _policyManager;\\r\\n        VALUE_INTERPRETER = _valueInterpreter;\\r\\n        isLib = true;\\r\\n    }\\r\\n\\r\\n    /////////////\\r\\n    // GENERAL //\\r\\n    /////////////\\r\\n\\r\\n    /// @notice Calls a specified action on an Extension\\r\\n    /// @param _extension The Extension contract to call (e.g., FeeManager)\\r\\n    /// @param _actionId An ID representing the action to take on the extension (see extension)\\r\\n    /// @param _callArgs The encoded data for the call\\r\\n    /// @dev Used to route arbitrary calls, so that msg.sender is the ComptrollerProxy\\r\\n    /// (for access control). Uses a mutex of sorts that allows \\\"permissioned vault actions\\\"\\r\\n    /// during calls originating from this function.\\r\\n    function callOnExtension(\\r\\n        address _extension,\\r\\n        uint256 _actionId,\\r\\n        bytes calldata _callArgs\\r\\n    ) external override onlyNotPaused onlyActive locksReentrance allowsPermissionedVaultAction {\\r\\n        require(\\r\\n            _extension == FEE_MANAGER || _extension == INTEGRATION_MANAGER,\\r\\n            \\\"callOnExtension: _extension invalid\\\"\\r\\n        );\\r\\n\\r\\n        IExtension(_extension).receiveCallFromComptroller(msg.sender, _actionId, _callArgs);\\r\\n    }\\r\\n\\r\\n    /// @notice Sets or unsets an override on a release-wide pause\\r\\n    /// @param _nextOverridePause True if the pause should be overrode\\r\\n    function setOverridePause(bool _nextOverridePause) external onlyOwner {\\r\\n        require(_nextOverridePause != overridePause, \\\"setOverridePause: Value already set\\\");\\r\\n\\r\\n        overridePause = _nextOverridePause;\\r\\n\\r\\n        emit OverridePauseSet(_nextOverridePause);\\r\\n    }\\r\\n\\r\\n    /// @notice Makes an arbitrary call with the VaultProxy contract as the sender\\r\\n    /// @param _contract The contract to call\\r\\n    /// @param _selector The selector to call\\r\\n    /// @param _encodedArgs The encoded arguments for the call\\r\\n    function vaultCallOnContract(\\r\\n        address _contract,\\r\\n        bytes4 _selector,\\r\\n        bytes calldata _encodedArgs\\r\\n    ) external onlyNotPaused onlyActive onlyOwner {\\r\\n        require(\\r\\n            IFundDeployer(FUND_DEPLOYER).isRegisteredVaultCall(_contract, _selector),\\r\\n            \\\"vaultCallOnContract: Unregistered\\\"\\r\\n        );\\r\\n\\r\\n        IVault(vaultProxy).callOnContract(_contract, abi.encodePacked(_selector, _encodedArgs));\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to check whether the release is paused, and that there is no local override\\r\\n    function __fundIsPaused() private view returns (bool) {\\r\\n        return\\r\\n            IFundDeployer(FUND_DEPLOYER).getReleaseStatus() ==\\r\\n            IFundDeployer.ReleaseStatus.Paused &&\\r\\n            !overridePause;\\r\\n    }\\r\\n\\r\\n    ////////////////////////////////\\r\\n    // PERMISSIONED VAULT ACTIONS //\\r\\n    ////////////////////////////////\\r\\n\\r\\n    /// @notice Makes a permissioned, state-changing call on the VaultProxy contract\\r\\n    /// @param _action The enum representing the VaultAction to perform on the VaultProxy\\r\\n    /// @param _actionData The call data for the action to perform\\r\\n    function permissionedVaultAction(VaultAction _action, bytes calldata _actionData)\\r\\n        external\\r\\n        override\\r\\n        onlyNotPaused\\r\\n        onlyActive\\r\\n    {\\r\\n        __assertPermissionedVaultAction(msg.sender, _action);\\r\\n\\r\\n        if (_action == VaultAction.AddTrackedAsset) {\\r\\n            __vaultActionAddTrackedAsset(_actionData);\\r\\n        } else if (_action == VaultAction.ApproveAssetSpender) {\\r\\n            __vaultActionApproveAssetSpender(_actionData);\\r\\n        } else if (_action == VaultAction.BurnShares) {\\r\\n            __vaultActionBurnShares(_actionData);\\r\\n        } else if (_action == VaultAction.MintShares) {\\r\\n            __vaultActionMintShares(_actionData);\\r\\n        } else if (_action == VaultAction.RemoveTrackedAsset) {\\r\\n            __vaultActionRemoveTrackedAsset(_actionData);\\r\\n        } else if (_action == VaultAction.TransferShares) {\\r\\n            __vaultActionTransferShares(_actionData);\\r\\n        } else if (_action == VaultAction.WithdrawAssetTo) {\\r\\n            __vaultActionWithdrawAssetTo(_actionData);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to assert that a caller is allowed to perform a particular VaultAction\\r\\n    function __assertPermissionedVaultAction(address _caller, VaultAction _action) private view {\\r\\n        require(\\r\\n            permissionedVaultActionAllowed,\\r\\n            \\\"__assertPermissionedVaultAction: No action allowed\\\"\\r\\n        );\\r\\n\\r\\n        if (_caller == INTEGRATION_MANAGER) {\\r\\n            require(\\r\\n                _action == VaultAction.ApproveAssetSpender ||\\r\\n                    _action == VaultAction.AddTrackedAsset ||\\r\\n                    _action == VaultAction.RemoveTrackedAsset ||\\r\\n                    _action == VaultAction.WithdrawAssetTo,\\r\\n                \\\"__assertPermissionedVaultAction: Not valid for IntegrationManager\\\"\\r\\n            );\\r\\n        } else if (_caller == FEE_MANAGER) {\\r\\n            require(\\r\\n                _action == VaultAction.BurnShares ||\\r\\n                    _action == VaultAction.MintShares ||\\r\\n                    _action == VaultAction.TransferShares,\\r\\n                \\\"__assertPermissionedVaultAction: Not valid for FeeManager\\\"\\r\\n            );\\r\\n        } else {\\r\\n            revert(\\\"__assertPermissionedVaultAction: Not a valid actor\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to add a tracked asset to the fund\\r\\n    function __vaultActionAddTrackedAsset(bytes memory _actionData) private {\\r\\n        address asset = abi.decode(_actionData, (address));\\r\\n        IVault(vaultProxy).addTrackedAsset(asset);\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to grant a spender an allowance for a fund's asset\\r\\n    function __vaultActionApproveAssetSpender(bytes memory _actionData) private {\\r\\n        (address asset, address target, uint256 amount) = abi.decode(\\r\\n            _actionData,\\r\\n            (address, address, uint256)\\r\\n        );\\r\\n        IVault(vaultProxy).approveAssetSpender(asset, target, amount);\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to burn fund shares for a particular account\\r\\n    function __vaultActionBurnShares(bytes memory _actionData) private {\\r\\n        (address target, uint256 amount) = abi.decode(_actionData, (address, uint256));\\r\\n        IVault(vaultProxy).burnShares(target, amount);\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to mint fund shares to a particular account\\r\\n    function __vaultActionMintShares(bytes memory _actionData) private {\\r\\n        (address target, uint256 amount) = abi.decode(_actionData, (address, uint256));\\r\\n        IVault(vaultProxy).mintShares(target, amount);\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to remove a tracked asset from the fund\\r\\n    function __vaultActionRemoveTrackedAsset(bytes memory _actionData) private {\\r\\n        address asset = abi.decode(_actionData, (address));\\r\\n\\r\\n        // Allowing this to fail silently makes it cheaper and simpler\\r\\n        // for Extensions to not query for the denomination asset\\r\\n        if (asset != denominationAsset) {\\r\\n            IVault(vaultProxy).removeTrackedAsset(asset);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to transfer fund shares from one account to another\\r\\n    function __vaultActionTransferShares(bytes memory _actionData) private {\\r\\n        (address from, address to, uint256 amount) = abi.decode(\\r\\n            _actionData,\\r\\n            (address, address, uint256)\\r\\n        );\\r\\n        IVault(vaultProxy).transferShares(from, to, amount);\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to withdraw an asset from the VaultProxy to a given account\\r\\n    function __vaultActionWithdrawAssetTo(bytes memory _actionData) private {\\r\\n        (address asset, address target, uint256 amount) = abi.decode(\\r\\n            _actionData,\\r\\n            (address, address, uint256)\\r\\n        );\\r\\n        IVault(vaultProxy).withdrawAssetTo(asset, target, amount);\\r\\n    }\\r\\n\\r\\n    ///////////////\\r\\n    // LIFECYCLE //\\r\\n    ///////////////\\r\\n\\r\\n    /// @notice Initializes a fund with its core config\\r\\n    /// @param _denominationAsset The asset in which the fund's value should be denominated\\r\\n    /// @param _sharesActionTimelock The minimum number of seconds between any two \\\"shares actions\\\"\\r\\n    /// (buying or selling shares) by the same user\\r\\n    /// @dev Pseudo-constructor per proxy.\\r\\n    /// No need to assert access because this is called atomically on deployment,\\r\\n    /// and once it's called, it cannot be called again.\\r\\n    function init(address _denominationAsset, uint256 _sharesActionTimelock) external override {\\r\\n        require(denominationAsset == address(0), \\\"init: Already initialized\\\");\\r\\n        require(\\r\\n            IPrimitivePriceFeed(PRIMITIVE_PRICE_FEED).isSupportedAsset(_denominationAsset),\\r\\n            \\\"init: Bad denomination asset\\\"\\r\\n        );\\r\\n\\r\\n        denominationAsset = _denominationAsset;\\r\\n        sharesActionTimelock = _sharesActionTimelock;\\r\\n    }\\r\\n\\r\\n    /// @notice Configure the extensions of a fund\\r\\n    /// @param _feeManagerConfigData Encoded config for fees to enable\\r\\n    /// @param _policyManagerConfigData Encoded config for policies to enable\\r\\n    /// @dev No need to assert anything beyond FundDeployer access.\\r\\n    /// Called atomically with init(), but after ComptrollerLib has been deployed,\\r\\n    /// giving access to its state and interface\\r\\n    function configureExtensions(\\r\\n        bytes calldata _feeManagerConfigData,\\r\\n        bytes calldata _policyManagerConfigData\\r\\n    ) external override onlyFundDeployer {\\r\\n        if (_feeManagerConfigData.length > 0) {\\r\\n            IExtension(FEE_MANAGER).setConfigForFund(_feeManagerConfigData);\\r\\n        }\\r\\n        if (_policyManagerConfigData.length > 0) {\\r\\n            IExtension(POLICY_MANAGER).setConfigForFund(_policyManagerConfigData);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Activates the fund by attaching a VaultProxy and activating all Extensions\\r\\n    /// @param _vaultProxy The VaultProxy to attach to the fund\\r\\n    /// @param _isMigration True if a migrated fund is being activated\\r\\n    /// @dev No need to assert anything beyond FundDeployer access.\\r\\n    function activate(address _vaultProxy, bool _isMigration) external override onlyFundDeployer {\\r\\n        vaultProxy = _vaultProxy;\\r\\n\\r\\n        emit VaultProxySet(_vaultProxy);\\r\\n\\r\\n        if (_isMigration) {\\r\\n            // Distribute any shares in the VaultProxy to the fund owner.\\r\\n            // This is a mechanism to ensure that even in the edge case of a fund being unable\\r\\n            // to payout fee shares owed during migration, these shares are not lost.\\r\\n            uint256 sharesDue = ERC20(_vaultProxy).balanceOf(_vaultProxy);\\r\\n            if (sharesDue > 0) {\\r\\n                IVault(_vaultProxy).transferShares(\\r\\n                    _vaultProxy,\\r\\n                    IVault(_vaultProxy).getOwner(),\\r\\n                    sharesDue\\r\\n                );\\r\\n\\r\\n                emit MigratedSharesDuePaid(sharesDue);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Note: a future release could consider forcing the adding of a tracked asset here,\\r\\n        // just in case a fund is migrating from an old configuration where they are not able\\r\\n        // to remove an asset to get under the tracked assets limit\\r\\n        IVault(_vaultProxy).addTrackedAsset(denominationAsset);\\r\\n\\r\\n        // Activate extensions\\r\\n        IExtension(FEE_MANAGER).activateForFund(_isMigration);\\r\\n        IExtension(INTEGRATION_MANAGER).activateForFund(_isMigration);\\r\\n        IExtension(POLICY_MANAGER).activateForFund(_isMigration);\\r\\n    }\\r\\n\\r\\n    /// @notice Remove the config for a fund\\r\\n    /// @dev No need to assert anything beyond FundDeployer access.\\r\\n    /// Calling onlyNotPaused here rather than in the FundDeployer allows\\r\\n    /// the owner to potentially override the pause and rescue unpaid fees.\\r\\n    function destruct()\\r\\n        external\\r\\n        override\\r\\n        onlyFundDeployer\\r\\n        onlyNotPaused\\r\\n        allowsPermissionedVaultAction\\r\\n    {\\r\\n        // Failsafe to protect the libs against selfdestruct\\r\\n        require(!isLib, \\\"destruct: Only delegate callable\\\");\\r\\n\\r\\n        // Deactivate the extensions\\r\\n        IExtension(FEE_MANAGER).deactivateForFund();\\r\\n        IExtension(INTEGRATION_MANAGER).deactivateForFund();\\r\\n        IExtension(POLICY_MANAGER).deactivateForFund();\\r\\n\\r\\n        // Delete storage of ComptrollerProxy\\r\\n        // There should never be ETH in the ComptrollerLib, so no need to waste gas\\r\\n        // to get the fund owner\\r\\n        selfdestruct(address(0));\\r\\n    }\\r\\n\\r\\n    ////////////////\\r\\n    // ACCOUNTING //\\r\\n    ////////////////\\r\\n\\r\\n    /// @notice Calculates the gross asset value (GAV) of the fund\\r\\n    /// @param _requireFinality True if all assets must have exact final balances settled\\r\\n    /// @return gav_ The fund GAV\\r\\n    /// @return isValid_ True if the conversion rates used to derive the GAV are all valid\\r\\n    function calcGav(bool _requireFinality) public override returns (uint256 gav_, bool isValid_) {\\r\\n        address vaultProxyAddress = vaultProxy;\\r\\n        address[] memory assets = IVault(vaultProxyAddress).getTrackedAssets();\\r\\n        if (assets.length == 0) {\\r\\n            return (0, true);\\r\\n        }\\r\\n\\r\\n        uint256[] memory balances = new uint256[](assets.length);\\r\\n        for (uint256 i; i < assets.length; i++) {\\r\\n            balances[i] = __finalizeIfSynthAndGetAssetBalance(\\r\\n                vaultProxyAddress,\\r\\n                assets[i],\\r\\n                _requireFinality\\r\\n            );\\r\\n        }\\r\\n\\r\\n        (gav_, isValid_) = IValueInterpreter(VALUE_INTERPRETER).calcCanonicalAssetsTotalValue(\\r\\n            assets,\\r\\n            balances,\\r\\n            denominationAsset\\r\\n        );\\r\\n\\r\\n        return (gav_, isValid_);\\r\\n    }\\r\\n\\r\\n    /// @notice Calculates the gross value of 1 unit of shares in the fund's denomination asset\\r\\n    /// @param _requireFinality True if all assets must have exact final balances settled\\r\\n    /// @return grossShareValue_ The amount of the denomination asset per share\\r\\n    /// @return isValid_ True if the conversion rates to derive the value are all valid\\r\\n    /// @dev Does not account for any fees outstanding.\\r\\n    function calcGrossShareValue(bool _requireFinality)\\r\\n        external\\r\\n        override\\r\\n        returns (uint256 grossShareValue_, bool isValid_)\\r\\n    {\\r\\n        uint256 gav;\\r\\n        (gav, isValid_) = calcGav(_requireFinality);\\r\\n\\r\\n        grossShareValue_ = __calcGrossShareValue(\\r\\n            gav,\\r\\n            ERC20(vaultProxy).totalSupply(),\\r\\n            10**uint256(ERC20(denominationAsset).decimals())\\r\\n        );\\r\\n\\r\\n        return (grossShareValue_, isValid_);\\r\\n    }\\r\\n\\r\\n    /// @dev Helper for calculating the gross share value\\r\\n    function __calcGrossShareValue(\\r\\n        uint256 _gav,\\r\\n        uint256 _sharesSupply,\\r\\n        uint256 _denominationAssetUnit\\r\\n    ) private pure returns (uint256 grossShareValue_) {\\r\\n        if (_sharesSupply == 0) {\\r\\n            return _denominationAssetUnit;\\r\\n        }\\r\\n\\r\\n        return _gav.mul(SHARES_UNIT).div(_sharesSupply);\\r\\n    }\\r\\n\\r\\n    ///////////////////\\r\\n    // PARTICIPATION //\\r\\n    ///////////////////\\r\\n\\r\\n    // BUY SHARES\\r\\n\\r\\n    /// @notice Buys shares in the fund for multiple sets of criteria\\r\\n    /// @param _buyers The accounts for which to buy shares\\r\\n    /// @param _investmentAmounts The amounts of the fund's denomination asset\\r\\n    /// with which to buy shares for the corresponding _buyers\\r\\n    /// @param _minSharesQuantities The minimum quantities of shares to buy\\r\\n    /// with the corresponding _investmentAmounts\\r\\n    /// @return sharesReceivedAmounts_ The actual amounts of shares received\\r\\n    /// by the corresponding _buyers\\r\\n    /// @dev Param arrays have indexes corresponding to individual __buyShares() orders.\\r\\n    function buyShares(\\r\\n        address[] calldata _buyers,\\r\\n        uint256[] calldata _investmentAmounts,\\r\\n        uint256[] calldata _minSharesQuantities\\r\\n    )\\r\\n        external\\r\\n        onlyNotPaused\\r\\n        locksReentrance\\r\\n        allowsPermissionedVaultAction\\r\\n        returns (uint256[] memory sharesReceivedAmounts_)\\r\\n    {\\r\\n        require(_buyers.length > 0, \\\"buyShares: Empty _buyers\\\");\\r\\n        require(\\r\\n            _buyers.length == _investmentAmounts.length &&\\r\\n                _buyers.length == _minSharesQuantities.length,\\r\\n            \\\"buyShares: Unequal arrays\\\"\\r\\n        );\\r\\n\\r\\n        address vaultProxyCopy = vaultProxy;\\r\\n        __assertIsActive(vaultProxyCopy);\\r\\n        require(\\r\\n            !IDispatcher(DISPATCHER).hasMigrationRequest(vaultProxyCopy),\\r\\n            \\\"buyShares: Pending migration\\\"\\r\\n        );\\r\\n\\r\\n        (uint256 gav, bool gavIsValid) = calcGav(true);\\r\\n        require(gavIsValid, \\\"buyShares: Invalid GAV\\\");\\r\\n\\r\\n        __buySharesSetupHook(msg.sender, _investmentAmounts, gav);\\r\\n\\r\\n        address denominationAssetCopy = denominationAsset;\\r\\n        uint256 sharePrice = __calcGrossShareValue(\\r\\n            gav,\\r\\n            ERC20(vaultProxyCopy).totalSupply(),\\r\\n            10**uint256(ERC20(denominationAssetCopy).decimals())\\r\\n        );\\r\\n\\r\\n        sharesReceivedAmounts_ = new uint256[](_buyers.length);\\r\\n        for (uint256 i; i < _buyers.length; i++) {\\r\\n            sharesReceivedAmounts_[i] = __buyShares(\\r\\n                _buyers[i],\\r\\n                _investmentAmounts[i],\\r\\n                _minSharesQuantities[i],\\r\\n                vaultProxyCopy,\\r\\n                sharePrice,\\r\\n                gav,\\r\\n                denominationAssetCopy\\r\\n            );\\r\\n\\r\\n            gav = gav.add(_investmentAmounts[i]);\\r\\n        }\\r\\n\\r\\n        __buySharesCompletedHook(msg.sender, sharesReceivedAmounts_, gav);\\r\\n\\r\\n        return sharesReceivedAmounts_;\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to buy shares\\r\\n    function __buyShares(\\r\\n        address _buyer,\\r\\n        uint256 _investmentAmount,\\r\\n        uint256 _minSharesQuantity,\\r\\n        address _vaultProxy,\\r\\n        uint256 _sharePrice,\\r\\n        uint256 _preBuySharesGav,\\r\\n        address _denominationAsset\\r\\n    ) private timelockedSharesAction(_buyer) returns (uint256 sharesReceived_) {\\r\\n        require(_investmentAmount > 0, \\\"__buyShares: Empty _investmentAmount\\\");\\r\\n\\r\\n        // Gives Extensions a chance to run logic prior to the minting of bought shares\\r\\n        __preBuySharesHook(_buyer, _investmentAmount, _minSharesQuantity, _preBuySharesGav);\\r\\n\\r\\n        // Calculate the amount of shares to issue with the investment amount\\r\\n        uint256 sharesIssued = _investmentAmount.mul(SHARES_UNIT).div(_sharePrice);\\r\\n\\r\\n        // Mint shares to the buyer\\r\\n        uint256 prevBuyerShares = ERC20(_vaultProxy).balanceOf(_buyer);\\r\\n        IVault(_vaultProxy).mintShares(_buyer, sharesIssued);\\r\\n\\r\\n        // Transfer the investment asset to the fund.\\r\\n        // Does not follow the checks-effects-interactions pattern, but it is preferred\\r\\n        // to have the final state of the VaultProxy prior to running __postBuySharesHook().\\r\\n        ERC20(_denominationAsset).safeTransferFrom(msg.sender, _vaultProxy, _investmentAmount);\\r\\n\\r\\n        // Gives Extensions a chance to run logic after shares are issued\\r\\n        __postBuySharesHook(_buyer, _investmentAmount, sharesIssued, _preBuySharesGav);\\r\\n\\r\\n        // The number of actual shares received may differ from shares issued due to\\r\\n        // how the PostBuyShares hooks are invoked by Extensions (i.e., fees)\\r\\n        sharesReceived_ = ERC20(_vaultProxy).balanceOf(_buyer).sub(prevBuyerShares);\\r\\n        require(\\r\\n            sharesReceived_ >= _minSharesQuantity,\\r\\n            \\\"__buyShares: Shares received < _minSharesQuantity\\\"\\r\\n        );\\r\\n\\r\\n        emit SharesBought(msg.sender, _buyer, _investmentAmount, sharesIssued, sharesReceived_);\\r\\n\\r\\n        return sharesReceived_;\\r\\n    }\\r\\n\\r\\n    /// @dev Helper for Extension actions after all __buyShares() calls are made\\r\\n    function __buySharesCompletedHook(\\r\\n        address _caller,\\r\\n        uint256[] memory _sharesReceivedAmounts,\\r\\n        uint256 _gav\\r\\n    ) private {\\r\\n        IPolicyManager(POLICY_MANAGER).validatePolicies(\\r\\n            address(this),\\r\\n            IPolicyManager.PolicyHook.BuySharesCompleted,\\r\\n            abi.encode(_caller, _sharesReceivedAmounts, _gav)\\r\\n        );\\r\\n\\r\\n        IFeeManager(FEE_MANAGER).invokeHook(\\r\\n            IFeeManager.FeeHook.BuySharesCompleted,\\r\\n            abi.encode(_caller, _sharesReceivedAmounts),\\r\\n            _gav\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @dev Helper for Extension actions before any __buyShares() calls are made\\r\\n    function __buySharesSetupHook(\\r\\n        address _caller,\\r\\n        uint256[] memory _investmentAmounts,\\r\\n        uint256 _gav\\r\\n    ) private {\\r\\n        IPolicyManager(POLICY_MANAGER).validatePolicies(\\r\\n            address(this),\\r\\n            IPolicyManager.PolicyHook.BuySharesSetup,\\r\\n            abi.encode(_caller, _investmentAmounts, _gav)\\r\\n        );\\r\\n\\r\\n        IFeeManager(FEE_MANAGER).invokeHook(\\r\\n            IFeeManager.FeeHook.BuySharesSetup,\\r\\n            abi.encode(_caller, _investmentAmounts),\\r\\n            _gav\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @dev Helper for Extension actions immediately prior to issuing shares.\\r\\n    /// This could be cleaned up so both Extensions take the same encoded args and handle GAV\\r\\n    /// in the same way, but there is not the obvious need for gas savings of recycling\\r\\n    /// the GAV value for the current policies as there is for the fees.\\r\\n    function __preBuySharesHook(\\r\\n        address _buyer,\\r\\n        uint256 _investmentAmount,\\r\\n        uint256 _minSharesQuantity,\\r\\n        uint256 _gav\\r\\n    ) private {\\r\\n        IFeeManager(FEE_MANAGER).invokeHook(\\r\\n            IFeeManager.FeeHook.PreBuyShares,\\r\\n            abi.encode(_buyer, _investmentAmount, _minSharesQuantity),\\r\\n            _gav\\r\\n        );\\r\\n\\r\\n        IPolicyManager(POLICY_MANAGER).validatePolicies(\\r\\n            address(this),\\r\\n            IPolicyManager.PolicyHook.PreBuyShares,\\r\\n            abi.encode(_buyer, _investmentAmount, _minSharesQuantity, _gav)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @dev Helper for Extension actions immediately after issuing shares.\\r\\n    /// Same comment applies from __preBuySharesHook() above.\\r\\n    function __postBuySharesHook(\\r\\n        address _buyer,\\r\\n        uint256 _investmentAmount,\\r\\n        uint256 _sharesIssued,\\r\\n        uint256 _preBuySharesGav\\r\\n    ) private {\\r\\n        uint256 gav = _preBuySharesGav.add(_investmentAmount);\\r\\n        IFeeManager(FEE_MANAGER).invokeHook(\\r\\n            IFeeManager.FeeHook.PostBuyShares,\\r\\n            abi.encode(_buyer, _investmentAmount, _sharesIssued),\\r\\n            gav\\r\\n        );\\r\\n\\r\\n        IPolicyManager(POLICY_MANAGER).validatePolicies(\\r\\n            address(this),\\r\\n            IPolicyManager.PolicyHook.PostBuyShares,\\r\\n            abi.encode(_buyer, _investmentAmount, _sharesIssued, gav)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // REDEEM SHARES\\r\\n\\r\\n    /// @notice Redeem all of the sender's shares for a proportionate slice of the fund's assets\\r\\n    /// @return payoutAssets_ The assets paid out to the redeemer\\r\\n    /// @return payoutAmounts_ The amount of each asset paid out to the redeemer\\r\\n    /// @dev See __redeemShares() for further detail\\r\\n    function redeemShares()\\r\\n        external\\r\\n        returns (address[] memory payoutAssets_, uint256[] memory payoutAmounts_)\\r\\n    {\\r\\n        return\\r\\n            __redeemShares(\\r\\n                msg.sender,\\r\\n                ERC20(vaultProxy).balanceOf(msg.sender),\\r\\n                new address[](0),\\r\\n                new address[](0)\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /// @notice Redeem a specified quantity of the sender's shares for a proportionate slice of\\r\\n    /// the fund's assets, optionally specifying additional assets and assets to skip.\\r\\n    /// @param _sharesQuantity The quantity of shares to redeem\\r\\n    /// @param _additionalAssets Additional (non-tracked) assets to claim\\r\\n    /// @param _assetsToSkip Tracked assets to forfeit\\r\\n    /// @return payoutAssets_ The assets paid out to the redeemer\\r\\n    /// @return payoutAmounts_ The amount of each asset paid out to the redeemer\\r\\n    /// @dev Any claim to passed _assetsToSkip will be forfeited entirely. This should generally\\r\\n    /// only be exercised if a bad asset is causing redemption to fail.\\r\\n    function redeemSharesDetailed(\\r\\n        uint256 _sharesQuantity,\\r\\n        address[] calldata _additionalAssets,\\r\\n        address[] calldata _assetsToSkip\\r\\n    ) external returns (address[] memory payoutAssets_, uint256[] memory payoutAmounts_) {\\r\\n        return __redeemShares(msg.sender, _sharesQuantity, _additionalAssets, _assetsToSkip);\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to parse an array of payout assets during redemption, taking into account\\r\\n    /// additional assets and assets to skip. _assetsToSkip ignores _additionalAssets.\\r\\n    /// All input arrays are assumed to be unique.\\r\\n    function __parseRedemptionPayoutAssets(\\r\\n        address[] memory _trackedAssets,\\r\\n        address[] memory _additionalAssets,\\r\\n        address[] memory _assetsToSkip\\r\\n    ) private pure returns (address[] memory payoutAssets_) {\\r\\n        address[] memory trackedAssetsToPayout = _trackedAssets.removeItems(_assetsToSkip);\\r\\n        if (_additionalAssets.length == 0) {\\r\\n            return trackedAssetsToPayout;\\r\\n        }\\r\\n\\r\\n        // Add additional assets. Duplicates of trackedAssets are ignored.\\r\\n        bool[] memory indexesToAdd = new bool[](_additionalAssets.length);\\r\\n        uint256 additionalItemsCount;\\r\\n        for (uint256 i; i < _additionalAssets.length; i++) {\\r\\n            if (!trackedAssetsToPayout.contains(_additionalAssets[i])) {\\r\\n                indexesToAdd[i] = true;\\r\\n                additionalItemsCount++;\\r\\n            }\\r\\n        }\\r\\n        if (additionalItemsCount == 0) {\\r\\n            return trackedAssetsToPayout;\\r\\n        }\\r\\n\\r\\n        payoutAssets_ = new address[](trackedAssetsToPayout.length.add(additionalItemsCount));\\r\\n        for (uint256 i; i < trackedAssetsToPayout.length; i++) {\\r\\n            payoutAssets_[i] = trackedAssetsToPayout[i];\\r\\n        }\\r\\n        uint256 payoutAssetsIndex = trackedAssetsToPayout.length;\\r\\n        for (uint256 i; i < _additionalAssets.length; i++) {\\r\\n            if (indexesToAdd[i]) {\\r\\n                payoutAssets_[payoutAssetsIndex] = _additionalAssets[i];\\r\\n                payoutAssetsIndex++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return payoutAssets_;\\r\\n    }\\r\\n\\r\\n    /// @dev Helper for system actions immediately prior to redeeming shares.\\r\\n    /// Policy validation is not currently allowed on redemption, to ensure continuous redeemability.\\r\\n    function __preRedeemSharesHook(address _redeemer, uint256 _sharesQuantity)\\r\\n        private\\r\\n        allowsPermissionedVaultAction\\r\\n    {\\r\\n        try\\r\\n            IFeeManager(FEE_MANAGER).invokeHook(\\r\\n                IFeeManager.FeeHook.PreRedeemShares,\\r\\n                abi.encode(_redeemer, _sharesQuantity),\\r\\n                0\\r\\n            )\\r\\n         {} catch (bytes memory reason) {\\r\\n            emit PreRedeemSharesHookFailed(reason, _redeemer, _sharesQuantity);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to redeem shares.\\r\\n    /// This function should never fail without a way to bypass the failure, which is assured\\r\\n    /// through two mechanisms:\\r\\n    /// 1. The FeeManager is called with the try/catch pattern to assure that calls to it\\r\\n    /// can never block redemption.\\r\\n    /// 2. If a token fails upon transfer(), that token can be skipped (and its balance forfeited)\\r\\n    /// by explicitly specifying _assetsToSkip.\\r\\n    /// Because of these assurances, shares should always be redeemable, with the exception\\r\\n    /// of the timelock period on shares actions that must be respected.\\r\\n    function __redeemShares(\\r\\n        address _redeemer,\\r\\n        uint256 _sharesQuantity,\\r\\n        address[] memory _additionalAssets,\\r\\n        address[] memory _assetsToSkip\\r\\n    )\\r\\n        private\\r\\n        locksReentrance\\r\\n        returns (address[] memory payoutAssets_, uint256[] memory payoutAmounts_)\\r\\n    {\\r\\n        require(_sharesQuantity > 0, \\\"__redeemShares: _sharesQuantity must be >0\\\");\\r\\n        require(\\r\\n            _additionalAssets.isUniqueSet(),\\r\\n            \\\"__redeemShares: _additionalAssets contains duplicates\\\"\\r\\n        );\\r\\n        require(_assetsToSkip.isUniqueSet(), \\\"__redeemShares: _assetsToSkip contains duplicates\\\");\\r\\n\\r\\n        IVault vaultProxyContract = IVault(vaultProxy);\\r\\n\\r\\n        // Only apply the sharesActionTimelock when a migration is not pending\\r\\n        if (!IDispatcher(DISPATCHER).hasMigrationRequest(address(vaultProxyContract))) {\\r\\n            __assertSharesActionNotTimelocked(_redeemer);\\r\\n            acctToLastSharesAction[_redeemer] = block.timestamp;\\r\\n        }\\r\\n\\r\\n        // When a fund is paused, settling fees will be skipped\\r\\n        if (!__fundIsPaused()) {\\r\\n            // Note that if a fee with `SettlementType.Direct` is charged here (i.e., not `Mint`),\\r\\n            // then those fee shares will be transferred from the user's balance rather\\r\\n            // than reallocated from the sharesQuantity being redeemed.\\r\\n            __preRedeemSharesHook(_redeemer, _sharesQuantity);\\r\\n        }\\r\\n\\r\\n        // Check the shares quantity against the user's balance after settling fees\\r\\n        ERC20 sharesContract = ERC20(address(vaultProxyContract));\\r\\n        require(\\r\\n            _sharesQuantity <= sharesContract.balanceOf(_redeemer),\\r\\n            \\\"__redeemShares: Insufficient shares\\\"\\r\\n        );\\r\\n\\r\\n        // Parse the payout assets given optional params to add or skip assets.\\r\\n        // Note that there is no validation that the _additionalAssets are known assets to\\r\\n        // the protocol. This means that the redeemer could specify a malicious asset,\\r\\n        // but since all state-changing, user-callable functions on this contract share the\\r\\n        // non-reentrant modifier, there is nowhere to perform a reentrancy attack.\\r\\n        payoutAssets_ = __parseRedemptionPayoutAssets(\\r\\n            vaultProxyContract.getTrackedAssets(),\\r\\n            _additionalAssets,\\r\\n            _assetsToSkip\\r\\n        );\\r\\n        require(payoutAssets_.length > 0, \\\"__redeemShares: No payout assets\\\");\\r\\n\\r\\n        // Destroy the shares.\\r\\n        // Must get the shares supply before doing so.\\r\\n        uint256 sharesSupply = sharesContract.totalSupply();\\r\\n        vaultProxyContract.burnShares(_redeemer, _sharesQuantity);\\r\\n\\r\\n        // Calculate and transfer payout asset amounts due to redeemer\\r\\n        payoutAmounts_ = new uint256[](payoutAssets_.length);\\r\\n        address denominationAssetCopy = denominationAsset;\\r\\n        for (uint256 i; i < payoutAssets_.length; i++) {\\r\\n            uint256 assetBalance = __finalizeIfSynthAndGetAssetBalance(\\r\\n                address(vaultProxyContract),\\r\\n                payoutAssets_[i],\\r\\n                true\\r\\n            );\\r\\n\\r\\n            // If all remaining shares are being redeemed, the logic changes slightly\\r\\n            if (_sharesQuantity == sharesSupply) {\\r\\n                payoutAmounts_[i] = assetBalance;\\r\\n                // Remove every tracked asset, except the denomination asset\\r\\n                if (payoutAssets_[i] != denominationAssetCopy) {\\r\\n                    vaultProxyContract.removeTrackedAsset(payoutAssets_[i]);\\r\\n                }\\r\\n            } else {\\r\\n                payoutAmounts_[i] = assetBalance.mul(_sharesQuantity).div(sharesSupply);\\r\\n            }\\r\\n\\r\\n            // Transfer payout asset to redeemer\\r\\n            if (payoutAmounts_[i] > 0) {\\r\\n                vaultProxyContract.withdrawAssetTo(payoutAssets_[i], _redeemer, payoutAmounts_[i]);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit SharesRedeemed(_redeemer, _sharesQuantity, payoutAssets_, payoutAmounts_);\\r\\n\\r\\n        return (payoutAssets_, payoutAmounts_);\\r\\n    }\\r\\n\\r\\n    ///////////////////\\r\\n    // STATE GETTERS //\\r\\n    ///////////////////\\r\\n\\r\\n    /// @notice Gets the `denominationAsset` variable\\r\\n    /// @return denominationAsset_ The `denominationAsset` variable value\\r\\n    function getDenominationAsset() external view override returns (address denominationAsset_) {\\r\\n        return denominationAsset;\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the routes for the various contracts used by all funds\\r\\n    /// @return dispatcher_ The `DISPATCHER` variable value\\r\\n    /// @return feeManager_ The `FEE_MANAGER` variable value\\r\\n    /// @return fundDeployer_ The `FUND_DEPLOYER` variable value\\r\\n    /// @return integrationManager_ The `INTEGRATION_MANAGER` variable value\\r\\n    /// @return policyManager_ The `POLICY_MANAGER` variable value\\r\\n    /// @return primitivePriceFeed_ The `PRIMITIVE_PRICE_FEED` variable value\\r\\n    /// @return valueInterpreter_ The `VALUE_INTERPRETER` variable value\\r\\n    function getLibRoutes()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            address dispatcher_,\\r\\n            address feeManager_,\\r\\n            address fundDeployer_,\\r\\n            address integrationManager_,\\r\\n            address policyManager_,\\r\\n            address primitivePriceFeed_,\\r\\n            address valueInterpreter_\\r\\n        )\\r\\n    {\\r\\n        return (\\r\\n            DISPATCHER,\\r\\n            FEE_MANAGER,\\r\\n            FUND_DEPLOYER,\\r\\n            INTEGRATION_MANAGER,\\r\\n            POLICY_MANAGER,\\r\\n            PRIMITIVE_PRICE_FEED,\\r\\n            VALUE_INTERPRETER\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the `overridePause` variable\\r\\n    /// @return overridePause_ The `overridePause` variable value\\r\\n    function getOverridePause() external view returns (bool overridePause_) {\\r\\n        return overridePause;\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the `sharesActionTimelock` variable\\r\\n    /// @return sharesActionTimelock_ The `sharesActionTimelock` variable value\\r\\n    function getSharesActionTimelock() external view returns (uint256 sharesActionTimelock_) {\\r\\n        return sharesActionTimelock;\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the `vaultProxy` variable\\r\\n    /// @return vaultProxy_ The `vaultProxy` variable value\\r\\n    function getVaultProxy() external view override returns (address vaultProxy_) {\\r\\n        return vaultProxy;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x3fbd449a29535a99834b434ef73f423fd48416c6067c363fc071cb4a03280a69\",\"license\":\"GPL-3.0\"},\"contracts/release/core/fund/comptroller/IComptroller.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title IComptroller Interface\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\ninterface IComptroller {\\r\\n    enum VaultAction {\\r\\n        None,\\r\\n        BurnShares,\\r\\n        MintShares,\\r\\n        TransferShares,\\r\\n        ApproveAssetSpender,\\r\\n        WithdrawAssetTo,\\r\\n        AddTrackedAsset,\\r\\n        RemoveTrackedAsset\\r\\n    }\\r\\n\\r\\n    function activate(address, bool) external;\\r\\n\\r\\n    function calcGav(bool) external returns (uint256, bool);\\r\\n\\r\\n    function calcGrossShareValue(bool) external returns (uint256, bool);\\r\\n\\r\\n    function callOnExtension(\\r\\n        address,\\r\\n        uint256,\\r\\n        bytes calldata\\r\\n    ) external;\\r\\n\\r\\n    function configureExtensions(bytes calldata, bytes calldata) external;\\r\\n\\r\\n    function destruct() external;\\r\\n\\r\\n    function getDenominationAsset() external view returns (address);\\r\\n\\r\\n    function getVaultProxy() external view returns (address);\\r\\n\\r\\n    function init(address, uint256) external;\\r\\n\\r\\n    function permissionedVaultAction(VaultAction, bytes calldata) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x642e5667ce4ca04063ceb1aff4137b3c6347b2efefdbff961c42c9c7b061f3aa\",\"license\":\"GPL-3.0\"},\"contracts/release/core/fund/vault/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"../../../../persistent/utils/IMigratableVault.sol\\\";\\r\\n\\r\\n/// @title IVault Interface\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\ninterface IVault is IMigratableVault {\\r\\n    function addTrackedAsset(address) external;\\r\\n\\r\\n    function approveAssetSpender(\\r\\n        address,\\r\\n        address,\\r\\n        uint256\\r\\n    ) external;\\r\\n\\r\\n    function burnShares(address, uint256) external;\\r\\n\\r\\n    function callOnContract(address, bytes calldata) external;\\r\\n\\r\\n    function getAccessor() external view returns (address);\\r\\n\\r\\n    function getOwner() external view returns (address);\\r\\n\\r\\n    function getTrackedAssets() external view returns (address[] memory);\\r\\n\\r\\n    function isTrackedAsset(address) external view returns (bool);\\r\\n\\r\\n    function mintShares(address, uint256) external;\\r\\n\\r\\n    function removeTrackedAsset(address) external;\\r\\n\\r\\n    function transferShares(\\r\\n        address,\\r\\n        address,\\r\\n        uint256\\r\\n    ) external;\\r\\n\\r\\n    function withdrawAssetTo(\\r\\n        address,\\r\\n        address,\\r\\n        uint256\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xd3e432ce41dbb0fc8ae5aa16ab0e053f889caaf803b01743f829e31f644dfb9b\",\"license\":\"GPL-3.0\"},\"contracts/release/core/fund/vault/VaultLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\nimport \\\"../../../../persistent/dispatcher/IDispatcher.sol\\\";\\r\\nimport \\\"../../../../persistent/vault/VaultLibBase1.sol\\\";\\r\\nimport \\\"./IVault.sol\\\";\\r\\n\\r\\n/// @title VaultLib Contract\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\n/// @notice The per-release proxiable library contract for VaultProxy\\r\\n/// @dev The difference in terminology between \\\"asset\\\" and \\\"trackedAsset\\\" is intentional.\\r\\n/// A fund might actually have asset balances of un-tracked assets,\\r\\n/// but only tracked assets are used in gav calculations.\\r\\n/// Note that this contract inherits VaultLibSafeMath (a verbatim Open Zeppelin SafeMath copy)\\r\\n/// from SharesTokenBase via VaultLibBase1\\r\\ncontract VaultLib is VaultLibBase1, IVault {\\r\\n    using SafeERC20 for ERC20;\\r\\n\\r\\n    // Before updating TRACKED_ASSETS_LIMIT in the future, it is important to consider:\\r\\n    // 1. The highest tracked assets limit ever allowed in the protocol\\r\\n    // 2. That the next value will need to be respected by all future releases\\r\\n    uint256 private constant TRACKED_ASSETS_LIMIT = 20;\\r\\n\\r\\n    modifier onlyAccessor() {\\r\\n        require(msg.sender == accessor, \\\"Only the designated accessor can make this call\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /////////////\\r\\n    // GENERAL //\\r\\n    /////////////\\r\\n\\r\\n    /// @notice Sets the account that is allowed to migrate a fund to new releases\\r\\n    /// @param _nextMigrator The account to set as the allowed migrator\\r\\n    /// @dev Set to address(0) to remove the migrator.\\r\\n    function setMigrator(address _nextMigrator) external {\\r\\n        require(msg.sender == owner, \\\"setMigrator: Only the owner can call this function\\\");\\r\\n        address prevMigrator = migrator;\\r\\n        require(_nextMigrator != prevMigrator, \\\"setMigrator: Value already set\\\");\\r\\n\\r\\n        migrator = _nextMigrator;\\r\\n\\r\\n        emit MigratorSet(prevMigrator, _nextMigrator);\\r\\n    }\\r\\n\\r\\n    ///////////\\r\\n    // VAULT //\\r\\n    ///////////\\r\\n\\r\\n    /// @notice Adds a tracked asset to the fund\\r\\n    /// @param _asset The asset to add\\r\\n    /// @dev Allows addition of already tracked assets to fail silently.\\r\\n    function addTrackedAsset(address _asset) external override onlyAccessor {\\r\\n        if (!isTrackedAsset(_asset)) {\\r\\n            require(\\r\\n                trackedAssets.length < TRACKED_ASSETS_LIMIT,\\r\\n                \\\"addTrackedAsset: Limit exceeded\\\"\\r\\n            );\\r\\n\\r\\n            assetToIsTracked[_asset] = true;\\r\\n            trackedAssets.push(_asset);\\r\\n\\r\\n            emit TrackedAssetAdded(_asset);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Grants an allowance to a spender to use the fund's asset\\r\\n    /// @param _asset The asset for which to grant an allowance\\r\\n    /// @param _target The spender of the allowance\\r\\n    /// @param _amount The amount of the allowance\\r\\n    function approveAssetSpender(\\r\\n        address _asset,\\r\\n        address _target,\\r\\n        uint256 _amount\\r\\n    ) external override onlyAccessor {\\r\\n        ERC20 assetContract = ERC20(_asset);\\r\\n        if (assetContract.balanceOf(_target) > 0) {\\r\\n            assetContract.safeApprove(_target, 0);\\r\\n        }\\r\\n        assetContract.safeApprove(_target, _amount);\\r\\n    }\\r\\n\\r\\n    /// @notice Makes an arbitrary call with this contract as the sender\\r\\n    /// @param _contract The contract to call\\r\\n    /// @param _callData The call data for the call\\r\\n    function callOnContract(address _contract, bytes calldata _callData)\\r\\n        external\\r\\n        override\\r\\n        onlyAccessor\\r\\n    {\\r\\n        (bool success, bytes memory returnData) = _contract.call(_callData);\\r\\n        require(success, string(returnData));\\r\\n    }\\r\\n\\r\\n    /// @notice Removes a tracked asset from the fund\\r\\n    /// @param _asset The asset to remove\\r\\n    function removeTrackedAsset(address _asset) external override onlyAccessor {\\r\\n        __removeTrackedAsset(_asset);\\r\\n    }\\r\\n\\r\\n    /// @notice Withdraws an asset from the VaultProxy to a given account\\r\\n    /// @param _asset The asset to withdraw\\r\\n    /// @param _target The account to which to withdraw the asset\\r\\n    /// @param _amount The amount of asset to withdraw\\r\\n    function withdrawAssetTo(\\r\\n        address _asset,\\r\\n        address _target,\\r\\n        uint256 _amount\\r\\n    ) external override onlyAccessor {\\r\\n        ERC20(_asset).safeTransfer(_target, _amount);\\r\\n\\r\\n        emit AssetWithdrawn(_asset, _target, _amount);\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to the get the Vault's balance of a given asset\\r\\n    function __getAssetBalance(address _asset) private view returns (uint256 balance_) {\\r\\n        return ERC20(_asset).balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to remove an asset from a fund's tracked assets.\\r\\n    /// Allows removal of non-tracked asset to fail silently.\\r\\n    function __removeTrackedAsset(address _asset) private {\\r\\n        if (isTrackedAsset(_asset)) {\\r\\n            assetToIsTracked[_asset] = false;\\r\\n\\r\\n            uint256 trackedAssetsCount = trackedAssets.length;\\r\\n            for (uint256 i = 0; i < trackedAssetsCount; i++) {\\r\\n                if (trackedAssets[i] == _asset) {\\r\\n                    if (i < trackedAssetsCount - 1) {\\r\\n                        trackedAssets[i] = trackedAssets[trackedAssetsCount - 1];\\r\\n                    }\\r\\n                    trackedAssets.pop();\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            emit TrackedAssetRemoved(_asset);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    ////////////\\r\\n    // SHARES //\\r\\n    ////////////\\r\\n\\r\\n    /// @notice Burns fund shares from a particular account\\r\\n    /// @param _target The account for which to burn shares\\r\\n    /// @param _amount The amount of shares to burn\\r\\n    function burnShares(address _target, uint256 _amount) external override onlyAccessor {\\r\\n        __burn(_target, _amount);\\r\\n    }\\r\\n\\r\\n    /// @notice Mints fund shares to a particular account\\r\\n    /// @param _target The account for which to burn shares\\r\\n    /// @param _amount The amount of shares to mint\\r\\n    function mintShares(address _target, uint256 _amount) external override onlyAccessor {\\r\\n        __mint(_target, _amount);\\r\\n    }\\r\\n\\r\\n    /// @notice Transfers fund shares from one account to another\\r\\n    /// @param _from The account from which to transfer shares\\r\\n    /// @param _to The account to which to transfer shares\\r\\n    /// @param _amount The amount of shares to transfer\\r\\n    function transferShares(\\r\\n        address _from,\\r\\n        address _to,\\r\\n        uint256 _amount\\r\\n    ) external override onlyAccessor {\\r\\n        __transfer(_from, _to, _amount);\\r\\n    }\\r\\n\\r\\n    // ERC20 overrides\\r\\n\\r\\n    /// @dev Disallows the standard ERC20 approve() function\\r\\n    function approve(address, uint256) public override returns (bool) {\\r\\n        revert(\\\"Unimplemented\\\");\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the `symbol` value of the shares token\\r\\n    /// @return symbol_ The `symbol` value\\r\\n    /// @dev Defers the shares symbol value to the Dispatcher contract\\r\\n    function symbol() public view override returns (string memory symbol_) {\\r\\n        return IDispatcher(creator).getSharesTokenSymbol();\\r\\n    }\\r\\n\\r\\n    /// @dev Disallows the standard ERC20 transfer() function\\r\\n    function transfer(address, uint256) public override returns (bool) {\\r\\n        revert(\\\"Unimplemented\\\");\\r\\n    }\\r\\n\\r\\n    /// @dev Disallows the standard ERC20 transferFrom() function\\r\\n    function transferFrom(\\r\\n        address,\\r\\n        address,\\r\\n        uint256\\r\\n    ) public override returns (bool) {\\r\\n        revert(\\\"Unimplemented\\\");\\r\\n    }\\r\\n\\r\\n    ///////////////////\\r\\n    // STATE GETTERS //\\r\\n    ///////////////////\\r\\n\\r\\n    /// @notice Gets the `accessor` variable\\r\\n    /// @return accessor_ The `accessor` variable value\\r\\n    function getAccessor() external view override returns (address accessor_) {\\r\\n        return accessor;\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the `creator` variable\\r\\n    /// @return creator_ The `creator` variable value\\r\\n    function getCreator() external view returns (address creator_) {\\r\\n        return creator;\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the `migrator` variable\\r\\n    /// @return migrator_ The `migrator` variable value\\r\\n    function getMigrator() external view returns (address migrator_) {\\r\\n        return migrator;\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the `owner` variable\\r\\n    /// @return owner_ The `owner` variable value\\r\\n    function getOwner() external view override returns (address owner_) {\\r\\n        return owner;\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the `trackedAssets` variable\\r\\n    /// @return trackedAssets_ The `trackedAssets` variable value\\r\\n    function getTrackedAssets() external view override returns (address[] memory trackedAssets_) {\\r\\n        return trackedAssets;\\r\\n    }\\r\\n\\r\\n    /// @notice Check whether an address is a tracked asset of the fund\\r\\n    /// @param _asset The address to check\\r\\n    /// @return isTrackedAsset_ True if the address is a tracked asset of the fund\\r\\n    function isTrackedAsset(address _asset) public view override returns (bool isTrackedAsset_) {\\r\\n        return assetToIsTracked[_asset];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xfcf4999cea473da844818fb18e4657210266c7a20f9cb59eccb0e703876c093c\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/IExtension.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title IExtension Interface\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\n/// @notice Interface for all extensions\\r\\ninterface IExtension {\\r\\n    function activateForFund(bool _isMigration) external;\\r\\n\\r\\n    function deactivateForFund() external;\\r\\n\\r\\n    function receiveCallFromComptroller(\\r\\n        address _comptrollerProxy,\\r\\n        uint256 _actionId,\\r\\n        bytes calldata _callArgs\\r\\n    ) external;\\r\\n\\r\\n    function setConfigForFund(bytes calldata _configData) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xadd1b5eaadff01af66e998c5df743c8489b0a944d8d9de861600e68541bab0d7\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/fee-manager/IFeeManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n/// @title FeeManager Interface\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\n/// @notice Interface for the FeeManager\\r\\ninterface IFeeManager {\\r\\n    // No fees for the current release are implemented post-redeemShares\\r\\n    enum FeeHook {\\r\\n        Continuous,\\r\\n        BuySharesSetup,\\r\\n        PreBuyShares,\\r\\n        PostBuyShares,\\r\\n        BuySharesCompleted,\\r\\n        PreRedeemShares\\r\\n    }\\r\\n    enum SettlementType {None, Direct, Mint, Burn, MintSharesOutstanding, BurnSharesOutstanding}\\r\\n\\r\\n    function invokeHook(\\r\\n        FeeHook,\\r\\n        bytes calldata,\\r\\n        uint256\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x9b36e64b16a92ee93fb07686033a002573bf687019414e8d6e8bd3b5ddfc4dd4\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/policy-manager/IPolicyManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n/// @title PolicyManager Interface\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\n/// @notice Interface for the PolicyManager\\r\\ninterface IPolicyManager {\\r\\n    enum PolicyHook {\\r\\n        BuySharesSetup,\\r\\n        PreBuyShares,\\r\\n        PostBuyShares,\\r\\n        BuySharesCompleted,\\r\\n        PreCallOnIntegration,\\r\\n        PostCallOnIntegration\\r\\n    }\\r\\n\\r\\n    function validatePolicies(\\r\\n        address,\\r\\n        PolicyHook,\\r\\n        bytes calldata\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xe23b2f4c3c4434d315af2a885db1ae986120afb7dda1db3eb2e4559cf503ea13\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/utils/FundDeployerOwnerMixin.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"../../core/fund-deployer/IFundDeployer.sol\\\";\\r\\n\\r\\n/// @title FundDeployerOwnerMixin Contract\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\n/// @notice A mixin contract that defers ownership to the owner of FundDeployer\\r\\nabstract contract FundDeployerOwnerMixin {\\r\\n    address internal immutable FUND_DEPLOYER;\\r\\n\\r\\n    modifier onlyFundDeployerOwner() {\\r\\n        require(\\r\\n            msg.sender == getOwner(),\\r\\n            \\\"onlyFundDeployerOwner: Only the FundDeployer owner can call this function\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(address _fundDeployer) public {\\r\\n        FUND_DEPLOYER = _fundDeployer;\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the owner of this contract\\r\\n    /// @return owner_ The owner\\r\\n    /// @dev Ownership is deferred to the owner of the FundDeployer contract\\r\\n    function getOwner() public view returns (address owner_) {\\r\\n        return IFundDeployer(FUND_DEPLOYER).getOwner();\\r\\n    }\\r\\n\\r\\n    ///////////////////\\r\\n    // STATE GETTERS //\\r\\n    ///////////////////\\r\\n\\r\\n    /// @notice Gets the `FUND_DEPLOYER` variable\\r\\n    /// @return fundDeployer_ The `FUND_DEPLOYER` variable value\\r\\n    function getFundDeployer() external view returns (address fundDeployer_) {\\r\\n        return FUND_DEPLOYER;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf6af8390b7e3ac7579250ce5aebe0faafeeb58e60ead667e002b9286dfd160e5\",\"license\":\"GPL-3.0\"},\"contracts/release/infrastructure/price-feeds/derivatives/IDerivativePriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title IDerivativePriceFeed Interface\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\n/// @notice Simple interface for derivative price source oracle implementations\\r\\ninterface IDerivativePriceFeed {\\r\\n    function calcUnderlyingValues(address, uint256)\\r\\n        external\\r\\n        returns (address[] memory, uint256[] memory);\\r\\n\\r\\n    function isSupportedAsset(address) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x577c4605a159c1083ef8d823d3b18896c321fd712071360ae235e22bf207cad0\",\"license\":\"GPL-3.0\"},\"contracts/release/infrastructure/price-feeds/derivatives/feeds/SynthetixPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"../../../../extensions/utils/FundDeployerOwnerMixin.sol\\\";\\r\\nimport \\\"../../../../interfaces/ISynthetix.sol\\\";\\r\\nimport \\\"../../../../interfaces/ISynthetixAddressResolver.sol\\\";\\r\\nimport \\\"../../../../interfaces/ISynthetixExchangeRates.sol\\\";\\r\\nimport \\\"../../../../interfaces/ISynthetixProxyERC20.sol\\\";\\r\\nimport \\\"../../../../interfaces/ISynthetixSynth.sol\\\";\\r\\nimport \\\"../IDerivativePriceFeed.sol\\\";\\r\\n\\r\\n/// @title SynthetixPriceFeed Contract\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\n/// @notice A price feed that uses Synthetix oracles as price sources\\r\\ncontract SynthetixPriceFeed is IDerivativePriceFeed, FundDeployerOwnerMixin {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    event SynthAdded(address indexed synth, bytes32 currencyKey);\\r\\n\\r\\n    event SynthCurrencyKeyUpdated(\\r\\n        address indexed synth,\\r\\n        bytes32 prevCurrencyKey,\\r\\n        bytes32 nextCurrencyKey\\r\\n    );\\r\\n\\r\\n    uint256 private constant SYNTH_UNIT = 10**18;\\r\\n    address private immutable ADDRESS_RESOLVER;\\r\\n    address private immutable SUSD;\\r\\n\\r\\n    mapping(address => bytes32) private synthToCurrencyKey;\\r\\n\\r\\n    constructor(\\r\\n        address _fundDeployer,\\r\\n        address _addressResolver,\\r\\n        address _sUSD,\\r\\n        address[] memory _synths\\r\\n    ) public FundDeployerOwnerMixin(_fundDeployer) {\\r\\n        ADDRESS_RESOLVER = _addressResolver;\\r\\n        SUSD = _sUSD;\\r\\n\\r\\n        if (_sUSD != address(0)) {\\r\\n            address[] memory sUSDSynths = new address[](1);\\r\\n            sUSDSynths[0] = _sUSD;\\r\\n            __addSynths(sUSDSynths);\\r\\n        }\\r\\n        __addSynths(_synths);\\r\\n    }\\r\\n\\r\\n    /// @notice Converts a given amount of a derivative to its underlying asset values\\r\\n    /// @param _derivative The derivative to convert\\r\\n    /// @param _derivativeAmount The amount of the derivative to convert\\r\\n    /// @return underlyings_ The underlying assets for the _derivative\\r\\n    /// @return underlyingAmounts_ The amount of each underlying asset for the equivalent derivative amount\\r\\n    function calcUnderlyingValues(address _derivative, uint256 _derivativeAmount)\\r\\n        external\\r\\n        override\\r\\n        returns (address[] memory underlyings_, uint256[] memory underlyingAmounts_)\\r\\n    {\\r\\n        underlyings_ = new address[](1);\\r\\n        underlyings_[0] = SUSD;\\r\\n        underlyingAmounts_ = new uint256[](1);\\r\\n\\r\\n        bytes32 currencyKey = getCurrencyKeyForSynth(_derivative);\\r\\n        require(currencyKey != 0, \\\"calcUnderlyingValues: _derivative is not supported\\\");\\r\\n\\r\\n        address exchangeRates = ISynthetixAddressResolver(ADDRESS_RESOLVER).requireAndGetAddress(\\r\\n            \\\"ExchangeRates\\\",\\r\\n            \\\"calcUnderlyingValues: Missing ExchangeRates\\\"\\r\\n        );\\r\\n\\r\\n        (uint256 rate, bool isInvalid) = ISynthetixExchangeRates(exchangeRates).rateAndInvalid(\\r\\n            currencyKey\\r\\n        );\\r\\n        require(!isInvalid, \\\"calcUnderlyingValues: _derivative rate is not valid\\\");\\r\\n\\r\\n        underlyingAmounts_[0] = _derivativeAmount.mul(rate).div(SYNTH_UNIT);\\r\\n\\r\\n        return (underlyings_, underlyingAmounts_);\\r\\n    }\\r\\n\\r\\n    /// @notice Checks whether an asset is a supported primitive of the price feed\\r\\n    /// @param _asset The asset to check\\r\\n    /// @return isSupported_ True if the asset is a supported primitive\\r\\n    function isSupportedAsset(address _asset) public view override returns (bool isSupported_) {\\r\\n        return getCurrencyKeyForSynth(_asset) != 0;\\r\\n    }\\r\\n\\r\\n    /////////////////////\\r\\n    // SYNTHS REGISTRY //\\r\\n    /////////////////////\\r\\n\\r\\n    /// @notice Adds Synths to the price feed\\r\\n    /// @param _synths Synths to add\\r\\n    function addSynths(address[] calldata _synths) external onlyFundDeployerOwner {\\r\\n        require(_synths.length > 0, \\\"addSynths: Empty _synths\\\");\\r\\n\\r\\n        __addSynths(_synths);\\r\\n    }\\r\\n\\r\\n    /// @notice Updates the cached currencyKey value for specified Synths\\r\\n    /// @param _synths Synths to update\\r\\n    /// @dev Anybody can call this function\\r\\n    function updateSynthCurrencyKeys(address[] calldata _synths) external {\\r\\n        require(_synths.length > 0, \\\"updateSynthCurrencyKeys: Empty _synths\\\");\\r\\n\\r\\n        for (uint256 i; i < _synths.length; i++) {\\r\\n            bytes32 prevCurrencyKey = synthToCurrencyKey[_synths[i]];\\r\\n            require(prevCurrencyKey != 0, \\\"updateSynthCurrencyKeys: Synth not set\\\");\\r\\n\\r\\n            bytes32 nextCurrencyKey = __getCurrencyKey(_synths[i]);\\r\\n            require(\\r\\n                nextCurrencyKey != prevCurrencyKey,\\r\\n                \\\"updateSynthCurrencyKeys: Synth has correct currencyKey\\\"\\r\\n            );\\r\\n\\r\\n            synthToCurrencyKey[_synths[i]] = nextCurrencyKey;\\r\\n\\r\\n            emit SynthCurrencyKeyUpdated(_synths[i], prevCurrencyKey, nextCurrencyKey);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to add Synths\\r\\n    function __addSynths(address[] memory _synths) private {\\r\\n        for (uint256 i; i < _synths.length; i++) {\\r\\n            require(synthToCurrencyKey[_synths[i]] == 0, \\\"__addSynths: Value already set\\\");\\r\\n\\r\\n            bytes32 currencyKey = __getCurrencyKey(_synths[i]);\\r\\n            require(currencyKey != 0, \\\"__addSynths: No currencyKey\\\");\\r\\n\\r\\n            synthToCurrencyKey[_synths[i]] = currencyKey;\\r\\n\\r\\n            emit SynthAdded(_synths[i], currencyKey);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to query a currencyKey from Synthetix\\r\\n    function __getCurrencyKey(address _synthProxy) private view returns (bytes32 currencyKey_) {\\r\\n        return ISynthetixSynth(ISynthetixProxyERC20(_synthProxy).target()).currencyKey();\\r\\n    }\\r\\n\\r\\n    ///////////////////\\r\\n    // STATE GETTERS //\\r\\n    ///////////////////\\r\\n\\r\\n    /// @notice Gets the `ADDRESS_RESOLVER` variable\\r\\n    /// @return addressResolver_ The `ADDRESS_RESOLVER` variable value\\r\\n    function getAddressResolver() external view returns (address) {\\r\\n        return ADDRESS_RESOLVER;\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the currencyKey for multiple given Synths\\r\\n    /// @return currencyKeys_ The currencyKey values\\r\\n    function getCurrencyKeysForSynths(address[] calldata _synths)\\r\\n        external\\r\\n        view\\r\\n        returns (bytes32[] memory currencyKeys_)\\r\\n    {\\r\\n        currencyKeys_ = new bytes32[](_synths.length);\\r\\n        for (uint256 i; i < _synths.length; i++) {\\r\\n            currencyKeys_[i] = synthToCurrencyKey[_synths[i]];\\r\\n        }\\r\\n\\r\\n        return currencyKeys_;\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the `SUSD` variable\\r\\n    /// @return susd_ The `SUSD` variable value\\r\\n    function getSUSD() external view returns (address susd_) {\\r\\n        return SUSD;\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the currencyKey for a given Synth\\r\\n    /// @return currencyKey_ The currencyKey value\\r\\n    function getCurrencyKeyForSynth(address _synth) public view returns (bytes32 currencyKey_) {\\r\\n        return synthToCurrencyKey[_synth];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf1e28f0f953ee69883261ceddbeb298de89d1a2363e1aff89939fe0b1d23c343\",\"license\":\"GPL-3.0\"},\"contracts/release/infrastructure/price-feeds/primitives/IPrimitivePriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title IPrimitivePriceFeed Interface\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\n/// @notice Interface for primitive price feeds\\r\\ninterface IPrimitivePriceFeed {\\r\\n    function calcCanonicalValue(\\r\\n        address,\\r\\n        uint256,\\r\\n        address\\r\\n    ) external view returns (uint256, bool);\\r\\n\\r\\n    function calcLiveValue(\\r\\n        address,\\r\\n        uint256,\\r\\n        address\\r\\n    ) external view returns (uint256, bool);\\r\\n\\r\\n    function isSupportedAsset(address) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x4ec94b8620d068e9e520d87e7e0eda9828ab465de5b5aefe3880dc619782e02a\",\"license\":\"GPL-3.0\"},\"contracts/release/infrastructure/value-interpreter/IValueInterpreter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title IValueInterpreter interface\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\n/// @notice Interface for ValueInterpreter\\r\\ninterface IValueInterpreter {\\r\\n    function calcCanonicalAssetValue(\\r\\n        address,\\r\\n        uint256,\\r\\n        address\\r\\n    ) external returns (uint256, bool);\\r\\n\\r\\n    function calcCanonicalAssetsTotalValue(\\r\\n        address[] calldata,\\r\\n        uint256[] calldata,\\r\\n        address\\r\\n    ) external returns (uint256, bool);\\r\\n\\r\\n    function calcLiveAssetValue(\\r\\n        address,\\r\\n        uint256,\\r\\n        address\\r\\n    ) external returns (uint256, bool);\\r\\n\\r\\n    function calcLiveAssetsTotalValue(\\r\\n        address[] calldata,\\r\\n        uint256[] calldata,\\r\\n        address\\r\\n    ) external returns (uint256, bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x2c7f3469683dd6a179268808a6e4045fd0e1fb8893151e7cbdab93db4f0aba7e\",\"license\":\"GPL-3.0\"},\"contracts/release/interfaces/ISynthetix.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title ISynthetix Interface\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\ninterface ISynthetix {\\r\\n    function exchangeOnBehalfWithTracking(\\r\\n        address,\\r\\n        bytes32,\\r\\n        uint256,\\r\\n        bytes32,\\r\\n        address,\\r\\n        bytes32\\r\\n    ) external returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xde69a616cd0326439e08d99c9f5d1e6f014082493d2a780be2ed8599d601eda3\",\"license\":\"GPL-3.0\"},\"contracts/release/interfaces/ISynthetixAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title ISynthetixAddressResolver Interface\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\ninterface ISynthetixAddressResolver {\\r\\n    function requireAndGetAddress(bytes32, string calldata) external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0x10232ee937df88ecdfda8c600fd2f689542c41616f3177e88e224d01921bdebd\",\"license\":\"GPL-3.0\"},\"contracts/release/interfaces/ISynthetixExchangeRates.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title ISynthetixExchangeRates Interface\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\ninterface ISynthetixExchangeRates {\\r\\n    function rateAndInvalid(bytes32) external view returns (uint256, bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x8436c9a0ac5931f3ef10501f78ce85a41505a34ae5f9af02730ccb1aa054a76c\",\"license\":\"GPL-3.0\"},\"contracts/release/interfaces/ISynthetixExchanger.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title ISynthetixExchanger Interface\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\ninterface ISynthetixExchanger {\\r\\n    function getAmountsForExchange(\\r\\n        uint256,\\r\\n        bytes32,\\r\\n        bytes32\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        );\\r\\n\\r\\n    function settle(address, bytes32)\\r\\n        external\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        );\\r\\n}\\r\\n\",\"keccak256\":\"0x6016af448e7db60305bd4e4cc42ff10fc52a271615836c1249fadbf99fff89a0\",\"license\":\"GPL-3.0\"},\"contracts/release/interfaces/ISynthetixProxyERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title ISynthetixProxyERC20 Interface\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\ninterface ISynthetixProxyERC20 {\\r\\n    function target() external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0x2bc57c08164d8f706bf6b336990d5b307062c15e09830ecbac326d3274d00d0c\",\"license\":\"GPL-3.0\"},\"contracts/release/interfaces/ISynthetixSynth.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title ISynthetixSynth Interface\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\ninterface ISynthetixSynth {\\r\\n    function currencyKey() external view returns (bytes32);\\r\\n}\\r\\n\",\"keccak256\":\"0xb377be595624fbf242e48c1e2e7efde4acd7c363a673598eb30da93326defa56\",\"license\":\"GPL-3.0\"},\"contracts/release/peripheral/shares-requestors/AuthUserExecutedSharesRequestorFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"../../core/fund/comptroller/ComptrollerLib.sol\\\";\\r\\nimport \\\"../../core/fund/vault/VaultLib.sol\\\";\\r\\nimport \\\"./AuthUserExecutedSharesRequestorProxy.sol\\\";\\r\\nimport \\\"./IAuthUserExecutedSharesRequestor.sol\\\";\\r\\n\\r\\n/// @title AuthUserExecutedSharesRequestorFactory Contract\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\n/// @notice Deploys and maintains a record of AuthUserExecutedSharesRequestorProxy instances\\r\\ncontract AuthUserExecutedSharesRequestorFactory {\\r\\n    event SharesRequestorProxyDeployed(\\r\\n        address indexed comptrollerProxy,\\r\\n        address sharesRequestorProxy\\r\\n    );\\r\\n\\r\\n    address private immutable AUTH_USER_EXECUTED_SHARES_REQUESTOR_LIB;\\r\\n    address private immutable DISPATCHER;\\r\\n\\r\\n    mapping(address => address) private comptrollerProxyToSharesRequestorProxy;\\r\\n\\r\\n    constructor(address _dispatcher, address _authUserExecutedSharesRequestorLib) public {\\r\\n        AUTH_USER_EXECUTED_SHARES_REQUESTOR_LIB = _authUserExecutedSharesRequestorLib;\\r\\n        DISPATCHER = _dispatcher;\\r\\n    }\\r\\n\\r\\n    /// @notice Deploys a shares requestor proxy instance for a given ComptrollerProxy instance\\r\\n    /// @param _comptrollerProxy The ComptrollerProxy for which to deploy the shares requestor proxy\\r\\n    /// @return sharesRequestorProxy_ The address of the newly-deployed shares requestor proxy\\r\\n    function deploySharesRequestorProxy(address _comptrollerProxy)\\r\\n        external\\r\\n        returns (address sharesRequestorProxy_)\\r\\n    {\\r\\n        // Confirm fund is genuine\\r\\n        VaultLib vaultProxyContract = VaultLib(ComptrollerLib(_comptrollerProxy).getVaultProxy());\\r\\n        require(\\r\\n            vaultProxyContract.getAccessor() == _comptrollerProxy,\\r\\n            \\\"deploySharesRequestorProxy: Invalid VaultProxy for ComptrollerProxy\\\"\\r\\n        );\\r\\n        require(\\r\\n            IDispatcher(DISPATCHER).getFundDeployerForVaultProxy(address(vaultProxyContract)) !=\\r\\n                address(0),\\r\\n            \\\"deploySharesRequestorProxy: Not a genuine fund\\\"\\r\\n        );\\r\\n\\r\\n        // Validate that the caller is the fund owner\\r\\n        require(\\r\\n            msg.sender == vaultProxyContract.getOwner(),\\r\\n            \\\"deploySharesRequestorProxy: Only fund owner callable\\\"\\r\\n        );\\r\\n\\r\\n        // Validate that a proxy does not already exist\\r\\n        require(\\r\\n            comptrollerProxyToSharesRequestorProxy[_comptrollerProxy] == address(0),\\r\\n            \\\"deploySharesRequestorProxy: Proxy already exists\\\"\\r\\n        );\\r\\n\\r\\n        // Deploy the proxy\\r\\n        bytes memory constructData = abi.encodeWithSelector(\\r\\n            IAuthUserExecutedSharesRequestor.init.selector,\\r\\n            _comptrollerProxy\\r\\n        );\\r\\n        sharesRequestorProxy_ = address(\\r\\n            new AuthUserExecutedSharesRequestorProxy(\\r\\n                constructData,\\r\\n                AUTH_USER_EXECUTED_SHARES_REQUESTOR_LIB\\r\\n            )\\r\\n        );\\r\\n\\r\\n        comptrollerProxyToSharesRequestorProxy[_comptrollerProxy] = sharesRequestorProxy_;\\r\\n\\r\\n        emit SharesRequestorProxyDeployed(_comptrollerProxy, sharesRequestorProxy_);\\r\\n\\r\\n        return sharesRequestorProxy_;\\r\\n    }\\r\\n\\r\\n    ///////////////////\\r\\n    // STATE GETTERS //\\r\\n    ///////////////////\\r\\n\\r\\n    /// @notice Gets the value of the `AUTH_USER_EXECUTED_SHARES_REQUESTOR_LIB` variable\\r\\n    /// @return authUserExecutedSharesRequestorLib_ The `AUTH_USER_EXECUTED_SHARES_REQUESTOR_LIB` variable value\\r\\n    function getAuthUserExecutedSharesRequestorLib()\\r\\n        external\\r\\n        view\\r\\n        returns (address authUserExecutedSharesRequestorLib_)\\r\\n    {\\r\\n        return AUTH_USER_EXECUTED_SHARES_REQUESTOR_LIB;\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the value of the `DISPATCHER` variable\\r\\n    /// @return dispatcher_ The `DISPATCHER` variable value\\r\\n    function getDispatcher() external view returns (address dispatcher_) {\\r\\n        return DISPATCHER;\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the AuthUserExecutedSharesRequestorProxy associated with the given ComptrollerProxy\\r\\n    /// @param _comptrollerProxy The ComptrollerProxy for which to get the associated AuthUserExecutedSharesRequestorProxy\\r\\n    /// @return sharesRequestorProxy_ The associated AuthUserExecutedSharesRequestorProxy address\\r\\n    function getSharesRequestorProxyForComptrollerProxy(address _comptrollerProxy)\\r\\n        external\\r\\n        view\\r\\n        returns (address sharesRequestorProxy_)\\r\\n    {\\r\\n        return comptrollerProxyToSharesRequestorProxy[_comptrollerProxy];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe5ff4e9c3084b511651fe0dcb8ca88ce2986477e4743c31beac5fd0ac01b1dda\",\"license\":\"GPL-3.0\"},\"contracts/release/peripheral/shares-requestors/AuthUserExecutedSharesRequestorProxy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"../../utils/Proxy.sol\\\";\\r\\n\\r\\ncontract AuthUserExecutedSharesRequestorProxy is Proxy {\\r\\n    constructor(bytes memory _constructData, address _authUserExecutedSharesRequestorLib)\\r\\n        public\\r\\n        Proxy(_constructData, _authUserExecutedSharesRequestorLib)\\r\\n    {}\\r\\n}\\r\\n\",\"keccak256\":\"0x7c8c54fad4bac39b955c434e871058f4123c187dd13fe71bf42205390014639b\",\"license\":\"GPL-3.0\"},\"contracts/release/peripheral/shares-requestors/IAuthUserExecutedSharesRequestor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title IAuthUserExecutedSharesRequestor Interface\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\ninterface IAuthUserExecutedSharesRequestor {\\r\\n    function init(address) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x215160aae8c04f8fffc599c30c8c6cc54dd7763888f0c49eaffd32f3681a5365\",\"license\":\"GPL-3.0\"},\"contracts/release/utils/AddressArrayLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title AddressArray Library\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\n/// @notice A library to extend the address array data type\\r\\nlibrary AddressArrayLib {\\r\\n    /// @dev Helper to add an item to an array. Does not assert uniqueness of the new item.\\r\\n    function addItem(address[] memory _self, address _itemToAdd)\\r\\n        internal\\r\\n        pure\\r\\n        returns (address[] memory nextArray_)\\r\\n    {\\r\\n        nextArray_ = new address[](_self.length + 1);\\r\\n        for (uint256 i; i < _self.length; i++) {\\r\\n            nextArray_[i] = _self[i];\\r\\n        }\\r\\n        nextArray_[_self.length] = _itemToAdd;\\r\\n\\r\\n        return nextArray_;\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to add an item to an array, only if it is not already in the array.\\r\\n    function addUniqueItem(address[] memory _self, address _itemToAdd)\\r\\n        internal\\r\\n        pure\\r\\n        returns (address[] memory nextArray_)\\r\\n    {\\r\\n        if (contains(_self, _itemToAdd)) {\\r\\n            return _self;\\r\\n        }\\r\\n\\r\\n        return addItem(_self, _itemToAdd);\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to verify if an array contains a particular value\\r\\n    function contains(address[] memory _self, address _target)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bool doesContain_)\\r\\n    {\\r\\n        for (uint256 i; i < _self.length; i++) {\\r\\n            if (_target == _self[i]) {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to reassign all items in an array with a specified value\\r\\n    function fill(address[] memory _self, address _value)\\r\\n        internal\\r\\n        pure\\r\\n        returns (address[] memory nextArray_)\\r\\n    {\\r\\n        nextArray_ = new address[](_self.length);\\r\\n        for (uint256 i; i < nextArray_.length; i++) {\\r\\n            nextArray_[i] = _value;\\r\\n        }\\r\\n\\r\\n        return nextArray_;\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to verify if array is a set of unique values.\\r\\n    /// Does not assert length > 0.\\r\\n    function isUniqueSet(address[] memory _self) internal pure returns (bool isUnique_) {\\r\\n        if (_self.length <= 1) {\\r\\n            return true;\\r\\n        }\\r\\n\\r\\n        uint256 arrayLength = _self.length;\\r\\n        for (uint256 i; i < arrayLength; i++) {\\r\\n            for (uint256 j = i + 1; j < arrayLength; j++) {\\r\\n                if (_self[i] == _self[j]) {\\r\\n                    return false;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to remove items from an array. Removes all matching occurrences of each item.\\r\\n    /// Does not assert uniqueness of either array.\\r\\n    function removeItems(address[] memory _self, address[] memory _itemsToRemove)\\r\\n        internal\\r\\n        pure\\r\\n        returns (address[] memory nextArray_)\\r\\n    {\\r\\n        if (_itemsToRemove.length == 0) {\\r\\n            return _self;\\r\\n        }\\r\\n\\r\\n        bool[] memory indexesToRemove = new bool[](_self.length);\\r\\n        uint256 remainingItemsCount = _self.length;\\r\\n        for (uint256 i; i < _self.length; i++) {\\r\\n            if (contains(_itemsToRemove, _self[i])) {\\r\\n                indexesToRemove[i] = true;\\r\\n                remainingItemsCount--;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (remainingItemsCount == _self.length) {\\r\\n            nextArray_ = _self;\\r\\n        } else if (remainingItemsCount > 0) {\\r\\n            nextArray_ = new address[](remainingItemsCount);\\r\\n            uint256 nextArrayIndex;\\r\\n            for (uint256 i; i < _self.length; i++) {\\r\\n                if (!indexesToRemove[i]) {\\r\\n                    nextArray_[nextArrayIndex] = _self[i];\\r\\n                    nextArrayIndex++;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return nextArray_;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9cf10bc53b106758cfd6d754567a98ce1774639d03b9a430ba5ffa0298c160de\",\"license\":\"GPL-3.0\"},\"contracts/release/utils/AssetFinalityResolver.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"../infrastructure/price-feeds/derivatives/feeds/SynthetixPriceFeed.sol\\\";\\r\\nimport \\\"../interfaces/ISynthetixAddressResolver.sol\\\";\\r\\nimport \\\"../interfaces/ISynthetixExchanger.sol\\\";\\r\\n\\r\\n/// @title AssetFinalityResolver Contract\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\n/// @notice A contract that helps achieve asset finality\\r\\nabstract contract AssetFinalityResolver {\\r\\n    address internal immutable SYNTHETIX_ADDRESS_RESOLVER;\\r\\n    address internal immutable SYNTHETIX_PRICE_FEED;\\r\\n\\r\\n    constructor(address _synthetixPriceFeed, address _synthetixAddressResolver) public {\\r\\n        SYNTHETIX_ADDRESS_RESOLVER = _synthetixAddressResolver;\\r\\n        SYNTHETIX_PRICE_FEED = _synthetixPriceFeed;\\r\\n    }\\r\\n\\r\\n    /// @dev Helper to finalize a Synth balance at a given target address and return its balance\\r\\n    function __finalizeIfSynthAndGetAssetBalance(\\r\\n        address _target,\\r\\n        address _asset,\\r\\n        bool _requireFinality\\r\\n    ) internal returns (uint256 assetBalance_) {\\r\\n        bytes32 currencyKey = SynthetixPriceFeed(SYNTHETIX_PRICE_FEED).getCurrencyKeyForSynth(\\r\\n            _asset\\r\\n        );\\r\\n        if (currencyKey != 0) {\\r\\n            address synthetixExchanger = ISynthetixAddressResolver(SYNTHETIX_ADDRESS_RESOLVER)\\r\\n                .requireAndGetAddress(\\r\\n                \\\"Exchanger\\\",\\r\\n                \\\"finalizeAndGetAssetBalance: Missing Exchanger\\\"\\r\\n            );\\r\\n            try ISynthetixExchanger(synthetixExchanger).settle(_target, currencyKey)  {} catch {\\r\\n                require(!_requireFinality, \\\"finalizeAndGetAssetBalance: Cannot settle Synth\\\");\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return ERC20(_asset).balanceOf(_target);\\r\\n    }\\r\\n\\r\\n    ///////////////////\\r\\n    // STATE GETTERS //\\r\\n    ///////////////////\\r\\n\\r\\n    /// @notice Gets the `SYNTHETIX_ADDRESS_RESOLVER` variable\\r\\n    /// @return synthetixAddressResolver_ The `SYNTHETIX_ADDRESS_RESOLVER` variable value\\r\\n    function getSynthetixAddressResolver()\\r\\n        external\\r\\n        view\\r\\n        returns (address synthetixAddressResolver_)\\r\\n    {\\r\\n        return SYNTHETIX_ADDRESS_RESOLVER;\\r\\n    }\\r\\n\\r\\n    /// @notice Gets the `SYNTHETIX_PRICE_FEED` variable\\r\\n    /// @return synthetixPriceFeed_ The `SYNTHETIX_PRICE_FEED` variable value\\r\\n    function getSynthetixPriceFeed() external view returns (address synthetixPriceFeed_) {\\r\\n        return SYNTHETIX_PRICE_FEED;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8f5a0864a876aec6d7685d56af179a4bfcd0243705d817091f8ce66949a237a4\",\"license\":\"GPL-3.0\"},\"contracts/release/utils/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/*\\r\\n    This file is part of the Enzyme Protocol.\\r\\n\\r\\n    (c) Enzyme Council <council@enzyme.finance>\\r\\n\\r\\n    For the full license information, please view the LICENSE\\r\\n    file that was distributed with this source code.\\r\\n*/\\r\\n\\r\\npragma solidity 0.6.12;\\r\\n\\r\\n/// @title Proxy Contract\\r\\n/// @author Enzyme Council <security@enzyme.finance>\\r\\n/// @notice A proxy contract for all Proxy instances\\r\\n/// @dev The recommended implementation of a Proxy in EIP-1822, updated for solc 0.6.12,\\r\\n/// and using the EIP-1967 storage slot for the proxiable implementation.\\r\\n/// i.e., `bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1)`, which is\\r\\n/// \\\"0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc\\\"\\r\\n/// See: https://eips.ethereum.org/EIPS/eip-1822\\r\\ncontract Proxy {\\r\\n    constructor(bytes memory _constructData, address _contractLogic) public {\\r\\n        assembly {\\r\\n            sstore(\\r\\n                0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc,\\r\\n                _contractLogic\\r\\n            )\\r\\n        }\\r\\n        (bool success, bytes memory returnData) = _contractLogic.delegatecall(_constructData);\\r\\n        require(success, string(returnData));\\r\\n    }\\r\\n\\r\\n    fallback() external payable {\\r\\n        assembly {\\r\\n            let contractLogic := sload(\\r\\n                0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc\\r\\n            )\\r\\n            calldatacopy(0x0, 0x0, calldatasize())\\r\\n            let success := delegatecall(\\r\\n                sub(gas(), 10000),\\r\\n                contractLogic,\\r\\n                0x0,\\r\\n                calldatasize(),\\r\\n                0,\\r\\n                0\\r\\n            )\\r\\n            let retSz := returndatasize()\\r\\n            returndatacopy(0, 0, retSz)\\r\\n            switch success\\r\\n                case 0 {\\r\\n                    revert(0, retSz)\\r\\n                }\\r\\n                default {\\r\\n                    return(0, retSz)\\r\\n                }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb3e670ad4a221b816fbb12c8a8e2d48874cc969c2f10a19bda215d7cf6d9a79f\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b50604051610a34380380610a348339818101604052604081101561003357600080fd5b5080516020909101516001600160601b0319606091821b811660805291901b1660a05260805160601c60a05160601c6109ab610089600039806101f7528061059052508061041e528061054e52506109ab6000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80631c38b88f146100515780636b16d3d714610093578063cbc50d7f1461009b578063ebb3d589146100c1575b600080fd5b6100776004803603602081101561006757600080fd5b50356001600160a01b03166100c9565b604080516001600160a01b039092168252519081900360200190f35b61007761054c565b610077600480360360208110156100b157600080fd5b50356001600160a01b0316610570565b61007761058e565b600080826001600160a01b031663c98091876040518163ffffffff1660e01b815260040160206040518083038186803b15801561010557600080fd5b505afa158015610119573d6000803e3d6000fd5b505050506040513d602081101561012f57600080fd5b505160408051630b4a7c6960e31b815290519192506001600160a01b038086169290841691635a53e348916004808301926020929190829003018186803b15801561017957600080fd5b505afa15801561018d573d6000803e3d6000fd5b505050506040513d60208110156101a357600080fd5b50516001600160a01b0316146101ea5760405162461bcd60e51b81526004018080602001828103825260438152602001806109336043913960600191505060405180910390fd5b60006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633d7c74f8836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561026257600080fd5b505afa158015610276573d6000803e3d6000fd5b505050506040513d602081101561028c57600080fd5b50516001600160a01b031614156102d45760405162461bcd60e51b815260040180806020018281038252602e815260200180610905602e913960400191505060405180910390fd5b806001600160a01b031663893d20e86040518163ffffffff1660e01b815260040160206040518083038186803b15801561030d57600080fd5b505afa158015610321573d6000803e3d6000fd5b505050506040513d602081101561033757600080fd5b50516001600160a01b0316331461037f5760405162461bcd60e51b81526004018080602001828103825260348152602001806108a16034913960400191505060405180910390fd5b6001600160a01b0383811660009081526020819052604090205416156103d65760405162461bcd60e51b81526004018080602001828103825260308152602001806108d56030913960400191505060405180910390fd5b604080516001600160a01b03851660248083019190915282518083039091018152604490910182526020810180516001600160e01b031663066ad14f60e21b179052905181907f000000000000000000000000000000000000000000000000000000000000000090610447906105b2565b8080602001836001600160a01b03168152602001828103825284818151815260200191508051906020019080838360005b83811015610490578181015183820152602001610478565b50505050905090810190601f1680156104bd5780820380516001836020036101000a031916815260200191505b509350505050604051809103906000f0801580156104df573d6000803e3d6000fd5b506001600160a01b038581166000818152602081815260409182902080546001600160a01b03191694861694851790558151938452905193965090927fad30e3c9886ad5e435954f4659b95971deaeac5f66660faae080ad3245b0b8969281900390910190a25050919050565b7f000000000000000000000000000000000000000000000000000000000000000090565b6001600160a01b039081166000908152602081905260409020541690565b7f000000000000000000000000000000000000000000000000000000000000000090565b6102e1806105c08339019056fe608060405234801561001057600080fd5b506040516102e13803806102e18339818101604052604081101561003357600080fd5b810190808051604051939291908464010000000082111561005357600080fd5b90830190602082018581111561006857600080fd5b825164010000000081118282018810171561008257600080fd5b82525081516020918201929091019080838360005b838110156100af578181015183820152602001610097565b50505050905090810190601f1680156100dc5780820380516001836020036101000a031916815260200191505b50604052602001805190602001909291905050508181807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5560006060826001600160a01b0316846040518082805190602001908083835b602083106101535780518252601f199092019160209182019101610134565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d80600081146101b3576040519150601f19603f3d011682016040523d82523d6000602084013e6101b8565b606091505b50915091508181906102485760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561020d5781810151838201526020016101f5565b50505050905090810190601f16801561023a5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5050505050505060848061025d6000396000f3fe60806040527f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc543660008037600080366000846127105a03f43d806000803e818015604957816000f35b816000fdfea2646970667358221220c95d1a3af94c9deb4da2bc2572d7ae5e6e96a6324b07be0ad2c9f5a910926bc064736f6c634300060c00336465706c6f79536861726573526571756573746f7250726f78793a204f6e6c792066756e64206f776e65722063616c6c61626c656465706c6f79536861726573526571756573746f7250726f78793a2050726f787920616c7265616479206578697374736465706c6f79536861726573526571756573746f7250726f78793a204e6f7420612067656e75696e652066756e646465706c6f79536861726573526571756573746f7250726f78793a20496e76616c6964205661756c7450726f787920666f7220436f6d7074726f6c6c657250726f7879a26469706673582212204f2d5f7ceacb3147c5712172a6345349bb880a9338eaf83fc941c6b85683eccb64736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80631c38b88f146100515780636b16d3d714610093578063cbc50d7f1461009b578063ebb3d589146100c1575b600080fd5b6100776004803603602081101561006757600080fd5b50356001600160a01b03166100c9565b604080516001600160a01b039092168252519081900360200190f35b61007761054c565b610077600480360360208110156100b157600080fd5b50356001600160a01b0316610570565b61007761058e565b600080826001600160a01b031663c98091876040518163ffffffff1660e01b815260040160206040518083038186803b15801561010557600080fd5b505afa158015610119573d6000803e3d6000fd5b505050506040513d602081101561012f57600080fd5b505160408051630b4a7c6960e31b815290519192506001600160a01b038086169290841691635a53e348916004808301926020929190829003018186803b15801561017957600080fd5b505afa15801561018d573d6000803e3d6000fd5b505050506040513d60208110156101a357600080fd5b50516001600160a01b0316146101ea5760405162461bcd60e51b81526004018080602001828103825260438152602001806109336043913960600191505060405180910390fd5b60006001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633d7c74f8836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561026257600080fd5b505afa158015610276573d6000803e3d6000fd5b505050506040513d602081101561028c57600080fd5b50516001600160a01b031614156102d45760405162461bcd60e51b815260040180806020018281038252602e815260200180610905602e913960400191505060405180910390fd5b806001600160a01b031663893d20e86040518163ffffffff1660e01b815260040160206040518083038186803b15801561030d57600080fd5b505afa158015610321573d6000803e3d6000fd5b505050506040513d602081101561033757600080fd5b50516001600160a01b0316331461037f5760405162461bcd60e51b81526004018080602001828103825260348152602001806108a16034913960400191505060405180910390fd5b6001600160a01b0383811660009081526020819052604090205416156103d65760405162461bcd60e51b81526004018080602001828103825260308152602001806108d56030913960400191505060405180910390fd5b604080516001600160a01b03851660248083019190915282518083039091018152604490910182526020810180516001600160e01b031663066ad14f60e21b179052905181907f000000000000000000000000000000000000000000000000000000000000000090610447906105b2565b8080602001836001600160a01b03168152602001828103825284818151815260200191508051906020019080838360005b83811015610490578181015183820152602001610478565b50505050905090810190601f1680156104bd5780820380516001836020036101000a031916815260200191505b509350505050604051809103906000f0801580156104df573d6000803e3d6000fd5b506001600160a01b038581166000818152602081815260409182902080546001600160a01b03191694861694851790558151938452905193965090927fad30e3c9886ad5e435954f4659b95971deaeac5f66660faae080ad3245b0b8969281900390910190a25050919050565b7f000000000000000000000000000000000000000000000000000000000000000090565b6001600160a01b039081166000908152602081905260409020541690565b7f000000000000000000000000000000000000000000000000000000000000000090565b6102e1806105c08339019056fe608060405234801561001057600080fd5b506040516102e13803806102e18339818101604052604081101561003357600080fd5b810190808051604051939291908464010000000082111561005357600080fd5b90830190602082018581111561006857600080fd5b825164010000000081118282018810171561008257600080fd5b82525081516020918201929091019080838360005b838110156100af578181015183820152602001610097565b50505050905090810190601f1680156100dc5780820380516001836020036101000a031916815260200191505b50604052602001805190602001909291905050508181807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5560006060826001600160a01b0316846040518082805190602001908083835b602083106101535780518252601f199092019160209182019101610134565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d80600081146101b3576040519150601f19603f3d011682016040523d82523d6000602084013e6101b8565b606091505b50915091508181906102485760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561020d5781810151838201526020016101f5565b50505050905090810190601f16801561023a5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5050505050505060848061025d6000396000f3fe60806040527f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc543660008037600080366000846127105a03f43d806000803e818015604957816000f35b816000fdfea2646970667358221220c95d1a3af94c9deb4da2bc2572d7ae5e6e96a6324b07be0ad2c9f5a910926bc064736f6c634300060c00336465706c6f79536861726573526571756573746f7250726f78793a204f6e6c792066756e64206f776e65722063616c6c61626c656465706c6f79536861726573526571756573746f7250726f78793a2050726f787920616c7265616479206578697374736465706c6f79536861726573526571756573746f7250726f78793a204e6f7420612067656e75696e652066756e646465706c6f79536861726573526571756573746f7250726f78793a20496e76616c6964205661756c7450726f787920666f7220436f6d7074726f6c6c657250726f7879a26469706673582212204f2d5f7ceacb3147c5712172a6345349bb880a9338eaf83fc941c6b85683eccb64736f6c634300060c0033",
  "devdoc": {
    "author": "Enzyme Council <security@enzyme.finance>",
    "kind": "dev",
    "methods": {
      "deploySharesRequestorProxy(address)": {
        "params": {
          "_comptrollerProxy": "The ComptrollerProxy for which to deploy the shares requestor proxy"
        },
        "returns": {
          "sharesRequestorProxy_": "The address of the newly-deployed shares requestor proxy"
        }
      },
      "getAuthUserExecutedSharesRequestorLib()": {
        "returns": {
          "authUserExecutedSharesRequestorLib_": "The `AUTH_USER_EXECUTED_SHARES_REQUESTOR_LIB` variable value"
        }
      },
      "getDispatcher()": {
        "returns": {
          "dispatcher_": "The `DISPATCHER` variable value"
        }
      },
      "getSharesRequestorProxyForComptrollerProxy(address)": {
        "params": {
          "_comptrollerProxy": "The ComptrollerProxy for which to get the associated AuthUserExecutedSharesRequestorProxy"
        },
        "returns": {
          "sharesRequestorProxy_": "The associated AuthUserExecutedSharesRequestorProxy address"
        }
      }
    },
    "title": "AuthUserExecutedSharesRequestorFactory Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "deploySharesRequestorProxy(address)": {
        "notice": "Deploys a shares requestor proxy instance for a given ComptrollerProxy instance"
      },
      "getAuthUserExecutedSharesRequestorLib()": {
        "notice": "Gets the value of the `AUTH_USER_EXECUTED_SHARES_REQUESTOR_LIB` variable"
      },
      "getDispatcher()": {
        "notice": "Gets the value of the `DISPATCHER` variable"
      },
      "getSharesRequestorProxyForComptrollerProxy(address)": {
        "notice": "Gets the AuthUserExecutedSharesRequestorProxy associated with the given ComptrollerProxy"
      }
    },
    "notice": "Deploys and maintains a record of AuthUserExecutedSharesRequestorProxy instances",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 45197,
        "contract": "contracts/release/peripheral/shares-requestors/AuthUserExecutedSharesRequestorFactory.sol:AuthUserExecutedSharesRequestorFactory",
        "label": "comptrollerProxyToSharesRequestorProxy",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      }
    }
  }
}