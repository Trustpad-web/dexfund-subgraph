{
  "address": "0xE5db4811b094bDb10cb99ce1B119a31d540604d7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_integrationManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_liquidityGaugeToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_minter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_crvToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stethToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wethToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_uniswapV2Router2",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ADD_TRACKED_ASSETS_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "APPROVE_ASSETS_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CLAIM_REWARDS_AND_REINVEST_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CLAIM_REWARDS_AND_SWAP_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CLAIM_REWARDS_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LEND_AND_STAKE_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LEND_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REDEEM_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REMOVE_TRACKED_ASSETS_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STAKE_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TAKE_ORDER_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UNSTAKE_AND_REDEEM_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UNSTAKE_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "approveAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultProxy",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultProxy",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_encodedCallArgs",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_encodedAssetTransferArgs",
          "type": "bytes"
        }
      ],
      "name": "claimRewardsAndReinvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultProxy",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_encodedCallArgs",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "claimRewardsAndSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAdapterDeployTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurveGaugeV2RewardsHandlerCrvToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "crvToken_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurveGaugeV2RewardsHandlerMinter",
      "outputs": [
        {
          "internalType": "address",
          "name": "minter_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurveStethLiquidityPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "pool_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurveStethLiquidityWethToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "wethToken_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getIntegrationManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "integrationManager_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLiquidityGaugeToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "liquidityGaugeToken_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLpToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "lpToken_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStethToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "stethToken_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUniswapV2Router2",
      "outputs": [
        {
          "internalType": "address",
          "name": "router_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "identifier",
      "outputs": [
        {
          "internalType": "string",
          "name": "identifier_",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultProxy",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_encodedCallArgs",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_encodedAssetTransferArgs",
          "type": "bytes"
        }
      ],
      "name": "lend",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultProxy",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_encodedCallArgs",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_encodedAssetTransferArgs",
          "type": "bytes"
        }
      ],
      "name": "lendAndStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_selector",
          "type": "bytes4"
        },
        {
          "internalType": "bytes",
          "name": "_encodedCallArgs",
          "type": "bytes"
        }
      ],
      "name": "parseAssetsForMethod",
      "outputs": [
        {
          "internalType": "enum IIntegrationManager.SpendAssetsHandleType",
          "name": "spendAssetsHandleType_",
          "type": "uint8"
        },
        {
          "internalType": "address[]",
          "name": "spendAssets_",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "spendAssetAmounts_",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "incomingAssets_",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "minIncomingAssetAmounts_",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultProxy",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_encodedCallArgs",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_encodedAssetTransferArgs",
          "type": "bytes"
        }
      ],
      "name": "redeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultProxy",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_encodedCallArgs",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_encodedAssetTransferArgs",
          "type": "bytes"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultProxy",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_encodedCallArgs",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_encodedAssetTransferArgs",
          "type": "bytes"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultProxy",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_encodedCallArgs",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_encodedAssetTransferArgs",
          "type": "bytes"
        }
      ],
      "name": "unstakeAndRedeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x0e2935d939fe2b78d859db0d3a1de9f8397cd40dc3434d7d45d488ed493d92ff",
  "receipt": {
    "to": null,
    "from": "0x5a43993587dD57d58c16bbEbdf23b9F6D279176f",
    "contractAddress": "0xE5db4811b094bDb10cb99ce1B119a31d540604d7",
    "transactionIndex": 263,
    "gasUsed": "4389301",
    "logsBloom": "0x
    "blockHash": "0x9783ba2695b19161ba8f0753cf1d905c4ab08ac833e4b3ee0af987ff5bf47bb0",
    "transactionHash": "0x0e2935d939fe2b78d859db0d3a1de9f8397cd40dc3434d7d45d488ed493d92ff",
    "logs": [
      {
        "transactionIndex": 263,
        "blockNumber": 13522850,
        "transactionHash": "0x0e2935d939fe2b78d859db0d3a1de9f8397cd40dc3434d7d45d488ed493d92ff",
        "address": "0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000e5db4811b094bdb10cb99ce1b119a31d540604d7",
          "0x000000000000000000000000dc24316b9ae028f1497c275eb9192a3ea0f67022"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 344,
        "blockHash": "0x9783ba2695b19161ba8f0753cf1d905c4ab08ac833e4b3ee0af987ff5bf47bb0"
      },
      {
        "transactionIndex": 263,
        "blockNumber": 13522850,
        "transactionHash": "0x0e2935d939fe2b78d859db0d3a1de9f8397cd40dc3434d7d45d488ed493d92ff",
        "address": "0x06325440D014e39736583c165C2963BA99fAf14E",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000e5db4811b094bdb10cb99ce1b119a31d540604d7",
          "0x000000000000000000000000182b723a58739a9c974cfdb385ceadb237453c28"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 345,
        "blockHash": "0x9783ba2695b19161ba8f0753cf1d905c4ab08ac833e4b3ee0af987ff5bf47bb0"
      }
    ],
    "blockNumber": 13522850,
    "cumulativeGasUsed": "19620792",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4B37f5DCA5FB2D5548e9EcEe9f98d9Ac95f60774",
    "0x182B723a58739a9c974cFDB385ceaDb237453c28",
    "0x06325440D014e39736583c165C2963BA99fAf14E",
    "0xd061D61a4d941c39E5453435B6345Dc261C2fcE0",
    "0xDC24316b9AE028F1497c275EB9192a3Ea0f67022",
    "0xd533a949740bb3306d119cc777fa900ba034cd52",
    "0xae7ab96520de3a18e5e111b5eaab095312d7fe84",
    "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
    "0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D"
  ],
  "linkedData": {
    "type": "ADAPTER"
  },
  "solcInputHash": "34b1516e615d6cbcdbaf9542624efee9",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_integrationManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidityGaugeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_crvToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stethToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wethToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapV2Router2\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ADD_TRACKED_ASSETS_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"APPROVE_ASSETS_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CLAIM_REWARDS_AND_REINVEST_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CLAIM_REWARDS_AND_SWAP_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CLAIM_REWARDS_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LEND_AND_STAKE_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LEND_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REDEEM_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REMOVE_TRACKED_ASSETS_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKE_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TAKE_ORDER_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNSTAKE_AND_REDEEM_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNSTAKE_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"approveAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_encodedCallArgs\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_encodedAssetTransferArgs\",\"type\":\"bytes\"}],\"name\":\"claimRewardsAndReinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_encodedCallArgs\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"claimRewardsAndSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdapterDeployTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurveGaugeV2RewardsHandlerCrvToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"crvToken_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurveGaugeV2RewardsHandlerMinter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"minter_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurveStethLiquidityPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurveStethLiquidityWethToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"wethToken_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIntegrationManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"integrationManager_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiquidityGaugeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"liquidityGaugeToken_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLpToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"lpToken_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStethToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"stethToken_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUniswapV2Router2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"router_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"identifier\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"identifier_\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_encodedCallArgs\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_encodedAssetTransferArgs\",\"type\":\"bytes\"}],\"name\":\"lend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_encodedCallArgs\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_encodedAssetTransferArgs\",\"type\":\"bytes\"}],\"name\":\"lendAndStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_selector\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"_encodedCallArgs\",\"type\":\"bytes\"}],\"name\":\"parseAssetsForMethod\",\"outputs\":[{\"internalType\":\"enum IIntegrationManager.SpendAssetsHandleType\",\"name\":\"spendAssetsHandleType_\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"spendAssets_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"spendAssetAmounts_\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"incomingAssets_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minIncomingAssetAmounts_\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_encodedCallArgs\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_encodedAssetTransferArgs\",\"type\":\"bytes\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_encodedCallArgs\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_encodedAssetTransferArgs\",\"type\":\"bytes\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_encodedCallArgs\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_encodedAssetTransferArgs\",\"type\":\"bytes\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_encodedCallArgs\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_encodedAssetTransferArgs\",\"type\":\"bytes\"}],\"name\":\"unstakeAndRedeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Enzyme Council <security@enzyme.finance>\",\"details\":\"Rewards tokens are not included as spend assets or incoming assets for claimRewards() or claimRewardsAndReinvest(). Rationale: - rewards tokens can be claimed to the vault outside of the IntegrationManager, so no need to enforce policy management or emit an event - rewards tokens can be outside of the asset universe, e.g., $LDO, in which case they cannot be tracked This adapter will need to be re-deployed if UniswapV2 low liquidity becomes a concern for rewards tokens when using claimRewardsAndReinvest().\",\"kind\":\"dev\",\"methods\":{\"approveAssets(address,bytes,bytes)\":{\"details\":\"No logic necessary. Exists only to grant adapter with necessary approvals from the vault, which takes place in the IntegrationManager.\"},\"claimRewards(address,bytes,bytes)\":{\"params\":{\"_vaultProxy\":\"The VaultProxy of the calling fund\"}},\"claimRewardsAndReinvest(address,bytes,bytes)\":{\"details\":\"Requires the adapter to be granted an allowance of each reward token by the vault. For supported assets (e.g., CRV), this must be done via the `approveAssets()` function in this adapter. For unsupported assets, this must be done via `ComptrollerProxy.vaultCallOnContract()`. The `useFullBalances` option indicates whether to use only the newly claimed balances of rewards tokens, or whether to use the full balances of these assets in the vault.\",\"params\":{\"_encodedCallArgs\":\"Encoded order parameters\",\"_vaultProxy\":\"The VaultProxy of the calling fund\"}},\"claimRewardsAndSwap(address,bytes,bytes)\":{\"details\":\"Requires the adapter to be granted an allowance of each reward token by the vault. For supported assets (e.g., CRV), this must be done via the `approveAssets()` function in this adapter. For unsupported assets, this must be done via `ComptrollerProxy.vaultCallOnContract()`. The `useFullBalances` option indicates whether to use only the newly claimed balances of rewards tokens, or whether to use the full balances of these assets in the vault.\",\"params\":{\"_encodedCallArgs\":\"Encoded order parameters\",\"_vaultProxy\":\"The VaultProxy of the calling fund\"}},\"getCurveGaugeV2RewardsHandlerCrvToken()\":{\"returns\":{\"crvToken_\":\"The `CURVE_GAUGE_V2_REWARDS_HANDLER_CRV_TOKEN` variable value\"}},\"getCurveGaugeV2RewardsHandlerMinter()\":{\"returns\":{\"minter_\":\"The `CURVE_GAUGE_V2_REWARDS_HANDLER_MINTER` variable value\"}},\"getCurveStethLiquidityPool()\":{\"returns\":{\"pool_\":\"The `CURVE_STETH_LIQUIDITY_POOL` variable value\"}},\"getCurveStethLiquidityWethToken()\":{\"returns\":{\"wethToken_\":\"The `CURVE_STETH_LIQUIDITY_WETH_TOKEN` variable value\"}},\"getIntegrationManager()\":{\"returns\":{\"integrationManager_\":\"The `INTEGRATION_MANAGER` variable value\"}},\"getLiquidityGaugeToken()\":{\"returns\":{\"liquidityGaugeToken_\":\"The `LIQUIDITY_GAUGE_TOKEN` variable value\"}},\"getLpToken()\":{\"returns\":{\"lpToken_\":\"The `LP_TOKEN` variable value\"}},\"getStethToken()\":{\"returns\":{\"stethToken_\":\"The `STETH_TOKEN` variable value\"}},\"getUniswapV2Router2()\":{\"returns\":{\"router_\":\"The `UNISWAP_V2_ROUTER2` variable value\"}},\"identifier()\":{\"returns\":{\"identifier_\":\"The identifer string\"}},\"lend(address,bytes,bytes)\":{\"params\":{\"_encodedAssetTransferArgs\":\"Encoded args for expected assets to spend and receive\",\"_encodedCallArgs\":\"Encoded order parameters\",\"_vaultProxy\":\"The VaultProxy of the calling fund\"}},\"lendAndStake(address,bytes,bytes)\":{\"params\":{\"_encodedAssetTransferArgs\":\"Encoded args for expected assets to spend and receive\",\"_encodedCallArgs\":\"Encoded order parameters\",\"_vaultProxy\":\"The VaultProxy of the calling fund\"}},\"parseAssetsForMethod(bytes4,bytes)\":{\"params\":{\"_encodedCallArgs\":\"The encoded parameters for the callOnIntegration\",\"_selector\":\"The function selector for the callOnIntegration\"},\"returns\":{\"incomingAssets_\":\"The assets to receive in the call\",\"minIncomingAssetAmounts_\":\"The min asset amounts to receive in the call\",\"spendAssetAmounts_\":\"The max asset amounts to spend in the call\",\"spendAssetsHandleType_\":\"A type that dictates how to handle granting the adapter access to spend assets (`None` by default)\",\"spendAssets_\":\"The assets to spend in the call\"}},\"redeem(address,bytes,bytes)\":{\"params\":{\"_encodedAssetTransferArgs\":\"Encoded args for expected assets to spend and receive\",\"_encodedCallArgs\":\"Encoded order parameters\",\"_vaultProxy\":\"The VaultProxy of the calling fund\"}},\"stake(address,bytes,bytes)\":{\"params\":{\"_encodedAssetTransferArgs\":\"Encoded args for expected assets to spend and receive\",\"_encodedCallArgs\":\"Encoded order parameters\",\"_vaultProxy\":\"The VaultProxy of the calling fund\"}},\"unstake(address,bytes,bytes)\":{\"params\":{\"_encodedAssetTransferArgs\":\"Encoded args for expected assets to spend and receive\",\"_encodedCallArgs\":\"Encoded order parameters\",\"_vaultProxy\":\"The VaultProxy of the calling fund\"}},\"unstakeAndRedeem(address,bytes,bytes)\":{\"params\":{\"_encodedAssetTransferArgs\":\"Encoded args for expected assets to spend and receive\",\"_encodedCallArgs\":\"Encoded order parameters\",\"_vaultProxy\":\"The VaultProxy of the calling fund\"}}},\"title\":\"CurveLiquidityStethAdapter Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approveAssets(address,bytes,bytes)\":{\"notice\":\"Approves assets from the vault to be used by this contract.\"},\"claimRewards(address,bytes,bytes)\":{\"notice\":\"Claims rewards from the Curve Minter as well as pool-specific rewards\"},\"claimRewardsAndReinvest(address,bytes,bytes)\":{\"notice\":\"Claims rewards and then compounds the rewards tokens back into the staked LP token\"},\"claimRewardsAndSwap(address,bytes,bytes)\":{\"notice\":\"Claims rewards and then swaps the rewards tokens to the specified asset via UniswapV2\"},\"getCurveGaugeV2RewardsHandlerCrvToken()\":{\"notice\":\"Gets the `CURVE_GAUGE_V2_REWARDS_HANDLER_CRV_TOKEN` variable\"},\"getCurveGaugeV2RewardsHandlerMinter()\":{\"notice\":\"Gets the `CURVE_GAUGE_V2_REWARDS_HANDLER_MINTER` variable\"},\"getCurveStethLiquidityPool()\":{\"notice\":\"Gets the `CURVE_STETH_LIQUIDITY_POOL` variable\"},\"getCurveStethLiquidityWethToken()\":{\"notice\":\"Gets the `CURVE_STETH_LIQUIDITY_WETH_TOKEN` variable\"},\"getIntegrationManager()\":{\"notice\":\"Gets the `INTEGRATION_MANAGER` variable\"},\"getLiquidityGaugeToken()\":{\"notice\":\"Gets the `LIQUIDITY_GAUGE_TOKEN` variable\"},\"getLpToken()\":{\"notice\":\"Gets the `LP_TOKEN` variable\"},\"getStethToken()\":{\"notice\":\"Gets the `STETH_TOKEN` variable\"},\"getUniswapV2Router2()\":{\"notice\":\"Gets the `UNISWAP_V2_ROUTER2` variable\"},\"identifier()\":{\"notice\":\"Provides a constant string identifier for an adapter\"},\"lend(address,bytes,bytes)\":{\"notice\":\"Lends assets for steth LP tokens\"},\"lendAndStake(address,bytes,bytes)\":{\"notice\":\"Lends assets for steth LP tokens, then stakes the received LP tokens\"},\"parseAssetsForMethod(bytes4,bytes)\":{\"notice\":\"Parses the expected assets to receive from a call on integration\"},\"redeem(address,bytes,bytes)\":{\"notice\":\"Redeems steth LP tokens\"},\"stake(address,bytes,bytes)\":{\"notice\":\"Stakes steth LP tokens\"},\"unstake(address,bytes,bytes)\":{\"notice\":\"Unstakes steth LP tokens\"},\"unstakeAndRedeem(address,bytes,bytes)\":{\"notice\":\"Unstakes steth LP tokens, then redeems them\"}},\"notice\":\"Adapter for liquidity provision in Curve's steth pool (https://www.curve.fi/steth)\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/release/extensions/integration-manager/integrations/adapters/CurveLiquidityStethAdapter.sol\":\"CurveLiquidityStethAdapter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/release/extensions/integration-manager/IIntegrationManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IIntegrationManager interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Interface for the IntegrationManager\\ninterface IIntegrationManager {\\n    enum SpendAssetsHandleType {None, Approve, Transfer, Remove}\\n}\\n\",\"keccak256\":\"0x775b57aa3f44b527874e5fd848084ad6d9188d71882be033a49107e8d9a133e8\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/integration-manager/integrations/IIntegrationAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../IIntegrationManager.sol\\\";\\n\\n/// @title Integration Adapter interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Interface for all integration adapters\\ninterface IIntegrationAdapter {\\n    function identifier() external pure returns (string memory identifier_);\\n\\n    function parseAssetsForMethod(bytes4 _selector, bytes calldata _encodedCallArgs)\\n        external\\n        view\\n        returns (\\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType_,\\n            address[] memory spendAssets_,\\n            uint256[] memory spendAssetAmounts_,\\n            address[] memory incomingAssets_,\\n            uint256[] memory minIncomingAssetAmounts_\\n        );\\n}\\n\",\"keccak256\":\"0x7831b14ba1bb8abb1171986606cdd81e097566322178b83c68781d5fee0469f1\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/integration-manager/integrations/adapters/CurveLiquidityStethAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.6.12;\\n\\nimport \\\"../utils/actions/CurveGaugeV2RewardsHandlerBase.sol\\\";\\nimport \\\"../utils/actions/CurveStethLiquidityActionsMixin.sol\\\";\\nimport \\\"../utils/actions/UniswapV2ActionsMixin.sol\\\";\\nimport \\\"../utils/AdapterBase2.sol\\\";\\n\\n/// @title CurveLiquidityStethAdapter Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Adapter for liquidity provision in Curve's steth pool (https://www.curve.fi/steth)\\n/// @dev Rewards tokens are not included as spend assets or incoming assets for claimRewards()\\n/// or claimRewardsAndReinvest(). Rationale:\\n/// - rewards tokens can be claimed to the vault outside of the IntegrationManager, so no need\\n/// to enforce policy management or emit an event\\n/// - rewards tokens can be outside of the asset universe, e.g., $LDO, in which case\\n/// they cannot be tracked\\n/// This adapter will need to be re-deployed if UniswapV2 low liquidity becomes\\n/// a concern for rewards tokens when using claimRewardsAndReinvest().\\ncontract CurveLiquidityStethAdapter is\\n    AdapterBase2,\\n    CurveGaugeV2RewardsHandlerBase,\\n    CurveStethLiquidityActionsMixin,\\n    UniswapV2ActionsMixin\\n{\\n    address private immutable LIQUIDITY_GAUGE_TOKEN;\\n    address private immutable LP_TOKEN;\\n    address private immutable STETH_TOKEN;\\n\\n    constructor(\\n        address _integrationManager,\\n        address _liquidityGaugeToken,\\n        address _lpToken,\\n        address _minter,\\n        address _pool,\\n        address _crvToken,\\n        address _stethToken,\\n        address _wethToken,\\n        address _uniswapV2Router2\\n    )\\n        public\\n        AdapterBase2(_integrationManager)\\n        CurveGaugeV2RewardsHandlerBase(_minter, _crvToken)\\n        CurveStethLiquidityActionsMixin(_pool, _stethToken, _wethToken)\\n        UniswapV2ActionsMixin(_uniswapV2Router2)\\n    {\\n        LIQUIDITY_GAUGE_TOKEN = _liquidityGaugeToken;\\n        LP_TOKEN = _lpToken;\\n        STETH_TOKEN = _stethToken;\\n\\n        // Max approve contracts to spend relevant tokens\\n        ERC20(_lpToken).safeApprove(_liquidityGaugeToken, type(uint256).max);\\n    }\\n\\n    /// @dev Needed to receive ETH from redemption and to unwrap WETH\\n    receive() external payable {}\\n\\n    // EXTERNAL FUNCTIONS\\n\\n    /// @notice Provides a constant string identifier for an adapter\\n    /// @return identifier_ The identifer string\\n    function identifier() external pure override returns (string memory identifier_) {\\n        return \\\"CURVE_LIQUIDITY_STETH\\\";\\n    }\\n\\n    /// @notice Approves assets from the vault to be used by this contract.\\n    /// @dev No logic necessary. Exists only to grant adapter with necessary approvals from the vault,\\n    /// which takes place in the IntegrationManager.\\n    function approveAssets(\\n        address,\\n        bytes calldata,\\n        bytes calldata\\n    ) external {}\\n\\n    /// @notice Claims rewards from the Curve Minter as well as pool-specific rewards\\n    /// @param _vaultProxy The VaultProxy of the calling fund\\n    function claimRewards(\\n        address _vaultProxy,\\n        bytes calldata,\\n        bytes calldata\\n    ) external onlyIntegrationManager {\\n        __curveGaugeV2ClaimAllRewards(LIQUIDITY_GAUGE_TOKEN, _vaultProxy);\\n    }\\n\\n    /// @notice Claims rewards and then compounds the rewards tokens back into the staked LP token\\n    /// @param _vaultProxy The VaultProxy of the calling fund\\n    /// @param _encodedCallArgs Encoded order parameters\\n    /// @dev Requires the adapter to be granted an allowance of each reward token by the vault.\\n    /// For supported assets (e.g., CRV), this must be done via the `approveAssets()` function in this adapter.\\n    /// For unsupported assets, this must be done via `ComptrollerProxy.vaultCallOnContract()`.\\n    /// The `useFullBalances` option indicates whether to use only the newly claimed balances of\\n    /// rewards tokens, or whether to use the full balances of these assets in the vault.\\n    function claimRewardsAndReinvest(\\n        address _vaultProxy,\\n        bytes calldata _encodedCallArgs,\\n        bytes calldata _encodedAssetTransferArgs\\n    )\\n        external\\n        onlyIntegrationManager\\n        postActionIncomingAssetsTransferHandler(_vaultProxy, _encodedAssetTransferArgs)\\n    {\\n        (\\n            bool useFullBalances,\\n            uint256 minIncomingLiquidityGaugeTokenAmount\\n        ) = __decodeClaimRewardsAndReinvestCallArgs(_encodedCallArgs);\\n\\n        (\\n            address[] memory rewardsTokens,\\n            uint256[] memory rewardsTokenAmountsToUse\\n        ) = __curveGaugeV2ClaimRewardsAndPullBalances(\\n            LIQUIDITY_GAUGE_TOKEN,\\n            _vaultProxy,\\n            useFullBalances\\n        );\\n\\n        // Swap all reward tokens to WETH via UniswapV2.\\n        // Note that if a reward token takes a fee on transfer,\\n        // we could not use these memory balances.\\n        __uniswapV2SwapManyToOne(\\n            address(this),\\n            rewardsTokens,\\n            rewardsTokenAmountsToUse,\\n            getCurveStethLiquidityWethToken(),\\n            address(0)\\n        );\\n\\n        // Lend all received WETH for staked LP tokens\\n        uint256 wethBalance = ERC20(getCurveStethLiquidityWethToken()).balanceOf(address(this));\\n        if (wethBalance > 0) {\\n            __curveStethLend(wethBalance, 0, minIncomingLiquidityGaugeTokenAmount);\\n            __curveGaugeV2Stake(\\n                LIQUIDITY_GAUGE_TOKEN,\\n                LP_TOKEN,\\n                ERC20(LP_TOKEN).balanceOf(address(this))\\n            );\\n        }\\n    }\\n\\n    /// @notice Claims rewards and then swaps the rewards tokens to the specified asset via UniswapV2\\n    /// @param _vaultProxy The VaultProxy of the calling fund\\n    /// @param _encodedCallArgs Encoded order parameters\\n    /// @dev Requires the adapter to be granted an allowance of each reward token by the vault.\\n    /// For supported assets (e.g., CRV), this must be done via the `approveAssets()` function in this adapter.\\n    /// For unsupported assets, this must be done via `ComptrollerProxy.vaultCallOnContract()`.\\n    /// The `useFullBalances` option indicates whether to use only the newly claimed balances of\\n    /// rewards tokens, or whether to use the full balances of these assets in the vault.\\n    function claimRewardsAndSwap(\\n        address _vaultProxy,\\n        bytes calldata _encodedCallArgs,\\n        bytes calldata\\n    ) external onlyIntegrationManager {\\n        (bool useFullBalances, address incomingAsset, ) = __decodeClaimRewardsAndSwapCallArgs(\\n            _encodedCallArgs\\n        );\\n\\n        (\\n            address[] memory rewardsTokens,\\n            uint256[] memory rewardsTokenAmountsToUse\\n        ) = __curveGaugeV2ClaimRewardsAndPullBalances(\\n            LIQUIDITY_GAUGE_TOKEN,\\n            _vaultProxy,\\n            useFullBalances\\n        );\\n\\n        // Swap all reward tokens to the designated incomingAsset via UniswapV2.\\n        // Note that if a reward token takes a fee on transfer,\\n        // we could not use these memory balances.\\n        __uniswapV2SwapManyToOne(\\n            _vaultProxy,\\n            rewardsTokens,\\n            rewardsTokenAmountsToUse,\\n            incomingAsset,\\n            getCurveStethLiquidityWethToken()\\n        );\\n    }\\n\\n    /// @notice Lends assets for steth LP tokens\\n    /// @param _vaultProxy The VaultProxy of the calling fund\\n    /// @param _encodedCallArgs Encoded order parameters\\n    /// @param _encodedAssetTransferArgs Encoded args for expected assets to spend and receive\\n    function lend(\\n        address _vaultProxy,\\n        bytes calldata _encodedCallArgs,\\n        bytes calldata _encodedAssetTransferArgs\\n    )\\n        external\\n        onlyIntegrationManager\\n        postActionIncomingAssetsTransferHandler(_vaultProxy, _encodedAssetTransferArgs)\\n    {\\n        (\\n            uint256 outgoingWethAmount,\\n            uint256 outgoingStethAmount,\\n            uint256 minIncomingLiquidityGaugeTokenAmount\\n        ) = __decodeLendCallArgs(_encodedCallArgs);\\n\\n        __curveStethLend(\\n            outgoingWethAmount,\\n            outgoingStethAmount,\\n            minIncomingLiquidityGaugeTokenAmount\\n        );\\n    }\\n\\n    /// @notice Lends assets for steth LP tokens, then stakes the received LP tokens\\n    /// @param _vaultProxy The VaultProxy of the calling fund\\n    /// @param _encodedCallArgs Encoded order parameters\\n    /// @param _encodedAssetTransferArgs Encoded args for expected assets to spend and receive\\n    function lendAndStake(\\n        address _vaultProxy,\\n        bytes calldata _encodedCallArgs,\\n        bytes calldata _encodedAssetTransferArgs\\n    )\\n        external\\n        onlyIntegrationManager\\n        postActionIncomingAssetsTransferHandler(_vaultProxy, _encodedAssetTransferArgs)\\n    {\\n        (\\n            uint256 outgoingWethAmount,\\n            uint256 outgoingStethAmount,\\n            uint256 minIncomingLiquidityGaugeTokenAmount\\n        ) = __decodeLendCallArgs(_encodedCallArgs);\\n\\n        __curveStethLend(\\n            outgoingWethAmount,\\n            outgoingStethAmount,\\n            minIncomingLiquidityGaugeTokenAmount\\n        );\\n        __curveGaugeV2Stake(\\n            LIQUIDITY_GAUGE_TOKEN,\\n            LP_TOKEN,\\n            ERC20(LP_TOKEN).balanceOf(address(this))\\n        );\\n    }\\n\\n    /// @notice Redeems steth LP tokens\\n    /// @param _vaultProxy The VaultProxy of the calling fund\\n    /// @param _encodedCallArgs Encoded order parameters\\n    /// @param _encodedAssetTransferArgs Encoded args for expected assets to spend and receive\\n    function redeem(\\n        address _vaultProxy,\\n        bytes calldata _encodedCallArgs,\\n        bytes calldata _encodedAssetTransferArgs\\n    )\\n        external\\n        onlyIntegrationManager\\n        postActionIncomingAssetsTransferHandler(_vaultProxy, _encodedAssetTransferArgs)\\n    {\\n        (\\n            uint256 outgoingLpTokenAmount,\\n            uint256 minIncomingWethAmount,\\n            uint256 minIncomingStethAmount,\\n            bool redeemSingleAsset\\n        ) = __decodeRedeemCallArgs(_encodedCallArgs);\\n\\n        __curveStethRedeem(\\n            outgoingLpTokenAmount,\\n            minIncomingWethAmount,\\n            minIncomingStethAmount,\\n            redeemSingleAsset\\n        );\\n    }\\n\\n    /// @notice Stakes steth LP tokens\\n    /// @param _vaultProxy The VaultProxy of the calling fund\\n    /// @param _encodedCallArgs Encoded order parameters\\n    /// @param _encodedAssetTransferArgs Encoded args for expected assets to spend and receive\\n    function stake(\\n        address _vaultProxy,\\n        bytes calldata _encodedCallArgs,\\n        bytes calldata _encodedAssetTransferArgs\\n    )\\n        external\\n        onlyIntegrationManager\\n        postActionIncomingAssetsTransferHandler(_vaultProxy, _encodedAssetTransferArgs)\\n    {\\n        __curveGaugeV2Stake(\\n            LIQUIDITY_GAUGE_TOKEN,\\n            LP_TOKEN,\\n            __decodeStakeCallArgs(_encodedCallArgs)\\n        );\\n    }\\n\\n    /// @notice Unstakes steth LP tokens\\n    /// @param _vaultProxy The VaultProxy of the calling fund\\n    /// @param _encodedCallArgs Encoded order parameters\\n    /// @param _encodedAssetTransferArgs Encoded args for expected assets to spend and receive\\n    function unstake(\\n        address _vaultProxy,\\n        bytes calldata _encodedCallArgs,\\n        bytes calldata _encodedAssetTransferArgs\\n    )\\n        external\\n        onlyIntegrationManager\\n        postActionIncomingAssetsTransferHandler(_vaultProxy, _encodedAssetTransferArgs)\\n    {\\n        __curveGaugeV2Unstake(LIQUIDITY_GAUGE_TOKEN, __decodeUnstakeCallArgs(_encodedCallArgs));\\n    }\\n\\n    /// @notice Unstakes steth LP tokens, then redeems them\\n    /// @param _vaultProxy The VaultProxy of the calling fund\\n    /// @param _encodedCallArgs Encoded order parameters\\n    /// @param _encodedAssetTransferArgs Encoded args for expected assets to spend and receive\\n    function unstakeAndRedeem(\\n        address _vaultProxy,\\n        bytes calldata _encodedCallArgs,\\n        bytes calldata _encodedAssetTransferArgs\\n    )\\n        external\\n        onlyIntegrationManager\\n        postActionIncomingAssetsTransferHandler(_vaultProxy, _encodedAssetTransferArgs)\\n    {\\n        (\\n            uint256 outgoingLiquidityGaugeTokenAmount,\\n            uint256 minIncomingWethAmount,\\n            uint256 minIncomingStethAmount,\\n            bool redeemSingleAsset\\n        ) = __decodeRedeemCallArgs(_encodedCallArgs);\\n\\n        __curveGaugeV2Unstake(LIQUIDITY_GAUGE_TOKEN, outgoingLiquidityGaugeTokenAmount);\\n        __curveStethRedeem(\\n            outgoingLiquidityGaugeTokenAmount,\\n            minIncomingWethAmount,\\n            minIncomingStethAmount,\\n            redeemSingleAsset\\n        );\\n    }\\n\\n    /////////////////////////////\\n    // PARSE ASSETS FOR METHOD //\\n    /////////////////////////////\\n\\n    /// @notice Parses the expected assets to receive from a call on integration\\n    /// @param _selector The function selector for the callOnIntegration\\n    /// @param _encodedCallArgs The encoded parameters for the callOnIntegration\\n    /// @return spendAssetsHandleType_ A type that dictates how to handle granting\\n    /// the adapter access to spend assets (`None` by default)\\n    /// @return spendAssets_ The assets to spend in the call\\n    /// @return spendAssetAmounts_ The max asset amounts to spend in the call\\n    /// @return incomingAssets_ The assets to receive in the call\\n    /// @return minIncomingAssetAmounts_ The min asset amounts to receive in the call\\n    function parseAssetsForMethod(bytes4 _selector, bytes calldata _encodedCallArgs)\\n        external\\n        view\\n        override\\n        returns (\\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType_,\\n            address[] memory spendAssets_,\\n            uint256[] memory spendAssetAmounts_,\\n            address[] memory incomingAssets_,\\n            uint256[] memory minIncomingAssetAmounts_\\n        )\\n    {\\n        if (_selector == APPROVE_ASSETS_SELECTOR) {\\n            return __parseAssetsForApproveAssets(_encodedCallArgs);\\n        } else if (_selector == CLAIM_REWARDS_SELECTOR) {\\n            return __parseAssetsForClaimRewards();\\n        } else if (_selector == CLAIM_REWARDS_AND_REINVEST_SELECTOR) {\\n            return __parseAssetsForClaimRewardsAndReinvest(_encodedCallArgs);\\n        } else if (_selector == CLAIM_REWARDS_AND_SWAP_SELECTOR) {\\n            return __parseAssetsForClaimRewardsAndSwap(_encodedCallArgs);\\n        } else if (_selector == LEND_SELECTOR) {\\n            return __parseAssetsForLend(_encodedCallArgs);\\n        } else if (_selector == LEND_AND_STAKE_SELECTOR) {\\n            return __parseAssetsForLendAndStake(_encodedCallArgs);\\n        } else if (_selector == REDEEM_SELECTOR) {\\n            return __parseAssetsForRedeem(_encodedCallArgs);\\n        } else if (_selector == STAKE_SELECTOR) {\\n            return __parseAssetsForStake(_encodedCallArgs);\\n        } else if (_selector == UNSTAKE_SELECTOR) {\\n            return __parseAssetsForUnstake(_encodedCallArgs);\\n        } else if (_selector == UNSTAKE_AND_REDEEM_SELECTOR) {\\n            return __parseAssetsForUnstakeAndRedeem(_encodedCallArgs);\\n        }\\n\\n        revert(\\\"parseAssetsForMethod: _selector invalid\\\");\\n    }\\n\\n    /// @dev Helper function to parse spend and incoming assets from encoded call args\\n    /// during approveAssets() calls\\n    function __parseAssetsForApproveAssets(bytes calldata _encodedCallArgs)\\n        private\\n        view\\n        returns (\\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType_,\\n            address[] memory spendAssets_,\\n            uint256[] memory spendAssetAmounts_,\\n            address[] memory incomingAssets_,\\n            uint256[] memory minIncomingAssetAmounts_\\n        )\\n    {\\n        (spendAssets_, spendAssetAmounts_) = __decodeApproveAssetsCallArgs(_encodedCallArgs);\\n        require(\\n            spendAssets_.length == spendAssetAmounts_.length,\\n            \\\"__parseAssetsForApproveAssets: Unequal arrays\\\"\\n        );\\n\\n        // Validate that only rewards tokens are given allowances\\n        address[] memory rewardsTokens = __curveGaugeV2GetRewardsTokensWithCrv(\\n            LIQUIDITY_GAUGE_TOKEN\\n        );\\n        for (uint256 i; i < spendAssets_.length; i++) {\\n            // Allow revoking approval for any asset\\n            if (spendAssetAmounts_[i] > 0) {\\n                require(\\n                    rewardsTokens.contains(spendAssets_[i]),\\n                    \\\"__parseAssetsForApproveAssets: Invalid reward token\\\"\\n                );\\n            }\\n        }\\n\\n        return (\\n            IIntegrationManager.SpendAssetsHandleType.Approve,\\n            spendAssets_,\\n            spendAssetAmounts_,\\n            new address[](0),\\n            new uint256[](0)\\n        );\\n    }\\n\\n    /// @dev Helper function to parse spend and incoming assets from encoded call args\\n    /// during claimRewards() calls.\\n    /// No action required, all values empty.\\n    function __parseAssetsForClaimRewards()\\n        private\\n        pure\\n        returns (\\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType_,\\n            address[] memory spendAssets_,\\n            uint256[] memory spendAssetAmounts_,\\n            address[] memory incomingAssets_,\\n            uint256[] memory minIncomingAssetAmounts_\\n        )\\n    {\\n        return (\\n            IIntegrationManager.SpendAssetsHandleType.None,\\n            new address[](0),\\n            new uint256[](0),\\n            new address[](0),\\n            new uint256[](0)\\n        );\\n    }\\n\\n    /// @dev Helper function to parse spend and incoming assets from encoded call args\\n    /// during claimRewardsAndReinvest() calls.\\n    function __parseAssetsForClaimRewardsAndReinvest(bytes calldata _encodedCallArgs)\\n        private\\n        view\\n        returns (\\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType_,\\n            address[] memory spendAssets_,\\n            uint256[] memory spendAssetAmounts_,\\n            address[] memory incomingAssets_,\\n            uint256[] memory minIncomingAssetAmounts_\\n        )\\n    {\\n        (, uint256 minIncomingLiquidityGaugeTokenAmount) = __decodeClaimRewardsAndReinvestCallArgs(\\n            _encodedCallArgs\\n        );\\n\\n        incomingAssets_ = new address[](1);\\n        incomingAssets_[0] = LIQUIDITY_GAUGE_TOKEN;\\n\\n        minIncomingAssetAmounts_ = new uint256[](1);\\n        minIncomingAssetAmounts_[0] = minIncomingLiquidityGaugeTokenAmount;\\n\\n        return (\\n            IIntegrationManager.SpendAssetsHandleType.None,\\n            new address[](0),\\n            new uint256[](0),\\n            incomingAssets_,\\n            minIncomingAssetAmounts_\\n        );\\n    }\\n\\n    /// @dev Helper function to parse spend and incoming assets from encoded call args\\n    /// during claimRewardsAndSwap() calls.\\n    function __parseAssetsForClaimRewardsAndSwap(bytes calldata _encodedCallArgs)\\n        private\\n        pure\\n        returns (\\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType_,\\n            address[] memory spendAssets_,\\n            uint256[] memory spendAssetAmounts_,\\n            address[] memory incomingAssets_,\\n            uint256[] memory minIncomingAssetAmounts_\\n        )\\n    {\\n        (\\n            ,\\n            address incomingAsset,\\n            uint256 minIncomingAssetAmount\\n        ) = __decodeClaimRewardsAndSwapCallArgs(_encodedCallArgs);\\n\\n        incomingAssets_ = new address[](1);\\n        incomingAssets_[0] = incomingAsset;\\n\\n        minIncomingAssetAmounts_ = new uint256[](1);\\n        minIncomingAssetAmounts_[0] = minIncomingAssetAmount;\\n\\n        return (\\n            IIntegrationManager.SpendAssetsHandleType.None,\\n            new address[](0),\\n            new uint256[](0),\\n            incomingAssets_,\\n            minIncomingAssetAmounts_\\n        );\\n    }\\n\\n    /// @dev Helper function to parse spend and incoming assets from encoded call args\\n    /// during lend() calls\\n    function __parseAssetsForLend(bytes calldata _encodedCallArgs)\\n        private\\n        view\\n        returns (\\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType_,\\n            address[] memory spendAssets_,\\n            uint256[] memory spendAssetAmounts_,\\n            address[] memory incomingAssets_,\\n            uint256[] memory minIncomingAssetAmounts_\\n        )\\n    {\\n        (\\n            uint256 outgoingWethAmount,\\n            uint256 outgoingStethAmount,\\n            uint256 minIncomingLpTokenAmount\\n        ) = __decodeLendCallArgs(_encodedCallArgs);\\n\\n        (spendAssets_, spendAssetAmounts_) = __parseSpendAssetsForLendingCalls(\\n            outgoingWethAmount,\\n            outgoingStethAmount\\n        );\\n\\n        incomingAssets_ = new address[](1);\\n        incomingAssets_[0] = LP_TOKEN;\\n\\n        minIncomingAssetAmounts_ = new uint256[](1);\\n        minIncomingAssetAmounts_[0] = minIncomingLpTokenAmount;\\n\\n        return (\\n            IIntegrationManager.SpendAssetsHandleType.Transfer,\\n            spendAssets_,\\n            spendAssetAmounts_,\\n            incomingAssets_,\\n            minIncomingAssetAmounts_\\n        );\\n    }\\n\\n    /// @dev Helper function to parse spend and incoming assets from encoded call args\\n    /// during lendAndStake() calls\\n    function __parseAssetsForLendAndStake(bytes calldata _encodedCallArgs)\\n        private\\n        view\\n        returns (\\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType_,\\n            address[] memory spendAssets_,\\n            uint256[] memory spendAssetAmounts_,\\n            address[] memory incomingAssets_,\\n            uint256[] memory minIncomingAssetAmounts_\\n        )\\n    {\\n        (\\n            uint256 outgoingWethAmount,\\n            uint256 outgoingStethAmount,\\n            uint256 minIncomingLiquidityGaugeTokenAmount\\n        ) = __decodeLendCallArgs(_encodedCallArgs);\\n\\n        (spendAssets_, spendAssetAmounts_) = __parseSpendAssetsForLendingCalls(\\n            outgoingWethAmount,\\n            outgoingStethAmount\\n        );\\n\\n        incomingAssets_ = new address[](1);\\n        incomingAssets_[0] = LIQUIDITY_GAUGE_TOKEN;\\n\\n        minIncomingAssetAmounts_ = new uint256[](1);\\n        minIncomingAssetAmounts_[0] = minIncomingLiquidityGaugeTokenAmount;\\n\\n        return (\\n            IIntegrationManager.SpendAssetsHandleType.Transfer,\\n            spendAssets_,\\n            spendAssetAmounts_,\\n            incomingAssets_,\\n            minIncomingAssetAmounts_\\n        );\\n    }\\n\\n    /// @dev Helper function to parse spend and incoming assets from encoded call args\\n    /// during redeem() calls\\n    function __parseAssetsForRedeem(bytes calldata _encodedCallArgs)\\n        private\\n        view\\n        returns (\\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType_,\\n            address[] memory spendAssets_,\\n            uint256[] memory spendAssetAmounts_,\\n            address[] memory incomingAssets_,\\n            uint256[] memory minIncomingAssetAmounts_\\n        )\\n    {\\n        (\\n            uint256 outgoingLpTokenAmount,\\n            uint256 minIncomingWethAmount,\\n            uint256 minIncomingStethAmount,\\n            bool receiveSingleAsset\\n        ) = __decodeRedeemCallArgs(_encodedCallArgs);\\n\\n        spendAssets_ = new address[](1);\\n        spendAssets_[0] = LP_TOKEN;\\n\\n        spendAssetAmounts_ = new uint256[](1);\\n        spendAssetAmounts_[0] = outgoingLpTokenAmount;\\n\\n        (incomingAssets_, minIncomingAssetAmounts_) = __parseIncomingAssetsForRedemptionCalls(\\n            minIncomingWethAmount,\\n            minIncomingStethAmount,\\n            receiveSingleAsset\\n        );\\n\\n        return (\\n            IIntegrationManager.SpendAssetsHandleType.Transfer,\\n            spendAssets_,\\n            spendAssetAmounts_,\\n            incomingAssets_,\\n            minIncomingAssetAmounts_\\n        );\\n    }\\n\\n    /// @dev Helper function to parse spend and incoming assets from encoded call args\\n    /// during stake() calls\\n    function __parseAssetsForStake(bytes calldata _encodedCallArgs)\\n        private\\n        view\\n        returns (\\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType_,\\n            address[] memory spendAssets_,\\n            uint256[] memory spendAssetAmounts_,\\n            address[] memory incomingAssets_,\\n            uint256[] memory minIncomingAssetAmounts_\\n        )\\n    {\\n        uint256 outgoingLpTokenAmount = __decodeStakeCallArgs(_encodedCallArgs);\\n\\n        spendAssets_ = new address[](1);\\n        spendAssets_[0] = LP_TOKEN;\\n\\n        spendAssetAmounts_ = new uint256[](1);\\n        spendAssetAmounts_[0] = outgoingLpTokenAmount;\\n\\n        incomingAssets_ = new address[](1);\\n        incomingAssets_[0] = LIQUIDITY_GAUGE_TOKEN;\\n\\n        minIncomingAssetAmounts_ = new uint256[](1);\\n        minIncomingAssetAmounts_[0] = outgoingLpTokenAmount;\\n\\n        return (\\n            IIntegrationManager.SpendAssetsHandleType.Transfer,\\n            spendAssets_,\\n            spendAssetAmounts_,\\n            incomingAssets_,\\n            minIncomingAssetAmounts_\\n        );\\n    }\\n\\n    /// @dev Helper function to parse spend and incoming assets from encoded call args\\n    /// during unstake() calls\\n    function __parseAssetsForUnstake(bytes calldata _encodedCallArgs)\\n        private\\n        view\\n        returns (\\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType_,\\n            address[] memory spendAssets_,\\n            uint256[] memory spendAssetAmounts_,\\n            address[] memory incomingAssets_,\\n            uint256[] memory minIncomingAssetAmounts_\\n        )\\n    {\\n        uint256 outgoingLiquidityGaugeTokenAmount = __decodeUnstakeCallArgs(_encodedCallArgs);\\n\\n        spendAssets_ = new address[](1);\\n        spendAssets_[0] = LIQUIDITY_GAUGE_TOKEN;\\n\\n        spendAssetAmounts_ = new uint256[](1);\\n        spendAssetAmounts_[0] = outgoingLiquidityGaugeTokenAmount;\\n\\n        incomingAssets_ = new address[](1);\\n        incomingAssets_[0] = LP_TOKEN;\\n\\n        minIncomingAssetAmounts_ = new uint256[](1);\\n        minIncomingAssetAmounts_[0] = outgoingLiquidityGaugeTokenAmount;\\n\\n        return (\\n            IIntegrationManager.SpendAssetsHandleType.Transfer,\\n            spendAssets_,\\n            spendAssetAmounts_,\\n            incomingAssets_,\\n            minIncomingAssetAmounts_\\n        );\\n    }\\n\\n    /// @dev Helper function to parse spend and incoming assets from encoded call args\\n    /// during unstakeAndRedeem() calls\\n    function __parseAssetsForUnstakeAndRedeem(bytes calldata _encodedCallArgs)\\n        private\\n        view\\n        returns (\\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType_,\\n            address[] memory spendAssets_,\\n            uint256[] memory spendAssetAmounts_,\\n            address[] memory incomingAssets_,\\n            uint256[] memory minIncomingAssetAmounts_\\n        )\\n    {\\n        (\\n            uint256 outgoingLiquidityGaugeTokenAmount,\\n            uint256 minIncomingWethAmount,\\n            uint256 minIncomingStethAmount,\\n            bool receiveSingleAsset\\n        ) = __decodeRedeemCallArgs(_encodedCallArgs);\\n\\n        spendAssets_ = new address[](1);\\n        spendAssets_[0] = LIQUIDITY_GAUGE_TOKEN;\\n\\n        spendAssetAmounts_ = new uint256[](1);\\n        spendAssetAmounts_[0] = outgoingLiquidityGaugeTokenAmount;\\n\\n        (incomingAssets_, minIncomingAssetAmounts_) = __parseIncomingAssetsForRedemptionCalls(\\n            minIncomingWethAmount,\\n            minIncomingStethAmount,\\n            receiveSingleAsset\\n        );\\n\\n        return (\\n            IIntegrationManager.SpendAssetsHandleType.Transfer,\\n            spendAssets_,\\n            spendAssetAmounts_,\\n            incomingAssets_,\\n            minIncomingAssetAmounts_\\n        );\\n    }\\n\\n    /// @dev Helper function to parse spend assets for redeem() and unstakeAndRedeem() calls\\n    function __parseIncomingAssetsForRedemptionCalls(\\n        uint256 _minIncomingWethAmount,\\n        uint256 _minIncomingStethAmount,\\n        bool _receiveSingleAsset\\n    )\\n        private\\n        view\\n        returns (address[] memory incomingAssets_, uint256[] memory minIncomingAssetAmounts_)\\n    {\\n        if (_receiveSingleAsset) {\\n            incomingAssets_ = new address[](1);\\n            minIncomingAssetAmounts_ = new uint256[](1);\\n\\n            if (_minIncomingWethAmount == 0) {\\n                require(\\n                    _minIncomingStethAmount > 0,\\n                    \\\"__parseIncomingAssetsForRedemptionCalls: No min asset amount specified\\\"\\n                );\\n                incomingAssets_[0] = STETH_TOKEN;\\n                minIncomingAssetAmounts_[0] = _minIncomingStethAmount;\\n            } else {\\n                require(\\n                    _minIncomingStethAmount == 0,\\n                    \\\"__parseIncomingAssetsForRedemptionCalls: Too many min asset amounts specified\\\"\\n                );\\n                incomingAssets_[0] = getCurveStethLiquidityWethToken();\\n                minIncomingAssetAmounts_[0] = _minIncomingWethAmount;\\n            }\\n        } else {\\n            incomingAssets_ = new address[](2);\\n            incomingAssets_[0] = getCurveStethLiquidityWethToken();\\n            incomingAssets_[1] = STETH_TOKEN;\\n\\n            minIncomingAssetAmounts_ = new uint256[](2);\\n            minIncomingAssetAmounts_[0] = _minIncomingWethAmount;\\n            minIncomingAssetAmounts_[1] = _minIncomingStethAmount;\\n        }\\n\\n        return (incomingAssets_, minIncomingAssetAmounts_);\\n    }\\n\\n    /// @dev Helper function to parse spend assets for lend() and lendAndStake() calls\\n    function __parseSpendAssetsForLendingCalls(\\n        uint256 _outgoingWethAmount,\\n        uint256 _outgoingStethAmount\\n    ) private view returns (address[] memory spendAssets_, uint256[] memory spendAssetAmounts_) {\\n        if (_outgoingWethAmount > 0 && _outgoingStethAmount > 0) {\\n            spendAssets_ = new address[](2);\\n            spendAssets_[0] = getCurveStethLiquidityWethToken();\\n            spendAssets_[1] = STETH_TOKEN;\\n\\n            spendAssetAmounts_ = new uint256[](2);\\n            spendAssetAmounts_[0] = _outgoingWethAmount;\\n            spendAssetAmounts_[1] = _outgoingStethAmount;\\n        } else if (_outgoingWethAmount > 0) {\\n            spendAssets_ = new address[](1);\\n            spendAssets_[0] = getCurveStethLiquidityWethToken();\\n\\n            spendAssetAmounts_ = new uint256[](1);\\n            spendAssetAmounts_[0] = _outgoingWethAmount;\\n        } else {\\n            spendAssets_ = new address[](1);\\n            spendAssets_[0] = STETH_TOKEN;\\n\\n            spendAssetAmounts_ = new uint256[](1);\\n            spendAssetAmounts_[0] = _outgoingStethAmount;\\n        }\\n\\n        return (spendAssets_, spendAssetAmounts_);\\n    }\\n\\n    ///////////////////////\\n    // ENCODED CALL ARGS //\\n    ///////////////////////\\n\\n    /// @dev Helper to decode the encoded call arguments for approving asset allowances\\n    function __decodeApproveAssetsCallArgs(bytes memory _encodedCallArgs)\\n        private\\n        pure\\n        returns (address[] memory assets_, uint256[] memory amounts_)\\n    {\\n        return abi.decode(_encodedCallArgs, (address[], uint256[]));\\n    }\\n\\n    /// @dev Helper to decode the encoded call arguments for claiming rewards\\n    function __decodeClaimRewardsAndReinvestCallArgs(bytes memory _encodedCallArgs)\\n        private\\n        pure\\n        returns (bool useFullBalances_, uint256 minIncomingLiquidityGaugeTokenAmount_)\\n    {\\n        return abi.decode(_encodedCallArgs, (bool, uint256));\\n    }\\n\\n    /// @dev Helper to decode the encoded call arguments for claiming rewards and swapping\\n    function __decodeClaimRewardsAndSwapCallArgs(bytes memory _encodedCallArgs)\\n        private\\n        pure\\n        returns (\\n            bool useFullBalances_,\\n            address incomingAsset_,\\n            uint256 minIncomingAssetAmount_\\n        )\\n    {\\n        return abi.decode(_encodedCallArgs, (bool, address, uint256));\\n    }\\n\\n    /// @dev Helper to decode the encoded call arguments for lending\\n    function __decodeLendCallArgs(bytes memory _encodedCallArgs)\\n        private\\n        pure\\n        returns (\\n            uint256 outgoingWethAmount_,\\n            uint256 outgoingStethAmount_,\\n            uint256 minIncomingAssetAmount_\\n        )\\n    {\\n        return abi.decode(_encodedCallArgs, (uint256, uint256, uint256));\\n    }\\n\\n    /// @dev Helper to decode the encoded call arguments for redeeming.\\n    /// If `receiveSingleAsset_` is `true`, then one (and only one) of\\n    /// `minIncomingWethAmount_` and `minIncomingStethAmount_` must be >0\\n    /// to indicate which asset is to be received.\\n    function __decodeRedeemCallArgs(bytes memory _encodedCallArgs)\\n        private\\n        pure\\n        returns (\\n            uint256 outgoingAssetAmount_,\\n            uint256 minIncomingWethAmount_,\\n            uint256 minIncomingStethAmount_,\\n            bool receiveSingleAsset_\\n        )\\n    {\\n        return abi.decode(_encodedCallArgs, (uint256, uint256, uint256, bool));\\n    }\\n\\n    /// @dev Helper to decode the encoded call arguments for staking\\n    function __decodeStakeCallArgs(bytes memory _encodedCallArgs)\\n        private\\n        pure\\n        returns (uint256 outgoingLpTokenAmount_)\\n    {\\n        return abi.decode(_encodedCallArgs, (uint256));\\n    }\\n\\n    /// @dev Helper to decode the encoded call arguments for unstaking\\n    function __decodeUnstakeCallArgs(bytes memory _encodedCallArgs)\\n        private\\n        pure\\n        returns (uint256 outgoingLiquidityGaugeTokenAmount_)\\n    {\\n        return abi.decode(_encodedCallArgs, (uint256));\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the `LIQUIDITY_GAUGE_TOKEN` variable\\n    /// @return liquidityGaugeToken_ The `LIQUIDITY_GAUGE_TOKEN` variable value\\n    function getLiquidityGaugeToken() external view returns (address liquidityGaugeToken_) {\\n        return LIQUIDITY_GAUGE_TOKEN;\\n    }\\n\\n    /// @notice Gets the `LP_TOKEN` variable\\n    /// @return lpToken_ The `LP_TOKEN` variable value\\n    function getLpToken() external view returns (address lpToken_) {\\n        return LP_TOKEN;\\n    }\\n\\n    /// @notice Gets the `STETH_TOKEN` variable\\n    /// @return stethToken_ The `STETH_TOKEN` variable value\\n    function getStethToken() external view returns (address stethToken_) {\\n        return STETH_TOKEN;\\n    }\\n}\\n\",\"keccak256\":\"0x4f18b601a660f58672d6e456a7697bbc70f14113fcea28a25228ae85fcd575b5\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/integration-manager/integrations/utils/AdapterBase.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"../IIntegrationAdapter.sol\\\";\\nimport \\\"./IntegrationSelectors.sol\\\";\\n\\n/// @title AdapterBase Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A base contract for integration adapters\\nabstract contract AdapterBase is IIntegrationAdapter, IntegrationSelectors {\\n    using SafeERC20 for ERC20;\\n\\n    address internal immutable INTEGRATION_MANAGER;\\n    uint256 internal immutable ADAPTER_DEPLOY_TIMESTAMP;\\n\\n    /// @dev Provides a standard implementation for transferring assets between\\n    /// the fund's VaultProxy and the adapter, by wrapping the adapter action.\\n    /// This modifier should be implemented in almost all adapter actions, unless they\\n    /// do not move assets or can spend and receive assets directly with the VaultProxy\\n    modifier fundAssetsTransferHandler(\\n        address _vaultProxy,\\n        bytes memory _encodedAssetTransferArgs\\n    ) {\\n        (\\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType,\\n            address[] memory spendAssets,\\n            uint256[] memory spendAssetAmounts,\\n            address[] memory incomingAssets\\n        ) = __decodeEncodedAssetTransferArgs(_encodedAssetTransferArgs);\\n\\n        // Take custody of spend assets (if necessary)\\n        if (spendAssetsHandleType == IIntegrationManager.SpendAssetsHandleType.Approve) {\\n            for (uint256 i = 0; i < spendAssets.length; i++) {\\n                ERC20(spendAssets[i]).safeTransferFrom(\\n                    _vaultProxy,\\n                    address(this),\\n                    spendAssetAmounts[i]\\n                );\\n            }\\n        }\\n\\n        // Execute call\\n        _;\\n\\n        // Transfer remaining assets back to the fund's VaultProxy\\n        __transferContractAssetBalancesToFund(_vaultProxy, incomingAssets);\\n        __transferContractAssetBalancesToFund(_vaultProxy, spendAssets);\\n    }\\n\\n    modifier onlyIntegrationManager {\\n        require(\\n            msg.sender == INTEGRATION_MANAGER,\\n            \\\"Only the IntegrationManager can call this function\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(address _integrationManager) public {\\n        INTEGRATION_MANAGER = _integrationManager;\\n        ADAPTER_DEPLOY_TIMESTAMP = block.timestamp;\\n    }\\n\\n    // INTERNAL FUNCTIONS\\n\\n    /// @dev Helper for adapters to approve their integratees with the max amount of an asset.\\n    /// Since everything is done atomically, and only the balances to-be-used are sent to adapters,\\n    /// there is no need to approve exact amounts on every call.\\n    function __approveMaxAsNeeded(\\n        address _asset,\\n        address _target,\\n        uint256 _neededAmount\\n    ) internal {\\n        if (ERC20(_asset).allowance(address(this), _target) < _neededAmount) {\\n            ERC20(_asset).safeApprove(_target, type(uint256).max);\\n        }\\n    }\\n\\n    /// @dev Helper to decode the _encodedAssetTransferArgs param passed to adapter call\\n    function __decodeEncodedAssetTransferArgs(bytes memory _encodedAssetTransferArgs)\\n        internal\\n        pure\\n        returns (\\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType_,\\n            address[] memory spendAssets_,\\n            uint256[] memory spendAssetAmounts_,\\n            address[] memory incomingAssets_\\n        )\\n    {\\n        return\\n            abi.decode(\\n                _encodedAssetTransferArgs,\\n                (IIntegrationManager.SpendAssetsHandleType, address[], uint256[], address[])\\n            );\\n    }\\n\\n    /// @dev Helper to transfer full contract balances of assets to the specified VaultProxy\\n    function __transferContractAssetBalancesToFund(address _vaultProxy, address[] memory _assets)\\n        private\\n    {\\n        for (uint256 i = 0; i < _assets.length; i++) {\\n            uint256 postCallAmount = ERC20(_assets[i]).balanceOf(address(this));\\n            if (postCallAmount > 0) {\\n                ERC20(_assets[i]).safeTransfer(_vaultProxy, postCallAmount);\\n            }\\n        }\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the `INTEGRATION_MANAGER` variable\\n    /// @return integrationManager_ The `INTEGRATION_MANAGER` variable value\\n    function getIntegrationManager() external view returns (address integrationManager_) {\\n        return INTEGRATION_MANAGER;\\n    }\\n\\n    function getAdapterDeployTimestamp() external view returns (uint256) {\\n        return ADAPTER_DEPLOY_TIMESTAMP;\\n    }\\n}\\n\",\"keccak256\":\"0x7ac96fd368835516f177eca3d6ceef8f83d3255bbb4becfccf5641436ab4222d\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/integration-manager/integrations/utils/AdapterBase2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./AdapterBase.sol\\\";\\n\\n/// @title AdapterBase2 Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A base contract for integration adapters that extends AdapterBase\\n/// @dev This is a temporary contract that will be merged into AdapterBase with the next release\\nabstract contract AdapterBase2 is AdapterBase {\\n    /// @dev Provides a standard implementation for transferring incoming assets and\\n    /// unspent spend assets from an adapter to a VaultProxy at the end of an adapter action\\n    modifier postActionAssetsTransferHandler(\\n        address _vaultProxy,\\n        bytes memory _encodedAssetTransferArgs\\n    ) {\\n        _;\\n\\n        (\\n            ,\\n            address[] memory spendAssets,\\n            ,\\n            address[] memory incomingAssets\\n        ) = __decodeEncodedAssetTransferArgs(_encodedAssetTransferArgs);\\n\\n        __transferFullAssetBalances(_vaultProxy, incomingAssets);\\n        __transferFullAssetBalances(_vaultProxy, spendAssets);\\n    }\\n\\n    /// @dev Provides a standard implementation for transferring incoming assets\\n    /// from an adapter to a VaultProxy at the end of an adapter action\\n    modifier postActionIncomingAssetsTransferHandler(\\n        address _vaultProxy,\\n        bytes memory _encodedAssetTransferArgs\\n    ) {\\n        _;\\n\\n        (, , , address[] memory incomingAssets) = __decodeEncodedAssetTransferArgs(\\n            _encodedAssetTransferArgs\\n        );\\n\\n        __transferFullAssetBalances(_vaultProxy, incomingAssets);\\n    }\\n\\n    /// @dev Provides a standard implementation for transferring unspent spend assets\\n    /// from an adapter to a VaultProxy at the end of an adapter action\\n    modifier postActionSpendAssetsTransferHandler(\\n        address _vaultProxy,\\n        bytes memory _encodedAssetTransferArgs\\n    ) {\\n        _;\\n\\n        (, address[] memory spendAssets, , ) = __decodeEncodedAssetTransferArgs(\\n            _encodedAssetTransferArgs\\n        );\\n\\n        __transferFullAssetBalances(_vaultProxy, spendAssets);\\n    }\\n\\n    constructor(address _integrationManager) public AdapterBase(_integrationManager) {}\\n\\n    /// @dev Helper to transfer full asset balances of current contract to the specified target\\n    function __transferFullAssetBalances(address _target, address[] memory _assets) internal {\\n        for (uint256 i = 0; i < _assets.length; i++) {\\n            uint256 balance = ERC20(_assets[i]).balanceOf(address(this));\\n            if (balance > 0) {\\n                ERC20(_assets[i]).safeTransfer(_target, balance);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa5594ed46431f4b58245fcf2a26ac25d87502d7529036906ec6bf07d444e7692\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/integration-manager/integrations/utils/IntegrationSelectors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IntegrationSelectors Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Selectors for integration actions\\n/// @dev Selectors are created from their signatures rather than hardcoded for easy verification\\nabstract contract IntegrationSelectors {\\n    // Tracked assets\\n    bytes4 public constant ADD_TRACKED_ASSETS_SELECTOR = bytes4(\\n        keccak256(\\\"addTrackedAssets(address,bytes,bytes)\\\")\\n    );\\n    bytes4 public constant REMOVE_TRACKED_ASSETS_SELECTOR = bytes4(\\n        keccak256(\\\"removeTrackedAssets(address,bytes,bytes)\\\")\\n    );\\n\\n    // Asset approval\\n    bytes4 public constant APPROVE_ASSETS_SELECTOR = bytes4(\\n        keccak256(\\\"approveAssets(address,bytes,bytes)\\\")\\n    );\\n\\n    // Trading\\n    bytes4 public constant TAKE_ORDER_SELECTOR = bytes4(\\n        keccak256(\\\"takeOrder(address,bytes,bytes)\\\")\\n    );\\n\\n    // Lending\\n    bytes4 public constant LEND_SELECTOR = bytes4(keccak256(\\\"lend(address,bytes,bytes)\\\"));\\n    bytes4 public constant REDEEM_SELECTOR = bytes4(keccak256(\\\"redeem(address,bytes,bytes)\\\"));\\n\\n    // Staking\\n    bytes4 public constant STAKE_SELECTOR = bytes4(keccak256(\\\"stake(address,bytes,bytes)\\\"));\\n    bytes4 public constant UNSTAKE_SELECTOR = bytes4(keccak256(\\\"unstake(address,bytes,bytes)\\\"));\\n\\n    // Rewards\\n    bytes4 public constant CLAIM_REWARDS_SELECTOR = bytes4(\\n        keccak256(\\\"claimRewards(address,bytes,bytes)\\\")\\n    );\\n\\n    // Combined\\n    bytes4 public constant CLAIM_REWARDS_AND_REINVEST_SELECTOR = bytes4(\\n        keccak256(\\\"claimRewardsAndReinvest(address,bytes,bytes)\\\")\\n    );\\n    bytes4 public constant CLAIM_REWARDS_AND_SWAP_SELECTOR = bytes4(\\n        keccak256(\\\"claimRewardsAndSwap(address,bytes,bytes)\\\")\\n    );\\n    bytes4 public constant LEND_AND_STAKE_SELECTOR = bytes4(\\n        keccak256(\\\"lendAndStake(address,bytes,bytes)\\\")\\n    );\\n    bytes4 public constant UNSTAKE_AND_REDEEM_SELECTOR = bytes4(\\n        keccak256(\\\"unstakeAndRedeem(address,bytes,bytes)\\\")\\n    );\\n}\\n\",\"keccak256\":\"0xc4642035f4c87808494beb8e852bae33fc950b17a7b44dadfadc033d87ed27fb\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/integration-manager/integrations/utils/actions/CurveGaugeV2ActionsMixin.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../../../../../interfaces/ICurveLiquidityGaugeV2.sol\\\";\\nimport \\\"../../../../../utils/AssetHelpers.sol\\\";\\n\\n/// @title CurveGaugeV2ActionsMixin Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Mixin contract for interacting with any Curve LiquidityGaugeV2 contract\\nabstract contract CurveGaugeV2ActionsMixin is AssetHelpers {\\n    uint256 private constant CURVE_GAUGE_V2_MAX_REWARDS = 8;\\n\\n    /// @dev Helper to claim pool-specific rewards\\n    function __curveGaugeV2ClaimRewards(address _gauge, address _target) internal {\\n        ICurveLiquidityGaugeV2(_gauge).claim_rewards(_target);\\n    }\\n\\n    /// @dev Helper to get list of pool-specific rewards tokens\\n    function __curveGaugeV2GetRewardsTokens(address _gauge)\\n        internal\\n        view\\n        returns (address[] memory rewardsTokens_)\\n    {\\n        address[] memory lpRewardsTokensWithEmpties = new address[](CURVE_GAUGE_V2_MAX_REWARDS);\\n        uint256 rewardsTokensCount;\\n        for (uint256 i; i < CURVE_GAUGE_V2_MAX_REWARDS; i++) {\\n            address rewardToken = ICurveLiquidityGaugeV2(_gauge).reward_tokens(i);\\n            if (rewardToken != address(0)) {\\n                lpRewardsTokensWithEmpties[i] = rewardToken;\\n                rewardsTokensCount++;\\n            } else {\\n                break;\\n            }\\n        }\\n\\n        rewardsTokens_ = new address[](rewardsTokensCount);\\n        for (uint256 i; i < rewardsTokensCount; i++) {\\n            rewardsTokens_[i] = lpRewardsTokensWithEmpties[i];\\n        }\\n\\n        return rewardsTokens_;\\n    }\\n\\n    /// @dev Helper to stake LP tokens\\n    function __curveGaugeV2Stake(\\n        address _gauge,\\n        address _lpToken,\\n        uint256 _amount\\n    ) internal {\\n        __approveAssetMaxAsNeeded(_lpToken, _gauge, _amount);\\n        ICurveLiquidityGaugeV2(_gauge).deposit(_amount, address(this));\\n    }\\n\\n    /// @dev Helper to unstake LP tokens\\n    function __curveGaugeV2Unstake(address _gauge, uint256 _amount) internal {\\n        ICurveLiquidityGaugeV2(_gauge).withdraw(_amount);\\n    }\\n}\\n\",\"keccak256\":\"0xb297d967916d8560814b5d85ca8abedacf7d3c414390a0eb1179aa3adaa9be1b\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/integration-manager/integrations/utils/actions/CurveGaugeV2RewardsHandlerBase.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../../../../../interfaces/ICurveMinter.sol\\\";\\nimport \\\"../../../../../utils/AddressArrayLib.sol\\\";\\nimport \\\"./CurveGaugeV2ActionsMixin.sol\\\";\\n\\n/// @title CurveGaugeV2RewardsHandlerBase Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Base contract for handling claiming and reinvesting rewards for a Curve pool\\n/// that uses the LiquidityGaugeV2 contract\\nabstract contract CurveGaugeV2RewardsHandlerBase is CurveGaugeV2ActionsMixin {\\n    using AddressArrayLib for address[];\\n\\n    address private immutable CURVE_GAUGE_V2_REWARDS_HANDLER_CRV_TOKEN;\\n    address private immutable CURVE_GAUGE_V2_REWARDS_HANDLER_MINTER;\\n\\n    constructor(address _minter, address _crvToken) public {\\n        CURVE_GAUGE_V2_REWARDS_HANDLER_CRV_TOKEN = _crvToken;\\n        CURVE_GAUGE_V2_REWARDS_HANDLER_MINTER = _minter;\\n    }\\n\\n    /// @dev Helper to claim all rewards (CRV and pool-specific).\\n    /// Requires contract to be approved to use mint_for().\\n    function __curveGaugeV2ClaimAllRewards(address _gauge, address _target) internal {\\n        // Claim owed $CRV\\n        ICurveMinter(CURVE_GAUGE_V2_REWARDS_HANDLER_MINTER).mint_for(_gauge, _target);\\n\\n        // Claim owed pool-specific rewards\\n        __curveGaugeV2ClaimRewards(_gauge, _target);\\n    }\\n\\n    /// @dev Helper to claim all rewards, then pull either the newly claimed balances only,\\n    /// or full vault balances into the current contract\\n    function __curveGaugeV2ClaimRewardsAndPullBalances(\\n        address _gauge,\\n        address _target,\\n        bool _useFullBalances\\n    )\\n        internal\\n        returns (address[] memory rewardsTokens_, uint256[] memory rewardsTokenAmountsPulled_)\\n    {\\n        if (_useFullBalances) {\\n            return __curveGaugeV2ClaimRewardsAndPullFullBalances(_gauge, _target);\\n        }\\n\\n        return __curveGaugeV2ClaimRewardsAndPullClaimedBalances(_gauge, _target);\\n    }\\n\\n    /// @dev Helper to claim all rewards, then pull only the newly claimed balances\\n    /// of all rewards tokens into the current contract\\n    function __curveGaugeV2ClaimRewardsAndPullClaimedBalances(address _gauge, address _target)\\n        internal\\n        returns (address[] memory rewardsTokens_, uint256[] memory rewardsTokenAmountsPulled_)\\n    {\\n        rewardsTokens_ = __curveGaugeV2GetRewardsTokensWithCrv(_gauge);\\n\\n        uint256[] memory rewardsTokenPreClaimBalances = new uint256[](rewardsTokens_.length);\\n        for (uint256 i; i < rewardsTokens_.length; i++) {\\n            rewardsTokenPreClaimBalances[i] = ERC20(rewardsTokens_[i]).balanceOf(_target);\\n        }\\n\\n        __curveGaugeV2ClaimAllRewards(_gauge, _target);\\n\\n        rewardsTokenAmountsPulled_ = __pullPartialAssetBalances(\\n            _target,\\n            rewardsTokens_,\\n            rewardsTokenPreClaimBalances\\n        );\\n\\n        return (rewardsTokens_, rewardsTokenAmountsPulled_);\\n    }\\n\\n    /// @dev Helper to claim all rewards, then pull the full balances of all rewards tokens\\n    /// in the target into the current contract\\n    function __curveGaugeV2ClaimRewardsAndPullFullBalances(address _gauge, address _target)\\n        internal\\n        returns (address[] memory rewardsTokens_, uint256[] memory rewardsTokenAmountsPulled_)\\n    {\\n        __curveGaugeV2ClaimAllRewards(_gauge, _target);\\n\\n        rewardsTokens_ = __curveGaugeV2GetRewardsTokensWithCrv(_gauge);\\n        rewardsTokenAmountsPulled_ = __pullFullAssetBalances(_target, rewardsTokens_);\\n\\n        return (rewardsTokens_, rewardsTokenAmountsPulled_);\\n    }\\n\\n    /// @dev Helper to get all rewards tokens for staking LP tokens\\n    function __curveGaugeV2GetRewardsTokensWithCrv(address _gauge)\\n        internal\\n        view\\n        returns (address[] memory rewardsTokens_)\\n    {\\n        return\\n            __curveGaugeV2GetRewardsTokens(_gauge).addUniqueItem(\\n                CURVE_GAUGE_V2_REWARDS_HANDLER_CRV_TOKEN\\n            );\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the `CURVE_GAUGE_V2_REWARDS_HANDLER_CRV_TOKEN` variable\\n    /// @return crvToken_ The `CURVE_GAUGE_V2_REWARDS_HANDLER_CRV_TOKEN` variable value\\n    function getCurveGaugeV2RewardsHandlerCrvToken() public view returns (address crvToken_) {\\n        return CURVE_GAUGE_V2_REWARDS_HANDLER_CRV_TOKEN;\\n    }\\n\\n    /// @notice Gets the `CURVE_GAUGE_V2_REWARDS_HANDLER_MINTER` variable\\n    /// @return minter_ The `CURVE_GAUGE_V2_REWARDS_HANDLER_MINTER` variable value\\n    function getCurveGaugeV2RewardsHandlerMinter() public view returns (address minter_) {\\n        return CURVE_GAUGE_V2_REWARDS_HANDLER_MINTER;\\n    }\\n}\\n\",\"keccak256\":\"0xb566d27396740aa25b7a5052efb45695f194a63e0385e54ebf3bc0b65783e09d\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/integration-manager/integrations/utils/actions/CurveStethLiquidityActionsMixin.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"../../../../../interfaces/ICurveStableSwapSteth.sol\\\";\\nimport \\\"../../../../../interfaces/IWETH.sol\\\";\\n\\n/// @title CurveStethLiquidityActionsMixin Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Mixin contract for interacting with the Curve steth pool's liquidity functions\\n/// @dev Inheriting contract must have a receive() function\\nabstract contract CurveStethLiquidityActionsMixin {\\n    using SafeERC20 for ERC20;\\n\\n    int128 private constant CURVE_STETH_POOL_INDEX_ETH = 0;\\n    int128 private constant CURVE_STETH_POOL_INDEX_STETH = 1;\\n\\n    address private immutable CURVE_STETH_LIQUIDITY_POOL;\\n    address private immutable CURVE_STETH_LIQUIDITY_WETH_TOKEN;\\n\\n    constructor(\\n        address _pool,\\n        address _stethToken,\\n        address _wethToken\\n    ) public {\\n        CURVE_STETH_LIQUIDITY_POOL = _pool;\\n        CURVE_STETH_LIQUIDITY_WETH_TOKEN = _wethToken;\\n\\n        // Pre-approve pool to use max of steth token\\n        ERC20(_stethToken).safeApprove(_pool, type(uint256).max);\\n    }\\n\\n    /// @dev Helper to add liquidity to the pool\\n    function __curveStethLend(\\n        uint256 _outgoingWethAmount,\\n        uint256 _outgoingStethAmount,\\n        uint256 _minIncomingLPTokenAmount\\n    ) internal {\\n        if (_outgoingWethAmount > 0) {\\n            IWETH((CURVE_STETH_LIQUIDITY_WETH_TOKEN)).withdraw(_outgoingWethAmount);\\n        }\\n\\n        ICurveStableSwapSteth(CURVE_STETH_LIQUIDITY_POOL).add_liquidity{\\n            value: _outgoingWethAmount\\n        }([_outgoingWethAmount, _outgoingStethAmount], _minIncomingLPTokenAmount);\\n    }\\n\\n    /// @dev Helper to remove liquidity from the pool.\\n    // Assumes that if _redeemSingleAsset is true, then\\n    // \\\"_minIncomingWethAmount > 0 XOR _minIncomingStethAmount > 0\\\" has already been validated.\\n    function __curveStethRedeem(\\n        uint256 _outgoingLPTokenAmount,\\n        uint256 _minIncomingWethAmount,\\n        uint256 _minIncomingStethAmount,\\n        bool _redeemSingleAsset\\n    ) internal {\\n        if (_redeemSingleAsset) {\\n            if (_minIncomingWethAmount > 0) {\\n                ICurveStableSwapSteth(CURVE_STETH_LIQUIDITY_POOL).remove_liquidity_one_coin(\\n                    _outgoingLPTokenAmount,\\n                    CURVE_STETH_POOL_INDEX_ETH,\\n                    _minIncomingWethAmount\\n                );\\n\\n                IWETH(payable(CURVE_STETH_LIQUIDITY_WETH_TOKEN)).deposit{\\n                    value: payable(address(this)).balance\\n                }();\\n            } else {\\n                ICurveStableSwapSteth(CURVE_STETH_LIQUIDITY_POOL).remove_liquidity_one_coin(\\n                    _outgoingLPTokenAmount,\\n                    CURVE_STETH_POOL_INDEX_STETH,\\n                    _minIncomingStethAmount\\n                );\\n            }\\n        } else {\\n            ICurveStableSwapSteth(CURVE_STETH_LIQUIDITY_POOL).remove_liquidity(\\n                _outgoingLPTokenAmount,\\n                [_minIncomingWethAmount, _minIncomingStethAmount]\\n            );\\n\\n            IWETH(payable(CURVE_STETH_LIQUIDITY_WETH_TOKEN)).deposit{\\n                value: payable(address(this)).balance\\n            }();\\n        }\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the `CURVE_STETH_LIQUIDITY_POOL` variable\\n    /// @return pool_ The `CURVE_STETH_LIQUIDITY_POOL` variable value\\n    function getCurveStethLiquidityPool() public view returns (address pool_) {\\n        return CURVE_STETH_LIQUIDITY_POOL;\\n    }\\n\\n    /// @notice Gets the `CURVE_STETH_LIQUIDITY_WETH_TOKEN` variable\\n    /// @return wethToken_ The `CURVE_STETH_LIQUIDITY_WETH_TOKEN` variable value\\n    function getCurveStethLiquidityWethToken() public view returns (address wethToken_) {\\n        return CURVE_STETH_LIQUIDITY_WETH_TOKEN;\\n    }\\n}\\n\",\"keccak256\":\"0x5d70b6c2bc14f705a81346a2f688762f76f37ef0b447653f094c5282c6680fbc\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/integration-manager/integrations/utils/actions/UniswapV2ActionsMixin.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../../../../../interfaces/IUniswapV2Router2.sol\\\";\\nimport \\\"../../../../../utils/AssetHelpers.sol\\\";\\n\\n/// @title UniswapV2ActionsMixin Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Mixin contract for interacting with Uniswap v2\\nabstract contract UniswapV2ActionsMixin is AssetHelpers {\\n    address private immutable UNISWAP_V2_ROUTER2;\\n\\n    constructor(address _router) public {\\n        UNISWAP_V2_ROUTER2 = _router;\\n    }\\n\\n    // EXTERNAL FUNCTIONS\\n\\n    /// @dev Helper to add liquidity\\n    function __uniswapV2Lend(\\n        address _recipient,\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _amountADesired,\\n        uint256 _amountBDesired,\\n        uint256 _amountAMin,\\n        uint256 _amountBMin\\n    ) internal {\\n        __approveAssetMaxAsNeeded(_tokenA, UNISWAP_V2_ROUTER2, _amountADesired);\\n        __approveAssetMaxAsNeeded(_tokenB, UNISWAP_V2_ROUTER2, _amountBDesired);\\n\\n        // Execute lend on Uniswap\\n        IUniswapV2Router2(UNISWAP_V2_ROUTER2).addLiquidity(\\n            _tokenA,\\n            _tokenB,\\n            _amountADesired,\\n            _amountBDesired,\\n            _amountAMin,\\n            _amountBMin,\\n            _recipient,\\n            __uniswapV2GetActionDeadline()\\n        );\\n    }\\n\\n    /// @dev Helper to remove liquidity\\n    function __uniswapV2Redeem(\\n        address _recipient,\\n        address _poolToken,\\n        uint256 _poolTokenAmount,\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _amountAMin,\\n        uint256 _amountBMin\\n    ) internal {\\n        __approveAssetMaxAsNeeded(_poolToken, UNISWAP_V2_ROUTER2, _poolTokenAmount);\\n\\n        // Execute redeem on Uniswap\\n        IUniswapV2Router2(UNISWAP_V2_ROUTER2).removeLiquidity(\\n            _tokenA,\\n            _tokenB,\\n            _poolTokenAmount,\\n            _amountAMin,\\n            _amountBMin,\\n            _recipient,\\n            __uniswapV2GetActionDeadline()\\n        );\\n    }\\n\\n    /// @dev Helper to execute a swap\\n    function __uniswapV2Swap(\\n        address _recipient,\\n        uint256 _outgoingAssetAmount,\\n        uint256 _minIncomingAssetAmount,\\n        address[] memory _path\\n    ) internal {\\n        __approveAssetMaxAsNeeded(_path[0], UNISWAP_V2_ROUTER2, _outgoingAssetAmount);\\n\\n        // Execute fill\\n        IUniswapV2Router2(UNISWAP_V2_ROUTER2).swapExactTokensForTokens(\\n            _outgoingAssetAmount,\\n            _minIncomingAssetAmount,\\n            _path,\\n            _recipient,\\n            __uniswapV2GetActionDeadline()\\n        );\\n    }\\n\\n    /// @dev Helper to swap many assets to a single target asset.\\n    /// The intermediary asset will generally be WETH, and though we could make it\\n    // per-outgoing asset, seems like overkill until there is a need.\\n    function __uniswapV2SwapManyToOne(\\n        address _recipient,\\n        address[] memory _outgoingAssets,\\n        uint256[] memory _outgoingAssetAmounts,\\n        address _incomingAsset,\\n        address _intermediaryAsset\\n    ) internal {\\n        bool noIntermediary = _intermediaryAsset == address(0) ||\\n            _intermediaryAsset == _incomingAsset;\\n        for (uint256 i; i < _outgoingAssets.length; i++) {\\n            // Skip cases where outgoing and incoming assets are the same, or\\n            // there is no specified outgoing asset or amount\\n            if (\\n                _outgoingAssetAmounts[i] == 0 ||\\n                _outgoingAssets[i] == address(0) ||\\n                _outgoingAssets[i] == _incomingAsset\\n            ) {\\n                continue;\\n            }\\n\\n            address[] memory uniswapPath;\\n            if (noIntermediary || _outgoingAssets[i] == _intermediaryAsset) {\\n                uniswapPath = new address[](2);\\n                uniswapPath[0] = _outgoingAssets[i];\\n                uniswapPath[1] = _incomingAsset;\\n            } else {\\n                uniswapPath = new address[](3);\\n                uniswapPath[0] = _outgoingAssets[i];\\n                uniswapPath[1] = _intermediaryAsset;\\n                uniswapPath[2] = _incomingAsset;\\n            }\\n\\n            __uniswapV2Swap(_recipient, _outgoingAssetAmounts[i], 1, uniswapPath);\\n        }\\n    }\\n\\n    /// @dev Helper to get the deadline for a Uniswap V2 action in a standardized way\\n    function __uniswapV2GetActionDeadline() private view returns (uint256 deadline_) {\\n        return block.timestamp + 1;\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the `UNISWAP_V2_ROUTER2` variable\\n    /// @return router_ The `UNISWAP_V2_ROUTER2` variable value\\n    function getUniswapV2Router2() public view returns (address router_) {\\n        return UNISWAP_V2_ROUTER2;\\n    }\\n}\\n\",\"keccak256\":\"0x3af46e9c45d7ffa9d12ceb6651f1f1e73debf6d1697de11bfa0c7575cef2dcd0\",\"license\":\"GPL-3.0\"},\"contracts/release/interfaces/ICurveLiquidityGaugeV2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title ICurveLiquidityGaugeV2 interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface ICurveLiquidityGaugeV2 {\\n    function claim_rewards(address) external;\\n\\n    function deposit(uint256, address) external;\\n\\n    function reward_tokens(uint256) external view returns (address);\\n\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0x0fbd9bdd7d7df1cd92c065ae3e62f1767d80914f086a0f146a2c9874aa7d4e30\",\"license\":\"GPL-3.0\"},\"contracts/release/interfaces/ICurveMinter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title ICurveMinter interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface ICurveMinter {\\n    function mint_for(address, address) external;\\n}\\n\",\"keccak256\":\"0xbfe0cfa932805d9cda714d7ef7cb6b42d08c782b0ffa46de5e2c0530f4ce5ba1\",\"license\":\"GPL-3.0\"},\"contracts/release/interfaces/ICurveStableSwapSteth.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title ICurveStableSwapSteth interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface ICurveStableSwapSteth {\\n    function add_liquidity(uint256[2] calldata, uint256) external payable returns (uint256);\\n\\n    function remove_liquidity(uint256, uint256[2] calldata) external returns (uint256[2] memory);\\n\\n    function remove_liquidity_one_coin(\\n        uint256,\\n        int128,\\n        uint256\\n    ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xa8cd141c374d4452ce528a653816557e7faf453729d6e299d543c5487b9b2a4f\",\"license\":\"GPL-3.0\"},\"contracts/release/interfaces/IUniswapV2Router2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title UniswapV2Router2 Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @dev Minimal interface for our interactions with Uniswap V2's Router2\\ninterface IUniswapV2Router2 {\\n    function addLiquidity(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        address,\\n        uint256\\n    )\\n        external\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function removeLiquidity(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        uint256,\\n        address,\\n        uint256\\n    ) external returns (uint256, uint256);\\n\\n    function swapExactTokensForTokens(\\n        uint256,\\n        uint256,\\n        address[] calldata,\\n        address,\\n        uint256\\n    ) external returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0xe282398f74a9b87b266137d4be1a9ab8a2b2239a9912245515bfece8c5fbc209\",\"license\":\"GPL-3.0\"},\"contracts/release/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title WETH Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0x85b5e76c50599abed5b16555065e4809b25fd0e6f75a63cf72269c1545e96b96\",\"license\":\"GPL-3.0\"},\"contracts/release/utils/AddressArrayLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title AddressArray Library\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A library to extend the address array data type\\nlibrary AddressArrayLib {\\n    /// @dev Helper to add an item to an array. Does not assert uniqueness of the new item.\\n    function addItem(address[] memory _self, address _itemToAdd)\\n        internal\\n        pure\\n        returns (address[] memory nextArray_)\\n    {\\n        nextArray_ = new address[](_self.length + 1);\\n        for (uint256 i; i < _self.length; i++) {\\n            nextArray_[i] = _self[i];\\n        }\\n        nextArray_[_self.length] = _itemToAdd;\\n\\n        return nextArray_;\\n    }\\n\\n    /// @dev Helper to add an item to an array, only if it is not already in the array.\\n    function addUniqueItem(address[] memory _self, address _itemToAdd)\\n        internal\\n        pure\\n        returns (address[] memory nextArray_)\\n    {\\n        if (contains(_self, _itemToAdd)) {\\n            return _self;\\n        }\\n\\n        return addItem(_self, _itemToAdd);\\n    }\\n\\n    /// @dev Helper to verify if an array contains a particular value\\n    function contains(address[] memory _self, address _target)\\n        internal\\n        pure\\n        returns (bool doesContain_)\\n    {\\n        for (uint256 i; i < _self.length; i++) {\\n            if (_target == _self[i]) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /// @dev Helper to reassign all items in an array with a specified value\\n    function fill(address[] memory _self, address _value)\\n        internal\\n        pure\\n        returns (address[] memory nextArray_)\\n    {\\n        nextArray_ = new address[](_self.length);\\n        for (uint256 i; i < nextArray_.length; i++) {\\n            nextArray_[i] = _value;\\n        }\\n\\n        return nextArray_;\\n    }\\n\\n    /// @dev Helper to verify if array is a set of unique values.\\n    /// Does not assert length > 0.\\n    function isUniqueSet(address[] memory _self) internal pure returns (bool isUnique_) {\\n        if (_self.length <= 1) {\\n            return true;\\n        }\\n\\n        uint256 arrayLength = _self.length;\\n        for (uint256 i; i < arrayLength; i++) {\\n            for (uint256 j = i + 1; j < arrayLength; j++) {\\n                if (_self[i] == _self[j]) {\\n                    return false;\\n                }\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /// @dev Helper to remove items from an array. Removes all matching occurrences of each item.\\n    /// Does not assert uniqueness of either array.\\n    function removeItems(address[] memory _self, address[] memory _itemsToRemove)\\n        internal\\n        pure\\n        returns (address[] memory nextArray_)\\n    {\\n        if (_itemsToRemove.length == 0) {\\n            return _self;\\n        }\\n\\n        bool[] memory indexesToRemove = new bool[](_self.length);\\n        uint256 remainingItemsCount = _self.length;\\n        for (uint256 i; i < _self.length; i++) {\\n            if (contains(_itemsToRemove, _self[i])) {\\n                indexesToRemove[i] = true;\\n                remainingItemsCount--;\\n            }\\n        }\\n\\n        if (remainingItemsCount == _self.length) {\\n            nextArray_ = _self;\\n        } else if (remainingItemsCount > 0) {\\n            nextArray_ = new address[](remainingItemsCount);\\n            uint256 nextArrayIndex;\\n            for (uint256 i; i < _self.length; i++) {\\n                if (!indexesToRemove[i]) {\\n                    nextArray_[nextArrayIndex] = _self[i];\\n                    nextArrayIndex++;\\n                }\\n            }\\n        }\\n\\n        return nextArray_;\\n    }\\n}\\n\",\"keccak256\":\"0x702bded074c5190e27ebe39ee77166593cc1296d4cb275c1a96914620ee55c83\",\"license\":\"GPL-3.0\"},\"contracts/release/utils/AssetHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\n/// @title AssetHelpers Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A util contract for common token actions\\nabstract contract AssetHelpers {\\n    using SafeERC20 for ERC20;\\n    using SafeMath for uint256;\\n\\n    /// @dev Helper to approve a target account with the max amount of an asset.\\n    /// This is helpful for fully trusted contracts, such as adapters that\\n    /// interact with external protocol like Uniswap, Compound, etc.\\n    function __approveAssetMaxAsNeeded(\\n        address _asset,\\n        address _target,\\n        uint256 _neededAmount\\n    ) internal {\\n        if (ERC20(_asset).allowance(address(this), _target) < _neededAmount) {\\n            ERC20(_asset).safeApprove(_target, type(uint256).max);\\n        }\\n    }\\n\\n    /// @dev Helper to get the balances of specified assets for a target\\n    function __getAssetBalances(address _target, address[] memory _assets)\\n        internal\\n        view\\n        returns (uint256[] memory balances_)\\n    {\\n        balances_ = new uint256[](_assets.length);\\n        for (uint256 i; i < _assets.length; i++) {\\n            balances_[i] = ERC20(_assets[i]).balanceOf(_target);\\n        }\\n\\n        return balances_;\\n    }\\n\\n    /// @dev Helper to transfer full asset balances from a target to the current contract.\\n    /// Requires an adequate allowance for each asset granted to the current contract for the target.\\n    function __pullFullAssetBalances(address _target, address[] memory _assets)\\n        internal\\n        returns (uint256[] memory amountsTransferred_)\\n    {\\n        amountsTransferred_ = new uint256[](_assets.length);\\n        for (uint256 i; i < _assets.length; i++) {\\n            ERC20 assetContract = ERC20(_assets[i]);\\n            amountsTransferred_[i] = assetContract.balanceOf(_target);\\n            if (amountsTransferred_[i] > 0) {\\n                assetContract.safeTransferFrom(_target, address(this), amountsTransferred_[i]);\\n            }\\n        }\\n\\n        return amountsTransferred_;\\n    }\\n\\n    /// @dev Helper to transfer partial asset balances from a target to the current contract.\\n    /// Requires an adequate allowance for each asset granted to the current contract for the target.\\n    function __pullPartialAssetBalances(\\n        address _target,\\n        address[] memory _assets,\\n        uint256[] memory _amountsToExclude\\n    ) internal returns (uint256[] memory amountsTransferred_) {\\n        amountsTransferred_ = new uint256[](_assets.length);\\n        for (uint256 i; i < _assets.length; i++) {\\n            ERC20 assetContract = ERC20(_assets[i]);\\n            amountsTransferred_[i] = assetContract.balanceOf(_target).sub(_amountsToExclude[i]);\\n            if (amountsTransferred_[i] > 0) {\\n                assetContract.safeTransferFrom(_target, address(this), amountsTransferred_[i]);\\n            }\\n        }\\n\\n        return amountsTransferred_;\\n    }\\n\\n    /// @dev Helper to transfer full asset balances from the current contract to a target\\n    function __pushFullAssetBalances(address _target, address[] memory _assets)\\n        internal\\n        returns (uint256[] memory amountsTransferred_)\\n    {\\n        amountsTransferred_ = new uint256[](_assets.length);\\n        for (uint256 i; i < _assets.length; i++) {\\n            ERC20 assetContract = ERC20(_assets[i]);\\n            amountsTransferred_[i] = assetContract.balanceOf(address(this));\\n            if (amountsTransferred_[i] > 0) {\\n                assetContract.safeTransfer(_target, amountsTransferred_[i]);\\n            }\\n        }\\n\\n        return amountsTransferred_;\\n    }\\n}\\n\",\"keccak256\":\"0x86cef70bb917da925fdf43f5a6d6e7f3c1f5d1aff505c4500c47304f26b8ec26\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x6101c06040523480156200001257600080fd5b50604051620054043803806200540483398181016040526101208110156200003957600080fd5b508051602080830151604084015160608086015160808088015160a0808a015160c0808c015160e0808e01516101009e8f01516001600160601b03198f8c1b811690995242909652848a1b881690935287891b8716905284881b8616909c529586901b9093166101205297989597949692959094919390929091908190869085908590620000e1906001600160a01b0384169085906000199062001fa162000147821b17901c565b505050606090811b6001600160601b03199081166101405289821b81166101605288821b8116610180529084901b166101a052620001386001600160a01b0388168960001962000147602090811b62001fa117901c565b5050505050505050506200055a565b801580620001d1575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b158015620001a157600080fd5b505afa158015620001b6573d6000803e3d6000fd5b505050506040513d6020811015620001cd57600080fd5b5051155b6200020e5760405162461bcd60e51b8152600401808060200182810382526036815260200180620053ce6036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b0390811663095ea7b360e01b17909152620002669185916200026b16565b505050565b6060620002c7826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166200032760201b620020b9179092919060201c565b8051909150156200026657808060200190516020811015620002e857600080fd5b5051620002665760405162461bcd60e51b815260040180806020018281038252602a815260200180620053a4602a913960400191505060405180910390fd5b606062000338848460008562000342565b90505b9392505050565b606082471015620003855760405162461bcd60e51b81526004018080602001828103825260268152602001806200537e6026913960400191505060405180910390fd5b6200039085620004aa565b620003e2576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310620004235780518252601f19909201916020918201910162000402565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811462000487576040519150601f19603f3d011682016040523d82523d6000602084013e6200048c565b606091505b5090925090506200049f828286620004b0565b979650505050505050565b3b151590565b60608315620004c15750816200033b565b825115620004d25782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156200051e57818101518382015260200162000504565b50505050905090810190601f1680156200054c5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b60805160601c60a05160c05160601c60e05160601c6101005160601c6101205160601c6101405160601c6101605160601c6101805160601c6101a05160601c614cac620006d26000398061190a5280613f7752806140b652806141c8528061431c5250806112dd52806112fe52806117935280611d045280611d255280611f575280612d025280612eb75280612fc152806131f752508061115852806112bc5280611535528061158c52806118a452806119e05280611c095280611ce35280611f34528061292a5280612adc5280612e1252806130605280613158528061329c525080611afd5280613ae75280613b0e525080611433528061210e52806133d152806135de525080611080528061218d5280613313528061346952806134e5525080611e0e528061364552508061139c5280613e7e52508061192e525080610f4c52806110ad52806111d0528061148452806117c0528061197f5280611a105280611b2a5280611dea5280611e835250614cac6000f3fe6080604052600436106102085760003560e01c80637998a1c411610118578063d1ded408116100a0578063e7c456901161006f578063e7c4569014610dee578063f003eb8514610e03578063f075399414610e18578063f7d882b514610e2d578063fa7dd04d14610e425761020f565b8063d1ded40814610cd4578063dfd5ee0f14610ce9578063e27a06b514610dc4578063e4d9047814610dd95761020f565b806391199f0f116100e757806391199f0f14610acd578063a96de76b14610ae2578063b23228cf14610b09578063b9dfbacc14610b1e578063c29fa9dd14610bf95761020f565b80637998a1c41461093e5780638214f5a4146109c85780638334eb99146109dd578063863e5ad014610ab85761020f565b80633377e18a1161019b57806355e72cc51161016a57806355e72cc5146106635780635ca62b3c1461067857806368e306771461068d5780637240b2251461076857806376cc7ac61461077d5761020f565b80633377e18a146105495780633ffc15911461062457806340da225d1461063957806340f8cfcf1461064e5761020f565b80631d51f49b116101d75780631d51f49b14610369578063257cb1a31461044457806329fa046e14610459578063332d709f146105345761020f565b8063080456c114610214578063099f751514610246578063131461c0146103235780631c76b691146103385761020f565b3661020f57005b600080fd5b34801561022057600080fd5b50610229610f1d565b604080516001600160e01b03199092168252519081900360200190f35b34801561025257600080fd5b506103216004803603606081101561026957600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561029357600080fd5b8201836020820111156102a557600080fd5b803590602001918460018302840111600160201b831117156102c657600080fd5b919390929091602081019035600160201b8111156102e357600080fd5b8201836020820111156102f557600080fd5b803590602001918460018302840111600160201b8311171561031657600080fd5b509092509050610f41565b005b34801561032f57600080fd5b5061022961105a565b34801561034457600080fd5b5061034d61107e565b604080516001600160a01b039092168252519081900360200190f35b34801561037557600080fd5b506103216004803603606081101561038c57600080fd5b6001600160a01b038235169190810190604081016020820135600160201b8111156103b657600080fd5b8201836020820111156103c857600080fd5b803590602001918460018302840111600160201b831117156103e957600080fd5b919390929091602081019035600160201b81111561040657600080fd5b82018360208201111561041857600080fd5b803590602001918460018302840111600160201b8311171561043957600080fd5b5090925090506110a2565b34801561045057600080fd5b506102296111a1565b34801561046557600080fd5b506103216004803603606081101561047c57600080fd5b6001600160a01b038235169190810190604081016020820135600160201b8111156104a657600080fd5b8201836020820111156104b857600080fd5b803590602001918460018302840111600160201b831117156104d957600080fd5b919390929091602081019035600160201b8111156104f657600080fd5b82018360208201111561050857600080fd5b803590602001918460018302840111600160201b8311171561052957600080fd5b5090925090506111c5565b34801561054057600080fd5b5061034d61139a565b34801561055557600080fd5b506103216004803603606081101561056c57600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561059657600080fd5b8201836020820111156105a857600080fd5b803590602001918460018302840111600160201b831117156105c957600080fd5b919390929091602081019035600160201b8111156105e657600080fd5b8201836020820111156105f857600080fd5b803590602001918460018302840111600160201b8311171561061957600080fd5b5090925090506113be565b34801561063057600080fd5b506102296113c5565b34801561064557600080fd5b506102296113e9565b34801561065a57600080fd5b5061022961140d565b34801561066f57600080fd5b5061034d611431565b34801561068457600080fd5b50610229611455565b34801561069957600080fd5b50610321600480360360608110156106b057600080fd5b6001600160a01b038235169190810190604081016020820135600160201b8111156106da57600080fd5b8201836020820111156106ec57600080fd5b803590602001918460018302840111600160201b8311171561070d57600080fd5b919390929091602081019035600160201b81111561072a57600080fd5b82018360208201111561073c57600080fd5b803590602001918460018302840111600160201b8311171561075d57600080fd5b509092509050611479565b34801561077457600080fd5b5061034d61158a565b34801561078957600080fd5b50610809600480360360408110156107a057600080fd5b6001600160e01b03198235169190810190604081016020820135600160201b8111156107cb57600080fd5b8201836020820111156107dd57600080fd5b803590602001918460018302840111600160201b831117156107fe57600080fd5b5090925090506115ae565b6040518086600381111561081957fe5b815260200180602001806020018060200180602001858103855289818151815260200191508051906020019060200280838360005b8381101561086657818101518382015260200161084e565b50505050905001858103845288818151815260200191508051906020019060200280838360005b838110156108a557818101518382015260200161088d565b50505050905001858103835287818151815260200191508051906020019060200280838360005b838110156108e45781810151838201526020016108cc565b50505050905001858103825286818151815260200191508051906020019060200280838360005b8381101561092357818101518382015260200161090b565b50505050905001995050505050505050505060405180910390f35b34801561094a57600080fd5b50610953611762565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561098d578181015183820152602001610975565b50505050905090810190601f1680156109ba5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156109d457600080fd5b5061034d611791565b3480156109e957600080fd5b5061032160048036036060811015610a0057600080fd5b6001600160a01b038235169190810190604081016020820135600160201b811115610a2a57600080fd5b820183602082011115610a3c57600080fd5b803590602001918460018302840111600160201b83111715610a5d57600080fd5b919390929091602081019035600160201b811115610a7a57600080fd5b820183602082011115610a8c57600080fd5b803590602001918460018302840111600160201b83111715610aad57600080fd5b5090925090506117b5565b348015610ac457600080fd5b506102296118e4565b348015610ad957600080fd5b5061034d611908565b348015610aee57600080fd5b50610af761192c565b60408051918252519081900360200190f35b348015610b1557600080fd5b50610229611950565b348015610b2a57600080fd5b5061032160048036036060811015610b4157600080fd5b6001600160a01b038235169190810190604081016020820135600160201b811115610b6b57600080fd5b820183602082011115610b7d57600080fd5b803590602001918460018302840111600160201b83111715610b9e57600080fd5b919390929091602081019035600160201b811115610bbb57600080fd5b820183602082011115610bcd57600080fd5b803590602001918460018302840111600160201b83111715610bee57600080fd5b509092509050611974565b348015610c0557600080fd5b5061032160048036036060811015610c1c57600080fd5b6001600160a01b038235169190810190604081016020820135600160201b811115610c4657600080fd5b820183602082011115610c5857600080fd5b803590602001918460018302840111600160201b83111715610c7957600080fd5b919390929091602081019035600160201b811115610c9657600080fd5b820183602082011115610ca857600080fd5b803590602001918460018302840111600160201b83111715610cc957600080fd5b509092509050611a05565b348015610ce057600080fd5b5061034d611afb565b348015610cf557600080fd5b5061032160048036036060811015610d0c57600080fd5b6001600160a01b038235169190810190604081016020820135600160201b811115610d3657600080fd5b820183602082011115610d4857600080fd5b803590602001918460018302840111600160201b83111715610d6957600080fd5b919390929091602081019035600160201b811115610d8657600080fd5b820183602082011115610d9857600080fd5b803590602001918460018302840111600160201b83111715610db957600080fd5b509092509050611b1f565b348015610dd057600080fd5b50610229611da0565b348015610de557600080fd5b50610229611dc4565b348015610dfa57600080fd5b5061034d611de8565b348015610e0f57600080fd5b5061034d611e0c565b348015610e2457600080fd5b50610229611e30565b348015610e3957600080fd5b50610229611e54565b348015610e4e57600080fd5b5061032160048036036060811015610e6557600080fd5b6001600160a01b038235169190810190604081016020820135600160201b811115610e8f57600080fd5b820183602082011115610ea157600080fd5b803590602001918460018302840111600160201b83111715610ec257600080fd5b919390929091602081019035600160201b811115610edf57600080fd5b820183602082011115610ef157600080fd5b803590602001918460018302840111600160201b83111715610f1257600080fd5b509092509050611e78565b7f8334eb99be0145865eba9889fca2ee920288090caefff4cc776038e20ad9259a81565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610fa85760405162461bcd60e51b8152600401808060200182810382526032815260200180614b526032913960400191505060405180910390fd5b8482828080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250604080516020601f8c018190048102820181019092528a815291945084935083925061102291908b908b90819084018382808284376000920191909152506120d292505050565b925092509250611033838383612106565b50505060606110418261225d565b93505050506110508382612425565b5050505050505050565b7f29fa046e79524c3c5ac4c01df692c35e217802b2b13b21121b76cf0ef02b138c81565b7f000000000000000000000000000000000000000000000000000000000000000090565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146111095760405162461bcd60e51b8152600401808060200182810382526032815260200180614b526032913960400191505060405180910390fd5b60008061114b86868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506120d292505050565b509150915060608061117e7f00000000000000000000000000000000000000000000000000000000000000008a86612501565b9150915061119689838386611191611431565b612534565b505050505050505050565b7f099f75155f0e997bf83a7993a71d5e7e7540bd386fe1e84643a09ce6b412521981565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461122c5760405162461bcd60e51b8152600401808060200182810382526032815260200180614b526032913960400191505060405180910390fd5b8482828080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250604080516020601f8c018190048102820181019092528a81529194508493508392506112a691908b908b90819084018382808284376000920191909152506120d292505050565b9250925092506112b7838383612106565b6110337f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561136957600080fd5b505afa15801561137d573d6000803e3d6000fd5b505050506040513d602081101561139357600080fd5b50516127a8565b7f000000000000000000000000000000000000000000000000000000000000000090565b5050505050565b7ffa7dd04da627f433da73c4355ead9c75682a67a8fc84d3f6170ef0922f402d2481565b7fb9dfbaccbe5cd2a84fdcf1d15f23ef25d23086f5afbaa99516065ed4a5bbc7a381565b7ff658eb804cc1da8af5599b584aaf3d55407a3c721c42641a6a5270e963d782c381565b7f000000000000000000000000000000000000000000000000000000000000000090565b7fdfd5ee0f6067928bf85a7c4430811282840bc99332dda3dab462c02bf95b67cc81565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146114e05760405162461bcd60e51b8152600401808060200182810382526032815260200180614b526032913960400191505060405180910390fd5b8482828080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8a0181900481028201810190925288815261157f93507f0000000000000000000000000000000000000000000000000000000000000000925061157a918a908a908190840183828082843760009201919091525061281592505050565b612834565b60606110418261225d565b7f000000000000000000000000000000000000000000000000000000000000000090565b600060608080806001600160e01b031988166319bbf0c560e11b14156115e7576115d88787612896565b94509450945094509450611757565b6001600160e01b03198816632e77eeb360e21b1415611608576115d8612a0c565b6001600160e01b0319881663dfd5ee0f60e01b141561162b576115d88787612a6c565b6001600160e01b03198816631d51f49b60e01b141561164e576115d88787612b83565b6001600160e01b0319881663099f751560e01b1415611671576115d88787612c7f565b6001600160e01b031988166314fd023760e11b1415611694576115d88787612d8f565b6001600160e01b0319881663c29fa9dd60e01b14156116b7576115d88787612e3e565b6001600160e01b0319881663fa7dd04d60e01b14156116da576115d88787612f54565b6001600160e01b031988166368e3067760e01b14156116fd576115d887876130eb565b6001600160e01b03198816638334eb9960e01b1415611720576115d88787613223565b60405162461bcd60e51b8152600401808060200182810382526027815260200180614b056027913960400191505060405180910390fd5b939792965093509350565b604080518082019091526015815274086aaa4ac8abe9892a2aa928892a8b2bea6a88aa89605b1b602082015290565b7f000000000000000000000000000000000000000000000000000000000000000090565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461181c5760405162461bcd60e51b8152600401808060200182810382526032815260200180614b526032913960400191505060405180910390fd5b8482828080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250604080516020601f8c018190048102820181019092528a81529194508493508392508291611897918c908c90819084018382808284376000920191909152506132c892505050565b93509350935093506118c97f000000000000000000000000000000000000000000000000000000000000000085612834565b6118d584848484613305565b5050505060606110418261225d565b7f03e38a2bd7063d45c897edeafc330e71657502dd86434d3c37a489caf116af6981565b7f000000000000000000000000000000000000000000000000000000000000000090565b7f000000000000000000000000000000000000000000000000000000000000000090565b7f68e30677f607df46e87da13e15b637784cfa62374b653f35ab43d10361a2f83081565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146119db5760405162461bcd60e51b8152600401808060200182810382526032815260200180614b526032913960400191505060405180910390fd5b6113be7f000000000000000000000000000000000000000000000000000000000000000086613643565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611a6c5760405162461bcd60e51b8152600401808060200182810382526032815260200180614b526032913960400191505060405180910390fd5b8482828080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250604080516020601f8c018190048102820181019092528a81529194508493508392508291611ae7918c908c90819084018382808284376000920191909152506132c892505050565b93509350935093506118d584848484613305565b7f000000000000000000000000000000000000000000000000000000000000000090565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611b865760405162461bcd60e51b8152600401808060200182810382526032815260200180614b526032913960400191505060405180910390fd5b8482828080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250604080516020601f8c018190048102820181019092528a8152919450849350611bfd92508a908a90819084018382808284376000920191909152506136e992505050565b91509150606080611c2f7f00000000000000000000000000000000000000000000000000000000000000008c86612501565b91509150611c48308383611c41611431565b6000612534565b6000611c52611431565b6001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611c9e57600080fd5b505afa158015611cb2573d6000803e3d6000fd5b505050506040513d6020811015611cc857600080fd5b505190508015611d9057611cde81600086612106565b611d907f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561136957600080fd5b505050505060606110418261225d565b7f848f3a590fb2f9795d1a275009c54c26c53833277c96b90e0ddd01753a1d590681565b7f3377e18acf9e83665eacd6af109261424fca32a298e2fc2e6095ba563fb8390e81565b7f000000000000000000000000000000000000000000000000000000000000000090565b7f000000000000000000000000000000000000000000000000000000000000000090565b7f1d51f49b5273d9ddbb643dc349fab8d36dbb470209c2ea71033bea49dd311c2781565b7fc29fa9dde84204c2908778afd0613d802d31cf046179b88f6d2b4a4e507ea2d581565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611edf5760405162461bcd60e51b8152600401808060200182810382526032815260200180614b526032913960400191505060405180910390fd5b8482828080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8a0181900481028201810190925288815261157f93507f000000000000000000000000000000000000000000000000000000000000000092507f000000000000000000000000000000000000000000000000000000000000000091611f9c91908b908b908190840183828082843760009201919091525061281592505050565b6127a8565b801580612027575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b158015611ff957600080fd5b505afa15801561200d573d6000803e3d6000fd5b505050506040513d602081101561202357600080fd5b5051155b6120625760405162461bcd60e51b8152600401808060200182810382526036815260200180614c416036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b1790526120b4908490613714565b505050565b60606120c884846000856137c5565b90505b9392505050565b60008060008380602001905160608110156120ec57600080fd5b508051602082015160409092015190969195509350915050565b821561218b577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632e1a7d4d846040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561217257600080fd5b505af1158015612186573d6000803e3d6000fd5b505050505b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630b4c7e4d84604051806040016040528087815260200186815250846040518463ffffffff1660e01b81526004018083600260200280838360005b838110156122085781810151838201526020016121f0565b50505050905001828152602001925050506020604051808303818588803b15801561223257600080fd5b505af1158015612246573d6000803e3d6000fd5b50505050506040513d60208110156113be57600080fd5b6000606080606084806020019051608081101561227957600080fd5b815160208301805160405192949293830192919084600160201b82111561229f57600080fd5b9083019060208201858111156122b457600080fd5b82518660208202830111600160201b821117156122d057600080fd5b82525081516020918201928201910280838360005b838110156122fd5781810151838201526020016122e5565b5050505090500160405260200180516040519392919084600160201b82111561232557600080fd5b90830190602082018581111561233a57600080fd5b82518660208202830111600160201b8211171561235657600080fd5b82525081516020918201928201910280838360005b8381101561238357818101518382015260200161236b565b5050505090500160405260200180516040519392919084600160201b8211156123ab57600080fd5b9083019060208201858111156123c057600080fd5b82518660208202830111600160201b821117156123dc57600080fd5b82525081516020918201928201910280838360005b838110156124095781810151838201526020016123f1565b5050505090500160405250505093509350935093509193509193565b60005b81518110156120b457600082828151811061243f57fe5b60200260200101516001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561249357600080fd5b505afa1580156124a7573d6000803e3d6000fd5b505050506040513d60208110156124bd57600080fd5b5051905080156124f8576124f884828585815181106124d857fe5b60200260200101516001600160a01b03166139219092919063ffffffff16565b50600101612428565b606080821561251d576125148585613973565b9150915061252c565b612527858561399f565b915091505b935093915050565b60006001600160a01b038216158061255d5750826001600160a01b0316826001600160a01b0316145b905060005b855181101561279f5784818151811061257757fe5b6020026020010151600014806125b2575060006001600160a01b031686828151811061259f57fe5b60200260200101516001600160a01b0316145b806125e15750836001600160a01b03168682815181106125ce57fe5b60200260200101516001600160a01b0316145b156125eb57612797565b6060828061261d5750836001600160a01b031687838151811061260a57fe5b60200260200101516001600160a01b0316145b156126b657604080516002808252606082018352909160208301908036833701905050905086828151811061264e57fe5b60200260200101518160008151811061266357fe5b60200260200101906001600160a01b031690816001600160a01b031681525050848160018151811061269157fe5b60200260200101906001600160a01b031690816001600160a01b031681525050612775565b6040805160038082526080820190925290602082016060803683370190505090508682815181106126e357fe5b6020026020010151816000815181106126f857fe5b60200260200101906001600160a01b031690816001600160a01b031681525050838160018151811061272657fe5b60200260200101906001600160a01b031690816001600160a01b031681525050848160028151811061275457fe5b60200260200101906001600160a01b031690816001600160a01b0316815250505b6127958887848151811061278557fe5b6020026020010151600184613acd565b505b600101612562565b50505050505050565b6127b3828483613cae565b60408051636e553f6560e01b81526004810183905230602482015290516001600160a01b03851691636e553f6591604480830192600092919082900301818387803b15801561280157600080fd5b505af115801561279f573d6000803e3d6000fd5b600081806020019051602081101561282c57600080fd5b505192915050565b816001600160a01b0316632e1a7d4d826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561287a57600080fd5b505af115801561288e573d6000803e3d6000fd5b505050505050565b60006060806060806128dd87878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250613d4692505050565b80518251929650909450146129235760405162461bcd60e51b815260040180806020018281038252602d815260200180614aa5602d913960400191505060405180910390fd5b606061294e7f0000000000000000000000000000000000000000000000000000000000000000613e77565b905060005b85518110156129e157600085828151811061296a57fe5b602002602001015111156129d95761299e86828151811061298757fe5b602002602001015183613eb290919063ffffffff16565b6129d95760405162461bcd60e51b8152600401808060200182810382526033815260200180614ad26033913960400191505060405180910390fd5b600101612953565b5050604080516000808252602082019081528183019092526001999598509396509294509192915050565b600060608080808480604051908082528060200260200182016040528015612a3e578160200160208202803683370190505b5060408051600080825260208201818152828401918252606083019093529399929850965094509092509050565b60006060806060806000612ab588888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506136e992505050565b604080516001808252818301909252919350909150602080830190803683370190505092507f000000000000000000000000000000000000000000000000000000000000000083600081518110612b0857fe5b6001600160a01b03929092166020928302919091018201526040805160018082528183019092529182810190803683370190505091508082600081518110612b4c57fe5b602090810291909101810191909152604080516000808252928101838152818301909252919a919950975092955090935090915050565b6000606080606080600080612bcd89898080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506120d292505050565b604080516001808252818301909252929550909350909150602080830190803683370190505093508184600081518110612c0357fe5b6001600160a01b03929092166020928302919091018201526040805160018082528183019092529182810190803683370190505092508083600081518110612c4757fe5b602090810291909101810191909152604080516000808252928101838152818301909252919b919a5098509396509194509192505050565b60006060806060806000806000612ccb8a8a8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506120d292505050565b925092509250612cdb8383613f08565b604080516001808252818301909252929950909750602080830190803683370190505094507f000000000000000000000000000000000000000000000000000000000000000085600081518110612d2e57fe5b6001600160a01b03929092166020928302919091018201526040805160018082528183019092529182810190803683370190505093508084600081518110612d7257fe5b602002602001018181525050600297505050509295509295909350565b60006060806060806000806000612ddb8a8a8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506120d292505050565b925092509250612deb8383613f08565b604080516001808252818301909252929950909750602080830190803683370190505094507f000000000000000000000000000000000000000000000000000000000000000085600081518110612d2e57fe5b6000606080606080600080600080612e8b8b8b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506132c892505050565b6040805160018082528183019092529498509296509094509250602080830190803683370190505097507f000000000000000000000000000000000000000000000000000000000000000088600081518110612ee357fe5b6001600160a01b03929092166020928302919091018201526040805160018082528183019092529182810190803683370190505096508387600081518110612f2757fe5b602002602001018181525050612f3e838383614139565b60029d999c50979a509850959695505050505050565b60006060806060806000612f9d88888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061281592505050565b604080516001808252818301909252919250602080830190803683370190505094507f000000000000000000000000000000000000000000000000000000000000000085600081518110612fed57fe5b6001600160a01b0392909216602092830291909101820152604080516001808252818301909252918281019080368337019050509350808460008151811061303157fe5b6020908102919091010152604080516001808252818301909252908160200160208202803683370190505092507f00000000000000000000000000000000000000000000000000000000000000008360008151811061308c57fe5b6001600160a01b039290921660209283029190910182015260408051600180825281830190925291828101908036833701905050915080826000815181106130d057fe5b60200260200101818152505060029550509295509295909350565b6000606080606080600061313488888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061281592505050565b604080516001808252818301909252919250602080830190803683370190505094507f00000000000000000000000000000000000000000000000000000000000000008560008151811061318457fe5b6001600160a01b039290921660209283029190910182015260408051600180825281830190925291828101908036833701905050935080846000815181106131c857fe5b6020908102919091010152604080516001808252818301909252908160200160208202803683370190505092507f00000000000000000000000000000000000000000000000000000000000000008360008151811061308c57fe5b60006060806060806000806000806132708b8b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506132c892505050565b6040805160018082528183019092529498509296509094509250602080830190803683370190505097507f000000000000000000000000000000000000000000000000000000000000000088600081518110612ee357fe5b6000806000808480602001905160808110156132e357600080fd5b5080516020820151604083015160609093015191989097509195509350915050565b80156134e357821561343a577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631a4d01d2856000866040518463ffffffff1660e01b81526004018084815260200183600f0b81526020018281526020019350505050602060405180830381600087803b15801561338b57600080fd5b505af115801561339f573d6000803e3d6000fd5b505050506040513d60208110156133b557600080fd5b505060408051630d0e30db60e41b815290516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163d0e30db09130319160048082019260009290919082900301818588803b15801561341c57600080fd5b505af1158015613430573d6000803e3d6000fd5b50505050506134de565b60408051630d2680e960e11b815260048101869052600160248201526044810184905290516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691631a4d01d29160648083019260209291908290030181600087803b1580156134b157600080fd5b505af11580156134c5573d6000803e3d6000fd5b505050506040513d60208110156134db57600080fd5b50505b61363d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635b36389c856040518060400160405280878152602001868152506040518363ffffffff1660e01b81526004018083815260200182600260200280838360005b8381101561356557818101518382015260200161354d565b50505050905001925050506040805180830381600087803b15801561358957600080fd5b505af115801561359d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525060408110156135c257600080fd5b505060408051630d0e30db60e41b815290516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163d0e30db09130319160048082019260009290919082900301818588803b15801561362957600080fd5b505af1158015611196573d6000803e3d6000fd5b50505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166327f18ae383836040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b0316815260200192505050600060405180830381600087803b1580156136c357600080fd5b505af11580156136d7573d6000803e3d6000fd5b505050506136e582826143bd565b5050565b60008082806020019051604081101561370157600080fd5b5080516020909101519092509050915091565b6060613769826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166120b99092919063ffffffff16565b8051909150156120b45780806020019051602081101561378857600080fd5b50516120b45760405162461bcd60e51b815260040180806020018281038252602a815260200180614c17602a913960400191505060405180910390fd5b6060824710156138065760405162461bcd60e51b8152600401808060200182810382526026815260200180614b2c6026913960400191505060405180910390fd5b61380f8561440c565b613860576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b6020831061389f5780518252601f199092019160209182019101613880565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114613901576040519150601f19603f3d011682016040523d82523d6000602084013e613906565b606091505b5091509150613916828286614412565b979650505050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526120b4908490613714565b6060806139808484613643565b61398984613e77565b915061399583836144b6565b90505b9250929050565b6060806139ab84613e77565b91506060825167ffffffffffffffff811180156139c757600080fd5b506040519080825280602002602001820160405280156139f1578160200160208202803683370190505b50905060005b8351811015613aad57838181518110613a0c57fe5b60200260200101516001600160a01b03166370a08231866040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015613a6057600080fd5b505afa158015613a74573d6000803e3d6000fd5b505050506040513d6020811015613a8a57600080fd5b50518251839083908110613a9a57fe5b60209081029190910101526001016139f7565b50613ab88585613643565b613ac3848483614613565b9150509250929050565b613b0c81600081518110613add57fe5b60200260200101517f000000000000000000000000000000000000000000000000000000000000000085613cae565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166338ed173984848488613b4761476a565b6040518663ffffffff1660e01b81526004018086815260200185815260200180602001846001600160a01b03168152602001838152602001828103825285818151815260200191508051906020019060200280838360005b83811015613bb7578181015183820152602001613b9f565b505050509050019650505050505050600060405180830381600087803b158015613be057600080fd5b505af1158015613bf4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015613c1d57600080fd5b8101908080516040519392919084600160201b821115613c3c57600080fd5b908301906020820185811115613c5157600080fd5b82518660208202830111600160201b82111715613c6d57600080fd5b82525081516020918201928201910280838360005b83811015613c9a578181015183820152602001613c82565b505050509050016040525050505050505050565b60408051636eb1769f60e11b81523060048201526001600160a01b0384811660248301529151839286169163dd62ed3e916044808301926020929190829003018186803b158015613cfe57600080fd5b505afa158015613d12573d6000803e3d6000fd5b505050506040513d6020811015613d2857600080fd5b505110156120b4576120b46001600160a01b03841683600019611fa1565b606080828060200190516040811015613d5e57600080fd5b8101908080516040519392919084600160201b821115613d7d57600080fd5b908301906020820185811115613d9257600080fd5b82518660208202830111600160201b82111715613dae57600080fd5b82525081516020918201928201910280838360005b83811015613ddb578181015183820152602001613dc3565b5050505090500160405260200180516040519392919084600160201b821115613e0357600080fd5b908301906020820185811115613e1857600080fd5b82518660208202830111600160201b82111715613e3457600080fd5b82525081516020918201928201910280838360005b83811015613e61578181015183820152602001613e49565b5050505090500160405250505091509150915091565b6060613eac7f0000000000000000000000000000000000000000000000000000000000000000613ea684614771565b90614900565b92915050565b6000805b8351811015613efe57838181518110613ecb57fe5b60200260200101516001600160a01b0316836001600160a01b03161415613ef6576001915050613eac565b600101613eb6565b5060009392505050565b606080600084118015613f1b5750600083115b15614015576040805160028082526060820183529091602083019080368337019050509150613f48611431565b82600081518110613f5557fe5b60200260200101906001600160a01b031690816001600160a01b0316815250507f000000000000000000000000000000000000000000000000000000000000000082600181518110613fa357fe5b6001600160a01b03929092166020928302919091018201526040805160028082526060820183529092909190830190803683370190505090508381600081518110613fea57fe5b602002602001018181525050828160018151811061400457fe5b602002602001018181525050613998565b8315614094576040805160018082528183019092529060208083019080368337019050509150614043611431565b8260008151811061405057fe5b6001600160a01b0392909216602092830291909101820152604080516001808252818301909252918281019080368337019050509050838160008151811061400457fe5b60408051600180825281830190925290602080830190803683370190505091507f0000000000000000000000000000000000000000000000000000000000000000826000815181106140e257fe5b6001600160a01b0392909216602092830291909101820152604080516001808252818301909252918281019080368337019050509050828160008151811061412657fe5b6020026020010181815250509250929050565b60608082156142c557604080516001808252818301909252906020808301908036833750506040805160018082528183019092529294509050602080830190803683370190505090508461423357600084116141c65760405162461bcd60e51b8152600401808060200182810382526046815260200180614bd16046913960600191505060405180910390fd5b7f0000000000000000000000000000000000000000000000000000000000000000826000815181106141f457fe5b60200260200101906001600160a01b031690816001600160a01b031681525050838160008151811061422257fe5b6020026020010181815250506142c0565b83156142705760405162461bcd60e51b815260040180806020018281038252604d815260200180614b84604d913960600191505060405180910390fd5b614278611431565b8260008151811061428557fe5b60200260200101906001600160a01b031690816001600160a01b03168152505084816000815181106142b357fe5b6020026020010181815250505b61252c565b60408051600280825260608201835290916020830190803683370190505091506142ed611431565b826000815181106142fa57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250507f00000000000000000000000000000000000000000000000000000000000000008260018151811061434857fe5b6001600160a01b0392909216602092830291909101820152604080516002808252606082018352909290919083019080368337019050509050848160008151811061438f57fe5b60200260200101818152505083816001815181106143a957fe5b602002602001018181525050935093915050565b816001600160a01b03166384e9bd7e826040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b15801561287a57600080fd5b3b151590565b606083156144215750816120cb565b8251156144315782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561447b578181015183820152602001614463565b50505050905090810190601f1680156144a85780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b6060815167ffffffffffffffff811180156144d057600080fd5b506040519080825280602002602001820160405280156144fa578160200160208202803683370190505b50905060005b825181101561460c57600083828151811061451757fe5b60200260200101519050806001600160a01b03166370a08231866040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561456e57600080fd5b505afa158015614582573d6000803e3d6000fd5b505050506040513d602081101561459857600080fd5b505183518490849081106145a857fe5b60200260200101818152505060008383815181106145c257fe5b602002602001015111156146035761460385308585815181106145e157fe5b6020026020010151846001600160a01b0316614922909392919063ffffffff16565b50600101614500565b5092915050565b6060825167ffffffffffffffff8111801561462d57600080fd5b50604051908082528060200260200182016040528015614657578160200160208202803683370190505b50905060005b835181101561476257600084828151811061467457fe5b6020026020010151905061471484838151811061468d57fe5b6020026020010151826001600160a01b03166370a08231896040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156146e257600080fd5b505afa1580156146f6573d6000803e3d6000fd5b505050506040513d602081101561470c57600080fd5b50519061497c565b83838151811061472057fe5b602002602001018181525050600083838151811061473a57fe5b602002602001015111156147595761475986308585815181106145e157fe5b5060010161465d565b509392505050565b6001420190565b604080516008808252610120820190925260609182919060208201610100803683370190505090506000805b6008811015614868576000856001600160a01b03166354c49fe9836040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156147ec57600080fd5b505afa158015614800573d6000803e3d6000fd5b505050506040513d602081101561481657600080fd5b505190506001600160a01b03811615614859578084838151811061483657fe5b6001600160a01b039092166020928302919091019091015260019092019161485f565b50614868565b5060010161479d565b508067ffffffffffffffff8111801561488057600080fd5b506040519080825280602002602001820160405280156148aa578160200160208202803683370190505b50925060005b818110156148f8578281815181106148c457fe5b60200260200101518482815181106148d857fe5b6001600160a01b03909216602092830291909101909101526001016148b0565b505050919050565b606061490c8383613eb2565b15614918575081613eac565b6120cb83836149d9565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b17905261363d908590613714565b6000828211156149d3576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6060825160010167ffffffffffffffff811180156149f657600080fd5b50604051908082528060200260200182016040528015614a20578160200160208202803683370190505b50905060005b8351811015614a6f57838181518110614a3b57fe5b6020026020010151828281518110614a4f57fe5b6001600160a01b0390921660209283029190910190910152600101614a26565b508181845181518110614a7e57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250509291505056fe5f5f7061727365417373657473466f72417070726f76654173736574733a20556e657175616c206172726179735f5f7061727365417373657473466f72417070726f76654173736574733a20496e76616c69642072657761726420746f6b656e7061727365417373657473466f724d6574686f643a205f73656c6563746f7220696e76616c6964416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c4f6e6c792074686520496e746567726174696f6e4d616e616765722063616e2063616c6c20746869732066756e6374696f6e5f5f7061727365496e636f6d696e67417373657473466f72526564656d7074696f6e43616c6c733a20546f6f206d616e79206d696e20617373657420616d6f756e7473207370656369666965645f5f7061727365496e636f6d696e67417373657473466f72526564656d7074696f6e43616c6c733a204e6f206d696e20617373657420616d6f756e74207370656369666965645361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a2646970667358221220a4be39bd031562708e1fdf4dc434f40a5b7c03e85454f944d0d1697218e2cbe264736f6c634300060c0033416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c5361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Enzyme Council <security@enzyme.finance>",
    "details": "Rewards tokens are not included as spend assets or incoming assets for claimRewards() or claimRewardsAndReinvest(). Rationale: - rewards tokens can be claimed to the vault outside of the IntegrationManager, so no need to enforce policy management or emit an event - rewards tokens can be outside of the asset universe, e.g., $LDO, in which case they cannot be tracked This adapter will need to be re-deployed if UniswapV2 low liquidity becomes a concern for rewards tokens when using claimRewardsAndReinvest().",
    "kind": "dev",
    "methods": {
      "approveAssets(address,bytes,bytes)": {
        "details": "No logic necessary. Exists only to grant adapter with necessary approvals from the vault, which takes place in the IntegrationManager."
      },
      "claimRewards(address,bytes,bytes)": {
        "params": {
          "_vaultProxy": "The VaultProxy of the calling fund"
        }
      },
      "claimRewardsAndReinvest(address,bytes,bytes)": {
        "details": "Requires the adapter to be granted an allowance of each reward token by the vault. For supported assets (e.g., CRV), this must be done via the `approveAssets()` function in this adapter. For unsupported assets, this must be done via `ComptrollerProxy.vaultCallOnContract()`. The `useFullBalances` option indicates whether to use only the newly claimed balances of rewards tokens, or whether to use the full balances of these assets in the vault.",
        "params": {
          "_encodedCallArgs": "Encoded order parameters",
          "_vaultProxy": "The VaultProxy of the calling fund"
        }
      },
      "claimRewardsAndSwap(address,bytes,bytes)": {
        "details": "Requires the adapter to be granted an allowance of each reward token by the vault. For supported assets (e.g., CRV), this must be done via the `approveAssets()` function in this adapter. For unsupported assets, this must be done via `ComptrollerProxy.vaultCallOnContract()`. The `useFullBalances` option indicates whether to use only the newly claimed balances of rewards tokens, or whether to use the full balances of these assets in the vault.",
        "params": {
          "_encodedCallArgs": "Encoded order parameters",
          "_vaultProxy": "The VaultProxy of the calling fund"
        }
      },
      "getCurveGaugeV2RewardsHandlerCrvToken()": {
        "returns": {
          "crvToken_": "The `CURVE_GAUGE_V2_REWARDS_HANDLER_CRV_TOKEN` variable value"
        }
      },
      "getCurveGaugeV2RewardsHandlerMinter()": {
        "returns": {
          "minter_": "The `CURVE_GAUGE_V2_REWARDS_HANDLER_MINTER` variable value"
        }
      },
      "getCurveStethLiquidityPool()": {
        "returns": {
          "pool_": "The `CURVE_STETH_LIQUIDITY_POOL` variable value"
        }
      },
      "getCurveStethLiquidityWethToken()": {
        "returns": {
          "wethToken_": "The `CURVE_STETH_LIQUIDITY_WETH_TOKEN` variable value"
        }
      },
      "getIntegrationManager()": {
        "returns": {
          "integrationManager_": "The `INTEGRATION_MANAGER` variable value"
        }
      },
      "getLiquidityGaugeToken()": {
        "returns": {
          "liquidityGaugeToken_": "The `LIQUIDITY_GAUGE_TOKEN` variable value"
        }
      },
      "getLpToken()": {
        "returns": {
          "lpToken_": "The `LP_TOKEN` variable value"
        }
      },
      "getStethToken()": {
        "returns": {
          "stethToken_": "The `STETH_TOKEN` variable value"
        }
      },
      "getUniswapV2Router2()": {
        "returns": {
          "router_": "The `UNISWAP_V2_ROUTER2` variable value"
        }
      },
      "identifier()": {
        "returns": {
          "identifier_": "The identifer string"
        }
      },
      "lend(address,bytes,bytes)": {
        "params": {
          "_encodedAssetTransferArgs": "Encoded args for expected assets to spend and receive",
          "_encodedCallArgs": "Encoded order parameters",
          "_vaultProxy": "The VaultProxy of the calling fund"
        }
      },
      "lendAndStake(address,bytes,bytes)": {
        "params": {
          "_encodedAssetTransferArgs": "Encoded args for expected assets to spend and receive",
          "_encodedCallArgs": "Encoded order parameters",
          "_vaultProxy": "The VaultProxy of the calling fund"
        }
      },
      "parseAssetsForMethod(bytes4,bytes)": {
        "params": {
          "_encodedCallArgs": "The encoded parameters for the callOnIntegration",
          "_selector": "The function selector for the callOnIntegration"
        },
        "returns": {
          "incomingAssets_": "The assets to receive in the call",
          "minIncomingAssetAmounts_": "The min asset amounts to receive in the call",
          "spendAssetAmounts_": "The max asset amounts to spend in the call",
          "spendAssetsHandleType_": "A type that dictates how to handle granting the adapter access to spend assets (`None` by default)",
          "spendAssets_": "The assets to spend in the call"
        }
      },
      "redeem(address,bytes,bytes)": {
        "params": {
          "_encodedAssetTransferArgs": "Encoded args for expected assets to spend and receive",
          "_encodedCallArgs": "Encoded order parameters",
          "_vaultProxy": "The VaultProxy of the calling fund"
        }
      },
      "stake(address,bytes,bytes)": {
        "params": {
          "_encodedAssetTransferArgs": "Encoded args for expected assets to spend and receive",
          "_encodedCallArgs": "Encoded order parameters",
          "_vaultProxy": "The VaultProxy of the calling fund"
        }
      },
      "unstake(address,bytes,bytes)": {
        "params": {
          "_encodedAssetTransferArgs": "Encoded args for expected assets to spend and receive",
          "_encodedCallArgs": "Encoded order parameters",
          "_vaultProxy": "The VaultProxy of the calling fund"
        }
      },
      "unstakeAndRedeem(address,bytes,bytes)": {
        "params": {
          "_encodedAssetTransferArgs": "Encoded args for expected assets to spend and receive",
          "_encodedCallArgs": "Encoded order parameters",
          "_vaultProxy": "The VaultProxy of the calling fund"
        }
      }
    },
    "title": "CurveLiquidityStethAdapter Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approveAssets(address,bytes,bytes)": {
        "notice": "Approves assets from the vault to be used by this contract."
      },
      "claimRewards(address,bytes,bytes)": {
        "notice": "Claims rewards from the Curve Minter as well as pool-specific rewards"
      },
      "claimRewardsAndReinvest(address,bytes,bytes)": {
        "notice": "Claims rewards and then compounds the rewards tokens back into the staked LP token"
      },
      "claimRewardsAndSwap(address,bytes,bytes)": {
        "notice": "Claims rewards and then swaps the rewards tokens to the specified asset via UniswapV2"
      },
      "getCurveGaugeV2RewardsHandlerCrvToken()": {
        "notice": "Gets the `CURVE_GAUGE_V2_REWARDS_HANDLER_CRV_TOKEN` variable"
      },
      "getCurveGaugeV2RewardsHandlerMinter()": {
        "notice": "Gets the `CURVE_GAUGE_V2_REWARDS_HANDLER_MINTER` variable"
      },
      "getCurveStethLiquidityPool()": {
        "notice": "Gets the `CURVE_STETH_LIQUIDITY_POOL` variable"
      },
      "getCurveStethLiquidityWethToken()": {
        "notice": "Gets the `CURVE_STETH_LIQUIDITY_WETH_TOKEN` variable"
      },
      "getIntegrationManager()": {
        "notice": "Gets the `INTEGRATION_MANAGER` variable"
      },
      "getLiquidityGaugeToken()": {
        "notice": "Gets the `LIQUIDITY_GAUGE_TOKEN` variable"
      },
      "getLpToken()": {
        "notice": "Gets the `LP_TOKEN` variable"
      },
      "getStethToken()": {
        "notice": "Gets the `STETH_TOKEN` variable"
      },
      "getUniswapV2Router2()": {
        "notice": "Gets the `UNISWAP_V2_ROUTER2` variable"
      },
      "identifier()": {
        "notice": "Provides a constant string identifier for an adapter"
      },
      "lend(address,bytes,bytes)": {
        "notice": "Lends assets for steth LP tokens"
      },
      "lendAndStake(address,bytes,bytes)": {
        "notice": "Lends assets for steth LP tokens, then stakes the received LP tokens"
      },
      "parseAssetsForMethod(bytes4,bytes)": {
        "notice": "Parses the expected assets to receive from a call on integration"
      },
      "redeem(address,bytes,bytes)": {
        "notice": "Redeems steth LP tokens"
      },
      "stake(address,bytes,bytes)": {
        "notice": "Stakes steth LP tokens"
      },
      "unstake(address,bytes,bytes)": {
        "notice": "Unstakes steth LP tokens"
      },
      "unstakeAndRedeem(address,bytes,bytes)": {
        "notice": "Unstakes steth LP tokens, then redeems them"
      }
    },
    "notice": "Adapter for liquidity provision in Curve's steth pool (https://www.curve.fi/steth)",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}