{
  "address": "0x492Ba86AEF75c137B6a0249fb81abdf6c9542aE9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "comptrollerProxy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "name": "FundSettingsAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        }
      ],
      "name": "PayerWhitelistAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        }
      ],
      "name": "PayerWhitelistRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "comptrollerProxy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sharesQuantity",
          "type": "uint256"
        }
      ],
      "name": "Settled",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "activateForFund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_comptrollerProxy",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_settingsData",
          "type": "bytes"
        }
      ],
      "name": "addFundSettings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_payer",
          "type": "address"
        }
      ],
      "name": "addPayerWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFeeActivationTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFeeManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "feeManager_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_comptrollerProxy",
          "type": "address"
        }
      ],
      "name": "getRateForFund",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rate_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSettlementType",
      "outputs": [
        {
          "internalType": "enum IFeeManager.SettlementType",
          "name": "settlementType_",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "identifier",
      "outputs": [
        {
          "internalType": "string",
          "name": "identifier_",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "implementedHooks",
      "outputs": [
        {
          "internalType": "enum IFeeManager.FeeHook[]",
          "name": "implementedHooksForSettle_",
          "type": "uint8[]"
        },
        {
          "internalType": "enum IFeeManager.FeeHook[]",
          "name": "implementedHooksForUpdate_",
          "type": "uint8[]"
        },
        {
          "internalType": "bool",
          "name": "usesGavOnSettle_",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "usesGavOnUpdate_",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_payer",
          "type": "address"
        }
      ],
      "name": "isPayerWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "payout",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_payer",
          "type": "address"
        }
      ],
      "name": "removePayerWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_comptrollerProxy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "enum IFeeManager.FeeHook",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "_settlementData",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "settle",
      "outputs": [
        {
          "internalType": "enum IFeeManager.SettlementType",
          "name": "settlementType_",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "payer_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "sharesDue_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "enum IFeeManager.FeeHook",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "update",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x625f01359f52eb41afea4759b48bdd20fbd9b397be2fd8053bed9dc8448c1ce4",
  "receipt": {
    "to": null,
    "from": "0x5a43993587dD57d58c16bbEbdf23b9F6D279176f",
    "contractAddress": "0x492Ba86AEF75c137B6a0249fb81abdf6c9542aE9",
    "transactionIndex": 153,
    "gasUsed": "766575",
    "logsBloom": "0x
    "blockHash": "0x2da98272d6884f25bb649171e572a1350b0ba35d297946e3da2ed3fcf583b2f9",
    "transactionHash": "0x625f01359f52eb41afea4759b48bdd20fbd9b397be2fd8053bed9dc8448c1ce4",
    "logs": [],
    "blockNumber": 13522968,
    "cumulativeGasUsed": "17329108",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0546043FFf4533A8EEA5279034e1bF6362ec20D1"
  ],
  "linkedData": {
    "type": "FEE",
    "FEE_buybackWhitelist": true
  },
  "solcInputHash": "34b1516e615d6cbcdbaf9542624efee9",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"comptrollerProxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"FundSettingsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"}],\"name\":\"PayerWhitelistAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"}],\"name\":\"PayerWhitelistRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"comptrollerProxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharesQuantity\",\"type\":\"uint256\"}],\"name\":\"Settled\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"activateForFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_comptrollerProxy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_settingsData\",\"type\":\"bytes\"}],\"name\":\"addFundSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_payer\",\"type\":\"address\"}],\"name\":\"addPayerWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeActivationTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"feeManager_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_comptrollerProxy\",\"type\":\"address\"}],\"name\":\"getRateForFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSettlementType\",\"outputs\":[{\"internalType\":\"enum IFeeManager.SettlementType\",\"name\":\"settlementType_\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"identifier\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"identifier_\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementedHooks\",\"outputs\":[{\"internalType\":\"enum IFeeManager.FeeHook[]\",\"name\":\"implementedHooksForSettle_\",\"type\":\"uint8[]\"},{\"internalType\":\"enum IFeeManager.FeeHook[]\",\"name\":\"implementedHooksForUpdate_\",\"type\":\"uint8[]\"},{\"internalType\":\"bool\",\"name\":\"usesGavOnSettle_\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"usesGavOnUpdate_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_payer\",\"type\":\"address\"}],\"name\":\"isPayerWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"payout\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_payer\",\"type\":\"address\"}],\"name\":\"removePayerWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_comptrollerProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"enum IFeeManager.FeeHook\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_settlementData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"settle\",\"outputs\":[{\"internalType\":\"enum IFeeManager.SettlementType\",\"name\":\"settlementType_\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"payer_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sharesDue_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"enum IFeeManager.FeeHook\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Enzyme Council <security@enzyme.finance>\",\"kind\":\"dev\",\"methods\":{\"activateForFund(address,address)\":{\"details\":\"Unimplemented by default, may be overrode.\"},\"addFundSettings(address,bytes)\":{\"params\":{\"_comptrollerProxy\":\"The ComptrollerProxy of the fund\",\"_settingsData\":\"Encoded settings to apply to the policy for a fund\"}},\"getFeeManager()\":{\"returns\":{\"feeManager_\":\"The `FEE_MANAGER` variable value\"}},\"getRateForFund(address)\":{\"params\":{\"_comptrollerProxy\":\"The ComptrollerProxy contract for the fund\"},\"returns\":{\"rate_\":\"The `rate` variable value\"}},\"getSettlementType()\":{\"returns\":{\"settlementType_\":\"The `SETTLEMENT_TYPE` variable value\"}},\"identifier()\":{\"returns\":{\"identifier_\":\"The identifier string\"}},\"implementedHooks()\":{\"details\":\"Used only during fee registration\",\"returns\":{\"implementedHooksForSettle_\":\"The hooks during which settle() is implemented\",\"implementedHooksForUpdate_\":\"The hooks during which update() is implemented\",\"usesGavOnSettle_\":\"True if GAV is used during the settle() implementation\",\"usesGavOnUpdate_\":\"True if GAV is used during the update() implementation\"}},\"payout(address,address)\":{\"details\":\"Returns false by default, can be overridden by fee\"},\"settle(address,address,uint8,bytes,uint256)\":{\"params\":{\"_comptrollerProxy\":\"The ComptrollerProxy of the fund\",\"_settlementData\":\"Encoded args to use in calculating the settlement\"},\"returns\":{\"payer_\":\"The payer of shares due\",\"settlementType_\":\"The type of settlement\",\"sharesDue_\":\"The amount of shares due\"}},\"update(address,address,uint8,bytes,uint256)\":{\"details\":\"Unimplemented by default, can be overridden by fee\"}},\"title\":\"EntranceRateBurnFee Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"activateForFund(address,address)\":{\"notice\":\"Allows Fee to run logic during fund activation\"},\"addFundSettings(address,bytes)\":{\"notice\":\"Add the fee settings for a fund\"},\"getFeeManager()\":{\"notice\":\"Gets the `FEE_MANAGER` variable\"},\"getRateForFund(address)\":{\"notice\":\"Gets the `rate` variable for a fund\"},\"getSettlementType()\":{\"notice\":\"Gets the `SETTLEMENT_TYPE` variable\"},\"identifier()\":{\"notice\":\"Provides a constant string identifier for a fee\"},\"implementedHooks()\":{\"notice\":\"Gets the hooks that are implemented by the fee\"},\"payout(address,address)\":{\"notice\":\"Runs payout logic for a fee that utilizes shares outstanding as its settlement type\"},\"settle(address,address,uint8,bytes,uint256)\":{\"notice\":\"Settles the fee\"},\"update(address,address,uint8,bytes,uint256)\":{\"notice\":\"Update fee state after all settlement has occurred during a given fee hook\"}},\"notice\":\"An EntranceRateFee that burns the fee shares\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/release/extensions/fee-manager/fees/EntranceRateBurnFee.sol\":\"EntranceRateBurnFee\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"contracts/release/extensions/fee-manager/IFee.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IFeeManager.sol\\\";\\n\\n/// @title Fee Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Interface for all fees\\ninterface IFee {\\n    function activateForFund(address _comptrollerProxy, address _vaultProxy) external;\\n\\n    function addFundSettings(address _comptrollerProxy, bytes calldata _settingsData) external;\\n\\n    function identifier() external pure returns (string memory identifier_);\\n\\n    function isPayerWhitelisted(address _payer) external view returns (bool);\\n\\n    function implementedHooks()\\n        external\\n        view\\n        returns (\\n            IFeeManager.FeeHook[] memory implementedHooksForSettle_,\\n            IFeeManager.FeeHook[] memory implementedHooksForUpdate_,\\n            bool usesGavOnSettle_,\\n            bool usesGavOnUpdate_\\n        );\\n\\n    function payout(address _comptrollerProxy, address _vaultProxy)\\n        external\\n        returns (bool isPayable_);\\n\\n    function settle(\\n        address _comptrollerProxy,\\n        address _vaultProxy,\\n        IFeeManager.FeeHook _hook,\\n        bytes calldata _settlementData,\\n        uint256 _gav\\n    )\\n        external\\n        returns (\\n            IFeeManager.SettlementType settlementType_,\\n            address payer_,\\n            uint256 sharesDue_\\n        );\\n\\n    function update(\\n        address _comptrollerProxy,\\n        address _vaultProxy,\\n        IFeeManager.FeeHook _hook,\\n        bytes calldata _settlementData,\\n        uint256 _gav\\n    ) external;\\n\\n    function addPayerWhitelist(address _payer) external;\\n\\n    function removePayerWhitelist(address _payer) external;\\n}\\n\",\"keccak256\":\"0x84e1d7789be0ceb0026c9294fcfd81b77a53ac42be033a23e081e18ae532f0c4\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/fee-manager/IFeeManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n/// @title FeeManager Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Interface for the FeeManager\\ninterface IFeeManager {\\n    // No fees for the current release are implemented post-redeemShares\\n    enum FeeHook {\\n        Continuous,\\n        BuySharesSetup,\\n        PreBuyShares,\\n        PostBuyShares,\\n        BuySharesCompleted,\\n        PreRedeemShares\\n    }\\n    enum SettlementType {None, Direct, Mint, Burn, MintSharesOutstanding, BurnSharesOutstanding, MintBuyback}\\n\\n    function invokeHook(\\n        FeeHook,\\n        bytes calldata,\\n        uint256\\n    ) external;\\n\\n    function invokeHookProtocolFee(\\n        FeeHook,\\n        bytes calldata,\\n        uint256\\n    ) external returns (bool, uint256);\\n\\n    function updateProtocolFee(address) external;\\n\\n    function addUserFeeWhitelist(address[] calldata fees, address user) external;\\n\\n    function removeUserFeeWhitelist(address[] calldata fees, address user) external;\\n}\\n\",\"keccak256\":\"0xc0bbcfc8c6476521e2acd54fd2c2a179b5059ccfe8b01d4b70077cd8b1f5ea6f\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/fee-manager/fees/EntranceRateBurnFee.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./utils/EntranceRateFeeBase.sol\\\";\\n\\n/// @title EntranceRateBurnFee Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice An EntranceRateFee that burns the fee shares\\ncontract EntranceRateBurnFee is EntranceRateFeeBase {\\n    constructor(address _feeManager)\\n        public\\n        EntranceRateFeeBase(_feeManager, IFeeManager.SettlementType.Burn)\\n    {}\\n\\n    /// @notice Provides a constant string identifier for a fee\\n    /// @return identifier_ The identifier string\\n    function identifier() external pure override returns (string memory identifier_) {\\n        return \\\"ENTRANCE_RATE_BURN\\\";\\n    }\\n}\\n\",\"keccak256\":\"0xc6ae26be443bc8a946f1753159b0595a9c58f8aee662e24d37d7c7a613eaace9\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/fee-manager/fees/utils/EntranceRateFeeBase.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./FeeBase.sol\\\";\\n\\n/// @title EntranceRateFeeBase Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Calculates a fee based on a rate to be charged to an investor upon entering a fund\\nabstract contract EntranceRateFeeBase is FeeBase {\\n    using SafeMath for uint256;\\n\\n    event FundSettingsAdded(address indexed comptrollerProxy, uint256 rate);\\n\\n    event Settled(address indexed comptrollerProxy, address indexed payer, uint256 sharesQuantity);\\n\\n    uint256 private constant RATE_DIVISOR = 10**18;\\n    IFeeManager.SettlementType private immutable SETTLEMENT_TYPE;\\n\\n    mapping(address => uint256) private comptrollerProxyToRate;\\n\\n    constructor(address _feeManager, IFeeManager.SettlementType _settlementType)\\n        public\\n        FeeBase(_feeManager)\\n    {\\n        require(\\n            _settlementType == IFeeManager.SettlementType.Burn ||\\n                _settlementType == IFeeManager.SettlementType.Direct,\\n            \\\"constructor: Invalid _settlementType\\\"\\n        );\\n        SETTLEMENT_TYPE = _settlementType;\\n    }\\n\\n    // EXTERNAL FUNCTIONS\\n\\n    /// @notice Add the fee settings for a fund\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\n    /// @param _settingsData Encoded settings to apply to the policy for a fund\\n    function addFundSettings(address _comptrollerProxy, bytes calldata _settingsData)\\n        external\\n        override\\n        onlyFeeManager\\n    {\\n        uint256 rate = abi.decode(_settingsData, (uint256));\\n        require(rate > 0, \\\"addFundSettings: Fee rate must be >0\\\");\\n\\n        comptrollerProxyToRate[_comptrollerProxy] = rate;\\n\\n        emit FundSettingsAdded(_comptrollerProxy, rate);\\n    }\\n\\n    /// @notice Gets the hooks that are implemented by the fee\\n    /// @return implementedHooksForSettle_ The hooks during which settle() is implemented\\n    /// @return implementedHooksForUpdate_ The hooks during which update() is implemented\\n    /// @return usesGavOnSettle_ True if GAV is used during the settle() implementation\\n    /// @return usesGavOnUpdate_ True if GAV is used during the update() implementation\\n    /// @dev Used only during fee registration\\n    function implementedHooks()\\n        external\\n        view\\n        override\\n        returns (\\n            IFeeManager.FeeHook[] memory implementedHooksForSettle_,\\n            IFeeManager.FeeHook[] memory implementedHooksForUpdate_,\\n            bool usesGavOnSettle_,\\n            bool usesGavOnUpdate_\\n        )\\n    {\\n        implementedHooksForSettle_ = new IFeeManager.FeeHook[](1);\\n        implementedHooksForSettle_[0] = IFeeManager.FeeHook.PostBuyShares;\\n\\n        return (implementedHooksForSettle_, new IFeeManager.FeeHook[](0), false, false);\\n    }\\n\\n    /// @notice Settles the fee\\n    /// @param _comptrollerProxy The ComptrollerProxy of the fund\\n    /// @param _settlementData Encoded args to use in calculating the settlement\\n    /// @return settlementType_ The type of settlement\\n    /// @return payer_ The payer of shares due\\n    /// @return sharesDue_ The amount of shares due\\n    function settle(\\n        address _comptrollerProxy,\\n        address,\\n        IFeeManager.FeeHook,\\n        bytes calldata _settlementData,\\n        uint256\\n    )\\n        external\\n        override\\n        onlyFeeManager\\n        returns (\\n            IFeeManager.SettlementType settlementType_,\\n            address payer_,\\n            uint256 sharesDue_\\n        )\\n    {\\n        uint256 sharesBought;\\n        (payer_, , sharesBought) = __decodePostBuySharesSettlementData(_settlementData);\\n\\n        if(payerWhitelist[payer_]) {\\n            return (IFeeManager.SettlementType.None, address(0), 0);\\n        }\\n\\n        uint256 rate = comptrollerProxyToRate[_comptrollerProxy];\\n        sharesDue_ = sharesBought.mul(rate).div(RATE_DIVISOR.add(rate));\\n\\n        if (sharesDue_ == 0) {\\n            return (IFeeManager.SettlementType.None, address(0), 0);\\n        }\\n\\n        emit Settled(_comptrollerProxy, payer_, sharesDue_);\\n\\n        return (SETTLEMENT_TYPE, payer_, sharesDue_);\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the `rate` variable for a fund\\n    /// @param _comptrollerProxy The ComptrollerProxy contract for the fund\\n    /// @return rate_ The `rate` variable value\\n    function getRateForFund(address _comptrollerProxy) external view returns (uint256 rate_) {\\n        return comptrollerProxyToRate[_comptrollerProxy];\\n    }\\n\\n    /// @notice Gets the `SETTLEMENT_TYPE` variable\\n    /// @return settlementType_ The `SETTLEMENT_TYPE` variable value\\n    function getSettlementType()\\n        external\\n        view\\n        returns (IFeeManager.SettlementType settlementType_)\\n    {\\n        return SETTLEMENT_TYPE;\\n    }\\n}\\n\",\"keccak256\":\"0x30e2205c501f71eb0ea48fbec8252cf10523582de5879182237f7ebe02685d71\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/fee-manager/fees/utils/FeeBase.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../../IFee.sol\\\";\\n\\n/// @title FeeBase Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Abstract base contract for all fees\\nabstract contract FeeBase is IFee {\\n    address internal immutable FEE_MANAGER;\\n    uint256 internal immutable FEE_ACTIVATION_TIMESTAMP;\\n\\n    mapping(address => bool) internal payerWhitelist;\\n\\n    event PayerWhitelistAdded(address indexed payer);\\n    event PayerWhitelistRemoved(address indexed payer);\\n\\n    modifier onlyFeeManager {\\n        require(msg.sender == FEE_MANAGER, \\\"Only the FeeManger can make this call\\\");\\n        _;\\n    }\\n\\n    constructor(address _feeManager) public {\\n        FEE_MANAGER = _feeManager;\\n        FEE_ACTIVATION_TIMESTAMP = block.timestamp;\\n    }\\n\\n    /// @notice Allows Fee to run logic during fund activation\\n    /// @dev Unimplemented by default, may be overrode.\\n    function activateForFund(address, address) external virtual override {\\n        return;\\n    }\\n\\n    /// @notice Runs payout logic for a fee that utilizes shares outstanding as its settlement type\\n    /// @dev Returns false by default, can be overridden by fee\\n    function payout(address, address) external virtual override returns (bool) {\\n        return false;\\n    }\\n\\n    /// @notice Update fee state after all settlement has occurred during a given fee hook\\n    /// @dev Unimplemented by default, can be overridden by fee\\n    function update(\\n        address,\\n        address,\\n        IFeeManager.FeeHook,\\n        bytes calldata,\\n        uint256\\n    ) external virtual override {\\n        return;\\n    }\\n\\n    function addPayerWhitelist(address _payer) external override onlyFeeManager {\\n        payerWhitelist[_payer] = true;\\n\\n        emit PayerWhitelistAdded(_payer);\\n    }\\n\\n    function removePayerWhitelist(address _payer) external override onlyFeeManager {\\n        payerWhitelist[_payer] = false;\\n\\n        emit PayerWhitelistRemoved(_payer);\\n    }\\n\\n    /// @notice Helper to parse settlement arguments from encoded data for PreBuyShares fee hook\\n    function __decodePreBuySharesSettlementData(bytes memory _settlementData)\\n        internal\\n        pure\\n        returns (\\n            address buyer_,\\n            uint256 investmentAmount_,\\n            uint256 minSharesQuantity_\\n        )\\n    {\\n        return abi.decode(_settlementData, (address, uint256, uint256));\\n    }\\n\\n    /// @notice Helper to parse settlement arguments from encoded data for PreRedeemShares fee hook\\n    function __decodePreRedeemSharesSettlementData(bytes memory _settlementData)\\n        internal\\n        pure\\n        returns (address redeemer_, uint256 sharesQuantity_)\\n    {\\n        return abi.decode(_settlementData, (address, uint256));\\n    }\\n\\n    /// @notice Helper to parse settlement arguments from encoded data for PostBuyShares fee hook\\n    function __decodePostBuySharesSettlementData(bytes memory _settlementData)\\n        internal\\n        pure\\n        returns (\\n            address buyer_,\\n            uint256 investmentAmount_,\\n            uint256 sharesBought_\\n        )\\n    {\\n        return abi.decode(_settlementData, (address, uint256, uint256));\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the `FEE_MANAGER` variable\\n    /// @return feeManager_ The `FEE_MANAGER` variable value\\n    function getFeeManager() external view returns (address feeManager_) {\\n        return FEE_MANAGER;\\n    }\\n\\n    function getFeeActivationTimestamp() external view returns (uint256) {\\n        return FEE_ACTIVATION_TIMESTAMP;\\n    }\\n\\n    function isPayerWhitelisted(address _payer) external override view returns (bool) {\\n        return payerWhitelist[_payer];\\n    }\\n}\\n\",\"keccak256\":\"0x0ed1e9e85b170a5cba662991334ef46612c77c4b6c3fc9a68aedd1ab4afcded5\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60e060405234801561001057600080fd5b50604051610d89380380610d898339818101604052602081101561003357600080fd5b50516001600160601b0319606082901b166080524260a0819052600360f81b60c0526001600160a01b03909116906003610cea61009f6000398061084a528061095b525080610a2f52508061059752806106d1528061088552806109885280610ad35250610cea6000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80637998a1c41161008c5780639a786662116100665780639a78666214610461578063b78b481314610469578063cbf54bb214610497578063f2d638261461054a576100ea565b80637998a1c4146103955780637bdd5b1d146104125780639714574c1461043b576100ea565b80633146d058116100c85780633146d0581461023e5780633eecc2bf1461026c57806341892d7e146102a45780636a29d94e1461036f576100ea565b80630b065be0146100ef5780630f5f6b4f14610129578063233faf5f146101ab575b600080fd5b6101156004803603602081101561010557600080fd5b50356001600160a01b031661056e565b604080519115158252519081900360200190f35b6101a96004803603604081101561013f57600080fd5b6001600160a01b03823516919081019060408101602082013564010000000081111561016a57600080fd5b82018360208201111561017c57600080fd5b8035906020019184600183028401116401000000008311171561019e57600080fd5b50909250905061058c565b005b6101a9600480360360a08110156101c157600080fd5b6001600160a01b03823581169260208101359091169160ff60408301351691908101906080810160608201356401000000008111156101ff57600080fd5b82018360208201111561021157600080fd5b8035906020019184600183028401116401000000008311171561023357600080fd5b91935091503561069b565b6101a96004803603604081101561025457600080fd5b506001600160a01b03813581169160200135166106a3565b6102926004803603602081101561028257600080fd5b50356001600160a01b03166106a7565b60408051918252519081900360200190f35b610337600480360360a08110156102ba57600080fd5b6001600160a01b03823581169260208101359091169160ff60408301351691908101906080810160608201356401000000008111156102f857600080fd5b82018360208201111561030a57600080fd5b8035906020019184600183028401116401000000008311171561032c57600080fd5b9193509150356106c2565b6040518084600681111561034757fe5b8152602001836001600160a01b03168152602001828152602001935050505060405180910390f35b6101a96004803603602081101561038557600080fd5b50356001600160a01b031661087a565b61039d61092d565b6040805160208082528351818301528351919283929083019185019080838360005b838110156103d75781810151838201526020016103bf565b50505050905090810190601f1680156104045780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61041a610959565b6040518082600681111561042a57fe5b815260200191505060405180910390f35b6101a96004803603602081101561045157600080fd5b50356001600160a01b031661097d565b610292610a2d565b6101156004803603604081101561047f57600080fd5b506001600160a01b0381358116916020013516610a51565b61049f610a5a565b60405180806020018060200185151581526020018415158152602001838103835287818151815260200191508051906020019060200280838360005b838110156104f35781810151838201526020016104db565b50505050905001838103825286818151815260200191508051906020019060200280838360005b8381101561053257818101518382015260200161051a565b50505050905001965050505050505060405180910390f35b610552610ad1565b604080516001600160a01b039092168252519081900360200190f35b6001600160a01b031660009081526020819052604090205460ff1690565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146105f35760405162461bcd60e51b8152600401808060200182810382526025815260200180610c4b6025913960400191505060405180910390fd5b60008282602081101561060557600080fd5b50359050806106455760405162461bcd60e51b8152600401808060200182810382526024815260200180610c916024913960400191505060405180910390fd5b6001600160a01b038416600081815260016020908152604091829020849055815184815291517f90b7d1516011c1da1279f3ae0ed052b1416e7c373d4ec40cf515aa53c5f839df9281900390910190a250505050565b505050505050565b5050565b6001600160a01b031660009081526001602052604090205490565b60008080336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461072d5760405162461bcd60e51b8152600401808060200182810382526025815260200180610c4b6025913960400191505060405180910390fd5b600061076e87878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610af592505050565b6001600160a01b03831660009081526020819052604090205492955092505060ff16156107a65760008060009350935093505061086e565b6001600160a01b038a166000908152600160205260409020546107e46107d4670de0b6b3a764000083610b29565b6107de8484610b8a565b90610be3565b9250826107fd576000806000945094509450505061086e565b836001600160a01b03168b6001600160a01b03167f7e79a2206061184e05985ae0578dec52f817756a441996f984cdc817efc25a68856040518082815260200191505060405180910390a37f0000000000000000000000000000000000000000000000000000000000000000945050505b96509650969350505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146108e15760405162461bcd60e51b8152600401808060200182810382526025815260200180610c4b6025913960400191505060405180910390fd5b6001600160a01b038116600081815260208190526040808220805460ff19166001179055517faa0e9100f973660a79dca7e4920e97aa3d552337b468b83ef5f54bc2f823530d9190a250565b60408051808201909152601281527122a72a2920a721a2afa920aa22afa12aa92760711b602082015290565b7f000000000000000000000000000000000000000000000000000000000000000090565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146109e45760405162461bcd60e51b8152600401808060200182810382526025815260200180610c4b6025913960400191505060405180910390fd5b6001600160a01b038116600081815260208190526040808220805460ff19169055517fd51e82eaff33a5c5fb421b48653be389552281a56dda3ba08b32b1e5985511a09190a250565b7f000000000000000000000000000000000000000000000000000000000000000090565b60005b92915050565b604080516001808252818301909252606091829160009182919060208083019080368337019050509350600384600081518110610a9357fe5b60200260200101906005811115610aa657fe5b90816005811115610ab357fe5b90525050604080516000808252602082019092529394909250829150565b7f000000000000000000000000000000000000000000000000000000000000000090565b6000806000838060200190516060811015610b0f57600080fd5b508051602082015160409092015190969195509350915050565b600082820183811015610b83576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b600082610b9957506000610a54565b82820282848281610ba657fe5b0414610b835760405162461bcd60e51b8152600401808060200182810382526021815260200180610c706021913960400191505060405180910390fd5b6000808211610c39576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381610c4257fe5b04939250505056fe4f6e6c7920746865204665654d616e6765722063616e206d616b6520746869732063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7761646446756e6453657474696e67733a204665652072617465206d757374206265203e30a26469706673582212203f750da4917fb380495c42fd717168416d74e8bb464d40e5b9ad3b3f515c99b464736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c80637998a1c41161008c5780639a786662116100665780639a78666214610461578063b78b481314610469578063cbf54bb214610497578063f2d638261461054a576100ea565b80637998a1c4146103955780637bdd5b1d146104125780639714574c1461043b576100ea565b80633146d058116100c85780633146d0581461023e5780633eecc2bf1461026c57806341892d7e146102a45780636a29d94e1461036f576100ea565b80630b065be0146100ef5780630f5f6b4f14610129578063233faf5f146101ab575b600080fd5b6101156004803603602081101561010557600080fd5b50356001600160a01b031661056e565b604080519115158252519081900360200190f35b6101a96004803603604081101561013f57600080fd5b6001600160a01b03823516919081019060408101602082013564010000000081111561016a57600080fd5b82018360208201111561017c57600080fd5b8035906020019184600183028401116401000000008311171561019e57600080fd5b50909250905061058c565b005b6101a9600480360360a08110156101c157600080fd5b6001600160a01b03823581169260208101359091169160ff60408301351691908101906080810160608201356401000000008111156101ff57600080fd5b82018360208201111561021157600080fd5b8035906020019184600183028401116401000000008311171561023357600080fd5b91935091503561069b565b6101a96004803603604081101561025457600080fd5b506001600160a01b03813581169160200135166106a3565b6102926004803603602081101561028257600080fd5b50356001600160a01b03166106a7565b60408051918252519081900360200190f35b610337600480360360a08110156102ba57600080fd5b6001600160a01b03823581169260208101359091169160ff60408301351691908101906080810160608201356401000000008111156102f857600080fd5b82018360208201111561030a57600080fd5b8035906020019184600183028401116401000000008311171561032c57600080fd5b9193509150356106c2565b6040518084600681111561034757fe5b8152602001836001600160a01b03168152602001828152602001935050505060405180910390f35b6101a96004803603602081101561038557600080fd5b50356001600160a01b031661087a565b61039d61092d565b6040805160208082528351818301528351919283929083019185019080838360005b838110156103d75781810151838201526020016103bf565b50505050905090810190601f1680156104045780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61041a610959565b6040518082600681111561042a57fe5b815260200191505060405180910390f35b6101a96004803603602081101561045157600080fd5b50356001600160a01b031661097d565b610292610a2d565b6101156004803603604081101561047f57600080fd5b506001600160a01b0381358116916020013516610a51565b61049f610a5a565b60405180806020018060200185151581526020018415158152602001838103835287818151815260200191508051906020019060200280838360005b838110156104f35781810151838201526020016104db565b50505050905001838103825286818151815260200191508051906020019060200280838360005b8381101561053257818101518382015260200161051a565b50505050905001965050505050505060405180910390f35b610552610ad1565b604080516001600160a01b039092168252519081900360200190f35b6001600160a01b031660009081526020819052604090205460ff1690565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146105f35760405162461bcd60e51b8152600401808060200182810382526025815260200180610c4b6025913960400191505060405180910390fd5b60008282602081101561060557600080fd5b50359050806106455760405162461bcd60e51b8152600401808060200182810382526024815260200180610c916024913960400191505060405180910390fd5b6001600160a01b038416600081815260016020908152604091829020849055815184815291517f90b7d1516011c1da1279f3ae0ed052b1416e7c373d4ec40cf515aa53c5f839df9281900390910190a250505050565b505050505050565b5050565b6001600160a01b031660009081526001602052604090205490565b60008080336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461072d5760405162461bcd60e51b8152600401808060200182810382526025815260200180610c4b6025913960400191505060405180910390fd5b600061076e87878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610af592505050565b6001600160a01b03831660009081526020819052604090205492955092505060ff16156107a65760008060009350935093505061086e565b6001600160a01b038a166000908152600160205260409020546107e46107d4670de0b6b3a764000083610b29565b6107de8484610b8a565b90610be3565b9250826107fd576000806000945094509450505061086e565b836001600160a01b03168b6001600160a01b03167f7e79a2206061184e05985ae0578dec52f817756a441996f984cdc817efc25a68856040518082815260200191505060405180910390a37f0000000000000000000000000000000000000000000000000000000000000000945050505b96509650969350505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146108e15760405162461bcd60e51b8152600401808060200182810382526025815260200180610c4b6025913960400191505060405180910390fd5b6001600160a01b038116600081815260208190526040808220805460ff19166001179055517faa0e9100f973660a79dca7e4920e97aa3d552337b468b83ef5f54bc2f823530d9190a250565b60408051808201909152601281527122a72a2920a721a2afa920aa22afa12aa92760711b602082015290565b7f000000000000000000000000000000000000000000000000000000000000000090565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146109e45760405162461bcd60e51b8152600401808060200182810382526025815260200180610c4b6025913960400191505060405180910390fd5b6001600160a01b038116600081815260208190526040808220805460ff19169055517fd51e82eaff33a5c5fb421b48653be389552281a56dda3ba08b32b1e5985511a09190a250565b7f000000000000000000000000000000000000000000000000000000000000000090565b60005b92915050565b604080516001808252818301909252606091829160009182919060208083019080368337019050509350600384600081518110610a9357fe5b60200260200101906005811115610aa657fe5b90816005811115610ab357fe5b90525050604080516000808252602082019092529394909250829150565b7f000000000000000000000000000000000000000000000000000000000000000090565b6000806000838060200190516060811015610b0f57600080fd5b508051602082015160409092015190969195509350915050565b600082820183811015610b83576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b600082610b9957506000610a54565b82820282848281610ba657fe5b0414610b835760405162461bcd60e51b8152600401808060200182810382526021815260200180610c706021913960400191505060405180910390fd5b6000808211610c39576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381610c4257fe5b04939250505056fe4f6e6c7920746865204665654d616e6765722063616e206d616b6520746869732063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7761646446756e6453657474696e67733a204665652072617465206d757374206265203e30a26469706673582212203f750da4917fb380495c42fd717168416d74e8bb464d40e5b9ad3b3f515c99b464736f6c634300060c0033",
  "devdoc": {
    "author": "Enzyme Council <security@enzyme.finance>",
    "kind": "dev",
    "methods": {
      "activateForFund(address,address)": {
        "details": "Unimplemented by default, may be overrode."
      },
      "addFundSettings(address,bytes)": {
        "params": {
          "_comptrollerProxy": "The ComptrollerProxy of the fund",
          "_settingsData": "Encoded settings to apply to the policy for a fund"
        }
      },
      "getFeeManager()": {
        "returns": {
          "feeManager_": "The `FEE_MANAGER` variable value"
        }
      },
      "getRateForFund(address)": {
        "params": {
          "_comptrollerProxy": "The ComptrollerProxy contract for the fund"
        },
        "returns": {
          "rate_": "The `rate` variable value"
        }
      },
      "getSettlementType()": {
        "returns": {
          "settlementType_": "The `SETTLEMENT_TYPE` variable value"
        }
      },
      "identifier()": {
        "returns": {
          "identifier_": "The identifier string"
        }
      },
      "implementedHooks()": {
        "details": "Used only during fee registration",
        "returns": {
          "implementedHooksForSettle_": "The hooks during which settle() is implemented",
          "implementedHooksForUpdate_": "The hooks during which update() is implemented",
          "usesGavOnSettle_": "True if GAV is used during the settle() implementation",
          "usesGavOnUpdate_": "True if GAV is used during the update() implementation"
        }
      },
      "payout(address,address)": {
        "details": "Returns false by default, can be overridden by fee"
      },
      "settle(address,address,uint8,bytes,uint256)": {
        "params": {
          "_comptrollerProxy": "The ComptrollerProxy of the fund",
          "_settlementData": "Encoded args to use in calculating the settlement"
        },
        "returns": {
          "payer_": "The payer of shares due",
          "settlementType_": "The type of settlement",
          "sharesDue_": "The amount of shares due"
        }
      },
      "update(address,address,uint8,bytes,uint256)": {
        "details": "Unimplemented by default, can be overridden by fee"
      }
    },
    "title": "EntranceRateBurnFee Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "activateForFund(address,address)": {
        "notice": "Allows Fee to run logic during fund activation"
      },
      "addFundSettings(address,bytes)": {
        "notice": "Add the fee settings for a fund"
      },
      "getFeeManager()": {
        "notice": "Gets the `FEE_MANAGER` variable"
      },
      "getRateForFund(address)": {
        "notice": "Gets the `rate` variable for a fund"
      },
      "getSettlementType()": {
        "notice": "Gets the `SETTLEMENT_TYPE` variable"
      },
      "identifier()": {
        "notice": "Provides a constant string identifier for a fee"
      },
      "implementedHooks()": {
        "notice": "Gets the hooks that are implemented by the fee"
      },
      "payout(address,address)": {
        "notice": "Runs payout logic for a fee that utilizes shares outstanding as its settlement type"
      },
      "settle(address,address,uint8,bytes,uint256)": {
        "notice": "Settles the fee"
      },
      "update(address,address,uint8,bytes,uint256)": {
        "notice": "Update fee state after all settlement has occurred during a given fee hook"
      }
    },
    "notice": "An EntranceRateFee that burns the fee shares",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 18344,
        "contract": "contracts/release/extensions/fee-manager/fees/EntranceRateBurnFee.sol:EntranceRateBurnFee",
        "label": "payerWhitelist",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 18100,
        "contract": "contracts/release/extensions/fee-manager/fees/EntranceRateBurnFee.sol:EntranceRateBurnFee",
        "label": "comptrollerProxyToRate",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}