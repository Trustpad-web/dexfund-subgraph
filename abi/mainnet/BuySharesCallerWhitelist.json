{
  "address": "0xf4509FDe9eb5100dD9eEcC1Bfa9346951850eefF",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_policyManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "comptrollerProxy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "items",
          "type": "address[]"
        }
      ],
      "name": "AddressesAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "comptrollerProxy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "items",
          "type": "address[]"
        }
      ],
      "name": "AddressesRemoved",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "activateForFund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_comptrollerProxy",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_encodedSettings",
          "type": "bytes"
        }
      ],
      "name": "addFundSettings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_comptrollerProxy",
          "type": "address"
        }
      ],
      "name": "getList",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "list_",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPolicyDeployTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPolicyManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "policyManager_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "identifier",
      "outputs": [
        {
          "internalType": "string",
          "name": "identifier_",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "implementedHooks",
      "outputs": [
        {
          "internalType": "enum IPolicyManager.PolicyHook[]",
          "name": "implementedHooks_",
          "type": "uint8[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_comptrollerProxy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_item",
          "type": "address"
        }
      ],
      "name": "isInList",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isInList_",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_comptrollerProxy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_buySharesCaller",
          "type": "address"
        }
      ],
      "name": "passesRule",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isValid_",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_comptrollerProxy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_encodedSettings",
          "type": "bytes"
        }
      ],
      "name": "updateFundSettings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_comptrollerProxy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "enum IPolicyManager.PolicyHook",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "_encodedArgs",
          "type": "bytes"
        }
      ],
      "name": "validateRule",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isValid_",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7e6169d4f2ec56cf1e2a21d92f6aee8ca8f8952d3d21e65242e86cdf15a90ec4",
  "receipt": {
    "to": null,
    "from": "0x5a43993587dD57d58c16bbEbdf23b9F6D279176f",
    "contractAddress": "0xf4509FDe9eb5100dD9eEcC1Bfa9346951850eefF",
    "transactionIndex": 62,
    "gasUsed": "903649",
    "logsBloom": "0x
    "blockHash": "0x7d9f2fa74dbc16b1f88a4685d63c9a5c3724ed7fc81a951ed538e171f28d9a0f",
    "transactionHash": "0x7e6169d4f2ec56cf1e2a21d92f6aee8ca8f8952d3d21e65242e86cdf15a90ec4",
    "logs": [],
    "blockNumber": 13523032,
    "cumulativeGasUsed": "5687051",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x73A064974e0B97c251fDc0c0E627F2518dfAeBEd"
  ],
  "linkedData": {
    "type": "POLICY"
  },
  "solcInputHash": "34b1516e615d6cbcdbaf9542624efee9",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_policyManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"comptrollerProxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"items\",\"type\":\"address[]\"}],\"name\":\"AddressesAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"comptrollerProxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"items\",\"type\":\"address[]\"}],\"name\":\"AddressesRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"activateForFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_comptrollerProxy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_encodedSettings\",\"type\":\"bytes\"}],\"name\":\"addFundSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_comptrollerProxy\",\"type\":\"address\"}],\"name\":\"getList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"list_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPolicyDeployTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPolicyManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"policyManager_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"identifier\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"identifier_\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementedHooks\",\"outputs\":[{\"internalType\":\"enum IPolicyManager.PolicyHook[]\",\"name\":\"implementedHooks_\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_comptrollerProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_item\",\"type\":\"address\"}],\"name\":\"isInList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isInList_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_comptrollerProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_buySharesCaller\",\"type\":\"address\"}],\"name\":\"passesRule\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isValid_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_comptrollerProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_encodedSettings\",\"type\":\"bytes\"}],\"name\":\"updateFundSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_comptrollerProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"enum IPolicyManager.PolicyHook\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_encodedArgs\",\"type\":\"bytes\"}],\"name\":\"validateRule\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isValid_\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Enzyme Council <security@enzyme.finance>\",\"kind\":\"dev\",\"methods\":{\"activateForFund(address,address)\":{\"details\":\"Unimplemented by default, can be overridden by the policy\"},\"addFundSettings(address,bytes)\":{\"params\":{\"_comptrollerProxy\":\"The fund's ComptrollerProxy address\",\"_encodedSettings\":\"Encoded settings to apply to a fund\"}},\"getList(address)\":{\"params\":{\"_comptrollerProxy\":\"The fund's ComptrollerProxy address\"},\"returns\":{\"list_\":\"The addresses in the fund's list\"}},\"getPolicyManager()\":{\"returns\":{\"policyManager_\":\"The `POLICY_MANAGER` variable value\"}},\"identifier()\":{\"returns\":{\"identifier_\":\"The identifer string\"}},\"implementedHooks()\":{\"returns\":{\"implementedHooks_\":\"The implemented PolicyHooks\"}},\"isInList(address,address)\":{\"params\":{\"_comptrollerProxy\":\"The fund's ComptrollerProxy address\",\"_item\":\"The address to check against the list\"},\"returns\":{\"isInList_\":\"True if the address is in the list\"}},\"passesRule(address,address)\":{\"params\":{\"_buySharesCaller\":\"The buyShares caller for which to check the rule\",\"_comptrollerProxy\":\"The fund's ComptrollerProxy address\"},\"returns\":{\"isValid_\":\"True if the rule passes\"}},\"updateFundSettings(address,address,bytes)\":{\"params\":{\"_comptrollerProxy\":\"The fund's ComptrollerProxy address\",\"_encodedSettings\":\"Encoded settings to apply to a fund\"}},\"validateRule(address,address,uint8,bytes)\":{\"params\":{\"_comptrollerProxy\":\"The fund's ComptrollerProxy address\",\"_encodedArgs\":\"Encoded args with which to validate the rule\"},\"returns\":{\"isValid_\":\"True if the rule passes\"}}},\"title\":\"BuySharesCallerWhitelist Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"activateForFund(address,address)\":{\"notice\":\"Validates and initializes a policy as necessary prior to fund activation\"},\"addFundSettings(address,bytes)\":{\"notice\":\"Adds the initial policy settings for a fund\"},\"getList(address)\":{\"notice\":\"Get all addresses in a fund's list\"},\"getPolicyManager()\":{\"notice\":\"Gets the `POLICY_MANAGER` variable value\"},\"identifier()\":{\"notice\":\"Provides a constant string identifier for a policy\"},\"implementedHooks()\":{\"notice\":\"Gets the implemented PolicyHooks for a policy\"},\"isInList(address,address)\":{\"notice\":\"Check if an address is in a fund's list\"},\"passesRule(address,address)\":{\"notice\":\"Checks whether a particular condition passes the rule for a particular fund\"},\"updateFundSettings(address,address,bytes)\":{\"notice\":\"Updates the policy settings for a fund\"},\"validateRule(address,address,uint8,bytes)\":{\"notice\":\"Apply the rule with the specified parameters of a PolicyHook\"}},\"notice\":\"A policy that only allows a configurable whitelist of buyShares callers for a fund\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/release/extensions/policy-manager/policies/buy-shares/BuySharesCallerWhitelist.sol\":\"BuySharesCallerWhitelist\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x1562cd9922fbf739edfb979f506809e2743789cbde3177515542161c3d04b164\",\"license\":\"MIT\"},\"contracts/release/extensions/policy-manager/IPolicy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./IPolicyManager.sol\\\";\\n\\n/// @title Policy Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IPolicy {\\n    function activateForFund(address _comptrollerProxy, address _vaultProxy) external;\\n\\n    function addFundSettings(address _comptrollerProxy, bytes calldata _encodedSettings) external;\\n\\n    function identifier() external pure returns (string memory identifier_);\\n\\n    function implementedHooks()\\n        external\\n        view\\n        returns (IPolicyManager.PolicyHook[] memory implementedHooks_);\\n\\n    function updateFundSettings(\\n        address _comptrollerProxy,\\n        address _vaultProxy,\\n        bytes calldata _encodedSettings\\n    ) external;\\n\\n    function validateRule(\\n        address _comptrollerProxy,\\n        address _vaultProxy,\\n        IPolicyManager.PolicyHook _hook,\\n        bytes calldata _encodedArgs\\n    ) external returns (bool isValid_);\\n}\\n\",\"keccak256\":\"0x0e2e8a653f8c136c50e9b8642bd57744fe581d005e1ee787476a86f3ef40551f\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/policy-manager/IPolicyManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n/// @title PolicyManager Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Interface for the PolicyManager\\ninterface IPolicyManager {\\n    enum PolicyHook {\\n        BuySharesSetup,\\n        PreBuyShares,\\n        PostBuyShares,\\n        BuySharesCompleted,\\n        PreCallOnIntegration,\\n        PostCallOnIntegration\\n    }\\n\\n    function validatePolicies(\\n        address,\\n        PolicyHook,\\n        bytes calldata\\n    ) external;\\n}\\n\",\"keccak256\":\"0xedf25295ad42998e2651b3828c2be4a6aeef1176e0c669781074394e3d181732\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/policy-manager/policies/buy-shares/BuySharesCallerWhitelist.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../utils/AddressListPolicyMixin.sol\\\";\\nimport \\\"./utils/BuySharesSetupPolicyBase.sol\\\";\\n\\n/// @title BuySharesCallerWhitelist Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A policy that only allows a configurable whitelist of buyShares callers for a fund\\ncontract BuySharesCallerWhitelist is BuySharesSetupPolicyBase, AddressListPolicyMixin {\\n    constructor(address _policyManager) public PolicyBase(_policyManager) {}\\n\\n    /// @notice Adds the initial policy settings for a fund\\n    /// @param _comptrollerProxy The fund's ComptrollerProxy address\\n    /// @param _encodedSettings Encoded settings to apply to a fund\\n    function addFundSettings(address _comptrollerProxy, bytes calldata _encodedSettings)\\n        external\\n        override\\n        onlyPolicyManager\\n    {\\n        __updateList(_comptrollerProxy, _encodedSettings);\\n    }\\n\\n    /// @notice Provides a constant string identifier for a policy\\n    /// @return identifier_ The identifer string\\n    function identifier() external pure override returns (string memory identifier_) {\\n        return \\\"BUY_SHARES_CALLER_WHITELIST\\\";\\n    }\\n\\n    /// @notice Updates the policy settings for a fund\\n    /// @param _comptrollerProxy The fund's ComptrollerProxy address\\n    /// @param _encodedSettings Encoded settings to apply to a fund\\n    function updateFundSettings(\\n        address _comptrollerProxy,\\n        address,\\n        bytes calldata _encodedSettings\\n    ) external override onlyPolicyManager {\\n        __updateList(_comptrollerProxy, _encodedSettings);\\n    }\\n\\n    /// @notice Checks whether a particular condition passes the rule for a particular fund\\n    /// @param _comptrollerProxy The fund's ComptrollerProxy address\\n    /// @param _buySharesCaller The buyShares caller for which to check the rule\\n    /// @return isValid_ True if the rule passes\\n    function passesRule(address _comptrollerProxy, address _buySharesCaller)\\n        public\\n        view\\n        returns (bool isValid_)\\n    {\\n        return isInList(_comptrollerProxy, _buySharesCaller);\\n    }\\n\\n    /// @notice Apply the rule with the specified parameters of a PolicyHook\\n    /// @param _comptrollerProxy The fund's ComptrollerProxy address\\n    /// @param _encodedArgs Encoded args with which to validate the rule\\n    /// @return isValid_ True if the rule passes\\n    function validateRule(\\n        address _comptrollerProxy,\\n        address,\\n        IPolicyManager.PolicyHook,\\n        bytes calldata _encodedArgs\\n    ) external override returns (bool isValid_) {\\n        (address caller, , ) = __decodeRuleArgs(_encodedArgs);\\n\\n        return passesRule(_comptrollerProxy, caller);\\n    }\\n\\n    /// @dev Helper to update the whitelist by adding and/or removing addresses\\n    function __updateList(address _comptrollerProxy, bytes memory _settingsData) private {\\n        (address[] memory itemsToAdd, address[] memory itemsToRemove) = abi.decode(\\n            _settingsData,\\n            (address[], address[])\\n        );\\n\\n        // If an address is in both add and remove arrays, they will not be in the final list.\\n        // We do not check for uniqueness between the two arrays for efficiency.\\n        if (itemsToAdd.length > 0) {\\n            __addToList(_comptrollerProxy, itemsToAdd);\\n        }\\n        if (itemsToRemove.length > 0) {\\n            __removeFromList(_comptrollerProxy, itemsToRemove);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfc53a2133e90772fc6719173f8f477d2303a71e180b20819191734f05f648860\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/policy-manager/policies/buy-shares/utils/BuySharesSetupPolicyBase.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../../utils/PolicyBase.sol\\\";\\n\\n/// @title BuySharesSetupPolicyBase Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A mixin contract for policies that only implement the BuySharesSetup policy hook\\nabstract contract BuySharesSetupPolicyBase is PolicyBase {\\n    /// @notice Gets the implemented PolicyHooks for a policy\\n    /// @return implementedHooks_ The implemented PolicyHooks\\n    function implementedHooks()\\n        external\\n        view\\n        override\\n        returns (IPolicyManager.PolicyHook[] memory implementedHooks_)\\n    {\\n        implementedHooks_ = new IPolicyManager.PolicyHook[](1);\\n        implementedHooks_[0] = IPolicyManager.PolicyHook.BuySharesSetup;\\n\\n        return implementedHooks_;\\n    }\\n\\n    /// @notice Helper to decode rule arguments\\n    function __decodeRuleArgs(bytes memory _encodedArgs)\\n        internal\\n        pure\\n        returns (\\n            address caller_,\\n            uint256[] memory investmentAmounts_,\\n            uint256 gav_\\n        )\\n    {\\n        return abi.decode(_encodedArgs, (address, uint256[], uint256));\\n    }\\n}\\n\",\"keccak256\":\"0xbd4dd2aae83351afeceec132abfc31d6e470410d56002fb596bf3e665bccc608\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/policy-manager/policies/utils/AddressListPolicyMixin.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\n\\n/// @title AddressListPolicyMixin Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice An abstract mixin contract for policies that use an address list\\nabstract contract AddressListPolicyMixin {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    event AddressesAdded(address indexed comptrollerProxy, address[] items);\\n\\n    event AddressesRemoved(address indexed comptrollerProxy, address[] items);\\n\\n    mapping(address => EnumerableSet.AddressSet) private comptrollerProxyToList;\\n\\n    // EXTERNAL FUNCTIONS\\n\\n    /// @notice Get all addresses in a fund's list\\n    /// @param _comptrollerProxy The fund's ComptrollerProxy address\\n    /// @return list_ The addresses in the fund's list\\n    function getList(address _comptrollerProxy) external view returns (address[] memory list_) {\\n        list_ = new address[](comptrollerProxyToList[_comptrollerProxy].length());\\n        for (uint256 i = 0; i < list_.length; i++) {\\n            list_[i] = comptrollerProxyToList[_comptrollerProxy].at(i);\\n        }\\n        return list_;\\n    }\\n\\n    // PUBLIC FUNCTIONS\\n\\n    /// @notice Check if an address is in a fund's list\\n    /// @param _comptrollerProxy The fund's ComptrollerProxy address\\n    /// @param _item The address to check against the list\\n    /// @return isInList_ True if the address is in the list\\n    function isInList(address _comptrollerProxy, address _item)\\n        public\\n        view\\n        returns (bool isInList_)\\n    {\\n        return comptrollerProxyToList[_comptrollerProxy].contains(_item);\\n    }\\n\\n    // INTERNAL FUNCTIONS\\n\\n    /// @dev Helper to add addresses to the calling fund's list\\n    function __addToList(address _comptrollerProxy, address[] memory _items) internal {\\n        require(_items.length > 0, \\\"__addToList: No addresses provided\\\");\\n\\n        for (uint256 i = 0; i < _items.length; i++) {\\n            require(\\n                comptrollerProxyToList[_comptrollerProxy].add(_items[i]),\\n                \\\"__addToList: Address already exists in list\\\"\\n            );\\n        }\\n\\n        emit AddressesAdded(_comptrollerProxy, _items);\\n    }\\n\\n    /// @dev Helper to remove addresses from the calling fund's list\\n    function __removeFromList(address _comptrollerProxy, address[] memory _items) internal {\\n        require(_items.length > 0, \\\"__removeFromList: No addresses provided\\\");\\n\\n        for (uint256 i = 0; i < _items.length; i++) {\\n            require(\\n                comptrollerProxyToList[_comptrollerProxy].remove(_items[i]),\\n                \\\"__removeFromList: Address does not exist in list\\\"\\n            );\\n        }\\n\\n        emit AddressesRemoved(_comptrollerProxy, _items);\\n    }\\n}\\n\",\"keccak256\":\"0xc09357f6e867acb31f9cbf575d406792bf6c62aaf6eca0830a697b784261b839\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/policy-manager/policies/utils/PolicyBase.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../../IPolicy.sol\\\";\\n\\n/// @title PolicyBase Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Abstract base contract for all policies\\nabstract contract PolicyBase is IPolicy {\\n    address internal immutable POLICY_MANAGER;\\n    uint256 internal immutable POLICY_DEPLOY_TIMESTAMP;\\n\\n    modifier onlyPolicyManager {\\n        require(msg.sender == POLICY_MANAGER, \\\"Only the PolicyManager can make this call\\\");\\n        _;\\n    }\\n\\n    constructor(address _policyManager) public {\\n        POLICY_MANAGER = _policyManager;\\n        POLICY_DEPLOY_TIMESTAMP = block.timestamp;\\n    }\\n\\n    /// @notice Validates and initializes a policy as necessary prior to fund activation\\n    /// @dev Unimplemented by default, can be overridden by the policy\\n    function activateForFund(address, address) external virtual override {\\n        return;\\n    }\\n\\n    /// @notice Updates the policy settings for a fund\\n    /// @dev Disallowed by default, can be overridden by the policy\\n    function updateFundSettings(\\n        address,\\n        address,\\n        bytes calldata\\n    ) external virtual override {\\n        revert(\\\"updateFundSettings: Updates not allowed for this policy\\\");\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the `POLICY_MANAGER` variable value\\n    /// @return policyManager_ The `POLICY_MANAGER` variable value\\n    function getPolicyManager() external view returns (address policyManager_) {\\n        return POLICY_MANAGER;\\n    }\\n\\n    function getPolicyDeployTimestamp() external view returns (uint256) {\\n        return POLICY_DEPLOY_TIMESTAMP;\\n    }\\n}\\n\",\"keccak256\":\"0xf6d1a74f414e334ef7dd01cb92bf352e77ea74b1bd4868033b973fa322cb42f5\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b50604051610fdc380380610fdc8339818101604052602081101561003357600080fd5b50516001600160601b031960609190911b166080524260a05260805160601c60a051610f6061007c600039806104cb52508061042852806105b952806106c05250610f606000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80637998a1c4116100715780637998a1c4146102495780638945f190146102c6578063b67cb40c1461034d578063cbf54bb21461037b578063d44ad6cb146103d3578063ef00e37a146103f7576100a9565b80630f5f6b4f146100ae57806310587e951461012e5780633146d0581461014857806335595704146101765780635b8f1c5a146101b8575b600080fd5b61012c600480360360408110156100c457600080fd5b6001600160a01b038235169190810190604081016020820135600160201b8111156100ee57600080fd5b82018360208201111561010057600080fd5b803590602001918460018302840111600160201b8311171561012157600080fd5b50909250905061041d565b005b6101366104c9565b60408051918252519081900360200190f35b61012c6004803603604081101561015e57600080fd5b506001600160a01b03813581169160200135166104ed565b6101a46004803603604081101561018c57600080fd5b506001600160a01b03813581169160200135166104f1565b604080519115158252519081900360200190f35b6101a4600480360360808110156101ce57600080fd5b6001600160a01b03823581169260208101359091169160ff6040830135169190810190608081016060820135600160201b81111561020b57600080fd5b82018360208201111561021d57600080fd5b803590602001918460018302840111600160201b8311171561023e57600080fd5b50909250905061051c565b610251610577565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561028b578181015183820152602001610273565b50505050905090810190601f1680156102b85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61012c600480360360608110156102dc57600080fd5b6001600160a01b038235811692602081013590911691810190606081016040820135600160201b81111561030f57600080fd5b82018360208201111561032157600080fd5b803590602001918460018302840111600160201b8311171561034257600080fd5b5090925090506105ae565b6101a46004803603604081101561036357600080fd5b506001600160a01b038135811691602001351661065b565b610383610667565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156103bf5781810151838201526020016103a7565b505050509050019250505060405180910390f35b6103db6106be565b604080516001600160a01b039092168252519081900360200190f35b6103836004803603602081101561040d57600080fd5b50356001600160a01b03166106e2565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146104845760405162461bcd60e51b8152600401808060200182810382526029815260200180610ee06029913960400191505060405180910390fd5b6104c48383838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506107a992505050565b505050565b7f000000000000000000000000000000000000000000000000000000000000000090565b5050565b6001600160a01b038216600090815260208190526040812061051390836108fa565b90505b92915050565b60008061055e84848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061090f92505050565b5050905061056c878261065b565b979650505050505050565b60408051808201909152601b81527f4255595f5348415245535f43414c4c45525f57484954454c4953540000000000602082015290565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146106155760405162461bcd60e51b8152600401808060200182810382526029815260200180610ee06029913960400191505060405180910390fd5b6106558483838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506107a992505050565b50505050565b600061051383836104f1565b6040805160018082528183019092526060916020808301908036833701905050905060008160008151811061069857fe5b602002602001019060058111156106ab57fe5b908160058111156106b857fe5b90525090565b7f000000000000000000000000000000000000000000000000000000000000000090565b6001600160a01b0381166000908152602081905260409020606090610706906109ce565b67ffffffffffffffff8111801561071c57600080fd5b50604051908082528060200260200182016040528015610746578160200160208202803683370190505b50905060005b81518110156107a3576001600160a01b038316600090815260208190526040902061077790826109d9565b82828151811061078357fe5b6001600160a01b039092166020928302919091019091015260010161074c565b50919050565b6060808280602001905160408110156107c157600080fd5b8101908080516040519392919084600160201b8211156107e057600080fd5b9083019060208201858111156107f557600080fd5b82518660208202830111600160201b8211171561081157600080fd5b82525081516020918201928201910280838360005b8381101561083e578181015183820152602001610826565b5050505090500160405260200180516040519392919084600160201b82111561086657600080fd5b90830190602082018581111561087b57600080fd5b82518660208202830111600160201b8211171561089757600080fd5b82525081516020918201928201910280838360005b838110156108c45781810151838201526020016108ac565b50505050905001604052505050915091506000825111156108e9576108e984836109e5565b805115610655576106558482610b41565b6000610513836001600160a01b038416610c81565b60006060600083806020019051606081101561092a57600080fd5b815160208301805160405192949293830192919084600160201b82111561095057600080fd5b90830190602082018581111561096557600080fd5b82518660208202830111600160201b8211171561098157600080fd5b82525081516020918201928201910280838360005b838110156109ae578181015183820152602001610996565b505050509190910160405250602001519398929750929550909350505050565b600061051682610c99565b60006105138383610c9d565b6000815111610a255760405162461bcd60e51b8152600401808060200182810382526022815260200180610f096022913960400191505060405180910390fd5b60005b8151811015610abd57610a7a828281518110610a4057fe5b6020026020010151600080866001600160a01b03166001600160a01b03168152602001908152602001600020610d0190919063ffffffff16565b610ab55760405162461bcd60e51b815260040180806020018281038252602b815260200180610e5e602b913960400191505060405180910390fd5b600101610a28565b50816001600160a01b03167fe3754690adb33d1fe0511f97e82086f6097babaea494124a0196a61a949ef2cf826040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610b2a578181015183820152602001610b12565b505050509050019250505060405180910390a25050565b6000815111610b815760405162461bcd60e51b8152600401808060200182810382526027815260200180610e896027913960400191505060405180910390fd5b60005b8151811015610c1957610bd6828281518110610b9c57fe5b6020026020010151600080866001600160a01b03166001600160a01b03168152602001908152602001600020610d1690919063ffffffff16565b610c115760405162461bcd60e51b8152600401808060200182810382526030815260200180610eb06030913960400191505060405180910390fd5b600101610b84565b5060408051602080825283518183015283516001600160a01b038616937ffa28b09abbaa834d4ec77cdfd905fdabcc5cd7cea3a0794093404be865f749e293869390928392830191808601910280838360008315610b2a578181015183820152602001610b12565b60009081526001919091016020526040902054151590565b5490565b81546000908210610cdf5760405162461bcd60e51b8152600401808060200182810382526022815260200180610e3c6022913960400191505060405180910390fd5b826000018281548110610cee57fe5b9060005260206000200154905092915050565b6000610513836001600160a01b038416610d2b565b6000610513836001600160a01b038416610d75565b6000610d378383610c81565b610d6d57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610516565b506000610516565b60008181526001830160205260408120548015610e315783546000198083019190810190600090879083908110610da857fe5b9060005260206000200154905080876000018481548110610dc557fe5b600091825260208083209091019290925582815260018981019092526040902090840190558654879080610df557fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610516565b600091505061051656fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e64735f5f616464546f4c6973743a204164647265737320616c72656164792065786973747320696e206c6973745f5f72656d6f766546726f6d4c6973743a204e6f206164647265737365732070726f76696465645f5f72656d6f766546726f6d4c6973743a204164647265737320646f6573206e6f7420657869737420696e206c6973744f6e6c792074686520506f6c6963794d616e616765722063616e206d616b6520746869732063616c6c5f5f616464546f4c6973743a204e6f206164647265737365732070726f7669646564a26469706673582212201e30b3f1d9ee4ba58f20910d3d54ba4caa2b4df00bb2444c1bdec9b023fb53f764736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c80637998a1c4116100715780637998a1c4146102495780638945f190146102c6578063b67cb40c1461034d578063cbf54bb21461037b578063d44ad6cb146103d3578063ef00e37a146103f7576100a9565b80630f5f6b4f146100ae57806310587e951461012e5780633146d0581461014857806335595704146101765780635b8f1c5a146101b8575b600080fd5b61012c600480360360408110156100c457600080fd5b6001600160a01b038235169190810190604081016020820135600160201b8111156100ee57600080fd5b82018360208201111561010057600080fd5b803590602001918460018302840111600160201b8311171561012157600080fd5b50909250905061041d565b005b6101366104c9565b60408051918252519081900360200190f35b61012c6004803603604081101561015e57600080fd5b506001600160a01b03813581169160200135166104ed565b6101a46004803603604081101561018c57600080fd5b506001600160a01b03813581169160200135166104f1565b604080519115158252519081900360200190f35b6101a4600480360360808110156101ce57600080fd5b6001600160a01b03823581169260208101359091169160ff6040830135169190810190608081016060820135600160201b81111561020b57600080fd5b82018360208201111561021d57600080fd5b803590602001918460018302840111600160201b8311171561023e57600080fd5b50909250905061051c565b610251610577565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561028b578181015183820152602001610273565b50505050905090810190601f1680156102b85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61012c600480360360608110156102dc57600080fd5b6001600160a01b038235811692602081013590911691810190606081016040820135600160201b81111561030f57600080fd5b82018360208201111561032157600080fd5b803590602001918460018302840111600160201b8311171561034257600080fd5b5090925090506105ae565b6101a46004803603604081101561036357600080fd5b506001600160a01b038135811691602001351661065b565b610383610667565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156103bf5781810151838201526020016103a7565b505050509050019250505060405180910390f35b6103db6106be565b604080516001600160a01b039092168252519081900360200190f35b6103836004803603602081101561040d57600080fd5b50356001600160a01b03166106e2565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146104845760405162461bcd60e51b8152600401808060200182810382526029815260200180610ee06029913960400191505060405180910390fd5b6104c48383838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506107a992505050565b505050565b7f000000000000000000000000000000000000000000000000000000000000000090565b5050565b6001600160a01b038216600090815260208190526040812061051390836108fa565b90505b92915050565b60008061055e84848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061090f92505050565b5050905061056c878261065b565b979650505050505050565b60408051808201909152601b81527f4255595f5348415245535f43414c4c45525f57484954454c4953540000000000602082015290565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146106155760405162461bcd60e51b8152600401808060200182810382526029815260200180610ee06029913960400191505060405180910390fd5b6106558483838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506107a992505050565b50505050565b600061051383836104f1565b6040805160018082528183019092526060916020808301908036833701905050905060008160008151811061069857fe5b602002602001019060058111156106ab57fe5b908160058111156106b857fe5b90525090565b7f000000000000000000000000000000000000000000000000000000000000000090565b6001600160a01b0381166000908152602081905260409020606090610706906109ce565b67ffffffffffffffff8111801561071c57600080fd5b50604051908082528060200260200182016040528015610746578160200160208202803683370190505b50905060005b81518110156107a3576001600160a01b038316600090815260208190526040902061077790826109d9565b82828151811061078357fe5b6001600160a01b039092166020928302919091019091015260010161074c565b50919050565b6060808280602001905160408110156107c157600080fd5b8101908080516040519392919084600160201b8211156107e057600080fd5b9083019060208201858111156107f557600080fd5b82518660208202830111600160201b8211171561081157600080fd5b82525081516020918201928201910280838360005b8381101561083e578181015183820152602001610826565b5050505090500160405260200180516040519392919084600160201b82111561086657600080fd5b90830190602082018581111561087b57600080fd5b82518660208202830111600160201b8211171561089757600080fd5b82525081516020918201928201910280838360005b838110156108c45781810151838201526020016108ac565b50505050905001604052505050915091506000825111156108e9576108e984836109e5565b805115610655576106558482610b41565b6000610513836001600160a01b038416610c81565b60006060600083806020019051606081101561092a57600080fd5b815160208301805160405192949293830192919084600160201b82111561095057600080fd5b90830190602082018581111561096557600080fd5b82518660208202830111600160201b8211171561098157600080fd5b82525081516020918201928201910280838360005b838110156109ae578181015183820152602001610996565b505050509190910160405250602001519398929750929550909350505050565b600061051682610c99565b60006105138383610c9d565b6000815111610a255760405162461bcd60e51b8152600401808060200182810382526022815260200180610f096022913960400191505060405180910390fd5b60005b8151811015610abd57610a7a828281518110610a4057fe5b6020026020010151600080866001600160a01b03166001600160a01b03168152602001908152602001600020610d0190919063ffffffff16565b610ab55760405162461bcd60e51b815260040180806020018281038252602b815260200180610e5e602b913960400191505060405180910390fd5b600101610a28565b50816001600160a01b03167fe3754690adb33d1fe0511f97e82086f6097babaea494124a0196a61a949ef2cf826040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610b2a578181015183820152602001610b12565b505050509050019250505060405180910390a25050565b6000815111610b815760405162461bcd60e51b8152600401808060200182810382526027815260200180610e896027913960400191505060405180910390fd5b60005b8151811015610c1957610bd6828281518110610b9c57fe5b6020026020010151600080866001600160a01b03166001600160a01b03168152602001908152602001600020610d1690919063ffffffff16565b610c115760405162461bcd60e51b8152600401808060200182810382526030815260200180610eb06030913960400191505060405180910390fd5b600101610b84565b5060408051602080825283518183015283516001600160a01b038616937ffa28b09abbaa834d4ec77cdfd905fdabcc5cd7cea3a0794093404be865f749e293869390928392830191808601910280838360008315610b2a578181015183820152602001610b12565b60009081526001919091016020526040902054151590565b5490565b81546000908210610cdf5760405162461bcd60e51b8152600401808060200182810382526022815260200180610e3c6022913960400191505060405180910390fd5b826000018281548110610cee57fe5b9060005260206000200154905092915050565b6000610513836001600160a01b038416610d2b565b6000610513836001600160a01b038416610d75565b6000610d378383610c81565b610d6d57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610516565b506000610516565b60008181526001830160205260408120548015610e315783546000198083019190810190600090879083908110610da857fe5b9060005260206000200154905080876000018481548110610dc557fe5b600091825260208083209091019290925582815260018981019092526040902090840190558654879080610df557fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610516565b600091505061051656fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e64735f5f616464546f4c6973743a204164647265737320616c72656164792065786973747320696e206c6973745f5f72656d6f766546726f6d4c6973743a204e6f206164647265737365732070726f76696465645f5f72656d6f766546726f6d4c6973743a204164647265737320646f6573206e6f7420657869737420696e206c6973744f6e6c792074686520506f6c6963794d616e616765722063616e206d616b6520746869732063616c6c5f5f616464546f4c6973743a204e6f206164647265737365732070726f7669646564a26469706673582212201e30b3f1d9ee4ba58f20910d3d54ba4caa2b4df00bb2444c1bdec9b023fb53f764736f6c634300060c0033",
  "devdoc": {
    "author": "Enzyme Council <security@enzyme.finance>",
    "kind": "dev",
    "methods": {
      "activateForFund(address,address)": {
        "details": "Unimplemented by default, can be overridden by the policy"
      },
      "addFundSettings(address,bytes)": {
        "params": {
          "_comptrollerProxy": "The fund's ComptrollerProxy address",
          "_encodedSettings": "Encoded settings to apply to a fund"
        }
      },
      "getList(address)": {
        "params": {
          "_comptrollerProxy": "The fund's ComptrollerProxy address"
        },
        "returns": {
          "list_": "The addresses in the fund's list"
        }
      },
      "getPolicyManager()": {
        "returns": {
          "policyManager_": "The `POLICY_MANAGER` variable value"
        }
      },
      "identifier()": {
        "returns": {
          "identifier_": "The identifer string"
        }
      },
      "implementedHooks()": {
        "returns": {
          "implementedHooks_": "The implemented PolicyHooks"
        }
      },
      "isInList(address,address)": {
        "params": {
          "_comptrollerProxy": "The fund's ComptrollerProxy address",
          "_item": "The address to check against the list"
        },
        "returns": {
          "isInList_": "True if the address is in the list"
        }
      },
      "passesRule(address,address)": {
        "params": {
          "_buySharesCaller": "The buyShares caller for which to check the rule",
          "_comptrollerProxy": "The fund's ComptrollerProxy address"
        },
        "returns": {
          "isValid_": "True if the rule passes"
        }
      },
      "updateFundSettings(address,address,bytes)": {
        "params": {
          "_comptrollerProxy": "The fund's ComptrollerProxy address",
          "_encodedSettings": "Encoded settings to apply to a fund"
        }
      },
      "validateRule(address,address,uint8,bytes)": {
        "params": {
          "_comptrollerProxy": "The fund's ComptrollerProxy address",
          "_encodedArgs": "Encoded args with which to validate the rule"
        },
        "returns": {
          "isValid_": "True if the rule passes"
        }
      }
    },
    "title": "BuySharesCallerWhitelist Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "activateForFund(address,address)": {
        "notice": "Validates and initializes a policy as necessary prior to fund activation"
      },
      "addFundSettings(address,bytes)": {
        "notice": "Adds the initial policy settings for a fund"
      },
      "getList(address)": {
        "notice": "Get all addresses in a fund's list"
      },
      "getPolicyManager()": {
        "notice": "Gets the `POLICY_MANAGER` variable value"
      },
      "identifier()": {
        "notice": "Provides a constant string identifier for a policy"
      },
      "implementedHooks()": {
        "notice": "Gets the implemented PolicyHooks for a policy"
      },
      "isInList(address,address)": {
        "notice": "Check if an address is in a fund's list"
      },
      "passesRule(address,address)": {
        "notice": "Checks whether a particular condition passes the rule for a particular fund"
      },
      "updateFundSettings(address,address,bytes)": {
        "notice": "Updates the policy settings for a fund"
      },
      "validateRule(address,address,uint8,bytes)": {
        "notice": "Apply the rule with the specified parameters of a PolicyHook"
      }
    },
    "notice": "A policy that only allows a configurable whitelist of buyShares callers for a fund",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 39402,
        "contract": "contracts/release/extensions/policy-manager/policies/buy-shares/BuySharesCallerWhitelist.sol:BuySharesCallerWhitelist",
        "label": "comptrollerProxyToList",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_struct(AddressSet)2091_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(AddressSet)2091_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)2091_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)2091_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 2090,
            "contract": "contracts/release/extensions/policy-manager/policies/buy-shares/BuySharesCallerWhitelist.sol:BuySharesCallerWhitelist",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1826_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)1826_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1821,
            "contract": "contracts/release/extensions/policy-manager/policies/buy-shares/BuySharesCallerWhitelist.sol:BuySharesCallerWhitelist",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1825,
            "contract": "contracts/release/extensions/policy-manager/policies/buy-shares/BuySharesCallerWhitelist.sol:BuySharesCallerWhitelist",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}