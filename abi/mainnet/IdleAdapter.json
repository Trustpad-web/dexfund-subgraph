{
  "address": "0x5c628660E2E641c91FC1A57BA4BD1F561385729B",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_integrationManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_idlePriceFeed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wethToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_uniswapV2Router2",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ADD_TRACKED_ASSETS_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "APPROVE_ASSETS_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CLAIM_REWARDS_AND_REINVEST_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CLAIM_REWARDS_AND_SWAP_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CLAIM_REWARDS_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LEND_AND_STAKE_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LEND_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REDEEM_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REMOVE_TRACKED_ASSETS_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STAKE_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TAKE_ORDER_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UNSTAKE_AND_REDEEM_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UNSTAKE_SELECTOR",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "approveAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultProxy",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_encodedCallArgs",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_encodedAssetTransferArgs",
          "type": "bytes"
        }
      ],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultProxy",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_encodedCallArgs",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_encodedAssetTransferArgs",
          "type": "bytes"
        }
      ],
      "name": "claimRewardsAndReinvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultProxy",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_encodedCallArgs",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_encodedAssetTransferArgs",
          "type": "bytes"
        }
      ],
      "name": "claimRewardsAndSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAdapterDeployTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getIdlePriceFeed",
      "outputs": [
        {
          "internalType": "address",
          "name": "idlePriceFeed_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getIntegrationManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "integrationManager_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUniswapV2Router2",
      "outputs": [
        {
          "internalType": "address",
          "name": "router_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWethToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "wethToken_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "identifier",
      "outputs": [
        {
          "internalType": "string",
          "name": "identifier_",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultProxy",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_encodedAssetTransferArgs",
          "type": "bytes"
        }
      ],
      "name": "lend",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_selector",
          "type": "bytes4"
        },
        {
          "internalType": "bytes",
          "name": "_encodedCallArgs",
          "type": "bytes"
        }
      ],
      "name": "parseAssetsForMethod",
      "outputs": [
        {
          "internalType": "enum IIntegrationManager.SpendAssetsHandleType",
          "name": "spendAssetsHandleType_",
          "type": "uint8"
        },
        {
          "internalType": "address[]",
          "name": "spendAssets_",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "spendAssetAmounts_",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "incomingAssets_",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "minIncomingAssetAmounts_",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultProxy",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_encodedCallArgs",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_encodedAssetTransferArgs",
          "type": "bytes"
        }
      ],
      "name": "redeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x334d984d1a71f87b97faa16a4005a6321106d2052e140f86edea764df49adec5",
  "receipt": {
    "to": null,
    "from": "0x5a43993587dD57d58c16bbEbdf23b9F6D279176f",
    "contractAddress": "0x5c628660E2E641c91FC1A57BA4BD1F561385729B",
    "transactionIndex": 155,
    "gasUsed": "3071998",
    "logsBloom": "0x
    "blockHash": "0x9de69811819946c24fe41499bd94c99581e505da602d9ce1b9c65c7378fceff2",
    "transactionHash": "0x334d984d1a71f87b97faa16a4005a6321106d2052e140f86edea764df49adec5",
    "logs": [],
    "blockNumber": 13522858,
    "cumulativeGasUsed": "14118812",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4B37f5DCA5FB2D5548e9EcEe9f98d9Ac95f60774",
    "0x040Ce9d2a8F2Ff1b210790cED9dB8c3A6D023941",
    "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
    "0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D"
  ],
  "linkedData": {
    "type": "ADAPTER"
  },
  "solcInputHash": "34b1516e615d6cbcdbaf9542624efee9",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_integrationManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_idlePriceFeed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wethToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapV2Router2\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ADD_TRACKED_ASSETS_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"APPROVE_ASSETS_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CLAIM_REWARDS_AND_REINVEST_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CLAIM_REWARDS_AND_SWAP_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CLAIM_REWARDS_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LEND_AND_STAKE_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LEND_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REDEEM_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REMOVE_TRACKED_ASSETS_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKE_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TAKE_ORDER_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNSTAKE_AND_REDEEM_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNSTAKE_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"approveAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_encodedCallArgs\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_encodedAssetTransferArgs\",\"type\":\"bytes\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_encodedCallArgs\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_encodedAssetTransferArgs\",\"type\":\"bytes\"}],\"name\":\"claimRewardsAndReinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_encodedCallArgs\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_encodedAssetTransferArgs\",\"type\":\"bytes\"}],\"name\":\"claimRewardsAndSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdapterDeployTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIdlePriceFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"idlePriceFeed_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIntegrationManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"integrationManager_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUniswapV2Router2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"router_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWethToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"wethToken_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"identifier\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"identifier_\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_encodedAssetTransferArgs\",\"type\":\"bytes\"}],\"name\":\"lend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_selector\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"_encodedCallArgs\",\"type\":\"bytes\"}],\"name\":\"parseAssetsForMethod\",\"outputs\":[{\"internalType\":\"enum IIntegrationManager.SpendAssetsHandleType\",\"name\":\"spendAssetsHandleType_\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"spendAssets_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"spendAssetAmounts_\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"incomingAssets_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minIncomingAssetAmounts_\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultProxy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_encodedCallArgs\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_encodedAssetTransferArgs\",\"type\":\"bytes\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Enzyme Council <security@enzyme.finance>\",\"details\":\"There are some idiosyncrasies of reward accrual and claiming in IdleTokens that are handled by this adapter: - Rewards accrue to the IdleToken holder, but the accrued amount is passed to the recipient of a transfer. - Claiming rewards cannot be done on behalf of a holder, but must be done directly. - Claiming rewards occurs automatically upon redeeming, but there are situations when it is difficult to know whether to expect incoming rewards (e.g., after a user mints idleTokens and then redeems before any other user has interacted with the protocol, then getGovTokensAmounts() will return 0 balances). Because of this difficulty - and in keeping with how other adapters treat claimed rewards - this adapter does not report claimed rewards as incomingAssets.\",\"kind\":\"dev\",\"methods\":{\"approveAssets(address,bytes,bytes)\":{\"details\":\"No logic necessary. Exists only to grant adapter with necessary approvals from the vault, which takes place in the IntegrationManager.\"},\"claimRewards(address,bytes,bytes)\":{\"params\":{\"_encodedAssetTransferArgs\":\"Encoded args for expected assets to spend and receive\",\"_encodedCallArgs\":\"The encoded parameters for the callOnIntegration\",\"_vaultProxy\":\"The VaultProxy of the calling fund\"}},\"claimRewardsAndReinvest(address,bytes,bytes)\":{\"details\":\"The `useFullBalances` option indicates whether to use only the newly claimed balances of rewards tokens, or whether to use the full balances of these assets in the vault. If full asset balances are to be used, then this requires the adapter to be granted an allowance of each reward token by the vault. For supported assets (e.g., COMP), this must be done via the `approveAssets()` function in this adapter. For unsupported assets (e.g., IDLE), this must be done via `ComptrollerProxy.vaultCallOnContract()`, if allowed.\",\"params\":{\"_encodedAssetTransferArgs\":\"Encoded args for expected assets to spend and receive\",\"_encodedCallArgs\":\"Encoded order parameters\",\"_vaultProxy\":\"The VaultProxy of the calling fund\"}},\"claimRewardsAndSwap(address,bytes,bytes)\":{\"details\":\"The `useFullBalances` option indicates whether to use only the newly claimed balances of rewards tokens, or whether to use the full balances of these assets in the vault. If full asset balances are to be used, then this requires the adapter to be granted an allowance of each reward token by the vault. For supported assets (e.g., COMP), this must be done via the `approveAssets()` function in this adapter. For unsupported assets (e.g., IDLE), this must be done via `ComptrollerProxy.vaultCallOnContract()`, if allowed.\",\"params\":{\"_encodedAssetTransferArgs\":\"Encoded args for expected assets to spend and receive\",\"_encodedCallArgs\":\"Encoded order parameters\",\"_vaultProxy\":\"The VaultProxy of the calling fund\"}},\"getIdlePriceFeed()\":{\"returns\":{\"idlePriceFeed_\":\"The `IDLE_PRICE_FEED` variable value\"}},\"getIntegrationManager()\":{\"returns\":{\"integrationManager_\":\"The `INTEGRATION_MANAGER` variable value\"}},\"getUniswapV2Router2()\":{\"returns\":{\"router_\":\"The `UNISWAP_V2_ROUTER2` variable value\"}},\"getWethToken()\":{\"returns\":{\"wethToken_\":\"The `WETH_TOKEN` variable value\"}},\"identifier()\":{\"returns\":{\"identifier_\":\"An identifier string\"}},\"lend(address,bytes,bytes)\":{\"params\":{\"_encodedAssetTransferArgs\":\"Encoded args for expected assets to spend and receive\",\"_vaultProxy\":\"The VaultProxy of the calling fund\"}},\"parseAssetsForMethod(bytes4,bytes)\":{\"params\":{\"_encodedCallArgs\":\"The encoded parameters for the callOnIntegration\",\"_selector\":\"The function selector for the callOnIntegration\"},\"returns\":{\"incomingAssets_\":\"The assets to receive in the call\",\"minIncomingAssetAmounts_\":\"The min asset amounts to receive in the call\",\"spendAssetAmounts_\":\"The max asset amounts to spend in the call\",\"spendAssetsHandleType_\":\"A type that dictates how to handle granting the adapter access to spend assets (`None` by default)\",\"spendAssets_\":\"The assets to spend in the call\"}},\"redeem(address,bytes,bytes)\":{\"details\":\"This will also pay out any due gov token rewards. We use the full IdleToken balance of the current contract rather than the user input for the corner case of a prior balance existing in the current contract, which would throw off the per-user avg price of the IdleToken used by Idle, and would leave the initial token balance in the current contract post-tx.\",\"params\":{\"_encodedAssetTransferArgs\":\"Encoded args for expected assets to spend and receive\",\"_encodedCallArgs\":\"The encoded parameters for the callOnIntegration\",\"_vaultProxy\":\"The VaultProxy of the calling fund\"}}},\"title\":\"IdleAdapter Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approveAssets(address,bytes,bytes)\":{\"notice\":\"Approves assets from the vault to be used by this contract.\"},\"claimRewards(address,bytes,bytes)\":{\"notice\":\"Claims rewards for a givenIdleToken\"},\"claimRewardsAndReinvest(address,bytes,bytes)\":{\"notice\":\"Claims rewards and then compounds the rewards tokens back into the idleToken\"},\"claimRewardsAndSwap(address,bytes,bytes)\":{\"notice\":\"Claims rewards and then swaps the rewards tokens to the specified asset via UniswapV2\"},\"getIdlePriceFeed()\":{\"notice\":\"Gets the `IDLE_PRICE_FEED` variable\"},\"getIntegrationManager()\":{\"notice\":\"Gets the `INTEGRATION_MANAGER` variable\"},\"getUniswapV2Router2()\":{\"notice\":\"Gets the `UNISWAP_V2_ROUTER2` variable\"},\"getWethToken()\":{\"notice\":\"Gets the `WETH_TOKEN` variable\"},\"identifier()\":{\"notice\":\"Provides a constant string identifier for an adapter\"},\"lend(address,bytes,bytes)\":{\"notice\":\"Lends an amount of a token for idleToken\"},\"parseAssetsForMethod(bytes4,bytes)\":{\"notice\":\"Parses the expected assets to receive from a call on integration\"},\"redeem(address,bytes,bytes)\":{\"notice\":\"Redeems an amount of idleToken for its underlying asset\"}},\"notice\":\"Adapter for Idle Lending <https://idle.finance/>\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/release/extensions/integration-manager/integrations/adapters/IdleAdapter.sol\":\"IdleAdapter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/release/core/fund-deployer/IFundDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IFundDeployer Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\ninterface IFundDeployer {\\n    enum ReleaseStatus {PreLaunch, Live, Paused}\\n\\n    function getOwner() external view returns (address);\\n\\n    function getBuybackVault() external view returns (address);\\n\\n    function getReleaseStatus() external view returns (ReleaseStatus);\\n\\n    function isRegisteredVaultCall(address, bytes4) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xe5d28ccc67b68ed61a36eac1e3dfda4230b3669c71e2169ec190ec243bd78742\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/integration-manager/IIntegrationManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IIntegrationManager interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Interface for the IntegrationManager\\ninterface IIntegrationManager {\\n    enum SpendAssetsHandleType {None, Approve, Transfer, Remove}\\n}\\n\",\"keccak256\":\"0x775b57aa3f44b527874e5fd848084ad6d9188d71882be033a49107e8d9a133e8\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/integration-manager/integrations/IIntegrationAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../IIntegrationManager.sol\\\";\\n\\n/// @title Integration Adapter interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Interface for all integration adapters\\ninterface IIntegrationAdapter {\\n    function identifier() external pure returns (string memory identifier_);\\n\\n    function parseAssetsForMethod(bytes4 _selector, bytes calldata _encodedCallArgs)\\n        external\\n        view\\n        returns (\\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType_,\\n            address[] memory spendAssets_,\\n            uint256[] memory spendAssetAmounts_,\\n            address[] memory incomingAssets_,\\n            uint256[] memory minIncomingAssetAmounts_\\n        );\\n}\\n\",\"keccak256\":\"0x7831b14ba1bb8abb1171986606cdd81e097566322178b83c68781d5fee0469f1\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/integration-manager/integrations/adapters/IdleAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../../../../infrastructure/price-feeds/derivatives/feeds/IdlePriceFeed.sol\\\";\\nimport \\\"../../../../interfaces/IIdleTokenV4.sol\\\";\\nimport \\\"../../../../utils/AddressArrayLib.sol\\\";\\nimport \\\"../utils/actions/IdleV4ActionsMixin.sol\\\";\\nimport \\\"../utils/actions/UniswapV2ActionsMixin.sol\\\";\\nimport \\\"../utils/AdapterBase2.sol\\\";\\n\\n/// @title IdleAdapter Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Adapter for Idle Lending <https://idle.finance/>\\n/// @dev There are some idiosyncrasies of reward accrual and claiming in IdleTokens that\\n/// are handled by this adapter:\\n/// - Rewards accrue to the IdleToken holder, but the accrued\\n/// amount is passed to the recipient of a transfer.\\n/// - Claiming rewards cannot be done on behalf of a holder, but must be done directly.\\n/// - Claiming rewards occurs automatically upon redeeming, but there are situations when\\n/// it is difficult to know whether to expect incoming rewards (e.g., after a user mints\\n/// idleTokens and then redeems before any other user has interacted with the protocol,\\n/// then getGovTokensAmounts() will return 0 balances). Because of this difficulty -\\n/// and in keeping with how other adapters treat claimed rewards -\\n/// this adapter does not report claimed rewards as incomingAssets.\\ncontract IdleAdapter is AdapterBase2, IdleV4ActionsMixin, UniswapV2ActionsMixin {\\n    using AddressArrayLib for address[];\\n\\n    address private immutable IDLE_PRICE_FEED;\\n    address private immutable WETH_TOKEN;\\n\\n    constructor(\\n        address _integrationManager,\\n        address _idlePriceFeed,\\n        address _wethToken,\\n        address _uniswapV2Router2\\n    ) public AdapterBase2(_integrationManager) UniswapV2ActionsMixin(_uniswapV2Router2) {\\n        IDLE_PRICE_FEED = _idlePriceFeed;\\n        WETH_TOKEN = _wethToken;\\n    }\\n\\n    /// @notice Provides a constant string identifier for an adapter\\n    /// @return identifier_ An identifier string\\n    function identifier() external pure override returns (string memory identifier_) {\\n        return \\\"IDLE\\\";\\n    }\\n\\n    /// @notice Approves assets from the vault to be used by this contract.\\n    /// @dev No logic necessary. Exists only to grant adapter with necessary approvals from the vault,\\n    /// which takes place in the IntegrationManager.\\n    function approveAssets(\\n        address,\\n        bytes calldata,\\n        bytes calldata\\n    ) external {}\\n\\n    /// @notice Claims rewards for a givenIdleToken\\n    /// @param _vaultProxy The VaultProxy of the calling fund\\n    /// @param _encodedCallArgs The encoded parameters for the callOnIntegration\\n    /// @param _encodedAssetTransferArgs Encoded args for expected assets to spend and receive\\n    function claimRewards(\\n        address _vaultProxy,\\n        bytes calldata _encodedCallArgs,\\n        bytes calldata _encodedAssetTransferArgs\\n    )\\n        external\\n        onlyIntegrationManager\\n        postActionSpendAssetsTransferHandler(_vaultProxy, _encodedAssetTransferArgs)\\n    {\\n        (, address idleToken) = __decodeClaimRewardsCallArgs(_encodedCallArgs);\\n\\n        __idleV4ClaimRewards(idleToken);\\n\\n        __pushFullAssetBalances(_vaultProxy, __idleV4GetRewardsTokens(idleToken));\\n    }\\n\\n    /// @notice Claims rewards and then compounds the rewards tokens back into the idleToken\\n    /// @param _vaultProxy The VaultProxy of the calling fund\\n    /// @param _encodedCallArgs Encoded order parameters\\n    /// @param _encodedAssetTransferArgs Encoded args for expected assets to spend and receive\\n    /// @dev The `useFullBalances` option indicates whether to use only the newly claimed balances of\\n    /// rewards tokens, or whether to use the full balances of these assets in the vault.\\n    /// If full asset balances are to be used, then this requires the adapter to be granted\\n    /// an allowance of each reward token by the vault.\\n    /// For supported assets (e.g., COMP), this must be done via the `approveAssets()` function in this adapter.\\n    /// For unsupported assets (e.g., IDLE), this must be done via `ComptrollerProxy.vaultCallOnContract()`, if allowed.\\n    function claimRewardsAndReinvest(\\n        address _vaultProxy,\\n        bytes calldata _encodedCallArgs,\\n        bytes calldata _encodedAssetTransferArgs\\n    )\\n        external\\n        onlyIntegrationManager\\n        // The idleToken is both the spend asset and the incoming asset in this case\\n        postActionSpendAssetsTransferHandler(_vaultProxy, _encodedAssetTransferArgs)\\n    {\\n        (, address idleToken, , bool useFullBalances) = __decodeClaimRewardsAndReinvestCallArgs(\\n            _encodedCallArgs\\n        );\\n\\n        address underlying = __getUnderlyingForIdleToken(idleToken);\\n        require(underlying != address(0), \\\"claimRewardsAndReinvest: Unsupported idleToken\\\");\\n\\n        (\\n            address[] memory rewardsTokens,\\n            uint256[] memory rewardsTokenAmountsToUse\\n        ) = __claimRewardsAndPullRewardsTokens(_vaultProxy, idleToken, useFullBalances);\\n\\n        // Swap all reward tokens to the idleToken's underlying via UniswapV2,\\n        // using WETH as the intermediary where necessary\\n        __uniswapV2SwapManyToOne(\\n            address(this),\\n            rewardsTokens,\\n            rewardsTokenAmountsToUse,\\n            underlying,\\n            WETH_TOKEN\\n        );\\n\\n        // Lend all received underlying asset for the idleToken\\n        uint256 underlyingBalance = ERC20(underlying).balanceOf(address(this));\\n        if (underlyingBalance > 0) {\\n            __idleV4Lend(idleToken, underlying, underlyingBalance);\\n        }\\n    }\\n\\n    /// @notice Claims rewards and then swaps the rewards tokens to the specified asset via UniswapV2\\n    /// @param _vaultProxy The VaultProxy of the calling fund\\n    /// @param _encodedCallArgs Encoded order parameters\\n    /// @param _encodedAssetTransferArgs Encoded args for expected assets to spend and receive\\n    /// @dev The `useFullBalances` option indicates whether to use only the newly claimed balances of\\n    /// rewards tokens, or whether to use the full balances of these assets in the vault.\\n    /// If full asset balances are to be used, then this requires the adapter to be granted\\n    /// an allowance of each reward token by the vault.\\n    /// For supported assets (e.g., COMP), this must be done via the `approveAssets()` function in this adapter.\\n    /// For unsupported assets (e.g., IDLE), this must be done via `ComptrollerProxy.vaultCallOnContract()`, if allowed.\\n    function claimRewardsAndSwap(\\n        address _vaultProxy,\\n        bytes calldata _encodedCallArgs,\\n        bytes calldata _encodedAssetTransferArgs\\n    )\\n        external\\n        onlyIntegrationManager\\n        postActionSpendAssetsTransferHandler(_vaultProxy, _encodedAssetTransferArgs)\\n    {\\n        (\\n            ,\\n            address idleToken,\\n            address incomingAsset,\\n            ,\\n            bool useFullBalances\\n        ) = __decodeClaimRewardsAndSwapCallArgs(_encodedCallArgs);\\n\\n        (\\n            address[] memory rewardsTokens,\\n            uint256[] memory rewardsTokenAmountsToUse\\n        ) = __claimRewardsAndPullRewardsTokens(_vaultProxy, idleToken, useFullBalances);\\n\\n        // Swap all reward tokens to the designated incomingAsset via UniswapV2,\\n        // using WETH as the intermediary where necessary\\n        __uniswapV2SwapManyToOne(\\n            _vaultProxy,\\n            rewardsTokens,\\n            rewardsTokenAmountsToUse,\\n            incomingAsset,\\n            WETH_TOKEN\\n        );\\n    }\\n\\n    /// @notice Lends an amount of a token for idleToken\\n    /// @param _vaultProxy The VaultProxy of the calling fund\\n    /// @param _encodedAssetTransferArgs Encoded args for expected assets to spend and receive\\n    function lend(\\n        address _vaultProxy,\\n        bytes calldata,\\n        bytes calldata _encodedAssetTransferArgs\\n    )\\n        external\\n        onlyIntegrationManager\\n        postActionIncomingAssetsTransferHandler(_vaultProxy, _encodedAssetTransferArgs)\\n    {\\n        // More efficient to parse all from _encodedAssetTransferArgs\\n        (\\n            ,\\n            address[] memory spendAssets,\\n            uint256[] memory spendAssetAmounts,\\n            address[] memory incomingAssets\\n        ) = __decodeEncodedAssetTransferArgs(_encodedAssetTransferArgs);\\n\\n        __idleV4Lend(incomingAssets[0], spendAssets[0], spendAssetAmounts[0]);\\n    }\\n\\n    /// @notice Redeems an amount of idleToken for its underlying asset\\n    /// @param _vaultProxy The VaultProxy of the calling fund\\n    /// @param _encodedCallArgs The encoded parameters for the callOnIntegration\\n    /// @param _encodedAssetTransferArgs Encoded args for expected assets to spend and receive\\n    /// @dev This will also pay out any due gov token rewards.\\n    /// We use the full IdleToken balance of the current contract rather than the user input\\n    /// for the corner case of a prior balance existing in the current contract, which would\\n    /// throw off the per-user avg price of the IdleToken used by Idle, and would leave the\\n    /// initial token balance in the current contract post-tx.\\n    function redeem(\\n        address _vaultProxy,\\n        bytes calldata _encodedCallArgs,\\n        bytes calldata _encodedAssetTransferArgs\\n    )\\n        external\\n        onlyIntegrationManager\\n        postActionIncomingAssetsTransferHandler(_vaultProxy, _encodedAssetTransferArgs)\\n    {\\n        (address idleToken, , ) = __decodeRedeemCallArgs(_encodedCallArgs);\\n\\n        __idleV4Redeem(idleToken, ERC20(idleToken).balanceOf(address(this)));\\n\\n        __pushFullAssetBalances(_vaultProxy, __idleV4GetRewardsTokens(idleToken));\\n    }\\n\\n    /// @dev Helper to claim rewards and pull rewards tokens from the vault\\n    /// to the current contract, as needed\\n    function __claimRewardsAndPullRewardsTokens(\\n        address _vaultProxy,\\n        address _idleToken,\\n        bool _useFullBalances\\n    )\\n        private\\n        returns (address[] memory rewardsTokens_, uint256[] memory rewardsTokenAmountsToUse_)\\n    {\\n        __idleV4ClaimRewards(_idleToken);\\n\\n        rewardsTokens_ = __idleV4GetRewardsTokens(_idleToken);\\n        if (_useFullBalances) {\\n            __pullFullAssetBalances(_vaultProxy, rewardsTokens_);\\n        }\\n\\n        return (rewardsTokens_, __getAssetBalances(address(this), rewardsTokens_));\\n    }\\n\\n    /// @dev Helper to get the underlying for a given IdleToken\\n    function __getUnderlyingForIdleToken(address _idleToken)\\n        private\\n        view\\n        returns (address underlying_)\\n    {\\n        return IdlePriceFeed(IDLE_PRICE_FEED).getUnderlyingForDerivative(_idleToken);\\n    }\\n\\n    /////////////////////////////\\n    // PARSE ASSETS FOR METHOD //\\n    /////////////////////////////\\n\\n    /// @notice Parses the expected assets to receive from a call on integration\\n    /// @param _selector The function selector for the callOnIntegration\\n    /// @param _encodedCallArgs The encoded parameters for the callOnIntegration\\n    /// @return spendAssetsHandleType_ A type that dictates how to handle granting\\n    /// the adapter access to spend assets (`None` by default)\\n    /// @return spendAssets_ The assets to spend in the call\\n    /// @return spendAssetAmounts_ The max asset amounts to spend in the call\\n    /// @return incomingAssets_ The assets to receive in the call\\n    /// @return minIncomingAssetAmounts_ The min asset amounts to receive in the call\\n    function parseAssetsForMethod(bytes4 _selector, bytes calldata _encodedCallArgs)\\n        external\\n        view\\n        override\\n        returns (\\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType_,\\n            address[] memory spendAssets_,\\n            uint256[] memory spendAssetAmounts_,\\n            address[] memory incomingAssets_,\\n            uint256[] memory minIncomingAssetAmounts_\\n        )\\n    {\\n        if (_selector == APPROVE_ASSETS_SELECTOR) {\\n            return __parseAssetsForApproveAssets(_encodedCallArgs);\\n        } else if (_selector == CLAIM_REWARDS_SELECTOR) {\\n            return __parseAssetsForClaimRewards(_encodedCallArgs);\\n        } else if (_selector == CLAIM_REWARDS_AND_REINVEST_SELECTOR) {\\n            return __parseAssetsForClaimRewardsAndReinvest(_encodedCallArgs);\\n        } else if (_selector == CLAIM_REWARDS_AND_SWAP_SELECTOR) {\\n            return __parseAssetsForClaimRewardsAndSwap(_encodedCallArgs);\\n        } else if (_selector == LEND_SELECTOR) {\\n            return __parseAssetsForLend(_encodedCallArgs);\\n        } else if (_selector == REDEEM_SELECTOR) {\\n            return __parseAssetsForRedeem(_encodedCallArgs);\\n        }\\n\\n        revert(\\\"parseAssetsForMethod: _selector invalid\\\");\\n    }\\n\\n    /// @dev Helper function to parse spend and incoming assets from encoded call args\\n    /// during approveAssets() calls\\n    function __parseAssetsForApproveAssets(bytes calldata _encodedCallArgs)\\n        private\\n        view\\n        returns (\\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType_,\\n            address[] memory spendAssets_,\\n            uint256[] memory spendAssetAmounts_,\\n            address[] memory incomingAssets_,\\n            uint256[] memory minIncomingAssetAmounts_\\n        )\\n    {\\n        address idleToken;\\n        (idleToken, spendAssets_, spendAssetAmounts_) = __decodeApproveAssetsCallArgs(\\n            _encodedCallArgs\\n        );\\n        require(\\n            __getUnderlyingForIdleToken(idleToken) != address(0),\\n            \\\"__parseAssetsForApproveAssets: Unsupported idleToken\\\"\\n        );\\n        require(\\n            spendAssets_.length == spendAssetAmounts_.length,\\n            \\\"__parseAssetsForApproveAssets: Unequal arrays\\\"\\n        );\\n\\n        // Validate that only rewards tokens are given allowances\\n        address[] memory rewardsTokens = __idleV4GetRewardsTokens(idleToken);\\n        for (uint256 i; i < spendAssets_.length; i++) {\\n            // Allow revoking approval for any asset\\n            if (spendAssetAmounts_[i] > 0) {\\n                require(\\n                    rewardsTokens.contains(spendAssets_[i]),\\n                    \\\"__parseAssetsForApproveAssets: Invalid reward token\\\"\\n                );\\n            }\\n        }\\n\\n        return (\\n            IIntegrationManager.SpendAssetsHandleType.Approve,\\n            spendAssets_,\\n            spendAssetAmounts_,\\n            new address[](0),\\n            new uint256[](0)\\n        );\\n    }\\n\\n    /// @dev Helper function to parse spend and incoming assets from encoded call args\\n    /// during claimRewards() calls\\n    function __parseAssetsForClaimRewards(bytes calldata _encodedCallArgs)\\n        private\\n        view\\n        returns (\\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType_,\\n            address[] memory spendAssets_,\\n            uint256[] memory spendAssetAmounts_,\\n            address[] memory incomingAssets_,\\n            uint256[] memory minIncomingAssetAmounts_\\n        )\\n    {\\n        (address vaultProxy, address idleToken) = __decodeClaimRewardsCallArgs(_encodedCallArgs);\\n\\n        require(\\n            __getUnderlyingForIdleToken(idleToken) != address(0),\\n            \\\"__parseAssetsForClaimRewards: Unsupported idleToken\\\"\\n        );\\n\\n        (spendAssets_, spendAssetAmounts_) = __parseSpendAssetsForClaimRewardsCalls(\\n            vaultProxy,\\n            idleToken\\n        );\\n\\n        return (\\n            IIntegrationManager.SpendAssetsHandleType.Transfer,\\n            spendAssets_,\\n            spendAssetAmounts_,\\n            new address[](0),\\n            new uint256[](0)\\n        );\\n    }\\n\\n    /// @dev Helper function to parse spend and incoming assets from encoded call args\\n    /// during claimRewardsAndReinvest() calls.\\n    function __parseAssetsForClaimRewardsAndReinvest(bytes calldata _encodedCallArgs)\\n        private\\n        view\\n        returns (\\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType_,\\n            address[] memory spendAssets_,\\n            uint256[] memory spendAssetAmounts_,\\n            address[] memory incomingAssets_,\\n            uint256[] memory minIncomingAssetAmounts_\\n        )\\n    {\\n        (\\n            address vaultProxy,\\n            address idleToken,\\n            uint256 minIncomingIdleTokenAmount,\\n\\n        ) = __decodeClaimRewardsAndReinvestCallArgs(_encodedCallArgs);\\n\\n        // Does not validate idleToken here as we need to do fetch the underlying during the action\\n\\n        (spendAssets_, spendAssetAmounts_) = __parseSpendAssetsForClaimRewardsCalls(\\n            vaultProxy,\\n            idleToken\\n        );\\n\\n        incomingAssets_ = new address[](1);\\n        incomingAssets_[0] = idleToken;\\n\\n        minIncomingAssetAmounts_ = new uint256[](1);\\n        minIncomingAssetAmounts_[0] = minIncomingIdleTokenAmount;\\n\\n        return (\\n            IIntegrationManager.SpendAssetsHandleType.Transfer,\\n            spendAssets_,\\n            spendAssetAmounts_,\\n            incomingAssets_,\\n            minIncomingAssetAmounts_\\n        );\\n    }\\n\\n    /// @dev Helper function to parse spend and incoming assets from encoded call args\\n    /// during claimRewardsAndSwap() calls.\\n    function __parseAssetsForClaimRewardsAndSwap(bytes calldata _encodedCallArgs)\\n        private\\n        view\\n        returns (\\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType_,\\n            address[] memory spendAssets_,\\n            uint256[] memory spendAssetAmounts_,\\n            address[] memory incomingAssets_,\\n            uint256[] memory minIncomingAssetAmounts_\\n        )\\n    {\\n        (\\n            address vaultProxy,\\n            address idleToken,\\n            address incomingAsset,\\n            uint256 minIncomingAssetAmount,\\n\\n        ) = __decodeClaimRewardsAndSwapCallArgs(_encodedCallArgs);\\n\\n        require(\\n            __getUnderlyingForIdleToken(idleToken) != address(0),\\n            \\\"__parseAssetsForClaimRewardsAndSwap: Unsupported idleToken\\\"\\n        );\\n\\n        (spendAssets_, spendAssetAmounts_) = __parseSpendAssetsForClaimRewardsCalls(\\n            vaultProxy,\\n            idleToken\\n        );\\n\\n        incomingAssets_ = new address[](1);\\n        incomingAssets_[0] = incomingAsset;\\n\\n        minIncomingAssetAmounts_ = new uint256[](1);\\n        minIncomingAssetAmounts_[0] = minIncomingAssetAmount;\\n\\n        return (\\n            IIntegrationManager.SpendAssetsHandleType.Transfer,\\n            spendAssets_,\\n            spendAssetAmounts_,\\n            incomingAssets_,\\n            minIncomingAssetAmounts_\\n        );\\n    }\\n\\n    /// @dev Helper function to parse spend and incoming assets from encoded call args\\n    /// during lend() calls\\n    function __parseAssetsForLend(bytes calldata _encodedCallArgs)\\n        private\\n        view\\n        returns (\\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType_,\\n            address[] memory spendAssets_,\\n            uint256[] memory spendAssetAmounts_,\\n            address[] memory incomingAssets_,\\n            uint256[] memory minIncomingAssetAmounts_\\n        )\\n    {\\n        (\\n            address idleToken,\\n            uint256 outgoingUnderlyingAmount,\\n            uint256 minIncomingIdleTokenAmount\\n        ) = __decodeLendCallArgs(_encodedCallArgs);\\n\\n        address underlying = __getUnderlyingForIdleToken(idleToken);\\n        require(underlying != address(0), \\\"__parseAssetsForLend: Unsupported idleToken\\\");\\n\\n        spendAssets_ = new address[](1);\\n        spendAssets_[0] = underlying;\\n\\n        spendAssetAmounts_ = new uint256[](1);\\n        spendAssetAmounts_[0] = outgoingUnderlyingAmount;\\n\\n        incomingAssets_ = new address[](1);\\n        incomingAssets_[0] = idleToken;\\n\\n        minIncomingAssetAmounts_ = new uint256[](1);\\n        minIncomingAssetAmounts_[0] = minIncomingIdleTokenAmount;\\n\\n        return (\\n            IIntegrationManager.SpendAssetsHandleType.Transfer,\\n            spendAssets_,\\n            spendAssetAmounts_,\\n            incomingAssets_,\\n            minIncomingAssetAmounts_\\n        );\\n    }\\n\\n    /// @dev Helper function to parse spend and incoming assets from encoded call args\\n    /// during redeem() calls\\n    function __parseAssetsForRedeem(bytes calldata _encodedCallArgs)\\n        private\\n        view\\n        returns (\\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType_,\\n            address[] memory spendAssets_,\\n            uint256[] memory spendAssetAmounts_,\\n            address[] memory incomingAssets_,\\n            uint256[] memory minIncomingAssetAmounts_\\n        )\\n    {\\n        (\\n            address idleToken,\\n            uint256 outgoingIdleTokenAmount,\\n            uint256 minIncomingUnderlyingAmount\\n        ) = __decodeRedeemCallArgs(_encodedCallArgs);\\n\\n        address underlying = __getUnderlyingForIdleToken(idleToken);\\n        require(underlying != address(0), \\\"__parseAssetsForRedeem: Unsupported idleToken\\\");\\n\\n        spendAssets_ = new address[](1);\\n        spendAssets_[0] = idleToken;\\n\\n        spendAssetAmounts_ = new uint256[](1);\\n        spendAssetAmounts_[0] = outgoingIdleTokenAmount;\\n\\n        incomingAssets_ = new address[](1);\\n        incomingAssets_[0] = underlying;\\n\\n        minIncomingAssetAmounts_ = new uint256[](1);\\n        minIncomingAssetAmounts_[0] = minIncomingUnderlyingAmount;\\n\\n        return (\\n            IIntegrationManager.SpendAssetsHandleType.Transfer,\\n            spendAssets_,\\n            spendAssetAmounts_,\\n            incomingAssets_,\\n            minIncomingAssetAmounts_\\n        );\\n    }\\n\\n    /// @dev Helper function to parse spend assets for calls to claim rewards\\n    function __parseSpendAssetsForClaimRewardsCalls(address _vaultProxy, address _idleToken)\\n        private\\n        view\\n        returns (address[] memory spendAssets_, uint256[] memory spendAssetAmounts_)\\n    {\\n        spendAssets_ = new address[](1);\\n        spendAssets_[0] = _idleToken;\\n\\n        spendAssetAmounts_ = new uint256[](1);\\n        spendAssetAmounts_[0] = ERC20(_idleToken).balanceOf(_vaultProxy);\\n\\n        return (spendAssets_, spendAssetAmounts_);\\n    }\\n\\n    ///////////////////////\\n    // ENCODED CALL ARGS //\\n    ///////////////////////\\n\\n    /// @dev Helper to decode the encoded call arguments for approving asset allowances\\n    function __decodeApproveAssetsCallArgs(bytes memory _encodedCallArgs)\\n        private\\n        pure\\n        returns (\\n            address idleToken_,\\n            address[] memory assets_,\\n            uint256[] memory amounts_\\n        )\\n    {\\n        return abi.decode(_encodedCallArgs, (address, address[], uint256[]));\\n    }\\n\\n    /// @dev Helper to decode callArgs for claiming rewards tokens\\n    function __decodeClaimRewardsCallArgs(bytes memory _encodedCallArgs)\\n        private\\n        pure\\n        returns (address vaultProxy_, address idleToken_)\\n    {\\n        return abi.decode(_encodedCallArgs, (address, address));\\n    }\\n\\n    /// @dev Helper to decode the encoded call arguments for claiming rewards and reinvesting\\n    function __decodeClaimRewardsAndReinvestCallArgs(bytes memory _encodedCallArgs)\\n        private\\n        pure\\n        returns (\\n            address vaultProxy_,\\n            address idleToken_,\\n            uint256 minIncomingIdleTokenAmount_,\\n            bool useFullBalances_\\n        )\\n    {\\n        return abi.decode(_encodedCallArgs, (address, address, uint256, bool));\\n    }\\n\\n    /// @dev Helper to decode the encoded call arguments for claiming rewards and swapping\\n    function __decodeClaimRewardsAndSwapCallArgs(bytes memory _encodedCallArgs)\\n        private\\n        pure\\n        returns (\\n            address vaultProxy_,\\n            address idleToken_,\\n            address incomingAsset_,\\n            uint256 minIncomingAssetAmount_,\\n            bool useFullBalances_\\n        )\\n    {\\n        return abi.decode(_encodedCallArgs, (address, address, address, uint256, bool));\\n    }\\n\\n    /// @dev Helper to decode callArgs for lending\\n    function __decodeLendCallArgs(bytes memory _encodedCallArgs)\\n        private\\n        pure\\n        returns (\\n            address idleToken_,\\n            uint256 outgoingUnderlyingAmount_,\\n            uint256 minIncomingIdleTokenAmount_\\n        )\\n    {\\n        return abi.decode(_encodedCallArgs, (address, uint256, uint256));\\n    }\\n\\n    /// @dev Helper to decode callArgs for redeeming\\n    function __decodeRedeemCallArgs(bytes memory _encodedCallArgs)\\n        private\\n        pure\\n        returns (\\n            address idleToken_,\\n            uint256 outgoingIdleTokenAmount_,\\n            uint256 minIncomingUnderlyingAmount_\\n        )\\n    {\\n        return abi.decode(_encodedCallArgs, (address, uint256, uint256));\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the `IDLE_PRICE_FEED` variable\\n    /// @return idlePriceFeed_ The `IDLE_PRICE_FEED` variable value\\n    function getIdlePriceFeed() external view returns (address idlePriceFeed_) {\\n        return IDLE_PRICE_FEED;\\n    }\\n\\n    /// @notice Gets the `WETH_TOKEN` variable\\n    /// @return wethToken_ The `WETH_TOKEN` variable value\\n    function getWethToken() external view returns (address wethToken_) {\\n        return WETH_TOKEN;\\n    }\\n}\\n\",\"keccak256\":\"0x3f320154ec770366480d2d3bf67a7aa8540dd100161301acde17792937341e06\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/integration-manager/integrations/utils/AdapterBase.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"../IIntegrationAdapter.sol\\\";\\nimport \\\"./IntegrationSelectors.sol\\\";\\n\\n/// @title AdapterBase Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A base contract for integration adapters\\nabstract contract AdapterBase is IIntegrationAdapter, IntegrationSelectors {\\n    using SafeERC20 for ERC20;\\n\\n    address internal immutable INTEGRATION_MANAGER;\\n    uint256 internal immutable ADAPTER_DEPLOY_TIMESTAMP;\\n\\n    /// @dev Provides a standard implementation for transferring assets between\\n    /// the fund's VaultProxy and the adapter, by wrapping the adapter action.\\n    /// This modifier should be implemented in almost all adapter actions, unless they\\n    /// do not move assets or can spend and receive assets directly with the VaultProxy\\n    modifier fundAssetsTransferHandler(\\n        address _vaultProxy,\\n        bytes memory _encodedAssetTransferArgs\\n    ) {\\n        (\\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType,\\n            address[] memory spendAssets,\\n            uint256[] memory spendAssetAmounts,\\n            address[] memory incomingAssets\\n        ) = __decodeEncodedAssetTransferArgs(_encodedAssetTransferArgs);\\n\\n        // Take custody of spend assets (if necessary)\\n        if (spendAssetsHandleType == IIntegrationManager.SpendAssetsHandleType.Approve) {\\n            for (uint256 i = 0; i < spendAssets.length; i++) {\\n                ERC20(spendAssets[i]).safeTransferFrom(\\n                    _vaultProxy,\\n                    address(this),\\n                    spendAssetAmounts[i]\\n                );\\n            }\\n        }\\n\\n        // Execute call\\n        _;\\n\\n        // Transfer remaining assets back to the fund's VaultProxy\\n        __transferContractAssetBalancesToFund(_vaultProxy, incomingAssets);\\n        __transferContractAssetBalancesToFund(_vaultProxy, spendAssets);\\n    }\\n\\n    modifier onlyIntegrationManager {\\n        require(\\n            msg.sender == INTEGRATION_MANAGER,\\n            \\\"Only the IntegrationManager can call this function\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(address _integrationManager) public {\\n        INTEGRATION_MANAGER = _integrationManager;\\n        ADAPTER_DEPLOY_TIMESTAMP = block.timestamp;\\n    }\\n\\n    // INTERNAL FUNCTIONS\\n\\n    /// @dev Helper for adapters to approve their integratees with the max amount of an asset.\\n    /// Since everything is done atomically, and only the balances to-be-used are sent to adapters,\\n    /// there is no need to approve exact amounts on every call.\\n    function __approveMaxAsNeeded(\\n        address _asset,\\n        address _target,\\n        uint256 _neededAmount\\n    ) internal {\\n        if (ERC20(_asset).allowance(address(this), _target) < _neededAmount) {\\n            ERC20(_asset).safeApprove(_target, type(uint256).max);\\n        }\\n    }\\n\\n    /// @dev Helper to decode the _encodedAssetTransferArgs param passed to adapter call\\n    function __decodeEncodedAssetTransferArgs(bytes memory _encodedAssetTransferArgs)\\n        internal\\n        pure\\n        returns (\\n            IIntegrationManager.SpendAssetsHandleType spendAssetsHandleType_,\\n            address[] memory spendAssets_,\\n            uint256[] memory spendAssetAmounts_,\\n            address[] memory incomingAssets_\\n        )\\n    {\\n        return\\n            abi.decode(\\n                _encodedAssetTransferArgs,\\n                (IIntegrationManager.SpendAssetsHandleType, address[], uint256[], address[])\\n            );\\n    }\\n\\n    /// @dev Helper to transfer full contract balances of assets to the specified VaultProxy\\n    function __transferContractAssetBalancesToFund(address _vaultProxy, address[] memory _assets)\\n        private\\n    {\\n        for (uint256 i = 0; i < _assets.length; i++) {\\n            uint256 postCallAmount = ERC20(_assets[i]).balanceOf(address(this));\\n            if (postCallAmount > 0) {\\n                ERC20(_assets[i]).safeTransfer(_vaultProxy, postCallAmount);\\n            }\\n        }\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the `INTEGRATION_MANAGER` variable\\n    /// @return integrationManager_ The `INTEGRATION_MANAGER` variable value\\n    function getIntegrationManager() external view returns (address integrationManager_) {\\n        return INTEGRATION_MANAGER;\\n    }\\n\\n    function getAdapterDeployTimestamp() external view returns (uint256) {\\n        return ADAPTER_DEPLOY_TIMESTAMP;\\n    }\\n}\\n\",\"keccak256\":\"0x7ac96fd368835516f177eca3d6ceef8f83d3255bbb4becfccf5641436ab4222d\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/integration-manager/integrations/utils/AdapterBase2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"./AdapterBase.sol\\\";\\n\\n/// @title AdapterBase2 Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A base contract for integration adapters that extends AdapterBase\\n/// @dev This is a temporary contract that will be merged into AdapterBase with the next release\\nabstract contract AdapterBase2 is AdapterBase {\\n    /// @dev Provides a standard implementation for transferring incoming assets and\\n    /// unspent spend assets from an adapter to a VaultProxy at the end of an adapter action\\n    modifier postActionAssetsTransferHandler(\\n        address _vaultProxy,\\n        bytes memory _encodedAssetTransferArgs\\n    ) {\\n        _;\\n\\n        (\\n            ,\\n            address[] memory spendAssets,\\n            ,\\n            address[] memory incomingAssets\\n        ) = __decodeEncodedAssetTransferArgs(_encodedAssetTransferArgs);\\n\\n        __transferFullAssetBalances(_vaultProxy, incomingAssets);\\n        __transferFullAssetBalances(_vaultProxy, spendAssets);\\n    }\\n\\n    /// @dev Provides a standard implementation for transferring incoming assets\\n    /// from an adapter to a VaultProxy at the end of an adapter action\\n    modifier postActionIncomingAssetsTransferHandler(\\n        address _vaultProxy,\\n        bytes memory _encodedAssetTransferArgs\\n    ) {\\n        _;\\n\\n        (, , , address[] memory incomingAssets) = __decodeEncodedAssetTransferArgs(\\n            _encodedAssetTransferArgs\\n        );\\n\\n        __transferFullAssetBalances(_vaultProxy, incomingAssets);\\n    }\\n\\n    /// @dev Provides a standard implementation for transferring unspent spend assets\\n    /// from an adapter to a VaultProxy at the end of an adapter action\\n    modifier postActionSpendAssetsTransferHandler(\\n        address _vaultProxy,\\n        bytes memory _encodedAssetTransferArgs\\n    ) {\\n        _;\\n\\n        (, address[] memory spendAssets, , ) = __decodeEncodedAssetTransferArgs(\\n            _encodedAssetTransferArgs\\n        );\\n\\n        __transferFullAssetBalances(_vaultProxy, spendAssets);\\n    }\\n\\n    constructor(address _integrationManager) public AdapterBase(_integrationManager) {}\\n\\n    /// @dev Helper to transfer full asset balances of current contract to the specified target\\n    function __transferFullAssetBalances(address _target, address[] memory _assets) internal {\\n        for (uint256 i = 0; i < _assets.length; i++) {\\n            uint256 balance = ERC20(_assets[i]).balanceOf(address(this));\\n            if (balance > 0) {\\n                ERC20(_assets[i]).safeTransfer(_target, balance);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa5594ed46431f4b58245fcf2a26ac25d87502d7529036906ec6bf07d444e7692\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/integration-manager/integrations/utils/IntegrationSelectors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IntegrationSelectors Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Selectors for integration actions\\n/// @dev Selectors are created from their signatures rather than hardcoded for easy verification\\nabstract contract IntegrationSelectors {\\n    // Tracked assets\\n    bytes4 public constant ADD_TRACKED_ASSETS_SELECTOR = bytes4(\\n        keccak256(\\\"addTrackedAssets(address,bytes,bytes)\\\")\\n    );\\n    bytes4 public constant REMOVE_TRACKED_ASSETS_SELECTOR = bytes4(\\n        keccak256(\\\"removeTrackedAssets(address,bytes,bytes)\\\")\\n    );\\n\\n    // Asset approval\\n    bytes4 public constant APPROVE_ASSETS_SELECTOR = bytes4(\\n        keccak256(\\\"approveAssets(address,bytes,bytes)\\\")\\n    );\\n\\n    // Trading\\n    bytes4 public constant TAKE_ORDER_SELECTOR = bytes4(\\n        keccak256(\\\"takeOrder(address,bytes,bytes)\\\")\\n    );\\n\\n    // Lending\\n    bytes4 public constant LEND_SELECTOR = bytes4(keccak256(\\\"lend(address,bytes,bytes)\\\"));\\n    bytes4 public constant REDEEM_SELECTOR = bytes4(keccak256(\\\"redeem(address,bytes,bytes)\\\"));\\n\\n    // Staking\\n    bytes4 public constant STAKE_SELECTOR = bytes4(keccak256(\\\"stake(address,bytes,bytes)\\\"));\\n    bytes4 public constant UNSTAKE_SELECTOR = bytes4(keccak256(\\\"unstake(address,bytes,bytes)\\\"));\\n\\n    // Rewards\\n    bytes4 public constant CLAIM_REWARDS_SELECTOR = bytes4(\\n        keccak256(\\\"claimRewards(address,bytes,bytes)\\\")\\n    );\\n\\n    // Combined\\n    bytes4 public constant CLAIM_REWARDS_AND_REINVEST_SELECTOR = bytes4(\\n        keccak256(\\\"claimRewardsAndReinvest(address,bytes,bytes)\\\")\\n    );\\n    bytes4 public constant CLAIM_REWARDS_AND_SWAP_SELECTOR = bytes4(\\n        keccak256(\\\"claimRewardsAndSwap(address,bytes,bytes)\\\")\\n    );\\n    bytes4 public constant LEND_AND_STAKE_SELECTOR = bytes4(\\n        keccak256(\\\"lendAndStake(address,bytes,bytes)\\\")\\n    );\\n    bytes4 public constant UNSTAKE_AND_REDEEM_SELECTOR = bytes4(\\n        keccak256(\\\"unstakeAndRedeem(address,bytes,bytes)\\\")\\n    );\\n}\\n\",\"keccak256\":\"0xc4642035f4c87808494beb8e852bae33fc950b17a7b44dadfadc033d87ed27fb\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/integration-manager/integrations/utils/actions/IdleV4ActionsMixin.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../../../../../interfaces/IIdleTokenV4.sol\\\";\\nimport \\\"../../../../../utils/AssetHelpers.sol\\\";\\n\\n/// @title IdleV4ActionsMixin Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Mixin contract for interacting with Idle tokens (V4)\\nabstract contract IdleV4ActionsMixin is AssetHelpers {\\n    address private constant IDLE_V4_REFERRAL_ACCOUNT = 0x1ad1fc9964c551f456238Dd88D6a38344B5319D7;\\n\\n    /// @dev Helper to claim gov token rewards for an IdleToken balance.\\n    /// Requires that the current contract has already been transferred the idleToken balance.\\n    function __idleV4ClaimRewards(address _idleToken) internal {\\n        IIdleTokenV4(_idleToken).redeemIdleToken(0);\\n    }\\n\\n    /// @dev Helper to get all rewards tokens for a specified idleToken\\n    function __idleV4GetRewardsTokens(address _idleToken)\\n        internal\\n        view\\n        returns (address[] memory rewardsTokens_)\\n    {\\n        IIdleTokenV4 idleTokenContract = IIdleTokenV4(_idleToken);\\n\\n        rewardsTokens_ = new address[](idleTokenContract.getGovTokensAmounts(address(0)).length);\\n        for (uint256 i; i < rewardsTokens_.length; i++) {\\n            rewardsTokens_[i] = IIdleTokenV4(idleTokenContract).govTokens(i);\\n        }\\n\\n        return rewardsTokens_;\\n    }\\n\\n    /// @dev Helper to lend underlying for IdleToken\\n    function __idleV4Lend(\\n        address _idleToken,\\n        address _underlying,\\n        uint256 _underlyingAmount\\n    ) internal {\\n        __approveAssetMaxAsNeeded(_underlying, _idleToken, _underlyingAmount);\\n        IIdleTokenV4(_idleToken).mintIdleToken(_underlyingAmount, true, IDLE_V4_REFERRAL_ACCOUNT);\\n    }\\n\\n    /// @dev Helper to redeem IdleToken for underlying\\n    function __idleV4Redeem(address _idleToken, uint256 _idleTokenAmount) internal {\\n        IIdleTokenV4(_idleToken).redeemIdleToken(_idleTokenAmount);\\n    }\\n}\\n\",\"keccak256\":\"0xe14415104949ac342909f7e8bf940fff6ed15405887cf911ef6627f8f3da876b\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/integration-manager/integrations/utils/actions/UniswapV2ActionsMixin.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../../../../../interfaces/IUniswapV2Router2.sol\\\";\\nimport \\\"../../../../../utils/AssetHelpers.sol\\\";\\n\\n/// @title UniswapV2ActionsMixin Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Mixin contract for interacting with Uniswap v2\\nabstract contract UniswapV2ActionsMixin is AssetHelpers {\\n    address private immutable UNISWAP_V2_ROUTER2;\\n\\n    constructor(address _router) public {\\n        UNISWAP_V2_ROUTER2 = _router;\\n    }\\n\\n    // EXTERNAL FUNCTIONS\\n\\n    /// @dev Helper to add liquidity\\n    function __uniswapV2Lend(\\n        address _recipient,\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _amountADesired,\\n        uint256 _amountBDesired,\\n        uint256 _amountAMin,\\n        uint256 _amountBMin\\n    ) internal {\\n        __approveAssetMaxAsNeeded(_tokenA, UNISWAP_V2_ROUTER2, _amountADesired);\\n        __approveAssetMaxAsNeeded(_tokenB, UNISWAP_V2_ROUTER2, _amountBDesired);\\n\\n        // Execute lend on Uniswap\\n        IUniswapV2Router2(UNISWAP_V2_ROUTER2).addLiquidity(\\n            _tokenA,\\n            _tokenB,\\n            _amountADesired,\\n            _amountBDesired,\\n            _amountAMin,\\n            _amountBMin,\\n            _recipient,\\n            __uniswapV2GetActionDeadline()\\n        );\\n    }\\n\\n    /// @dev Helper to remove liquidity\\n    function __uniswapV2Redeem(\\n        address _recipient,\\n        address _poolToken,\\n        uint256 _poolTokenAmount,\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 _amountAMin,\\n        uint256 _amountBMin\\n    ) internal {\\n        __approveAssetMaxAsNeeded(_poolToken, UNISWAP_V2_ROUTER2, _poolTokenAmount);\\n\\n        // Execute redeem on Uniswap\\n        IUniswapV2Router2(UNISWAP_V2_ROUTER2).removeLiquidity(\\n            _tokenA,\\n            _tokenB,\\n            _poolTokenAmount,\\n            _amountAMin,\\n            _amountBMin,\\n            _recipient,\\n            __uniswapV2GetActionDeadline()\\n        );\\n    }\\n\\n    /// @dev Helper to execute a swap\\n    function __uniswapV2Swap(\\n        address _recipient,\\n        uint256 _outgoingAssetAmount,\\n        uint256 _minIncomingAssetAmount,\\n        address[] memory _path\\n    ) internal {\\n        __approveAssetMaxAsNeeded(_path[0], UNISWAP_V2_ROUTER2, _outgoingAssetAmount);\\n\\n        // Execute fill\\n        IUniswapV2Router2(UNISWAP_V2_ROUTER2).swapExactTokensForTokens(\\n            _outgoingAssetAmount,\\n            _minIncomingAssetAmount,\\n            _path,\\n            _recipient,\\n            __uniswapV2GetActionDeadline()\\n        );\\n    }\\n\\n    /// @dev Helper to swap many assets to a single target asset.\\n    /// The intermediary asset will generally be WETH, and though we could make it\\n    // per-outgoing asset, seems like overkill until there is a need.\\n    function __uniswapV2SwapManyToOne(\\n        address _recipient,\\n        address[] memory _outgoingAssets,\\n        uint256[] memory _outgoingAssetAmounts,\\n        address _incomingAsset,\\n        address _intermediaryAsset\\n    ) internal {\\n        bool noIntermediary = _intermediaryAsset == address(0) ||\\n            _intermediaryAsset == _incomingAsset;\\n        for (uint256 i; i < _outgoingAssets.length; i++) {\\n            // Skip cases where outgoing and incoming assets are the same, or\\n            // there is no specified outgoing asset or amount\\n            if (\\n                _outgoingAssetAmounts[i] == 0 ||\\n                _outgoingAssets[i] == address(0) ||\\n                _outgoingAssets[i] == _incomingAsset\\n            ) {\\n                continue;\\n            }\\n\\n            address[] memory uniswapPath;\\n            if (noIntermediary || _outgoingAssets[i] == _intermediaryAsset) {\\n                uniswapPath = new address[](2);\\n                uniswapPath[0] = _outgoingAssets[i];\\n                uniswapPath[1] = _incomingAsset;\\n            } else {\\n                uniswapPath = new address[](3);\\n                uniswapPath[0] = _outgoingAssets[i];\\n                uniswapPath[1] = _intermediaryAsset;\\n                uniswapPath[2] = _incomingAsset;\\n            }\\n\\n            __uniswapV2Swap(_recipient, _outgoingAssetAmounts[i], 1, uniswapPath);\\n        }\\n    }\\n\\n    /// @dev Helper to get the deadline for a Uniswap V2 action in a standardized way\\n    function __uniswapV2GetActionDeadline() private view returns (uint256 deadline_) {\\n        return block.timestamp + 1;\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the `UNISWAP_V2_ROUTER2` variable\\n    /// @return router_ The `UNISWAP_V2_ROUTER2` variable value\\n    function getUniswapV2Router2() public view returns (address router_) {\\n        return UNISWAP_V2_ROUTER2;\\n    }\\n}\\n\",\"keccak256\":\"0x3af46e9c45d7ffa9d12ceb6651f1f1e73debf6d1697de11bfa0c7575cef2dcd0\",\"license\":\"GPL-3.0\"},\"contracts/release/extensions/utils/FundDeployerOwnerMixin.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../../core/fund-deployer/IFundDeployer.sol\\\";\\n\\n/// @title FundDeployerOwnerMixin Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A mixin contract that defers ownership to the owner of FundDeployer\\nabstract contract FundDeployerOwnerMixin {\\n    address internal immutable FUND_DEPLOYER;\\n\\n    modifier onlyFundDeployerOwner() {\\n        require(\\n            msg.sender == getOwner(),\\n            \\\"onlyFundDeployerOwner: Only the FundDeployer owner can call this function\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(address _fundDeployer) public {\\n        FUND_DEPLOYER = _fundDeployer;\\n    }\\n\\n    /// @notice Gets the owner of this contract\\n    /// @return owner_ The owner\\n    /// @dev Ownership is deferred to the owner of the FundDeployer contract\\n    function getOwner() public view returns (address owner_) {\\n        return IFundDeployer(FUND_DEPLOYER).getOwner();\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the `FUND_DEPLOYER` variable\\n    /// @return fundDeployer_ The `FUND_DEPLOYER` variable value\\n    function getFundDeployer() external view returns (address fundDeployer_) {\\n        return FUND_DEPLOYER;\\n    }\\n}\\n\",\"keccak256\":\"0xae16a22807bc31d46654889122b8db7ee55b731efc8d6feb4c978d13fee3336d\",\"license\":\"GPL-3.0\"},\"contracts/release/infrastructure/price-feeds/derivatives/IDerivativePriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title IDerivativePriceFeed Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Simple interface for derivative price source oracle implementations\\ninterface IDerivativePriceFeed {\\n    function calcUnderlyingValues(address, uint256)\\n        external\\n        returns (address[] memory, uint256[] memory);\\n\\n    function isSupportedAsset(address) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5abbc57ccbf28b2c27a0ee496f0a949a0039912975e8f9a65312d884edd05332\",\"license\":\"GPL-3.0\"},\"contracts/release/infrastructure/price-feeds/derivatives/feeds/IdlePriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"../../../../interfaces/IIdleTokenV4.sol\\\";\\nimport \\\"../IDerivativePriceFeed.sol\\\";\\nimport \\\"./utils/SingleUnderlyingDerivativeRegistryMixin.sol\\\";\\nimport \\\"./utils/DerivativePriceFeedBase.sol\\\";\\n\\n/// @title IdlePriceFeed Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Price source oracle for IdleTokens\\ncontract IdlePriceFeed is IDerivativePriceFeed, SingleUnderlyingDerivativeRegistryMixin, DerivativePriceFeedBase {\\n    using SafeMath for uint256;\\n\\n    uint256 private constant IDLE_TOKEN_UNIT = 10**18;\\n\\n    constructor(address _fundDeployer)\\n        public\\n        SingleUnderlyingDerivativeRegistryMixin(_fundDeployer)\\n    {}\\n\\n    /// @notice Converts a given amount of a derivative to its underlying asset values\\n    /// @param _derivative The derivative to convert\\n    /// @param _derivativeAmount The amount of the derivative to convert\\n    /// @return underlyings_ The underlying assets for the _derivative\\n    /// @return underlyingAmounts_ The amount of each underlying asset for the equivalent derivative amount\\n    function calcUnderlyingValues(address _derivative, uint256 _derivativeAmount)\\n        external\\n        override\\n        returns (address[] memory underlyings_, uint256[] memory underlyingAmounts_)\\n    {\\n        underlyings_ = new address[](1);\\n        underlyings_[0] = getUnderlyingForDerivative(_derivative);\\n        require(underlyings_[0] != address(0), \\\"calcUnderlyingValues: Unsupported derivative\\\");\\n\\n        underlyingAmounts_ = new uint256[](1);\\n        underlyingAmounts_[0] = _derivativeAmount.mul(IIdleTokenV4(_derivative).tokenPrice()).div(\\n            IDLE_TOKEN_UNIT\\n        );\\n    }\\n\\n    /// @notice Checks if an asset is supported by the price feed\\n    /// @param _asset The asset to check\\n    /// @return isSupported_ True if the asset is supported\\n    function isSupportedAsset(address _asset) external view override returns (bool isSupported_) {\\n        return getUnderlyingForDerivative(_asset) != address(0);\\n    }\\n\\n    /// @dev Helper to validate the derivative-underlying pair.\\n    /// Inherited from SingleUnderlyingDerivativeRegistryMixin.\\n    function __validateDerivative(address _derivative, address _underlying) internal override {\\n        require(\\n            IIdleTokenV4(_derivative).token() == _underlying,\\n            \\\"__validateDerivative: Invalid underlying for IdleToken\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xc7dd44750c6b771f7a0fbdf916e8e4b5024e001ebfbdcc9fd79068da118ffb4a\",\"license\":\"GPL-3.0\"},\"contracts/release/infrastructure/price-feeds/derivatives/feeds/utils/DerivativePriceFeedBase.sol\":{\"content\":\"pragma solidity 0.6.12;\\n\\nabstract contract DerivativePriceFeedBase {\\n    uint256 internal immutable DERIVATIVE_PRICE_FEED_DEPLOY_TIMESTAMP;\\n\\n    constructor() public {\\n        DERIVATIVE_PRICE_FEED_DEPLOY_TIMESTAMP = block.timestamp;\\n    }\\n\\n    function getDerivativePriceFeedDeployTimestamp() external view returns (uint256) {\\n        return DERIVATIVE_PRICE_FEED_DEPLOY_TIMESTAMP;\\n    }\\n}\",\"keccak256\":\"0x5ece6eae80f6a4fddc13b70fcc1913b35209e41ed931af30b6aadeff3fb10f88\"},\"contracts/release/infrastructure/price-feeds/derivatives/feeds/utils/SingleUnderlyingDerivativeRegistryMixin.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"../../../../../extensions/utils/FundDeployerOwnerMixin.sol\\\";\\n\\n/// @title SingleUnderlyingDerivativeRegistryMixin Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Mixin for derivative price feeds that handle multiple derivatives\\n/// that each have a single underlying asset\\nabstract contract SingleUnderlyingDerivativeRegistryMixin is FundDeployerOwnerMixin {\\n    event DerivativeAdded(address indexed derivative, address indexed underlying);\\n\\n    event DerivativeRemoved(address indexed derivative);\\n\\n    mapping(address => address) private derivativeToUnderlying;\\n\\n    constructor(address _fundDeployer) public FundDeployerOwnerMixin(_fundDeployer) {}\\n\\n    /// @notice Adds derivatives with corresponding underlyings to the price feed\\n    /// @param _derivatives The derivatives to add\\n    /// @param _underlyings The corresponding underlyings to add\\n    function addDerivatives(address[] memory _derivatives, address[] memory _underlyings)\\n        external\\n        virtual\\n        onlyFundDeployerOwner\\n    {\\n        require(_derivatives.length > 0, \\\"addDerivatives: Empty _derivatives\\\");\\n        require(_derivatives.length == _underlyings.length, \\\"addDerivatives: Unequal arrays\\\");\\n\\n        for (uint256 i; i < _derivatives.length; i++) {\\n            require(_derivatives[i] != address(0), \\\"addDerivatives: Empty derivative\\\");\\n            require(_underlyings[i] != address(0), \\\"addDerivatives: Empty underlying\\\");\\n            require(\\n                getUnderlyingForDerivative(_derivatives[i]) == address(0),\\n                \\\"addDerivatives: Value already set\\\"\\n            );\\n\\n            __validateDerivative(_derivatives[i], _underlyings[i]);\\n\\n            derivativeToUnderlying[_derivatives[i]] = _underlyings[i];\\n\\n            emit DerivativeAdded(_derivatives[i], _underlyings[i]);\\n        }\\n    }\\n\\n    /// @notice Removes derivatives from the price feed\\n    /// @param _derivatives The derivatives to remove\\n    function removeDerivatives(address[] memory _derivatives) external onlyFundDeployerOwner {\\n        require(_derivatives.length > 0, \\\"removeDerivatives: Empty _derivatives\\\");\\n\\n        for (uint256 i; i < _derivatives.length; i++) {\\n            require(\\n                getUnderlyingForDerivative(_derivatives[i]) != address(0),\\n                \\\"removeDerivatives: Value not set\\\"\\n            );\\n\\n            delete derivativeToUnderlying[_derivatives[i]];\\n\\n            emit DerivativeRemoved(_derivatives[i]);\\n        }\\n    }\\n\\n    /// @dev Optionally allow the inheriting price feed to validate the derivative-underlying pair\\n    function __validateDerivative(address, address) internal virtual {\\n        // UNIMPLEMENTED\\n    }\\n\\n    ///////////////////\\n    // STATE GETTERS //\\n    ///////////////////\\n\\n    /// @notice Gets the underlying asset for a given derivative\\n    /// @param _derivative The derivative for which to get the underlying asset\\n    /// @return underlying_ The underlying asset\\n    function getUnderlyingForDerivative(address _derivative)\\n        public\\n        view\\n        returns (address underlying_)\\n    {\\n        return derivativeToUnderlying[_derivative];\\n    }\\n}\\n\",\"keccak256\":\"0x5b3693663d18763a9e861681df7537708ae1fa526fb81a122137e3f70248a18d\",\"license\":\"GPL-3.0\"},\"contracts/release/interfaces/IIdleTokenV4.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title IIdleTokenV4 Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice Minimal interface for our interactions with IdleToken (V4) contracts\\ninterface IIdleTokenV4 {\\n    function getGovTokensAmounts(address) external view returns (uint256[] calldata);\\n\\n    function govTokens(uint256) external view returns (address);\\n\\n    function mintIdleToken(\\n        uint256,\\n        bool,\\n        address\\n    ) external returns (uint256);\\n\\n    function redeemIdleToken(uint256) external returns (uint256);\\n\\n    function token() external view returns (address);\\n\\n    function tokenPrice() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x37cffc1fb284b9709f7f49db482a648b5c52bf2b930aa8992727ba38bfaf31f8\",\"license\":\"GPL-3.0\"},\"contracts/release/interfaces/IUniswapV2Router2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title UniswapV2Router2 Interface\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @dev Minimal interface for our interactions with Uniswap V2's Router2\\ninterface IUniswapV2Router2 {\\n    function addLiquidity(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        address,\\n        uint256\\n    )\\n        external\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function removeLiquidity(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        uint256,\\n        address,\\n        uint256\\n    ) external returns (uint256, uint256);\\n\\n    function swapExactTokensForTokens(\\n        uint256,\\n        uint256,\\n        address[] calldata,\\n        address,\\n        uint256\\n    ) external returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0xe282398f74a9b87b266137d4be1a9ab8a2b2239a9912245515bfece8c5fbc209\",\"license\":\"GPL-3.0\"},\"contracts/release/utils/AddressArrayLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\n/// @title AddressArray Library\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A library to extend the address array data type\\nlibrary AddressArrayLib {\\n    /// @dev Helper to add an item to an array. Does not assert uniqueness of the new item.\\n    function addItem(address[] memory _self, address _itemToAdd)\\n        internal\\n        pure\\n        returns (address[] memory nextArray_)\\n    {\\n        nextArray_ = new address[](_self.length + 1);\\n        for (uint256 i; i < _self.length; i++) {\\n            nextArray_[i] = _self[i];\\n        }\\n        nextArray_[_self.length] = _itemToAdd;\\n\\n        return nextArray_;\\n    }\\n\\n    /// @dev Helper to add an item to an array, only if it is not already in the array.\\n    function addUniqueItem(address[] memory _self, address _itemToAdd)\\n        internal\\n        pure\\n        returns (address[] memory nextArray_)\\n    {\\n        if (contains(_self, _itemToAdd)) {\\n            return _self;\\n        }\\n\\n        return addItem(_self, _itemToAdd);\\n    }\\n\\n    /// @dev Helper to verify if an array contains a particular value\\n    function contains(address[] memory _self, address _target)\\n        internal\\n        pure\\n        returns (bool doesContain_)\\n    {\\n        for (uint256 i; i < _self.length; i++) {\\n            if (_target == _self[i]) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /// @dev Helper to reassign all items in an array with a specified value\\n    function fill(address[] memory _self, address _value)\\n        internal\\n        pure\\n        returns (address[] memory nextArray_)\\n    {\\n        nextArray_ = new address[](_self.length);\\n        for (uint256 i; i < nextArray_.length; i++) {\\n            nextArray_[i] = _value;\\n        }\\n\\n        return nextArray_;\\n    }\\n\\n    /// @dev Helper to verify if array is a set of unique values.\\n    /// Does not assert length > 0.\\n    function isUniqueSet(address[] memory _self) internal pure returns (bool isUnique_) {\\n        if (_self.length <= 1) {\\n            return true;\\n        }\\n\\n        uint256 arrayLength = _self.length;\\n        for (uint256 i; i < arrayLength; i++) {\\n            for (uint256 j = i + 1; j < arrayLength; j++) {\\n                if (_self[i] == _self[j]) {\\n                    return false;\\n                }\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /// @dev Helper to remove items from an array. Removes all matching occurrences of each item.\\n    /// Does not assert uniqueness of either array.\\n    function removeItems(address[] memory _self, address[] memory _itemsToRemove)\\n        internal\\n        pure\\n        returns (address[] memory nextArray_)\\n    {\\n        if (_itemsToRemove.length == 0) {\\n            return _self;\\n        }\\n\\n        bool[] memory indexesToRemove = new bool[](_self.length);\\n        uint256 remainingItemsCount = _self.length;\\n        for (uint256 i; i < _self.length; i++) {\\n            if (contains(_itemsToRemove, _self[i])) {\\n                indexesToRemove[i] = true;\\n                remainingItemsCount--;\\n            }\\n        }\\n\\n        if (remainingItemsCount == _self.length) {\\n            nextArray_ = _self;\\n        } else if (remainingItemsCount > 0) {\\n            nextArray_ = new address[](remainingItemsCount);\\n            uint256 nextArrayIndex;\\n            for (uint256 i; i < _self.length; i++) {\\n                if (!indexesToRemove[i]) {\\n                    nextArray_[nextArrayIndex] = _self[i];\\n                    nextArrayIndex++;\\n                }\\n            }\\n        }\\n\\n        return nextArray_;\\n    }\\n}\\n\",\"keccak256\":\"0x702bded074c5190e27ebe39ee77166593cc1296d4cb275c1a96914620ee55c83\",\"license\":\"GPL-3.0\"},\"contracts/release/utils/AssetHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/*\\n    This file is part of the Enzyme Protocol.\\n\\n    (c) Enzyme Council <council@enzyme.finance>\\n\\n    For the full license information, please view the LICENSE\\n    file that was distributed with this source code.\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\n/// @title AssetHelpers Contract\\n/// @author Enzyme Council <security@enzyme.finance>\\n/// @notice A util contract for common token actions\\nabstract contract AssetHelpers {\\n    using SafeERC20 for ERC20;\\n    using SafeMath for uint256;\\n\\n    /// @dev Helper to approve a target account with the max amount of an asset.\\n    /// This is helpful for fully trusted contracts, such as adapters that\\n    /// interact with external protocol like Uniswap, Compound, etc.\\n    function __approveAssetMaxAsNeeded(\\n        address _asset,\\n        address _target,\\n        uint256 _neededAmount\\n    ) internal {\\n        if (ERC20(_asset).allowance(address(this), _target) < _neededAmount) {\\n            ERC20(_asset).safeApprove(_target, type(uint256).max);\\n        }\\n    }\\n\\n    /// @dev Helper to get the balances of specified assets for a target\\n    function __getAssetBalances(address _target, address[] memory _assets)\\n        internal\\n        view\\n        returns (uint256[] memory balances_)\\n    {\\n        balances_ = new uint256[](_assets.length);\\n        for (uint256 i; i < _assets.length; i++) {\\n            balances_[i] = ERC20(_assets[i]).balanceOf(_target);\\n        }\\n\\n        return balances_;\\n    }\\n\\n    /// @dev Helper to transfer full asset balances from a target to the current contract.\\n    /// Requires an adequate allowance for each asset granted to the current contract for the target.\\n    function __pullFullAssetBalances(address _target, address[] memory _assets)\\n        internal\\n        returns (uint256[] memory amountsTransferred_)\\n    {\\n        amountsTransferred_ = new uint256[](_assets.length);\\n        for (uint256 i; i < _assets.length; i++) {\\n            ERC20 assetContract = ERC20(_assets[i]);\\n            amountsTransferred_[i] = assetContract.balanceOf(_target);\\n            if (amountsTransferred_[i] > 0) {\\n                assetContract.safeTransferFrom(_target, address(this), amountsTransferred_[i]);\\n            }\\n        }\\n\\n        return amountsTransferred_;\\n    }\\n\\n    /// @dev Helper to transfer partial asset balances from a target to the current contract.\\n    /// Requires an adequate allowance for each asset granted to the current contract for the target.\\n    function __pullPartialAssetBalances(\\n        address _target,\\n        address[] memory _assets,\\n        uint256[] memory _amountsToExclude\\n    ) internal returns (uint256[] memory amountsTransferred_) {\\n        amountsTransferred_ = new uint256[](_assets.length);\\n        for (uint256 i; i < _assets.length; i++) {\\n            ERC20 assetContract = ERC20(_assets[i]);\\n            amountsTransferred_[i] = assetContract.balanceOf(_target).sub(_amountsToExclude[i]);\\n            if (amountsTransferred_[i] > 0) {\\n                assetContract.safeTransferFrom(_target, address(this), amountsTransferred_[i]);\\n            }\\n        }\\n\\n        return amountsTransferred_;\\n    }\\n\\n    /// @dev Helper to transfer full asset balances from the current contract to a target\\n    function __pushFullAssetBalances(address _target, address[] memory _assets)\\n        internal\\n        returns (uint256[] memory amountsTransferred_)\\n    {\\n        amountsTransferred_ = new uint256[](_assets.length);\\n        for (uint256 i; i < _assets.length; i++) {\\n            ERC20 assetContract = ERC20(_assets[i]);\\n            amountsTransferred_[i] = assetContract.balanceOf(address(this));\\n            if (amountsTransferred_[i] > 0) {\\n                assetContract.safeTransfer(_target, amountsTransferred_[i]);\\n            }\\n        }\\n\\n        return amountsTransferred_;\\n    }\\n}\\n\",\"keccak256\":\"0x86cef70bb917da925fdf43f5a6d6e7f3c1f5d1aff505c4500c47304f26b8ec26\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061018e5760003560e01c8063863e5ad0116100de578063d1ded40811610097578063e4d9047811610071578063e4d9047814610955578063e7c456901461095d578063f075399414610965578063f7d882b51461096d5761018e565b8063d1ded40814610877578063dfd5ee0f1461087f578063e27a06b51461094d5761018e565b8063863e5ad0146106a9578063a21f9a2c146106b1578063a96de76b146106b9578063b23228cf146106d3578063b9dfbacc146106db578063c29fa9dd146107a95761018e565b80633ffc15911161014b5780634c252f91116101255780634c252f911461044c5780635ca62b3c1461047057806376cc7ac6146104785780637998a1c41461062c5761018e565b80633ffc15911461043457806340da225d1461043c57806340f8cfcf146104445761018e565b8063080456c114610193578063099f7515146101b8578063131461c0146102885780631d51f49b14610290578063257cb1a31461035e5780633377e18a14610366575b600080fd5b61019b610975565b604080516001600160e01b03199092168252519081900360200190f35b610286600480360360608110156101ce57600080fd5b6001600160a01b038235169190810190604081016020820135600160201b8111156101f857600080fd5b82018360208201111561020a57600080fd5b803590602001918460018302840111600160201b8311171561022b57600080fd5b919390929091602081019035600160201b81111561024857600080fd5b82018360208201111561025a57600080fd5b803590602001918460018302840111600160201b8311171561027b57600080fd5b509092509050610999565b005b61019b610af1565b610286600480360360608110156102a657600080fd5b6001600160a01b038235169190810190604081016020820135600160201b8111156102d057600080fd5b8201836020820111156102e257600080fd5b803590602001918460018302840111600160201b8311171561030357600080fd5b919390929091602081019035600160201b81111561032057600080fd5b82018360208201111561033257600080fd5b803590602001918460018302840111600160201b8311171561035357600080fd5b509092509050610b15565b61019b610c5c565b6102866004803603606081101561037c57600080fd5b6001600160a01b038235169190810190604081016020820135600160201b8111156103a657600080fd5b8201836020820111156103b857600080fd5b803590602001918460018302840111600160201b831117156103d957600080fd5b919390929091602081019035600160201b8111156103f657600080fd5b82018360208201111561040857600080fd5b803590602001918460018302840111600160201b8311171561042957600080fd5b509092509050610c80565b61019b610c87565b61019b610cab565b61019b610ccf565b610454610cf3565b604080516001600160a01b039092168252519081900360200190f35b61019b610d17565b6104f76004803603604081101561048e57600080fd5b6001600160e01b03198235169190810190604081016020820135600160201b8111156104b957600080fd5b8201836020820111156104cb57600080fd5b803590602001918460018302840111600160201b831117156104ec57600080fd5b509092509050610d3b565b6040518086600381111561050757fe5b815260200180602001806020018060200180602001858103855289818151815260200191508051906020019060200280838360005b8381101561055457818101518382015260200161053c565b50505050905001858103845288818151815260200191508051906020019060200280838360005b8381101561059357818101518382015260200161057b565b50505050905001858103835287818151815260200191508051906020019060200280838360005b838110156105d25781810151838201526020016105ba565b50505050905001858103825286818151815260200191508051906020019060200280838360005b838110156106115781810151838201526020016105f9565b50505050905001995050505050505050505060405180910390f35b610634610e65565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561066e578181015183820152602001610656565b50505050905090810190601f16801561069b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61019b610e83565b610454610ea7565b6106c1610ecb565b60408051918252519081900360200190f35b61019b610eef565b610286600480360360608110156106f157600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561071b57600080fd5b82018360208201111561072d57600080fd5b803590602001918460018302840111600160201b8311171561074e57600080fd5b919390929091602081019035600160201b81111561076b57600080fd5b82018360208201111561077d57600080fd5b803590602001918460018302840111600160201b8311171561079e57600080fd5b509092509050610f13565b610286600480360360608110156107bf57600080fd5b6001600160a01b038235169190810190604081016020820135600160201b8111156107e957600080fd5b8201836020820111156107fb57600080fd5b803590602001918460018302840111600160201b8311171561081c57600080fd5b919390929091602081019035600160201b81111561083957600080fd5b82018360208201111561084b57600080fd5b803590602001918460018302840111600160201b8311171561086c57600080fd5b50909250905061101c565b61045461119a565b6102866004803603606081101561089557600080fd5b6001600160a01b038235169190810190604081016020820135600160201b8111156108bf57600080fd5b8201836020820111156108d157600080fd5b803590602001918460018302840111600160201b831117156108f257600080fd5b919390929091602081019035600160201b81111561090f57600080fd5b82018360208201111561092157600080fd5b803590602001918460018302840111600160201b8311171561094257600080fd5b5090925090506111be565b61019b6113d2565b61019b6113f6565b61045461141a565b61019b61143e565b61019b611462565b7f8334eb99be0145865eba9889fca2ee920288090caefff4cc776038e20ad9259a81565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610a005760405162461bcd60e51b81526004018080602001828103825260328152602001806134d86032913960400191505060405180910390fd5b8482828080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8801819004810282018101909252868152606093508392508291610a7c9190899089908190840183828082843760009201919091525061148692505050565b93509350935050610aca81600081518110610a9357fe5b602002602001015184600081518110610aa857fe5b602002602001015184600081518110610abd57fe5b602002602001015161164e565b5050506060610ad882611486565b9350505050610ae783826116ed565b5050505050505050565b7f29fa046e79524c3c5ac4c01df692c35e217802b2b13b21121b76cf0ef02b138c81565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610b7c5760405162461bcd60e51b81526004018080602001828103825260328152602001806134d86032913960400191505060405180910390fd5b8482828080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250604080516020601f8c018190048102820181019092528a8152919450849350839250610bf691908b908b90819084018382808284376000920191909152506117ce92505050565b9450509350935050606080610c0c8c8685611814565b91509150610c3d8c8383877f0000000000000000000000000000000000000000000000000000000000000000611854565b50505050506060610c4d82611486565b5050915050610ae783826116ed565b7f099f75155f0e997bf83a7993a71d5e7e7540bd386fe1e84643a09ce6b412521981565b5050505050565b7ffa7dd04da627f433da73c4355ead9c75682a67a8fc84d3f6170ef0922f402d2481565b7fb9dfbaccbe5cd2a84fdcf1d15f23ef25d23086f5afbaa99516065ed4a5bbc7a381565b7ff658eb804cc1da8af5599b584aaf3d55407a3c721c42641a6a5270e963d782c381565b7f000000000000000000000000000000000000000000000000000000000000000090565b7fdfd5ee0f6067928bf85a7c4430811282840bc99332dda3dab462c02bf95b67cc81565b600060608080806001600160e01b031988166319bbf0c560e11b1415610d7457610d658787611ac8565b94509450945094509450610e5a565b6001600160e01b03198816632e77eeb360e21b1415610d9757610d658787611c9f565b6001600160e01b0319881663dfd5ee0f60e01b1415610dba57610d658787611d5a565b6001600160e01b03198816631d51f49b60e01b1415610ddd57610d658787611e4b565b6001600160e01b0319881663099f751560e01b1415610e0057610d658787611f9a565b6001600160e01b0319881663c29fa9dd60e01b1415610e2357610d65878761212f565b60405162461bcd60e51b815260040180806020018281038252602781526020018061348b6027913960400191505060405180910390fd5b939792965093509350565b60408051808201909152600481526349444c4560e01b602082015290565b7f03e38a2bd7063d45c897edeafc330e71657502dd86434d3c37a489caf116af6981565b7f000000000000000000000000000000000000000000000000000000000000000090565b7f000000000000000000000000000000000000000000000000000000000000000090565b7f68e30677f607df46e87da13e15b637784cfa62374b653f35ab43d10361a2f83081565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610f7a5760405162461bcd60e51b81526004018080602001828103825260328152602001806134d86032913960400191505060405180910390fd5b8482828080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250604080516020601f8c018190048102820181019092528a8152919450610ff19350909150899089908190840183828082843760009201919091525061228092505050565b915050610ffd816122ab565b61100f8861100a8361231c565b612524565b50506060610c4d82611486565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146110835760405162461bcd60e51b81526004018080602001828103825260328152602001806134d86032913960400191505060405180910390fd5b8482828080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250604080516020601f8c018190048102820181019092528a81529194506110fa9350909150899089908190840183828082843760009201919091525061268092505050565b5050905061118081826001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561114f57600080fd5b505afa158015611163573d6000803e3d6000fd5b505050506040513d602081101561117957600080fd5b50516126b4565b61118d8861100a8361231c565b50506060610ad882611486565b7f000000000000000000000000000000000000000000000000000000000000000090565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146112255760405162461bcd60e51b81526004018080602001828103825260328152602001806134d86032913960400191505060405180910390fd5b8482828080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250604080516020601f8c018190048102820181019092528a815291945084935061129c92508a908a908190840183828082843760009201919091525061272a92505050565b93505092505060006112ad83612767565b90506001600160a01b0381166112f45760405162461bcd60e51b815260040180806020018281038252602e81526020018061350a602e913960400191505060405180910390fd5b6060806113028c8686611814565b91509150611333308383867f0000000000000000000000000000000000000000000000000000000000000000611854565b6000836001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561138257600080fd5b505afa158015611396573d6000803e3d6000fd5b505050506040513d60208110156113ac57600080fd5b5051905080156113c1576113c186858361164e565b5050505050506060610c4d82611486565b7f848f3a590fb2f9795d1a275009c54c26c53833277c96b90e0ddd01753a1d590681565b7f3377e18acf9e83665eacd6af109261424fca32a298e2fc2e6095ba563fb8390e81565b7f000000000000000000000000000000000000000000000000000000000000000090565b7f1d51f49b5273d9ddbb643dc349fab8d36dbb470209c2ea71033bea49dd311c2781565b7fc29fa9dde84204c2908778afd0613d802d31cf046179b88f6d2b4a4e507ea2d581565b600060608060608480602001905160808110156114a257600080fd5b815160208301805160405192949293830192919084600160201b8211156114c857600080fd5b9083019060208201858111156114dd57600080fd5b82518660208202830111600160201b821117156114f957600080fd5b82525081516020918201928201910280838360005b8381101561152657818101518382015260200161150e565b5050505090500160405260200180516040519392919084600160201b82111561154e57600080fd5b90830190602082018581111561156357600080fd5b82518660208202830111600160201b8211171561157f57600080fd5b82525081516020918201928201910280838360005b838110156115ac578181015183820152602001611594565b5050505090500160405260200180516040519392919084600160201b8211156115d457600080fd5b9083019060208201858111156115e957600080fd5b82518660208202830111600160201b8211171561160557600080fd5b82525081516020918201928201910280838360005b8381101561163257818101518382015260200161161a565b5050505090500160405250505093509350935093509193509193565b611659828483612808565b60408051632befabbf60e01b81526004810183905260016024820152731ad1fc9964c551f456238dd88d6a38344b5319d7604482015290516001600160a01b03851691632befabbf9160648083019260209291908290030181600087803b1580156116c357600080fd5b505af11580156116d7573d6000803e3d6000fd5b505050506040513d6020811015610c8057600080fd5b60005b81518110156117c957600082828151811061170757fe5b60200260200101516001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561175b57600080fd5b505afa15801561176f573d6000803e3d6000fd5b505050506040513d602081101561178557600080fd5b5051905080156117c0576117c084828585815181106117a057fe5b60200260200101516001600160a01b03166128a09092919063ffffffff16565b506001016116f0565b505050565b60008060008060008580602001905160a08110156117eb57600080fd5b508051602082015160408301516060840151608090940151929a91995097509195509350915050565b606080611820846122ab565b6118298461231c565b9150821561183d5761183b85836128f2565b505b816118483084612a48565b91509150935093915050565b60006001600160a01b038216158061187d5750826001600160a01b0316826001600160a01b0316145b905060005b8551811015611abf5784818151811061189757fe5b6020026020010151600014806118d2575060006001600160a01b03168682815181106118bf57fe5b60200260200101516001600160a01b0316145b806119015750836001600160a01b03168682815181106118ee57fe5b60200260200101516001600160a01b0316145b1561190b57611ab7565b6060828061193d5750836001600160a01b031687838151811061192a57fe5b60200260200101516001600160a01b0316145b156119d657604080516002808252606082018352909160208301908036833701905050905086828151811061196e57fe5b60200260200101518160008151811061198357fe5b60200260200101906001600160a01b031690816001600160a01b03168152505084816001815181106119b157fe5b60200260200101906001600160a01b031690816001600160a01b031681525050611a95565b604080516003808252608082019092529060208201606080368337019050509050868281518110611a0357fe5b602002602001015181600081518110611a1857fe5b60200260200101906001600160a01b031690816001600160a01b0316815250508381600181518110611a4657fe5b60200260200101906001600160a01b031690816001600160a01b0316815250508481600281518110611a7457fe5b60200260200101906001600160a01b031690816001600160a01b0316815250505b611ab588878481518110611aa557fe5b6020026020010151600184612b48565b505b600101611882565b50505050505050565b60006060806060806000611b1188888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612d2992505050565b909650945090506000611b2382612767565b6001600160a01b03161415611b695760405162461bcd60e51b81526004018080602001828103825260348152602001806135d26034913960400191505060405180910390fd5b8351855114611ba95760405162461bcd60e51b815260040180806020018281038252602d815260200180613400602d913960400191505060405180910390fd5b6060611bb48261231c565b905060005b8651811015611c47576000868281518110611bd057fe5b60200260200101511115611c3f57611c04878281518110611bed57fe5b602002602001015183612e6790919063ffffffff16565b611c3f5760405162461bcd60e51b81526004018080602001828103825260338152602001806134586033913960400191505060405180910390fd5b600101611bb9565b50600186866000805b50604051908082528060200260200182016040528015611c7a578160200160208202803683370190505b50604080516000815260208101909152939d929c50909a509850909650945050505050565b6000606080606080600080611ce989898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061228092505050565b90925090506000611cf982612767565b6001600160a01b03161415611d3f5760405162461bcd60e51b81526004018080602001828103825260338152602001806135386033913960400191505060405180910390fd5b611d498282612ebd565b909650945060028686600080611c50565b60006060806060806000806000611da68a8a8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061272a92505050565b50925092509250611db78383612ebd565b604080516001808252818301909252929950909750602080830190803683370190505094508185600081518110611dea57fe5b6001600160a01b03929092166020928302919091018201526040805160018082528183019092529182810190803683370190505093508084600081518110611e2e57fe5b602002602001018181525050600297505050509295509295909350565b6000606080606080600080600080611e988b8b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506117ce92505050565b50935093509350935060006001600160a01b0316611eb584612767565b6001600160a01b03161415611efb5760405162461bcd60e51b815260040180806020018281038252603a815260200180613598603a913960400191505060405180910390fd5b611f058484612ebd565b604080516001808252818301909252929a50909850602080830190803683370190505095508186600081518110611f3857fe5b6001600160a01b03929092166020928302919091018201526040805160018082528183019092529182810190803683370190505094508085600081518110611f7c57fe5b60200260200101818152505060029850505050509295509295909350565b60006060806060806000806000611fe68a8a8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061268092505050565b9250925092506000611ff784612767565b90506001600160a01b03811661203e5760405162461bcd60e51b815260040180806020018281038252602b81526020018061342d602b913960400191505060405180910390fd5b6040805160018082528183019092529060208083019080368337019050509750808860008151811061206c57fe5b6001600160a01b039290921660209283029190910182015260408051600180825281830190925291828101908036833701905050965082876000815181106120b057fe5b60209081029190910101526040805160018082528183019092529081602001602082028036833701905050955083866000815181106120eb57fe5b6001600160a01b03929092166020928302919091018201526040805160018082528183019092529182810190803683370190505094508185600081518110611f7c57fe5b6000606080606080600080600061217b8a8a8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061268092505050565b925092509250600061218c84612767565b90506001600160a01b0381166121d35760405162461bcd60e51b815260040180806020018281038252602d81526020018061356b602d913960400191505060405180910390fd5b6040805160018082528183019092529060208083019080368337019050509750838860008151811061220157fe5b6001600160a01b0392909216602092830291909101820152604080516001808252818301909252918281019080368337019050509650828760008151811061224557fe5b60209081029190910101526040805160018082528183019092529081602001602082028036833701905050955080866000815181106120eb57fe5b60008082806020019051604081101561229857600080fd5b5080516020909101519092509050915091565b806001600160a01b0316638b30b51660006040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b1580156122f257600080fd5b505af1158015612306573d6000803e3d6000fd5b505050506040513d60208110156117c957600080fd5b604080516350b28af760e01b8152600060048201819052915160609284926001600160a01b038416926350b28af792602480840193919291829003018186803b15801561236857600080fd5b505afa15801561237c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156123a557600080fd5b8101908080516040519392919084600160201b8211156123c457600080fd5b9083019060208201858111156123d957600080fd5b82518660208202830111600160201b821117156123f557600080fd5b82525081516020918201928201910280838360005b8381101561242257818101518382015260200161240a565b505050509050016040525050505167ffffffffffffffff8111801561244657600080fd5b50604051908082528060200260200182016040528015612470578160200160208202803683370190505b50915060005b825181101561251d57816001600160a01b031663746daa4e826040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156124c357600080fd5b505afa1580156124d7573d6000803e3d6000fd5b505050506040513d60208110156124ed57600080fd5b505183518490839081106124fd57fe5b6001600160a01b0390921660209283029190910190910152600101612476565b5050919050565b6060815167ffffffffffffffff8111801561253e57600080fd5b50604051908082528060200260200182016040528015612568578160200160208202803683370190505b50905060005b825181101561267857600083828151811061258557fe5b60200260200101519050806001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156125dc57600080fd5b505afa1580156125f0573d6000803e3d6000fd5b505050506040513d602081101561260657600080fd5b5051835184908490811061261657fe5b602002602001018181525050600083838151811061263057fe5b6020026020010151111561266f5761266f8584848151811061264e57fe5b6020026020010151836001600160a01b03166128a09092919063ffffffff16565b5060010161256e565b505b92915050565b600080600083806020019051606081101561269a57600080fd5b508051602082015160409092015190969195509350915050565b816001600160a01b0316638b30b516826040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b1580156126fa57600080fd5b505af115801561270e573d6000803e3d6000fd5b505050506040513d602081101561272457600080fd5b50505050565b60008060008084806020019051608081101561274557600080fd5b5080516020820151604083015160609093015191989097509195509350915050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166366adb867836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156127d657600080fd5b505afa1580156127ea573d6000803e3d6000fd5b505050506040513d602081101561280057600080fd5b505192915050565b60408051636eb1769f60e11b81523060048201526001600160a01b0384811660248301529151839286169163dd62ed3e916044808301926020929190829003018186803b15801561285857600080fd5b505afa15801561286c573d6000803e3d6000fd5b505050506040513d602081101561288257600080fd5b505110156117c9576117c96001600160a01b03841683600019612fbf565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526117c99084906130ce565b6060815167ffffffffffffffff8111801561290c57600080fd5b50604051908082528060200260200182016040528015612936578160200160208202803683370190505b50905060005b825181101561267857600083828151811061295357fe5b60200260200101519050806001600160a01b03166370a08231866040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156129aa57600080fd5b505afa1580156129be573d6000803e3d6000fd5b505050506040513d60208110156129d457600080fd5b505183518490849081106129e457fe5b60200260200101818152505060008383815181106129fe57fe5b60200260200101511115612a3f57612a3f8530858581518110612a1d57fe5b6020026020010151846001600160a01b031661317f909392919063ffffffff16565b5060010161293c565b6060815167ffffffffffffffff81118015612a6257600080fd5b50604051908082528060200260200182016040528015612a8c578160200160208202803683370190505b50905060005b825181101561267857828181518110612aa757fe5b60200260200101516001600160a01b03166370a08231856040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612afb57600080fd5b505afa158015612b0f573d6000803e3d6000fd5b505050506040513d6020811015612b2557600080fd5b50518251839083908110612b3557fe5b6020908102919091010152600101612a92565b612b8781600081518110612b5857fe5b60200260200101517f000000000000000000000000000000000000000000000000000000000000000085612808565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166338ed173984848488612bc26131d9565b6040518663ffffffff1660e01b81526004018086815260200185815260200180602001846001600160a01b03168152602001838152602001828103825285818151815260200191508051906020019060200280838360005b83811015612c32578181015183820152602001612c1a565b505050509050019650505050505050600060405180830381600087803b158015612c5b57600080fd5b505af1158015612c6f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015612c9857600080fd5b8101908080516040519392919084600160201b821115612cb757600080fd5b908301906020820185811115612ccc57600080fd5b82518660208202830111600160201b82111715612ce857600080fd5b82525081516020918201928201910280838360005b83811015612d15578181015183820152602001612cfd565b505050509050016040525050505050505050565b6000606080838060200190516060811015612d4357600080fd5b815160208301805160405192949293830192919084600160201b821115612d6957600080fd5b908301906020820185811115612d7e57600080fd5b82518660208202830111600160201b82111715612d9a57600080fd5b82525081516020918201928201910280838360005b83811015612dc7578181015183820152602001612daf565b5050505090500160405260200180516040519392919084600160201b821115612def57600080fd5b908301906020820185811115612e0457600080fd5b82518660208202830111600160201b82111715612e2057600080fd5b82525081516020918201928201910280838360005b83811015612e4d578181015183820152602001612e35565b505050509050016040525050509250925092509193909250565b6000805b8351811015612eb357838181518110612e8057fe5b60200260200101516001600160a01b0316836001600160a01b03161415612eab57600191505061267a565b600101612e6b565b5060009392505050565b604080516001808252818301909252606091829190602080830190803683370190505091508282600081518110612ef057fe5b6001600160a01b0392909216602092830291909101820152604080516001808252818301909252918281019080368337019050509050826001600160a01b03166370a08231856040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612f7357600080fd5b505afa158015612f87573d6000803e3d6000fd5b505050506040513d6020811015612f9d57600080fd5b505181518290600090612fac57fe5b6020026020010181815250509250929050565b801580613045575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b15801561301757600080fd5b505afa15801561302b573d6000803e3d6000fd5b505050506040513d602081101561304157600080fd5b5051155b6130805760405162461bcd60e51b81526004018080602001828103825260368152602001806136306036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b1790526117c99084905b6060613123826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166131e09092919063ffffffff16565b8051909150156117c95780806020019051602081101561314257600080fd5b50516117c95760405162461bcd60e51b815260040180806020018281038252602a815260200180613606602a913960400191505060405180910390fd5b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b1790526127249085906130ce565b6001420190565b60606131ef84846000856131f9565b90505b9392505050565b60608247101561323a5760405162461bcd60e51b81526004018080602001828103825260268152602001806134b26026913960400191505060405180910390fd5b61324385613355565b613294576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106132d35780518252601f1990920191602091820191016132b4565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114613335576040519150601f19603f3d011682016040523d82523d6000602084013e61333a565b606091505b509150915061334a82828661335b565b979650505050505050565b3b151590565b6060831561336a5750816131f2565b82511561337a5782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156133c45781810151838201526020016133ac565b50505050905090810190601f1680156133f15780820380516001836020036101000a031916815260200191505b509250505060405180910390fdfe5f5f7061727365417373657473466f72417070726f76654173736574733a20556e657175616c206172726179735f5f7061727365417373657473466f724c656e643a20556e737570706f727465642069646c65546f6b656e5f5f7061727365417373657473466f72417070726f76654173736574733a20496e76616c69642072657761726420746f6b656e7061727365417373657473466f724d6574686f643a205f73656c6563746f7220696e76616c6964416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c4f6e6c792074686520496e746567726174696f6e4d616e616765722063616e2063616c6c20746869732066756e6374696f6e636c61696d52657761726473416e645265696e766573743a20556e737570706f727465642069646c65546f6b656e5f5f7061727365417373657473466f72436c61696d526577617264733a20556e737570706f727465642069646c65546f6b656e5f5f7061727365417373657473466f7252656465656d3a20556e737570706f727465642069646c65546f6b656e5f5f7061727365417373657473466f72436c61696d52657761726473416e64537761703a20556e737570706f727465642069646c65546f6b656e5f5f7061727365417373657473466f72417070726f76654173736574733a20556e737570706f727465642069646c65546f6b656e5361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a26469706673582212205103a413ecfe7577670ca48d9347827b0b661924fa99f2b5ef5de5dc4005c22f64736f6c634300060c0033",
  "devdoc": {
    "author": "Enzyme Council <security@enzyme.finance>",
    "details": "There are some idiosyncrasies of reward accrual and claiming in IdleTokens that are handled by this adapter: - Rewards accrue to the IdleToken holder, but the accrued amount is passed to the recipient of a transfer. - Claiming rewards cannot be done on behalf of a holder, but must be done directly. - Claiming rewards occurs automatically upon redeeming, but there are situations when it is difficult to know whether to expect incoming rewards (e.g., after a user mints idleTokens and then redeems before any other user has interacted with the protocol, then getGovTokensAmounts() will return 0 balances). Because of this difficulty - and in keeping with how other adapters treat claimed rewards - this adapter does not report claimed rewards as incomingAssets.",
    "kind": "dev",
    "methods": {
      "approveAssets(address,bytes,bytes)": {
        "details": "No logic necessary. Exists only to grant adapter with necessary approvals from the vault, which takes place in the IntegrationManager."
      },
      "claimRewards(address,bytes,bytes)": {
        "params": {
          "_encodedAssetTransferArgs": "Encoded args for expected assets to spend and receive",
          "_encodedCallArgs": "The encoded parameters for the callOnIntegration",
          "_vaultProxy": "The VaultProxy of the calling fund"
        }
      },
      "claimRewardsAndReinvest(address,bytes,bytes)": {
        "details": "The `useFullBalances` option indicates whether to use only the newly claimed balances of rewards tokens, or whether to use the full balances of these assets in the vault. If full asset balances are to be used, then this requires the adapter to be granted an allowance of each reward token by the vault. For supported assets (e.g., COMP), this must be done via the `approveAssets()` function in this adapter. For unsupported assets (e.g., IDLE), this must be done via `ComptrollerProxy.vaultCallOnContract()`, if allowed.",
        "params": {
          "_encodedAssetTransferArgs": "Encoded args for expected assets to spend and receive",
          "_encodedCallArgs": "Encoded order parameters",
          "_vaultProxy": "The VaultProxy of the calling fund"
        }
      },
      "claimRewardsAndSwap(address,bytes,bytes)": {
        "details": "The `useFullBalances` option indicates whether to use only the newly claimed balances of rewards tokens, or whether to use the full balances of these assets in the vault. If full asset balances are to be used, then this requires the adapter to be granted an allowance of each reward token by the vault. For supported assets (e.g., COMP), this must be done via the `approveAssets()` function in this adapter. For unsupported assets (e.g., IDLE), this must be done via `ComptrollerProxy.vaultCallOnContract()`, if allowed.",
        "params": {
          "_encodedAssetTransferArgs": "Encoded args for expected assets to spend and receive",
          "_encodedCallArgs": "Encoded order parameters",
          "_vaultProxy": "The VaultProxy of the calling fund"
        }
      },
      "getIdlePriceFeed()": {
        "returns": {
          "idlePriceFeed_": "The `IDLE_PRICE_FEED` variable value"
        }
      },
      "getIntegrationManager()": {
        "returns": {
          "integrationManager_": "The `INTEGRATION_MANAGER` variable value"
        }
      },
      "getUniswapV2Router2()": {
        "returns": {
          "router_": "The `UNISWAP_V2_ROUTER2` variable value"
        }
      },
      "getWethToken()": {
        "returns": {
          "wethToken_": "The `WETH_TOKEN` variable value"
        }
      },
      "identifier()": {
        "returns": {
          "identifier_": "An identifier string"
        }
      },
      "lend(address,bytes,bytes)": {
        "params": {
          "_encodedAssetTransferArgs": "Encoded args for expected assets to spend and receive",
          "_vaultProxy": "The VaultProxy of the calling fund"
        }
      },
      "parseAssetsForMethod(bytes4,bytes)": {
        "params": {
          "_encodedCallArgs": "The encoded parameters for the callOnIntegration",
          "_selector": "The function selector for the callOnIntegration"
        },
        "returns": {
          "incomingAssets_": "The assets to receive in the call",
          "minIncomingAssetAmounts_": "The min asset amounts to receive in the call",
          "spendAssetAmounts_": "The max asset amounts to spend in the call",
          "spendAssetsHandleType_": "A type that dictates how to handle granting the adapter access to spend assets (`None` by default)",
          "spendAssets_": "The assets to spend in the call"
        }
      },
      "redeem(address,bytes,bytes)": {
        "details": "This will also pay out any due gov token rewards. We use the full IdleToken balance of the current contract rather than the user input for the corner case of a prior balance existing in the current contract, which would throw off the per-user avg price of the IdleToken used by Idle, and would leave the initial token balance in the current contract post-tx.",
        "params": {
          "_encodedAssetTransferArgs": "Encoded args for expected assets to spend and receive",
          "_encodedCallArgs": "The encoded parameters for the callOnIntegration",
          "_vaultProxy": "The VaultProxy of the calling fund"
        }
      }
    },
    "title": "IdleAdapter Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approveAssets(address,bytes,bytes)": {
        "notice": "Approves assets from the vault to be used by this contract."
      },
      "claimRewards(address,bytes,bytes)": {
        "notice": "Claims rewards for a givenIdleToken"
      },
      "claimRewardsAndReinvest(address,bytes,bytes)": {
        "notice": "Claims rewards and then compounds the rewards tokens back into the idleToken"
      },
      "claimRewardsAndSwap(address,bytes,bytes)": {
        "notice": "Claims rewards and then swaps the rewards tokens to the specified asset via UniswapV2"
      },
      "getIdlePriceFeed()": {
        "notice": "Gets the `IDLE_PRICE_FEED` variable"
      },
      "getIntegrationManager()": {
        "notice": "Gets the `INTEGRATION_MANAGER` variable"
      },
      "getUniswapV2Router2()": {
        "notice": "Gets the `UNISWAP_V2_ROUTER2` variable"
      },
      "getWethToken()": {
        "notice": "Gets the `WETH_TOKEN` variable"
      },
      "identifier()": {
        "notice": "Provides a constant string identifier for an adapter"
      },
      "lend(address,bytes,bytes)": {
        "notice": "Lends an amount of a token for idleToken"
      },
      "parseAssetsForMethod(bytes4,bytes)": {
        "notice": "Parses the expected assets to receive from a call on integration"
      },
      "redeem(address,bytes,bytes)": {
        "notice": "Redeems an amount of idleToken for its underlying asset"
      }
    },
    "notice": "Adapter for Idle Lending <https://idle.finance/>",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}